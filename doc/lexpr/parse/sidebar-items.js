initSidebarItems({"enum":[["Brackets","Defines the treatment of brackets."],["CharSyntax","Indicates the syntax for characters."],["KeywordSyntax","Indicates a syntax of keywords."],["NilSymbol","Defines the treatment of the symbol `nil`."],["StringSyntax","Indicates the syntax for strings."],["TSymbol","Defines the treatment of the symbol `t`."]],"fn":[["from_reader","Parse a value from an IO stream of S-expressions, using the default parser options."],["from_reader_custom","Parse a value from an IO stream containing a single S-expression."],["from_reader_elisp","Parse a value from an IO stream of S-expressions, using the parser options suitable for parsing Emacs Lisp."],["from_slice","Parse a value from bytes representing a single S-expressions, using the default parser options."],["from_slice_custom","Parse a value from bytes representing a single S-expression."],["from_slice_elisp","Parse a value from bytes representing a single S-expressions, using parser options suitable for Emacs Lisp."],["from_str","Parse a value from a string slice representing a single S-expressions, using the default parser options."],["from_str_custom","Parse a value from a string slice representing a single S-expression."],["from_str_elisp","Parse a value from a string slice representing a single S-expression, using parser options suitable for Emacs Lisp."]],"mod":[["error","When parsing S-expressions goes wrong."]],"struct":[["DatumIter","Iterator over the datums producedd by a parser."],["Error","This type represents the possible errors when parsing S-expression data."],["IoRead","S-expression input source that reads from a std::io input stream."],["Options","Various options to influence parser behavior."],["Parser","Parser for the S-expression text representation."],["Position","A location in the parsed text."],["SliceRead","S-expression input source that reads from a slice of bytes."],["StrRead","S-expression input source that reads from a UTF-8 string."],["ValueIter","Iterator over the values producedd by a parser."]],"trait":[["Read","Trait used by the parser for iterating over input."]],"type":[["Result","Alias for a `Result` with the error type `lexpr::Error`."]]});