initSidebarItems({"enum":[["Value","Represents an S-expression value."]],"fn":[["from_reader","Parse a value from an IO stream of S-expressions, using the default parser options."],["from_reader_custom","Parse a value from an IO stream containing a single S-expression."],["from_slice","Parse a value from bytes representing a single S-expressions, using the default parser options."],["from_slice_custom","Parse a value from bytes representing a single S-expression."],["from_str","Parse a value from a string slice representing a single S-expressions, using the default parser options."],["from_str_custom","Parse a value from a string slice representing a single S-expression."],["to_string","Serialize the given value an S-expression string, using the default printer options."],["to_string_custom","Serialize the given value an S-expression string."],["to_vec","Serialize the given value as byte vector containing S-expression text, using the default printer options."],["to_vec_custom","Serialize the given value as byte vector containing S-expression text."],["to_writer","Serialize the given value value as S-expression text into the IO stream, using the default printer options."],["to_writer_custom","Serialize the given value value as S-expression text into the IO stream."]],"macro":[["sexp","Construct a `Value` using syntax similar to regular S-expressions."]],"mod":[["cons","List \"cons cell\" data type and accompanying iterator types."],["datum","S-expression values including source location."],["number","Dynamically typed number type."],["parse","S-expression parser and options."],["print","Converting S-expression values into text."],["value","The Value enum, a dynamically typed way of representing any valid S-expression value."]],"struct":[["Cons","A Lisp \"cons cell\"."],["Datum","Combines an S-expression value with location information."],["Number","Represents an S-expression number, whether integer or floating point."],["Parser","Parser for the S-expression text representation."],["Printer","A printer for S-expression values."]],"trait":[["Index","A type that can be used to index into a `lexpr::Value`."]]});