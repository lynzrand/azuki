var searchIndex = JSON.parse('{\
"ansi_term":{"doc":"This is a library for controlling colours and formatting, …","i":[[3,"Prefix","ansi_term","Like <code>ANSIString</code>, but only displays the style prefix.",null,null],[3,"Infix","","Like <code>ANSIString</code>, but only displays the difference between …",null,null],[3,"Suffix","","Like <code>ANSIString</code>, but only displays the style suffix.",null,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and …",null,null],[13,"Black","","Colour #0 (foreground code <code>30</code>, background code <code>40</code>).",0,null],[13,"Red","","Colour #1 (foreground code <code>31</code>, background code <code>41</code>).",0,null],[13,"Green","","Colour #2 (foreground code <code>32</code>, background code <code>42</code>).",0,null],[13,"Yellow","","Colour #3 (foreground code <code>33</code>, background code <code>43</code>).",0,null],[13,"Blue","","Colour #4 (foreground code <code>34</code>, background code <code>44</code>).",0,null],[13,"Purple","","Colour #5 (foreground code <code>35</code>, background code <code>45</code>).",0,null],[13,"Cyan","","Colour #6 (foreground code <code>36</code>, background code <code>46</code>).",0,null],[13,"White","","Colour #7 (foreground code <code>37</code>, background code <code>47</code>).",0,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour …",0,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",0,null],[3,"Style","","A style is a collection of properties that can format a …",null,null],[12,"foreground","","The style\'s foreground colour, if it has one.",1,null],[12,"background","","The style\'s background colour, if it has one.",1,null],[12,"is_bold","","Whether this style is bold.",1,null],[12,"is_dimmed","","Whether this style is dimmed.",1,null],[12,"is_italic","","Whether this style is italic.",1,null],[12,"is_underline","","Whether this style is underlined.",1,null],[12,"is_blink","","Whether this style is blinking.",1,null],[12,"is_reverse","","Whether this style has reverse colours.",1,null],[12,"is_hidden","","Whether this style is hidden.",1,null],[12,"is_strikethrough","","Whether this style is struckthrough.",1,null],[4,"Color","","A colour is one specific type of ANSI escape code, and …",null,null],[13,"Black","","Colour #0 (foreground code <code>30</code>, background code <code>40</code>).",0,null],[13,"Red","","Colour #1 (foreground code <code>31</code>, background code <code>41</code>).",0,null],[13,"Green","","Colour #2 (foreground code <code>32</code>, background code <code>42</code>).",0,null],[13,"Yellow","","Colour #3 (foreground code <code>33</code>, background code <code>43</code>).",0,null],[13,"Blue","","Colour #4 (foreground code <code>34</code>, background code <code>44</code>).",0,null],[13,"Purple","","Colour #5 (foreground code <code>35</code>, background code <code>45</code>).",0,null],[13,"Cyan","","Colour #6 (foreground code <code>36</code>, background code <code>46</code>).",0,null],[13,"White","","Colour #7 (foreground code <code>37</code>, background code <code>47</code>).",0,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour …",0,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",0,null],[3,"ANSIGenericString","","An <code>ANSIGenericString</code> includes a generic string type and a …",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the <code>Style</code> to …",null,null],[6,"ANSIByteString","","An <code>ANSIByteString</code> represents a formatted series of bytes. …",null,null],[3,"ANSIGenericStrings","","A set of <code>ANSIGenericString</code>s collected together, in order …",null,null],[12,"0","","",2,null],[6,"ANSIStrings","","A set of <code>ANSIString</code>s collected together, in order to be …",null,null],[5,"ANSIStrings","","A function to construct an <code>ANSIStrings</code> instance.",null,[[],["ansistrings",6]]],[6,"ANSIByteStrings","","A set of <code>ANSIByteString</code>s collected together, in order to …",null,null],[5,"ANSIByteStrings","","A function to construct an <code>ANSIByteStrings</code> instance.",null,[[],["ansibytestrings",6]]],[5,"sub_string","","Return a substring of the given ANSIStrings sequence, …",null,[[["ansistrings",6]],[["vec",3],["ansistring",6]]]],[5,"unstyle","","Return a concatenated copy of <code>strs</code> without the …",null,[[["ansistrings",6]],["string",3]]],[5,"unstyled_len","","Return the unstyled length of ANSIStrings. This is …",null,[[["ansistrings",6]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","You can turn a <code>Colour</code> into a <code>Style</code> with the foreground …",1,[[["colour",4]],["style",3]]],[11,"from","","",6,[[],["ansigenericstring",3]]],[11,"clone","","",3,[[],["prefix",3]]],[11,"clone","","",4,[[],["infix",3]]],[11,"clone","","",5,[[],["suffix",3]]],[11,"clone","","",1,[[],["style",3]]],[11,"clone","","",0,[[],["colour",4]]],[11,"clone","","",6,[[],["ansigenericstring",3]]],[11,"default","","Returns a style with <em>no</em> properties set. Formatting text …",1,[[],["style",3]]],[11,"eq","","",1,[[["style",3]]]],[11,"ne","","",1,[[["style",3]]]],[11,"eq","","",0,[[["colour",4]]]],[11,"ne","","",0,[[["colour",4]]]],[11,"eq","","",6,[[["ansigenericstring",3]]]],[11,"ne","","",6,[[["ansigenericstring",3]]]],[11,"eq","","",2,[[["ansigenericstrings",3]]]],[11,"ne","","",2,[[["ansigenericstrings",3]]]],[11,"deref","","",6,[[]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"prefix","","The prefix bytes for this style. These are the bytes that …",1,[[],["prefix",3]]],[11,"infix","","The infix bytes between this style and <code>next</code> style. These …",1,[[["style",3]],["infix",3]]],[11,"suffix","","The suffix for this style. These are the bytes that tell …",1,[[],["suffix",3]]],[11,"prefix","","The prefix bytes for this colour as a <code>Style</code>. These are …",0,[[],["prefix",3]]],[11,"infix","","The infix bytes between this colour and <code>next</code> colour. …",0,[[["colour",4]],["infix",3]]],[11,"suffix","","The suffix for this colour as a <code>Style</code>. These are the …",0,[[],["suffix",3]]],[11,"new","","Creates a new Style with no properties set.",1,[[],["style",3]]],[11,"bold","","Returns a <code>Style</code> with the bold property set.",1,[[],["style",3]]],[11,"dimmed","","Returns a <code>Style</code> with the dimmed property set.",1,[[],["style",3]]],[11,"italic","","Returns a <code>Style</code> with the italic property set.",1,[[],["style",3]]],[11,"underline","","Returns a <code>Style</code> with the underline property set.",1,[[],["style",3]]],[11,"blink","","Returns a <code>Style</code> with the blink property set.",1,[[],["style",3]]],[11,"reverse","","Returns a <code>Style</code> with the reverse property set.",1,[[],["style",3]]],[11,"hidden","","Returns a <code>Style</code> with the hidden property set.",1,[[],["style",3]]],[11,"strikethrough","","Returns a <code>Style</code> with the strikethrough property set.",1,[[],["style",3]]],[11,"fg","","Returns a <code>Style</code> with the foreground colour property set.",1,[[["colour",4]],["style",3]]],[11,"on","","Returns a <code>Style</code> with the background colour property set.",1,[[["colour",4]],["style",3]]],[11,"is_plain","","Return true if this <code>Style</code> has no actual styles, and can …",1,[[]]],[11,"normal","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"bold","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"dimmed","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"italic","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"underline","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"blink","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"reverse","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"hidden","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"strikethrough","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"on","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[["colour",4]],["style",3]]],[11,"style_ref","","Directly access the style",6,[[],["style",3]]],[11,"style_ref_mut","","Directly access the style mutably",6,[[],["style",3]]],[11,"paint","","Paints the given text with this colour, returning an ANSI …",1,[[],[["toowned",8],["sized",8],["ansigenericstring",3]]]],[11,"paint","","Paints the given text with this colour, returning an ANSI …",0,[[],[["toowned",8],["sized",8],["ansigenericstring",3]]]],[11,"write_to","","Write an <code>ANSIByteString</code> to an <code>io::Write</code>.  This writes the …",6,[[],["result",6]]],[11,"write_to","","Write an <code>ANSIByteString</code> to an <code>io::Write</code>.  This writes the …",9,[[],["result",6]]],[11,"write_to","","Write <code>ANSIByteStrings</code> to an <code>io::Write</code>.  This writes the …",2,[[],["result",6]]],[11,"write_to","","Write <code>ANSIByteStrings</code> to an <code>io::Write</code>.  This writes the …",10,[[],["result",6]]]],"p":[[4,"Colour"],[3,"Style"],[3,"ANSIGenericStrings"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIStrings"],[6,"ANSIByteString"],[6,"ANSIByteStrings"]]},\
"anymap":{"doc":"This crate provides the <code>AnyMap</code> type, a safe and …","i":[[0,"any","anymap","The different types of <code>Any</code> for use in a map.",null,null],[8,"UncheckedAnyExt","anymap::any","",null,null],[10,"downcast_ref_unchecked","","",0,[[]]],[10,"downcast_mut_unchecked","","",0,[[]]],[10,"downcast_unchecked","","",0,[[["box",3]],[["box",3],["any",8]]]],[8,"Any","","See also <code>CloneAny</code> for a cloneable version of this trait.",null,null],[8,"CloneAny","","See also <code>Any</code> for a version without the <code>Clone</code> requirement.",null,null],[0,"raw","anymap","The raw form of a <code>Map</code>, allowing untyped access.",null,null],[3,"RawMap","anymap::raw","The raw, underlying form of a <code>Map</code>.",null,null],[11,"new","","Create an empty collection.",1,[[],["rawmap",3]]],[11,"with_capacity","","Creates an empty collection with the given initial …",1,[[],["rawmap",3]]],[11,"capacity","","Returns the number of elements the collection can hold …",1,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",1,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as …",1,[[]]],[11,"len","","Returns the number of items in the collection.",1,[[]]],[11,"is_empty","","Returns true if there are no items in the collection.",1,[[]]],[11,"clear","","Removes all items from the collection. Keeps the …",1,[[]]],[3,"Iter","","<code>RawMap</code> iterator.",null,null],[3,"IterMut","","<code>RawMap</code> mutable iterator.",null,null],[3,"IntoIter","","<code>RawMap</code> move iterator.",null,null],[3,"Drain","","<code>RawMap</code> drain iterator.",null,null],[11,"iter","","An iterator visiting all entries in arbitrary order.",1,[[],["iter",3]]],[11,"iter_mut","","An iterator visiting all entries in arbitrary order.",1,[[],["itermut",3]]],[11,"drain","","Clears the map, returning all items as an iterator.",1,[[],["drain",3]]],[11,"entry","","Gets the entry for the given type in the collection for …",1,[[["typeid",3]],["entry",4]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[],["option",4]]],[11,"contains_key","","Returns true if the map contains a value for the …",1,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",1,[[],["option",4]]],[11,"insert","","Inserts a key-value pair from the map. If the key already …",1,[[["box",3],["typeid",3]],[["option",4],["box",3]]]],[11,"remove","","Removes a key from the map, returning the value at the …",1,[[],[["option",4],["box",3]]]],[3,"OccupiedEntry","","A view into a single occupied location in a <code>RawMap</code>.",null,null],[3,"VacantEntry","","A view into a single empty location in a <code>RawMap</code>.",null,null],[4,"Entry","","A view into a single location in a <code>RawMap</code>, which may be …",null,null],[13,"Occupied","","An occupied Entry",2,null],[13,"Vacant","","A vacant Entry",2,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",2,[[["box",3]]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",2,[[["fnonce",8]]]],[11,"get","","Gets a reference to the value in the entry.",3,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",3,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",3,[[["box",3]],["box",3]]],[11,"remove","","Takes the value out of the entry, and returns it.",3,[[],["box",3]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",4,[[["box",3]]]],[3,"Map","anymap","A collection containing zero or one values for any given …",null,null],[6,"AnyMap","","The most common type of <code>Map</code>: just using <code>Any</code>.",null,null],[11,"new","","Create an empty collection.",5,[[],["map",3]]],[11,"with_capacity","","Creates an empty collection with the given initial …",5,[[],["map",3]]],[11,"capacity","","Returns the number of elements the collection can hold …",5,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",5,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as …",5,[[]]],[11,"len","","Returns the number of items in the collection.",5,[[]]],[11,"is_empty","","Returns true if there are no items in the collection.",5,[[]]],[11,"clear","","Removes all items from the collection. Keeps the …",5,[[]]],[11,"get","","Returns a reference to the value stored in the collection …",5,[[],["option",4]]],[11,"get_mut","","Returns a mutable reference to the value stored in the …",5,[[],["option",4]]],[11,"insert","","Sets the value stored in the collection for the type <code>T</code>. …",5,[[["intobox",8]],[["option",4],["intobox",8]]]],[11,"remove","","Removes the <code>T</code> value from the collection, returning it if …",5,[[],[["option",4],["intobox",8]]]],[11,"contains","","Returns true if the collection contains a value of type <code>T</code>.",5,[[]]],[11,"entry","","Gets the entry for the given type in the collection for …",5,[[],[["entry",4],["intobox",8]]]],[3,"OccupiedEntry","","A view into a single occupied location in an <code>Map</code>.",null,null],[3,"VacantEntry","","A view into a single empty location in an <code>Map</code>.",null,null],[4,"Entry","","A view into a single location in an <code>Map</code>, which may be …",null,null],[13,"Occupied","","An occupied Entry",6,null],[13,"Vacant","","A vacant Entry",6,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",6,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",6,[[["fnonce",8]]]],[11,"get","","Gets a reference to the value in the entry",7,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry",7,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",7,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",7,[[]]],[11,"remove","","Takes the value out of the entry, and returns it",7,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",8,[[]]],[11,"from","anymap::raw","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"into_iter","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","anymap","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"downcast_ref_unchecked","anymap::any","",13,[[]]],[11,"downcast_mut_unchecked","","",13,[[]]],[11,"downcast_unchecked","","",13,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",13,[[]]],[11,"downcast_mut_unchecked","","",13,[[]]],[11,"downcast_unchecked","","",13,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",13,[[]]],[11,"downcast_mut_unchecked","","",13,[[]]],[11,"downcast_unchecked","","",13,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",13,[[]]],[11,"downcast_mut_unchecked","","",13,[[]]],[11,"downcast_unchecked","","",13,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",14,[[]]],[11,"downcast_mut_unchecked","","",14,[[]]],[11,"downcast_unchecked","","",14,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",14,[[]]],[11,"downcast_mut_unchecked","","",14,[[]]],[11,"downcast_unchecked","","",14,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",14,[[]]],[11,"downcast_mut_unchecked","","",14,[[]]],[11,"downcast_unchecked","","",14,[[["box",3]],["box",3]]],[11,"downcast_ref_unchecked","","",14,[[]]],[11,"downcast_mut_unchecked","","",14,[[]]],[11,"downcast_unchecked","","",14,[[["box",3]],["box",3]]],[11,"as_mut","anymap","",5,[[],["rawmap",3]]],[11,"as_ref","","",5,[[],["rawmap",3]]],[11,"into","","",5,[[],["rawmap",3]]],[11,"len","anymap::raw","",9,[[]]],[11,"len","","",10,[[]]],[11,"len","","",11,[[]]],[11,"len","","",12,[[]]],[11,"into_iter","","",1,[[],["intoiter",3]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","","",11,[[],[["option",4],["box",3]]]],[11,"size_hint","","",11,[[]]],[11,"next","","",12,[[],[["option",4],["box",3]]]],[11,"size_hint","","",12,[[]]],[11,"clone","","",1,[[],["rawmap",3]]],[11,"clone","","",9,[[],["iter",3]]],[11,"clone","anymap","",5,[[],["map",3]]],[11,"default","anymap::raw","",1,[[],["rawmap",3]]],[11,"fmt","anymap::any","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","anymap::raw","",1,[[["formatter",3]],["result",6]]],[11,"fmt","anymap","",5,[[["formatter",3]],["result",6]]],[11,"index","anymap::raw","",1,[[]]],[11,"index_mut","","",1,[[]]]],"p":[[8,"UncheckedAnyExt"],[3,"RawMap"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Map"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"Any"],[8,"CloneAny"]]},\
"atty":{"doc":"atty is a simple utility that answers one question","i":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,[[["stream",4]]]],[5,"isnt","","returns true if this is <em>not</em> a tty",null,[[["stream",4]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["stream",4]]]],"p":[[4,"Stream"]]},\
"azuki":{"doc":"","i":[[0,"opt","azuki","",null,null],[3,"Opt","azuki::opt","Options",null,null],[12,"file","","The file to compile",0,null],[12,"out_file","","Output file. Omit for default file (compile) or stdout …",0,null],[12,"action","","The action to perform. Accepts: lex, parse, compile, run",0,null],[12,"optimization","","The optimization passes to perform.",0,null],[12,"entry_point","","",0,null],[12,"params","","",0,null],[12,"log_level","","",0,null],[4,"Action","","",null,null],[13,"Lex","","",1,null],[13,"Parse","","",1,null],[13,"Run","","",1,null],[13,"Compile","","",1,null],[5,"main","azuki","",null,[[]]],[5,"default_opts","","",null,[[]]],[11,"from","azuki::opt","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"eq","","",1,[[["action",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"from_str","","",1,[[],["result",4]]],[11,"into_app","","",0,[[],["app",3]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_arg_matches","","",0,[[["argmatches",3]]]]],"p":[[3,"Opt"],[4,"Action"]]},\
"azuki_opt":{"doc":"","i":[[0,"branching_simplify","azuki_opt","Simplifies branches and removes empty basic blocks.",null,null],[3,"BranchingSimplify","azuki_opt::branching_simplify","Performs branching simplify. See module documents.",null,null],[5,"replace_phis","","",null,[[["tacfunc",3],["multimap",3],["bbid",3]]]],[0,"const_folding","azuki_opt","Performs constant folding.",null,null],[3,"ConstFolding","azuki_opt::const_folding","",null,null],[11,"new","","",0,[[]]],[5,"eval_binary_inst","","Evaluates a binary instruction to a simple value, if …",null,[[["binaryinst",3],["tacfunc",3]],[["option",4],["value",4]]]],[5,"eval_binary_deep","","Evaluate binary instructions that may reduce into simpler …",null,[[["binaryinst",3],["tacfunc",3]],["option",4]]],[5,"is_additive","","",null,[[["binaryop",4]]]],[5,"eval_val","","",null,[[["tacfunc",3],["value",4]],["value",4]]],[5,"eval_inst","","",null,[[["tacfunc",3],["instid",6]],["value",4]]],[5,"eval_binary","","",null,[[["binaryop",4]],["option",4]]],[0,"dead_code_eliminator","azuki_opt","",null,null],[3,"DeadCodeEliminator","azuki_opt::dead_code_eliminator","",null,null],[11,"new","","",1,[[],["deadcodeeliminator",3]]],[0,"loop_unroll","azuki_opt","Performs loop unrolling to every loop with <=7 …",null,null],[3,"LoopUnroll","azuki_opt::loop_unroll","",null,null],[5,"detect_loops","","",null,[[["tacfunc",3]],[["loop",3],["vec",3]]]],[5,"get_comparison","","",null,[[["instkind",4]],[["option",4],["comparison",4]]]],[3,"Loop","","",null,null],[12,"header","","",2,null],[12,"body","","",2,null],[12,"backedges","","",2,null],[12,"contains_inner","","",2,null],[4,"Comparison","","",null,null],[13,"ToConstant","","",3,null],[13,"ToVariable","","",3,null],[13,"ConstantTrue","","",3,null],[13,"ConstantFalse","","",3,null],[11,"from_int","","",3,[[],["comparison",4]]],[0,"util","azuki_opt","Common utilities used by multiple optimizations.",null,null],[0,"graphs","azuki_opt::util","Graphs",null,null],[5,"cfg","azuki_opt::util::graphs","Generate control flow graph of the given function.",null,[[["tacfunc",3]],[["digraphmap",6],["bbid",3]]]],[5,"dfg","","Generate data flow graph of the given function.",null,[[["tacfunc",3]],[["digraphmap",6],["instid",6]]]],[11,"from","azuki_opt::branching_simplify","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","azuki_opt::const_folding","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","azuki_opt::dead_code_eliminator","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","azuki_opt::loop_unroll","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"equivalent","","",3,[[]]],[11,"clone","","",2,[[],["loop",3]]],[11,"clone","","",3,[[],["comparison",4]]],[11,"default","azuki_opt::const_folding","",0,[[]]],[11,"default","azuki_opt::dead_code_eliminator","",1,[[]]],[11,"eq","azuki_opt::loop_unroll","",3,[[["comparison",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"name","azuki_opt::branching_simplify","",4,[[],["cow",4]]],[11,"edits_program","","",4,[[]]],[11,"optimize_func","","",4,[[["optimizeenvironment",3],["tacfunc",3]]]],[11,"name","azuki_opt::const_folding","",0,[[],["cow",4]]],[11,"edits_program","","",0,[[]]],[11,"optimize_func","","",0,[[["optimizeenvironment",3],["tacfunc",3]]]],[11,"name","azuki_opt::dead_code_eliminator","",1,[[],["cow",4]]],[11,"optimize_func","","",1,[[["optimizeenvironment",3],["tacfunc",3]]]],[11,"reset","","",1,[[]]],[11,"edits_program","","",1,[[]]],[11,"name","azuki_opt::loop_unroll","",5,[[],["cow",4]]],[11,"edits_program","","",5,[[]]],[11,"optimize_func","","",5,[[["optimizeenvironment",3],["tacfunc",3]]]]],"p":[[3,"ConstFolding"],[3,"DeadCodeEliminator"],[3,"Loop"],[4,"Comparison"],[3,"BranchingSimplify"],[3,"LoopUnroll"]]},\
"azuki_syntax":{"doc":"","i":[[0,"span","azuki_syntax","A span representing a section of source file",null,null],[3,"Span","azuki_syntax::span","A Span is the information of a piece of source code …",null,null],[12,"idx","","The start index (in bytes or other meaningful item index) …",0,null],[12,"len","","The length of the span",0,null],[17,"DUMMY_SPAN","","",null,null],[11,"start","","",0,[[]]],[11,"end","","",0,[[]]],[11,"new","","",0,[[],["span",3]]],[11,"new_idx","","",0,[[],["span",3]]],[11,"eof","","",0,[[],["span",3]]],[0,"util","azuki_syntax","Utilities",null,null],[6,"P","azuki_syntax::util","",null,null],[5,"P","","",null,[[],["p",6]]],[3,"Mut","","",null,null],[12,"0","","",1,null],[3,"MutWeak","","",null,null],[12,"0","","",2,null],[11,"new","","",1,[[],["mut",3]]],[11,"weak","","",1,[[],["mutweak",3]]],[11,"take_inner","","",1,[[],[["result",4],["mut",3]]]],[0,"lexer","azuki_syntax","Lexer for r0 tokens",null,null],[6,"Lexer","azuki_syntax::lexer","",null,null],[5,"lexer","","",null,[[],["lexer",6]]],[5,"spanned_lexer","","",null,[[]]],[0,"token","azuki_syntax","Models of r0 tokens",null,null],[0,"formatter","azuki_syntax::token","",null,null],[5,"parse_string_literal","","",null,[[["lexer",3]],[["option",4],["string",3]]]],[5,"parse_char_literal","","",null,[[["lexer",3]],["option",4]]],[4,"Token","","",null,null],[13,"FnKw","","",3,null],[13,"LetKw","","",3,null],[13,"ConstKw","","",3,null],[13,"AsKw","","",3,null],[13,"WhileKw","","",3,null],[13,"IfKw","","",3,null],[13,"ElseKw","","",3,null],[13,"ReturnKw","","",3,null],[13,"BreakKw","","",3,null],[13,"ContinueKw","","",3,null],[13,"UIntLiteral","","",3,null],[13,"FloatLiteral","","",3,null],[13,"CharLiteral","","",3,null],[13,"StringLiteral","","",3,null],[13,"Ident","","",3,null],[13,"Plus","","",3,null],[13,"Minus","","",3,null],[13,"Mul","","",3,null],[13,"Div","","",3,null],[13,"Assign","","",3,null],[13,"Eq","","",3,null],[13,"Neq","","",3,null],[13,"Lt","","",3,null],[13,"Gt","","",3,null],[13,"Le","","",3,null],[13,"Ge","","",3,null],[13,"LParen","","",3,null],[13,"RParen","","",3,null],[13,"LBrace","","",3,null],[13,"RBrace","","",3,null],[13,"Arrow","","",3,null],[13,"Comma","","",3,null],[13,"Colon","","",3,null],[13,"Semicolon","","",3,null],[13,"Whitespace","","",3,null],[13,"Comment","","",3,null],[13,"Error","","",3,null],[11,"get_ident","","",3,[[],["option",4]]],[11,"get_ident_owned","","",3,[[],[["option",4],["smolstr",3]]]],[11,"get_uint","","",3,[[],["option",4]]],[11,"get_float","","",3,[[],["option",4]]],[11,"get_string","","",3,[[],["option",4]]],[11,"get_string_owned","","",3,[[],[["option",4],["string",3]]]],[0,"ast","azuki_syntax","Models of the abstract syntax tree. This crate lists the …",null,null],[0,"formatter","azuki_syntax::ast","",null,null],[3,"Program","","",null,null],[12,"decls","","",4,null],[12,"funcs","","",4,null],[8,"AstNode","","",null,null],[10,"span","","",5,[[],["span",3]]],[3,"FuncStmt","","",null,null],[12,"span","","",6,null],[12,"name","","",6,null],[12,"params","","",6,null],[12,"ret_ty","","",6,null],[12,"body","","",6,null],[3,"FuncParam","","",null,null],[12,"is_const","","",7,null],[12,"name","","",7,null],[12,"ty","","",7,null],[4,"Stmt","","",null,null],[13,"Block","","",8,null],[13,"While","","",8,null],[13,"If","","",8,null],[13,"Expr","","",8,null],[13,"Decl","","",8,null],[13,"Return","","",8,null],[13,"Break","","",8,null],[13,"Continue","","",8,null],[13,"Empty","","",8,null],[11,"span","","",8,[[],["span",3]]],[3,"DeclStmt","","",null,null],[12,"is_const","","",9,null],[12,"name","","",9,null],[12,"ty","","",9,null],[12,"val","","",9,null],[12,"span","","",9,null],[3,"ReturnStmt","","",null,null],[12,"val","","",10,null],[12,"span","","",10,null],[3,"TyDef","","",null,null],[12,"span","","",11,null],[12,"name","","",11,null],[12,"params","","",11,null],[3,"BlockStmt","","",null,null],[12,"span","","",12,null],[12,"stmts","","",12,null],[3,"WhileStmt","","",null,null],[12,"span","","",13,null],[12,"cond","","",13,null],[12,"body","","",13,null],[3,"IfStmt","","",null,null],[12,"span","","",14,null],[12,"cond","","",14,null],[12,"if_block","","",14,null],[12,"else_block","","",14,null],[4,"IfElseBlock","","",null,null],[13,"None","","",15,null],[13,"If","","",15,null],[13,"Block","","",15,null],[4,"Expr","","",null,null],[13,"Ident","","",16,null],[13,"Assign","","",16,null],[13,"As","","",16,null],[13,"Literal","","",16,null],[13,"Unary","","",16,null],[13,"Binary","","",16,null],[13,"Call","","",16,null],[11,"span","","",16,[[],["span",3]]],[3,"LiteralExpr","","",null,null],[12,"span","","",17,null],[12,"kind","","",17,null],[4,"LiteralKind","","",null,null],[13,"Integer","","",18,null],[13,"Float","","",18,null],[13,"String","","",18,null],[13,"Char","","",18,null],[3,"UnaryExpr","","",null,null],[12,"span","","",19,null],[12,"op","","",19,null],[12,"expr","","",19,null],[3,"AssignExpr","","",null,null],[12,"span","","",20,null],[12,"allow_assign_const","","",20,null],[12,"lhs","","",20,null],[12,"rhs","","",20,null],[3,"AsExpr","","",null,null],[12,"span","","",21,null],[12,"val","","",21,null],[12,"ty","","",21,null],[3,"BinaryExpr","","",null,null],[12,"span","","",22,null],[12,"op","","",22,null],[12,"lhs","","",22,null],[12,"rhs","","",22,null],[3,"CallExpr","","",null,null],[12,"span","","",23,null],[12,"func","","",23,null],[12,"params","","",23,null],[4,"UnaryOp","","",null,null],[13,"Neg","","",24,null],[13,"Pos","","",24,null],[4,"BinaryOp","","",null,null],[13,"Add","","",25,null],[13,"Sub","","",25,null],[13,"Mul","","",25,null],[13,"Div","","",25,null],[13,"Gt","","",25,null],[13,"Lt","","",25,null],[13,"Ge","","",25,null],[13,"Le","","",25,null],[13,"Eq","","",25,null],[13,"Neq","","",25,null],[3,"Ident","","",null,null],[12,"span","","",26,null],[12,"name","","",26,null],[0,"parser","azuki_syntax","Parser for r0 programs",null,null],[0,"err","azuki_syntax::parser","",null,null],[3,"ParseError","azuki_syntax::parser::err","",null,null],[12,"kind","","",27,null],[12,"span","","",27,null],[11,"new_span","","",27,[[["parseerrorkind",4],["span",3]]]],[11,"new_none","","",27,[[["parseerrorkind",4]]]],[11,"new","","",27,[[["option",4],["parseerrorkind",4],["span",3]]]],[4,"ParseErrorKind","","",null,null],[13,"ExpectToken","","",28,null],[13,"ExpectedPattern","","",28,null],[13,"UnexpectedEof","","",28,null],[13,"Dummy","","",28,null],[3,"Parser","azuki_syntax::parser","",null,null],[12,"lexer","","",29,null],[5,"combine_expr","","Combine <code>lhs</code> and <code>rhs</code> using <code>op</code>.",null,[[["expr",4],["token",4]],["expr",4]]],[11,"new","","",29,[[],[["parser",3],["peekable",3]]]],[11,"parse","","",29,[[],[["program",3],["result",4],["parseerror",3]]]],[11,"peek","","",29,[[],[["token",4],["option",4]]]],[11,"next_if","","",29,[[],[["result",4],["option",4]]]],[11,"parse_program","","",29,[[],[["program",3],["result",4],["parseerror",3]]]],[11,"parse_ident","","",29,[[],[["ident",3],["parseerror",3],["result",4]]]],[11,"parse_ty","","",29,[[],[["result",4],["parseerror",3],["tydef",3]]]],[11,"parse_decl","","",29,[[],[["parseerror",3],["result",4],["declstmt",3]]]],[11,"parse_const_decl","","",29,[[],[["parseerror",3],["result",4],["declstmt",3]]]],[11,"parse_func_call","","",29,[[["ident",3]],[["result",4],["parseerror",3],["callexpr",3]]]],[11,"parse_item","","",29,[[],[["expr",4],["result",4],["parseerror",3]]]],[11,"parse_unary_expr","","",29,[[],[["expr",4],["result",4],["parseerror",3]]]],[11,"parse_expr_opg","","",29,[[["expr",4]],[["expr",4],["result",4],["parseerror",3]]]],[11,"parse_expr","","",29,[[],[["expr",4],["result",4],["parseerror",3]]]],[11,"parse_expr_stmt","","",29,[[],[["expr",4],["result",4],["parseerror",3]]]],[11,"parse_block","","",29,[[],[["blockstmt",3],["result",4],["parseerror",3]]]],[11,"parse_if_stmt","","",29,[[],[["result",4],["ifstmt",3],["parseerror",3]]]],[11,"parse_while_stmt","","",29,[[],[["whilestmt",3],["result",4],["parseerror",3]]]],[11,"parse_return_stmt","","",29,[[],[["result",4],["returnstmt",3],["parseerror",3]]]],[11,"parse_break_stmt","","",29,[[],[["parseerror",3],["result",4],["span",3]]]],[11,"parse_continue_stmt","","",29,[[],[["parseerror",3],["result",4],["span",3]]]],[11,"parse_stmt","","",29,[[],[["stmt",4],["parseerror",3],["result",4]]]],[11,"parse_fn_decl","","",29,[[],[["result",4],["funcstmt",3],["parseerror",3]]]],[11,"is_binary_op","azuki_syntax::token","",3,[[]]],[11,"precedence","","",3,[[]]],[11,"is_left_assoc","","",3,[[]]],[11,"to_binary_op","","",3,[[],[["binaryop",4],["option",4]]]],[0,"visitor","azuki_syntax","Visitor trait for working with AST",null,null],[8,"AstVisitor","azuki_syntax::visitor","A handy trait for traversing the abstract syntax tree.",null,null],[16,"LExprResult","","",30,null],[16,"ExprResult","","",30,null],[16,"TyResult","","",30,null],[16,"StmtResult","","",30,null],[16,"ProgramResult","","",30,null],[16,"FuncResult","","",30,null],[11,"visit_program","","",30,[[["program",3]]]],[11,"visit_func","","",30,[[["funcstmt",3]]]],[11,"visit_func_param","","",30,[[["funcparam",3]]]],[11,"visit_ty","","",30,[[["tydef",3]]]],[11,"visit_expr","","",30,[[["expr",4]]]],[11,"visit_literal_expr","","",30,[[["literalexpr",3]]]],[11,"visit_ident_expr","","",30,[[["ident",3]]]],[11,"visit_assign_expr","","",30,[[["assignexpr",3]]]],[11,"visit_lexpr","","",30,[[["expr",4]]]],[11,"visit_binary_expr","","",30,[[["binaryexpr",3]]]],[11,"visit_unary_expr","","",30,[[["unaryexpr",3]]]],[11,"visit_call_expr","","",30,[[["callexpr",3]]]],[11,"visit_as_expr","","",30,[[["asexpr",3]]]],[11,"visit_stmt","","",30,[[["stmt",4]]]],[11,"visit_block_stmt","","",30,[[["blockstmt",3]]]],[11,"visit_while_stmt","","",30,[[["whilestmt",3]]]],[11,"visit_if_stmt","","",30,[[["ifstmt",3]]]],[11,"visit_expr_stmt","","",30,[[["expr",4]]]],[11,"visit_decl_stmt","","",30,[[["declstmt",3]]]],[11,"visit_return_stmt","","",30,[[["returnstmt",3]]]],[11,"visit_break_stmt","","",30,[[["span",3]]]],[11,"visit_continue_stmt","","",30,[[["span",3]]]],[11,"visit_empty_stmt","","",30,[[["span",3]]]],[5,"walk_stmt","","",null,[[["stmt",4]]]],[5,"walk_expr","","",null,[[["expr",4]]]],[0,"prelude","azuki_syntax","",null,null],[5,"parse","","",null,[[],[["result",4],["program",3],["parseerror",3]]]],[11,"from","azuki_syntax::span","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"from","azuki_syntax::util","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","azuki_syntax::token","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","azuki_syntax::ast","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","azuki_syntax::parser::err","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","azuki_syntax::parser","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","azuki_syntax::span","",0,[[["span",6]]]],[11,"clone","","",0,[[],["span",3]]],[11,"clone","azuki_syntax::util","",1,[[]]],[11,"clone","azuki_syntax::token","",3,[[],["token",4]]],[11,"clone","azuki_syntax::ast","",4,[[],["program",3]]],[11,"clone","","",6,[[],["funcstmt",3]]],[11,"clone","","",7,[[],["funcparam",3]]],[11,"clone","","",8,[[],["stmt",4]]],[11,"clone","","",9,[[],["declstmt",3]]],[11,"clone","","",10,[[],["returnstmt",3]]],[11,"clone","","",11,[[],["tydef",3]]],[11,"clone","","",12,[[],["blockstmt",3]]],[11,"clone","","",13,[[],["whilestmt",3]]],[11,"clone","","",14,[[],["ifstmt",3]]],[11,"clone","","",15,[[],["ifelseblock",4]]],[11,"clone","","",16,[[],["expr",4]]],[11,"clone","","",17,[[],["literalexpr",3]]],[11,"clone","","",18,[[],["literalkind",4]]],[11,"clone","","",19,[[],["unaryexpr",3]]],[11,"clone","","",20,[[],["assignexpr",3]]],[11,"clone","","",21,[[],["asexpr",3]]],[11,"clone","","",22,[[],["binaryexpr",3]]],[11,"clone","","",23,[[],["callexpr",3]]],[11,"clone","","",24,[[],["unaryop",4]]],[11,"clone","","",25,[[],["binaryop",4]]],[11,"clone","","",26,[[],["ident",3]]],[11,"default","azuki_syntax::span","",0,[[]]],[11,"eq","","",0,[[["span",3]]]],[11,"ne","","",0,[[["span",3]]]],[11,"deref","azuki_syntax::util","",1,[[]]],[11,"deref","","",2,[[]]],[11,"fmt","azuki_syntax::span","",0,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_syntax::util","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_syntax::token","",3,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_syntax::parser::err","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_syntax::util","",1,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_syntax::token","",3,[[["formatter",3]],["result",6]]],[11,"add","azuki_syntax::span","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"lex","azuki_syntax::token","",3,[[["lexer",3]]]]],"p":[[3,"Span"],[3,"Mut"],[3,"MutWeak"],[4,"Token"],[3,"Program"],[8,"AstNode"],[3,"FuncStmt"],[3,"FuncParam"],[4,"Stmt"],[3,"DeclStmt"],[3,"ReturnStmt"],[3,"TyDef"],[3,"BlockStmt"],[3,"WhileStmt"],[3,"IfStmt"],[4,"IfElseBlock"],[4,"Expr"],[3,"LiteralExpr"],[4,"LiteralKind"],[3,"UnaryExpr"],[3,"AssignExpr"],[3,"AsExpr"],[3,"BinaryExpr"],[3,"CallExpr"],[4,"UnaryOp"],[4,"BinaryOp"],[3,"Ident"],[3,"ParseError"],[4,"ParseErrorKind"],[3,"Parser"],[8,"AstVisitor"]]},\
"azuki_tac":{"doc":"TAC (Three-Address Code) is the intermediate …","i":[[0,"builder","azuki_tac","A builder for constructing SSA functions from regular …",null,null],[0,"func_editor","azuki_tac::builder","",null,null],[3,"FuncEditor","azuki_tac::builder::func_editor","An editor attached to the given function for linear …",null,null],[12,"func","","",0,null],[12,"current_bb_id","","The basic block we\'re currently working on. Must be a …",0,null],[12,"current_idx","","The instruction index we\'re currently working on. New …",0,null],[11,"new","","Create a new function editor with ABSOLUTELY nothing …",0,[[["tacfunc",3]],["funceditor",3]]],[11,"set_type","","",0,[[["ty",4]]]],[11,"current_bb_id","","Returns the current basic block this builder is working …",0,[[],["bbid",3]]],[11,"current_bb","","",0,[[],["basicblock",3]]],[11,"current_bb_mut","","",0,[[],["basicblock",3]]],[11,"current_idx","","Returns the current instruction this builder is working …",0,[[],[["instid",6],["option",4]]]],[11,"current_inst","","",0,[[],[["option",4],["inst",3]]]],[11,"current_tac","","",0,[[],[["option",4],["tac",3]]]],[11,"current_inst_mut","","",0,[[],[["option",4],["inst",3]]]],[11,"current_tac_mut","","",0,[[],[["tac",3],["option",4]]]],[11,"new_bb","","Add an empty basic block into the function.",0,[[],["bbid",3]]],[11,"set_current_bb","","Set current basic block to <code>bb_id</code>. Also sets <code>current_idx</code> …",0,[[["bbid",3]]]],[11,"set_position_at_instruction","","Sets current basic block and instruction position at the …",0,[[["instid",6]],["tacresult",6]]],[11,"insert_after_current_place","","Insert the given instruction <strong>after</strong> the current place. …",0,[[["inst",3]],["instid",6]]],[11,"insert_before_current_place","","Insert the given instruction <strong>before</strong> the current place. …",0,[[["inst",3]],["instid",6]]],[11,"insert_at_end_of","","Insert the given instruction at the <strong>end</strong> of the given …",0,[[["inst",3],["bbid",3]],[["tacresult",6],["instid",6]]]],[11,"insert_at_start_of","","Insert the given instruction at the <strong>start</strong> of the given …",0,[[["inst",3],["bbid",3]],[["tacresult",6],["instid",6]]]],[11,"put_inst_after_current_place","","Attach the free-standing instruction to the place after […",0,[[["instid",6]]]],[11,"put_inst_before_current_place","","Attach the free-standing instruction to the place before […",0,[[["instid",6]]]],[11,"insert_phi","","",0,[[["ty",4],["bbid",3]],[["error",4],["instid",6],["result",4]]]],[11,"move_forward","","Move one instruction forward. Returns whether [<code>current_idx</code>…",0,[[]]],[11,"move_backward","","Move one instruction backward. Returns whether […",0,[[]]],[11,"remove_current","","",0,[[]]],[3,"FuncEditor","azuki_tac::builder","An editor attached to the given function for linear …",null,null],[12,"func","","",0,null],[12,"current_bb_id","","The basic block we\'re currently working on. Must be a …",0,null],[12,"current_idx","","The instruction index we\'re currently working on. New …",0,null],[3,"FuncBuilder","","A function builder that loosely resembles building SSA …",null,null],[12,"editor","","The function we\'re building.",1,null],[12,"sealed_bbs","","Sealed basic blocks.",1,null],[12,"filled_bbs","","Filled basic blocks.",1,null],[12,"variable_map","","A <code>Variable</code> - <code>Basic Block</code> - <code>SSA Value</code> map.",1,null],[12,"incomplete_phi","","Incomplete phi commands (params in our case).",1,null],[12,"block_pred","","Basic blocks predecessors",1,null],[11,"new","","Create a function builder for a function with the given …",1,[[["funceditor",3]],["funcbuilder",3]]],[11,"new_func","","Create a function builder for a function with the given …",1,[[["tacfunc",3]],["funcbuilder",3]]],[11,"sanity_check","","Build this function.",1,[[]]],[11,"mark_sealed","","Mark the given basic block as <em>sealed</em>. Also completes all …",1,[[["bbid",3]]]],[11,"mark_filled","","Mark the given basic block as <em>filled</em>.",1,[[["bbid",3]]]],[11,"is_sealed","","Check if the given basic block is sealed.",1,[[["bbid",3]]]],[11,"is_filled","","Check if the given basic block is filled.",1,[[["bbid",3]]]],[11,"declare_var","","",1,[[["ty",4]]]],[11,"write_variable_cur","","Indicate that variable <code>var</code> is written as the result of …",1,[[["index",3]],["tacresult",6]]],[11,"write_variable","","Indicate that variable <code>var</code> is written as the result of …",1,[[["index",3],["bbid",3]],["tacresult",6]]],[11,"read_variable_cur","","Indicate that variable <code>var</code> is read in the current basic …",1,[[],[["index",3],["option",4]]]],[11,"read_variable","","Indicate that variable <code>var</code> is read in basic block <code>bb</code>. …",1,[[["bbid",3]],[["index",3],["option",4]]]],[11,"read_variable_recursive","","This function directly corresponds to …",1,[[["bbid",3]],[["index",3],["option",4]]]],[11,"add_phi_operands","","This function directly corresponds to <code>addPhiOperands</code> in …",1,[[["index",3]]]],[11,"try_remove_trivial_phi","","",1,[[["index",3]]]],[11,"add_branch","","",1,[[["bbid",3]]]],[11,"pred_of_bb","","Returns an iterator of all predecessors of a basic block.",1,[[["bbid",3]],["tinyvec",4]]],[11,"succ_of_bb","","Returns an iterator of all successors of a basic block.",1,[[["bbid",3]]]],[6,"SmallBBIdVec","","",null,null],[0,"containers","azuki_tac","",null,null],[6,"InstId","azuki_tac::containers","",null,null],[3,"BBId","","The index of a basic block.",null,null],[12,"0","","",2,null],[11,"from_index","","",2,[[["index",3]]]],[11,"as_index","","",2,[[],["index",3]]],[11,"unique_num","","",2,[[]]],[0,"err","azuki_tac","Error and Result types.",null,null],[4,"Error","azuki_tac::err","",null,null],[13,"NoSuchTacIdx","","",3,null],[13,"NoSuchBB","","",3,null],[13,"NoSuchVar","","",3,null],[13,"NoCodeAfterInst","","",3,null],[13,"AlreadyConnected","","",3,null],[13,"NotConnected","","",3,null],[6,"TacResult","","",null,null],[0,"formatter","azuki_tac","Serialization and de-serialization for TAC code.",null,null],[8,"FormatContext","azuki_tac::formatter","",null,null],[10,"fmt_ctx","","",4,[[["formatter",3]],["result",6]]],[3,"TacFormatCtx","","",null,null],[12,"i_set","","",5,null],[11,"var_id","","",5,[[["index",3]],["varid",3]]],[3,"VarId","","",null,null],[12,"0","","",6,null],[0,"linkedlist","azuki_tac","Some random linked list traits, may or may not be used in …",null,null],[0,"implementation","azuki_tac::linkedlist","",null,null],[8,"ImplicitLinkedList","","An implicitly linked list, allowing freestanding items …",null,null],[16,"Item","","",7,null],[10,"get_item","","",7,[[]]],[10,"get_item_mut","","",7,[[]]],[10,"insert_item","","",7,[[]]],[10,"remove_item","","",7,[[]]],[11,"next_key","","",7,[[],["option",4]]],[11,"prev_key","","",7,[[],["option",4]]],[11,"attach_after","","Position this item after the given item.",7,[[]]],[11,"attach_before","","Position this item before the given item.",7,[[]]],[11,"detach","","Detaches this item from the list.",7,[[]]],[11,"split_after","","Split the chain into two after the given item, or return …",7,[[],["option",4]]],[11,"split_before","","Split the chain into two before the given item, or return …",7,[[],["option",4]]],[11,"connect","","",7,[[]]],[11,"items_iter","","Creates an iterator of items of Self in a chain, from …",7,[[["option",4]],["itemsiter",3]]],[8,"ImplicitLinkedListGet2","","",null,null],[10,"get2_mut","","",8,[[]]],[8,"ImplicitLinkedListItem","","An implicit linked list item. Contains keys for the …",null,null],[16,"Key","","",9,null],[10,"next","","",9,[[],["option",4]]],[10,"set_next","","",9,[[["option",4]]]],[11,"take_next","","",9,[[],["option",4]]],[10,"prev","","",9,[[],["option",4]]],[10,"set_prev","","",9,[[["option",4]]]],[11,"take_prev","","",9,[[],["option",4]]],[11,"is_freestanding","","",9,[[]]],[3,"ItemsIter","","An iterator of all items in one chain in an […",null,null],[12,"ctx","","",10,null],[12,"curr","","",10,null],[12,"tail","","",10,null],[11,"new","","",10,[[["option",4]]]],[0,"optimizer","azuki_tac","",null,null],[0,"sanity_checker","azuki_tac::optimizer","Passes to ensure that the file is still valid Azuki TAC.",null,null],[3,"SanityChecker","azuki_tac::optimizer::sanity_checker","",null,null],[12,"decl_vars","","",11,null],[12,"use_vars","","",11,null],[3,"SanityResult","","",null,null],[12,"is_valid_code","","",12,null],[11,"is_valid_code","","",12,[[],["hashmap",3]]],[8,"Pass","azuki_tac::optimizer","Represents a single pass inside the compilation pipeline.",null,null],[10,"name","","Returns the name of this pass.",13,[[],["cow",4]]],[10,"edits_program","","Whether this pass edits the program. This method should …",13,[[]]],[10,"optimize_program","","Optimize at program level.",13,[[["optimizeenvironment",3],["program",3]]]],[8,"FunctionOptimizer","","",null,null],[10,"name","","Returns the name of this pass.",14,[[],["cow",4]]],[10,"edits_program","","Whether this pass edits the program. This method should …",14,[[]]],[11,"reset","","Reset this instance for optimizing another function.",14,[[]]],[10,"optimize_func","","Optimize a single function.",14,[[["optimizeenvironment",3],["tacfunc",3]]]],[11,"do_initialization","","Perform initialization before any functions are processed.",14,[[["optimizeenvironment",3],["program",3]]]],[11,"do_finalization","","Perform finalization after all functions are processed.",14,[[["optimizeenvironment",3],["program",3]]]],[11,"make_pass","","Transform this optimizer into a pass. You should not …",14,[[],["functionoptimizerpass",3]]],[3,"FunctionOptimizerPass","","A simple wrapper over a [<code>FunctionOptimizer</code>] to create a …",null,null],[12,"0","","",15,null],[3,"OptimizeEnvironment","","The environment of an optimization pass. All data inside …",null,null],[12,"data","","External data that passes could save, read or modify.",16,null],[3,"Pipeline","","",null,null],[12,"env","","",17,null],[12,"passes","","",17,null],[11,"new","","",17,[[],["pipeline",3]]],[11,"add_pass","","",17,[[["pass",8]]]],[11,"add_func_optimizer","","",17,[[["functionoptimizer",8]]]],[11,"add_pass_boxed","","",17,[[["pass",8],["box",3]]]],[11,"list_passes","","",17,[[]]],[11,"run_pass","","",17,[[["program",3]]]],[0,"parser","azuki_tac","",null,null],[0,"implementation","azuki_tac::parser","Module for parsing the text representation of Azuki TAC …",null,null],[3,"VariableNamingCtx","azuki_tac::parser::implementation","",null,null],[12,"func","","",18,null],[12,"local_vars","","",18,null],[12,"bb_id_map","","",18,null],[12,"last_bb","","",18,null],[11,"new","","",18,[[["tacfunc",3]],["variablenamingctx",3]]],[11,"declared_var","","",18,[[],["instid",6]]],[11,"set_var","","",18,[[["instid",6],["inst",3]]]],[11,"declared_bb","","",18,[[],["bbid",3]]],[4,"ParseErrorKind","","",null,null],[13,"ExpressionErr","","",19,null],[13,"ExpectFunctionDef","","",19,null],[13,"ExpectName","","",19,null],[13,"Expect","","",19,null],[4,"Position","","",null,null],[13,"None","","",20,null],[13,"Span","","",20,null],[13,"Position","","",20,null],[13,"Location","","",20,null],[3,"ParseError","","",null,null],[12,"kind","","",21,null],[12,"at","","",21,null],[11,"new","","",21,[[["parseerrorkind",4]],["parseerror",3]]],[11,"spanned","","",21,[[["span",3],["parseerrorkind",4]],["parseerror",3]]],[11,"position","","",21,[[["position",3],["parseerrorkind",4]],["parseerror",3]]],[11,"expect_span","","",21,[[["span",3]]]],[11,"expect_pos","","",21,[[["position",3]]]],[11,"expect","","",21,[[]]],[8,"WithPosition","","",null,null],[10,"with_position","","",22,[[["position",4]]]],[10,"with_position_if_none","","",22,[[["position",4]]]],[5,"expect_name","","",null,[[["lref",3],["cow",4]],[["parseerror",3],["result",4]]]],[5,"expect_opt_name","","",null,[[["cow",4],["lref",3],["position",3],["option",4]],[["parseerror",3],["result",4]]]],[5,"parsed_named_type","","",null,[[["lref",3]],[["ty",4],["result",4],["parseerror",3]]]],[5,"parse_type","","",null,[[["lref",3]],[["ty",4],["result",4],["parseerror",3]]]],[5,"parse_bb_id","","",null,[[["lref",3],["variablenamingctx",3]],[["parseerror",3],["result",4],["bbid",3]]]],[5,"parse_inst_id","","",null,[[["lref",3],["variablenamingctx",3]],[["result",4],["instid",6],["parseerror",3]]]],[5,"parse_value","","",null,[[["lref",3],["variablenamingctx",3]],[["value",4],["parseerror",3],["result",4]]]],[5,"parse_binary_inst_rest","","",null,[[["listiter",3],["variablenamingctx",3],["binaryop",4]],[["result",4],["instkind",4],["parseerror",3]]]],[5,"parse_param_rest","","",null,[[["listiter",3]],[["result",4],["instkind",4],["parseerror",3]]]],[5,"parse_call_rest","","",null,[[["listiter",3],["variablenamingctx",3]],[["result",4],["instkind",4],["parseerror",3]]]],[5,"parse_phi_rest","","",null,[[["listiter",3],["variablenamingctx",3]],[["result",4],["instkind",4],["parseerror",3]]]],[5,"parse_inst_kind","","",null,[[["listiter",3],["variablenamingctx",3]],[["result",4],["instkind",4],["parseerror",3]]]],[5,"parse_inst","","",null,[[["lref",3],["variablenamingctx",3]],[["parseerror",3],["result",4]]]],[5,"parse_branch","","",null,[[["lref",3],["variablenamingctx",3]],[["branch",4],["result",4],["parseerror",3]]]],[5,"parse_bb","","",null,[[["lref",3],["variablenamingctx",3]],[["parseerror",3],["result",4]]]],[5,"parse_function","","",null,[[["lref",3]],[["result",4],["parseerror",3],["tacfunc",3]]]],[4,"ParseErrorKind","azuki_tac::parser","",null,null],[13,"ExpressionErr","","",19,null],[13,"ExpectFunctionDef","","",19,null],[13,"ExpectName","","",19,null],[13,"Expect","","",19,null],[4,"Position","","",null,null],[13,"None","","",20,null],[13,"Span","","",20,null],[13,"Position","","",20,null],[13,"Location","","",20,null],[3,"ParseError","","",null,null],[12,"kind","","",21,null],[12,"at","","",21,null],[5,"parse_function","","",null,[[["lref",3]],[["result",4],["parseerror",3],["tacfunc",3]]]],[5,"parse_program_from_string","","",null,[[],[["program",3],["result",4],["parseerror",3]]]],[0,"ty","azuki_tac","Type system definitions and stuff.",null,null],[17,"PTR_SIZE","azuki_tac::ty","",null,null],[4,"Ty","","A representation of basic type that has O(1) clone and …",null,null],[13,"Unit","","",23,null],[13,"Func","","",23,null],[13,"Ptr","","",23,null],[13,"Numeric","","",23,null],[11,"as_unit_mut","","Optionally returns references to the inner fields if this …",23,[[],["option",4]]],[11,"as_unit","","Optionally returns references to the inner fields if this …",23,[[],["option",4]]],[11,"as_func_mut","","Optionally returns mutable references to the inner fields …",23,[[],[["option",4],["arc",3]]]],[11,"as_func","","Optionally returns references to the inner fields if this …",23,[[],[["option",4],["arc",3]]]],[11,"into_func","","Returns the inner fields if this is a <code>Ty::Func</code>, otherwise …",23,[[],[["arc",3],["result",4]]]],[11,"as_ptr_mut","","Optionally returns mutable references to the inner fields …",23,[[],[["option",4],["arc",3]]]],[11,"as_ptr","","Optionally returns references to the inner fields if this …",23,[[],[["arc",3],["option",4]]]],[11,"into_ptr","","Returns the inner fields if this is a <code>Ty::Ptr</code>, otherwise …",23,[[],[["arc",3],["result",4]]]],[11,"as_numeric_mut","","Optionally returns mutable references to the inner fields …",23,[[],[["option",4],["numericty",3]]]],[11,"as_numeric","","Optionally returns references to the inner fields if this …",23,[[],[["numericty",3],["option",4]]]],[11,"into_numeric","","Returns the inner fields if this is a <code>Ty::Numeric</code>, …",23,[[],[["result",4],["numericty",3]]]],[11,"int","","",23,[[],["ty",4]]],[11,"bool","","",23,[[],["ty",4]]],[11,"unit","","",23,[[],["ty",4]]],[11,"func_of","","",23,[[["ty",4],["vec",3]],["ty",4]]],[11,"ptr_of","","",23,[[["ty",4]],["ty",4]]],[11,"size","","",23,[[],["option",4]]],[3,"NumericTy","","",null,null],[12,"kind","","",24,null],[12,"size","","",24,null],[11,"int","","",24,[[],["numericty",3]]],[11,"bool","","",24,[[],["numericty",3]]],[11,"size","","",24,[[]]],[4,"TyKind","","",null,null],[13,"Bool","","",25,null],[13,"Int","","",25,null],[3,"FuncTy","","",null,null],[12,"return_type","","",26,null],[12,"params","","",26,null],[0,"util","azuki_tac","",null,null],[0,"format_list","azuki_tac::util","",null,null],[3,"ListFormatter","azuki_tac::util::format_list","",null,null],[12,"0","","",27,null],[11,"new","","",27,[[],["listformatter",3]]],[0,"idx","azuki_tac::util","",null,null],[8,"Idx","azuki_tac::util::idx","",null,null],[0,"iterator","azuki_tac::util","",null,null],[4,"OptionIter","azuki_tac::util::iterator","",null,null],[13,"None","","",28,null],[13,"One","","",28,null],[13,"Two","","",28,null],[4,"VarIter","","",null,null],[13,"None","","",29,null],[13,"One","","",29,null],[13,"Two","","",29,null],[13,"Iter","","",29,null],[3,"ListFormatter","azuki_tac::util","",null,null],[12,"0","","",27,null],[4,"OptionIter","","",null,null],[13,"None","","",28,null],[13,"One","","",28,null],[13,"Two","","",28,null],[4,"VarIter","","",null,null],[13,"None","","",29,null],[13,"One","","",29,null],[13,"Two","","",29,null],[13,"Iter","","",29,null],[8,"Captures","","",null,null],[8,"ImplicitLinkedList","azuki_tac","An implicitly linked list, allowing freestanding items …",null,null],[16,"Item","","",7,null],[10,"get_item","","",7,[[]]],[10,"get_item_mut","","",7,[[]]],[10,"insert_item","","",7,[[]]],[10,"remove_item","","",7,[[]]],[11,"next_key","azuki_tac::linkedlist","",7,[[],["option",4]]],[11,"prev_key","","",7,[[],["option",4]]],[11,"attach_after","","Position this item after the given item.",7,[[]]],[11,"attach_before","","Position this item before the given item.",7,[[]]],[11,"detach","","Detaches this item from the list.",7,[[]]],[11,"split_after","","Split the chain into two after the given item, or return …",7,[[],["option",4]]],[11,"split_before","","Split the chain into two before the given item, or return …",7,[[],["option",4]]],[11,"connect","","",7,[[]]],[11,"items_iter","","Creates an iterator of items of Self in a chain, from …",7,[[["option",4]],["itemsiter",3]]],[8,"ImplicitLinkedListGet2","azuki_tac","",null,null],[10,"get2_mut","","",8,[[]]],[8,"ImplicitLinkedListItem","","An implicit linked list item. Contains keys for the …",null,null],[16,"Key","","",9,null],[10,"next","","",9,[[],["option",4]]],[10,"set_next","","",9,[[["option",4]]]],[11,"take_next","azuki_tac::linkedlist","",9,[[],["option",4]]],[10,"prev","azuki_tac","",9,[[],["option",4]]],[10,"set_prev","","",9,[[["option",4]]]],[11,"take_prev","azuki_tac::linkedlist","",9,[[],["option",4]]],[11,"is_freestanding","","",9,[[]]],[3,"ItemsIter","azuki_tac","An iterator of all items in one chain in an […",null,null],[12,"ctx","","",10,null],[12,"curr","","",10,null],[12,"tail","","",10,null],[3,"Program","","",null,null],[12,"functions","","",30,null],[3,"TacFunc","","A function made of TAC instructions.",null,null],[12,"name","","Function name",31,null],[12,"ty","","Function type",31,null],[12,"instructions_arena","","An arena to allocate instructions",31,null],[12,"basic_block_arena","","An arena to allocate basic block info",31,null],[12,"first_block","","",31,null],[11,"new","","",31,[[["ty",4],["smolstr",3]],["tacfunc",3]]],[11,"new_untyped","","",31,[[["smolstr",3]],["tacfunc",3]]],[11,"starting_block","","",31,[[],[["option",4],["bbid",3]]]],[11,"inst_new","","Insert a new TAC into arena with no next instruction, …",31,[[["inst",3]],["instid",6]]],[11,"inst_exists","","",31,[[["instid",6]]]],[11,"inst_next","","",31,[[["instid",6]],[["instid",6],["option",4]]]],[11,"inst_prev","","",31,[[["instid",6]],[["instid",6],["option",4]]]],[11,"tac_get","","Gets the instruction with extra information around it as …",31,[[["instid",6]],["tac",3]]],[11,"tac_get_mut","","Gets a mutable reference of the instruction with extra …",31,[[["instid",6]],["tac",3]]],[11,"inst_get","","Get the instruction body",31,[[["instid",6]],["inst",3]]],[11,"inst_get_mut","","Get a mutable reference of the instruction body",31,[[["instid",6]],["inst",3]]],[11,"inst_set_after","","Position this instruction after the given instruction.",31,[[["instid",6]]]],[11,"inst_set_before","","Position this instruction before the given instruction.",31,[[["instid",6]]]],[11,"inst_append_in_bb","","Append the given instruction as the last instruction in …",31,[[["instid",6],["bbid",3]]]],[11,"inst_prepend_in_bb","","Prepend the given instruction as the first instruction in …",31,[[["instid",6],["bbid",3]]]],[11,"inst_detach","","Detaches this instruction from the instruction chain.",31,[[["instid",6]]]],[11,"inst_remove","","Remove the given instruction",31,[[["instid",6]],["inst",3]]],[11,"inst_connect","","Connect TAC instruction <code>head</code> to the place after <code>tail</code>.",31,[[["instid",6]]]],[11,"inst_split_off_after","","Splits off instruction chain after position <code>pos</code>. Returns …",31,[[["instid",6]],[["instid",6],["option",4]]]],[11,"all_inst_unordered","","Returns an iterator of all instructions inside this …",31,[[]]],[11,"inst_of_bb_iter","","",31,[[["bbid",3]]]],[11,"inst_iter","","",31,[[["instid",6],["option",4]]]],[11,"bb_new","","Insert a new basic block into this function",31,[[],["bbid",3]]],[11,"bb_exists","","",31,[[["bbid",3]]]],[11,"bb_get","","",31,[[["bbid",3]],["basicblock",3]]],[11,"bb_get_mut","","",31,[[["bbid",3]],["basicblock",3]]],[11,"bb_get2_mut","","",31,[[["bbid",3]]]],[11,"bb_set_first","","Set the given block as the first block in function. …",31,[[["bbid",3]],[["option",4],["bbid",3]]]],[11,"bb_set_before","","",31,[[["bbid",3]]]],[11,"bb_set_after","","",31,[[["bbid",3]]]],[11,"bb_detach","","",31,[[["bbid",3]]]],[11,"all_bb_unordered","","",31,[[]]],[11,"bb_split_after","","Split all instruction after <code>inst</code> into a new basic block. …",31,[[["instid",6]],["bbid",3]]],[11,"bb_connect","","Concatenate basic block <code>back</code> into <code>front</code> and detaches <code>back</code> …",31,[[["bbid",3]],["branch",4]]],[11,"bb_iter","","",31,[[]]],[3,"BasicBlock","","A single basic block, represented as an indirect doubly …",null,null],[12,"head","","Linked list head",32,null],[12,"tail","","Linked list tail",32,null],[12,"prev","","Linked list head",32,null],[12,"next","","Linked list tail",32,null],[12,"branch","","The branch instruction at the end of this basic block",32,null],[11,"is_empty","","",32,[[]]],[3,"Tac","","Represents a single TAC instruction inside an indirect …",null,null],[12,"inst","","The actual instruction.",33,null],[12,"bb","","The basic block this instruction is in.",33,null],[12,"prev","","The previous instruction in this list.",33,null],[12,"next","","The next instruction in this list.",33,null],[11,"new","","",33,[[["instid",6],["bbid",3],["option",4],["inst",3]]]],[11,"independent","","",33,[[["inst",3],["bbid",3]],["tac",3]]],[3,"BinaryInst","","",null,null],[12,"op","","",34,null],[12,"lhs","","",34,null],[12,"rhs","","",34,null],[3,"FunctionCall","","",null,null],[12,"name","","",35,null],[12,"params","","",35,null],[3,"Inst","","",null,null],[12,"kind","","",36,null],[12,"ty","","",36,null],[4,"InstKind","","Kinds of an instruction",null,null],[13,"Binary","","A binary operaton, e.g. plus, divide",37,null],[13,"FunctionCall","","A call to another function.",37,null],[13,"Assign","","An assignment from another instruction or constant",37,null],[13,"Phi","","A phi instruction.",37,null],[13,"Param","","A function parameter",37,null],[11,"as_binary_mut","","Optionally returns mutable references to the inner fields …",37,[[],[["option",4],["binaryinst",3]]]],[11,"as_binary","","Optionally returns references to the inner fields if this …",37,[[],[["option",4],["binaryinst",3]]]],[11,"into_binary","","Returns the inner fields if this is a <code>InstKind::Binary</code>, …",37,[[],[["result",4],["binaryinst",3]]]],[11,"as_function_call_mut","","Optionally returns mutable references to the inner fields …",37,[[],[["functioncall",3],["option",4]]]],[11,"as_function_call","","Optionally returns references to the inner fields if this …",37,[[],[["option",4],["functioncall",3]]]],[11,"into_function_call","","Returns the inner fields if this is a …",37,[[],[["result",4],["functioncall",3]]]],[11,"as_assign_mut","","Optionally returns mutable references to the inner fields …",37,[[],[["option",4],["value",4]]]],[11,"as_assign","","Optionally returns references to the inner fields if this …",37,[[],[["option",4],["value",4]]]],[11,"into_assign","","Returns the inner fields if this is a <code>InstKind::Assign</code>, …",37,[[],[["result",4],["value",4]]]],[11,"as_phi_mut","","Optionally returns mutable references to the inner fields …",37,[[],[["option",4],["btreemap",3]]]],[11,"as_phi","","Optionally returns references to the inner fields if this …",37,[[],[["btreemap",3],["option",4]]]],[11,"into_phi","","Returns the inner fields if this is a <code>InstKind::Phi</code>, …",37,[[],[["result",4],["btreemap",3]]]],[11,"as_param_mut","","Optionally returns mutable references to the inner fields …",37,[[],["option",4]]],[11,"as_param","","Optionally returns references to the inner fields if this …",37,[[],["option",4]]],[11,"into_param","","Returns the inner fields if this is a <code>InstKind::Param</code>, …",37,[[],["result",4]]],[11,"params_iter","","",37,[[]]],[11,"replace_dest","","",37,[[["instid",6]]]],[11,"replace_phi_source","","",37,[[["bbid",3]]]],[11,"param_op_iter","","",37,[[]]],[11,"empty_phi","","",37,[[]]],[4,"Branch","","Represents a branch instruction.",null,null],[13,"Unreachable","","Unreachable or undefined branch.",38,null],[13,"Return","","Returns the given value.",38,null],[13,"Jump","","Jumps to the given target",38,null],[13,"CondJump","","Conditional jump to the given target.",38,null],[12,"cond","azuki_tac::Branch","",39,null],[12,"if_true","","",39,null],[12,"if_false","","",39,null],[11,"target_iter","azuki_tac","",38,[[]]],[11,"replace_target","","",38,[[["bbid",3]]]],[4,"BinaryOp","","",null,null],[13,"Add","","",40,null],[13,"Sub","","",40,null],[13,"Mul","","",40,null],[13,"Div","","",40,null],[13,"Lt","","",40,null],[13,"Gt","","",40,null],[13,"Le","","",40,null],[13,"Ge","","",40,null],[13,"Eq","","",40,null],[13,"Ne","","",40,null],[4,"Value","","",null,null],[13,"Dest","","",41,null],[13,"Imm","","",41,null],[11,"get_imm","","",41,[[],["option",4]]],[11,"get_inst","","",41,[[],[["instid",6],["option",4]]]],[11,"is_dest","","Returns <code>true</code> if the value is [<code>Dest</code>].",41,[[]]],[11,"is_imm","","Returns <code>true</code> if the value is [<code>Imm</code>].",41,[[]]],[11,"replace_dest","","",41,[[["instid",6]]]],[6,"Immediate","","",null,null],[11,"from","azuki_tac::builder::func_editor","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","azuki_tac::builder","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","azuki_tac::containers","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[]]],[11,"from","azuki_tac::err","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","azuki_tac::formatter","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","azuki_tac::linkedlist","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","azuki_tac::optimizer::sanity_checker","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","azuki_tac::optimizer","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","azuki_tac::parser::implementation","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","azuki_tac::ty","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"equivalent","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"equivalent","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"equivalent","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"equivalent","","",26,[[]]],[11,"from","azuki_tac::util::format_list","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","azuki_tac::util::iterator","",28,[[]]],[11,"into","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","azuki_tac","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"equivalent","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"equivalent","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"equivalent","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"equivalent","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"equivalent","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"equivalent","","",38,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"to_string","","",40,[[],["string",3]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"equivalent","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"equivalent","","",41,[[]]],[11,"fmt_ctx","","",41,[[["formatter",3],["tacformatctx",3]],["result",6]]],[11,"fmt_ctx","","",33,[[["formatter",3]],["result",6]]],[11,"fmt_ctx","","",38,[[["formatter",3],["tacformatctx",3]],["result",6]]],[11,"next","","",33,[[],["option",4]]],[11,"set_next","","",33,[[["option",4]]]],[11,"prev","","",33,[[],["option",4]]],[11,"set_prev","","",33,[[["option",4]]]],[11,"take_next","","",33,[[],["option",4]]],[11,"take_prev","","",33,[[],["option",4]]],[11,"next","","",32,[[],["option",4]]],[11,"set_next","","",32,[[["option",4]]]],[11,"prev","","",32,[[],["option",4]]],[11,"set_prev","","",32,[[["option",4]]]],[11,"name","azuki_tac::optimizer","",15,[[],["cow",4]]],[11,"edits_program","","",15,[[]]],[11,"optimize_program","","",15,[[["optimizeenvironment",3],["program",3]]]],[11,"name","azuki_tac::optimizer::sanity_checker","",11,[[],["cow",4]]],[11,"edits_program","","",11,[[]]],[11,"reset","","",11,[[]]],[11,"do_initialization","","",11,[[["optimizeenvironment",3],["program",3]]]],[11,"optimize_func","","",11,[[["optimizeenvironment",3],["tacfunc",3]]]],[11,"with_position","azuki_tac::parser::implementation","",21,[[["position",4]]]],[11,"with_position_if_none","","",21,[[["position",4]]]],[11,"from","azuki_tac::containers","",2,[[["index",3]]]],[11,"from","azuki_tac::parser::implementation","",21,[[["error",3]]]],[11,"from","azuki_tac","",41,[[["instid",6]]]],[11,"into","azuki_tac::containers","",2,[[],["index",3]]],[11,"into","","",2,[[]]],[11,"next","azuki_tac::linkedlist","",10,[[],["option",4]]],[11,"next","azuki_tac::util::iterator","",28,[[],["option",4]]],[11,"next","","",29,[[],["option",4]]],[11,"clone","azuki_tac::containers","",2,[[],["bbid",3]]],[11,"clone","azuki_tac::ty","",23,[[],["ty",4]]],[11,"clone","","",24,[[],["numericty",3]]],[11,"clone","","",25,[[],["tykind",4]]],[11,"clone","","",26,[[],["functy",3]]],[11,"clone","azuki_tac","",30,[[],["program",3]]],[11,"clone","","",31,[[],["tacfunc",3]]],[11,"clone","","",32,[[],["basicblock",3]]],[11,"clone","","",33,[[],["tac",3]]],[11,"clone","","",34,[[],["binaryinst",3]]],[11,"clone","","",35,[[],["functioncall",3]]],[11,"clone","","",36,[[],["inst",3]]],[11,"clone","","",37,[[],["instkind",4]]],[11,"clone","","",38,[[],["branch",4]]],[11,"clone","","",40,[[],["binaryop",4]]],[11,"clone","","",41,[[],["value",4]]],[11,"default","azuki_tac::containers","",2,[[]]],[11,"default","azuki_tac::optimizer::sanity_checker","",11,[[],["sanitychecker",3]]],[11,"default","azuki_tac::optimizer","",17,[[]]],[11,"default","azuki_tac::ty","",23,[[]]],[11,"default","azuki_tac","",31,[[],["tacfunc",3]]],[11,"default","","",32,[[],["basicblock",3]]],[11,"default","","",38,[[]]],[11,"cmp","azuki_tac::containers","",2,[[["bbid",3]],["ordering",4]]],[11,"eq","","",2,[[["bbid",3]]]],[11,"ne","","",2,[[["bbid",3]]]],[11,"eq","azuki_tac::ty","",23,[[["ty",4]]]],[11,"ne","","",23,[[["ty",4]]]],[11,"eq","","",24,[[["numericty",3]]]],[11,"ne","","",24,[[["numericty",3]]]],[11,"eq","","",25,[[["tykind",4]]]],[11,"eq","","",26,[[["functy",3]]]],[11,"ne","","",26,[[["functy",3]]]],[11,"eq","azuki_tac","",33,[[["tac",3]]]],[11,"ne","","",33,[[["tac",3]]]],[11,"eq","","",34,[[["binaryinst",3]]]],[11,"ne","","",34,[[["binaryinst",3]]]],[11,"eq","","",35,[[["functioncall",3]]]],[11,"ne","","",35,[[["functioncall",3]]]],[11,"eq","","",36,[[["inst",3]]]],[11,"ne","","",36,[[["inst",3]]]],[11,"eq","","",37,[[["instkind",4]]]],[11,"ne","","",37,[[["instkind",4]]]],[11,"eq","","",38,[[["branch",4]]]],[11,"ne","","",38,[[["branch",4]]]],[11,"eq","","",40,[[["binaryop",4]]]],[11,"eq","","",41,[[["value",4]]]],[11,"ne","","",41,[[["value",4]]]],[11,"partial_cmp","azuki_tac::containers","",2,[[["bbid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["bbid",3]]]],[11,"le","","",2,[[["bbid",3]]]],[11,"gt","","",2,[[["bbid",3]]]],[11,"ge","","",2,[[["bbid",3]]]],[11,"deref","azuki_tac::builder","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","azuki_tac::containers","",2,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::err","",3,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::optimizer::sanity_checker","",11,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::parser::implementation","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::ty","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::containers","",2,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::ty","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac","",40,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::formatter","",6,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac","",31,[[["formatter",3]],["result",6]]],[11,"fmt","azuki_tac::util::format_list","",27,[[["formatter",3]],["result",6]]],[11,"hash","azuki_tac::containers","",2,[[]]],[11,"hash","azuki_tac::ty","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]]],"p":[[3,"FuncEditor"],[3,"FuncBuilder"],[3,"BBId"],[4,"Error"],[8,"FormatContext"],[3,"TacFormatCtx"],[3,"VarId"],[8,"ImplicitLinkedList"],[8,"ImplicitLinkedListGet2"],[8,"ImplicitLinkedListItem"],[3,"ItemsIter"],[3,"SanityChecker"],[3,"SanityResult"],[8,"Pass"],[8,"FunctionOptimizer"],[3,"FunctionOptimizerPass"],[3,"OptimizeEnvironment"],[3,"Pipeline"],[3,"VariableNamingCtx"],[4,"ParseErrorKind"],[4,"Position"],[3,"ParseError"],[8,"WithPosition"],[4,"Ty"],[3,"NumericTy"],[4,"TyKind"],[3,"FuncTy"],[3,"ListFormatter"],[4,"OptionIter"],[4,"VarIter"],[3,"Program"],[3,"TacFunc"],[3,"BasicBlock"],[3,"Tac"],[3,"BinaryInst"],[3,"FunctionCall"],[3,"Inst"],[4,"InstKind"],[4,"Branch"],[13,"CondJump"],[4,"BinaryOp"],[4,"Value"]]},\
"azuki_tac_filetest":{"doc":"","i":[],"p":[]},\
"azuki_tacgen":{"doc":"","i":[[0,"err","azuki_tacgen","",null,null],[4,"Error","azuki_tacgen::err","",null,null],[13,"UnknownType","","",0,null],[13,"DuplicateVar","","",0,null],[13,"UnknownVar","","",0,null],[13,"InvalidLExpr","","",0,null],[13,"WrongParamLength","","",0,null],[12,"expected","azuki_tacgen::err::Error","",1,null],[12,"found","","",1,null],[13,"TypeMismatch","azuki_tacgen::err","",0,null],[12,"expected","azuki_tacgen::err::Error","",2,null],[12,"found","","",2,null],[0,"symbol","azuki_tacgen","",null,null],[3,"StringInterner","azuki_tacgen::symbol","A struct for storing strings and reducing space usage.",null,null],[12,"set","","",3,null],[11,"new","","",3,[[],["stringinterner",3]]],[11,"str_needs_interning","","",3,[[]]],[11,"smolstr_needs_interning","","",3,[[["smolstr",3]]]],[11,"intern_str","","Stores a string into the internal buffer. Returns an …",3,[[],["smolstr",3]]],[11,"intern","","Stores an external [<code>SmolStr</code>][SmolStr] into internal …",3,[[["smolstr",3]],["smolstr",3]]],[3,"NumberingCounter","","",null,null],[12,"0","","",4,null],[11,"new","","",4,[[]]],[11,"next","","",4,[[]]],[3,"Variable","","A single variable",null,null],[12,"is_global","","Whether if this variable is a global variable",5,null],[12,"id","","The unique global ID of this variable",5,null],[12,"ty","","The type of this variable",5,null],[3,"ScopeBuilder","","",null,null],[12,"counter","","",6,null],[12,"interner","","",6,null],[12,"scopes","","",6,null],[11,"new","","",6,[[["rc",3],["numberingcounter",3],["rc",3],["refcell",3]],["scopebuilder",3]]],[11,"add_scope","","",6,[[]]],[11,"pop_scope","","",6,[[],[["result",4],["size0error",3],["scope",3]]]],[11,"is_top_scope_global","","",6,[[]]],[11,"insert","","Insert a variable with given name and type into this …",6,[[["smolstr",3],["ty",4]],[["option",4],["variable",3]]]],[11,"insert_global","","",6,[[["smolstr",3],["ty",4]],[["option",4],["variable",3]]]],[11,"find","","",6,[[],[["option",4],["variable",3]]]],[11,"scopes","","",6,[[]]],[11,"top_scope","","",6,[[],["scope",3]]],[11,"top_scope_mut","","",6,[[],["scope",3]]],[11,"global_scope","","",6,[[],["scope",3]]],[11,"global_scope_mut","","",6,[[],["scope",3]]],[3,"Scope","","",null,null],[12,"vars","","",7,null],[11,"new","","",7,[[],["scope",3]]],[11,"find","","",7,[[],[["option",4],["variable",3]]]],[11,"insert","","",7,[[["variable",3],["smolstr",3]],[["option",4],["variable",3]]]],[5,"compile","azuki_tacgen","",null,[[["program",3]],[["error",4],["result",4],["program",3]]]],[3,"BreakTarget","","",null,null],[12,"break_out","","",8,null],[12,"continue_in","","",8,null],[3,"FuncCompiler","","",null,null],[12,"builder","","",9,null],[12,"break_targets","","",9,null],[12,"return_ty","","",9,null],[12,"interner","","",9,null],[12,"scope_builder","","",9,null],[11,"new","","",9,[[["tacfunc",3],["rc",3],["refcell",3],["rc",3],["refcell",3]],["funccompiler",3]]],[11,"visit_func_param_real","","",9,[[["funcparam",3]],[["result",4],["error",4]]]],[5,"assert_type_eq","","",null,[[["ty",4]],[["result",4],["error",4]]]],[11,"from","azuki_tacgen::err","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","azuki_tacgen::symbol","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","azuki_tacgen","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"default","azuki_tacgen::symbol","",3,[[]]],[11,"default","","",7,[[]]],[11,"fmt","azuki_tacgen::err","",0,[[["formatter",3]],["result",6]]],[11,"visit_func","azuki_tacgen","",9,[[["funcstmt",3]]]],[11,"visit_ty","","",9,[[["tydef",3]]]],[11,"visit_literal_expr","","",9,[[["literalexpr",3]]]],[11,"visit_ident_expr","","",9,[[["ident",3]]]],[11,"visit_assign_expr","","",9,[[["assignexpr",3]]]],[11,"visit_lexpr","","",9,[[["expr",4]]]],[11,"visit_binary_expr","","",9,[[["binaryexpr",3]]]],[11,"visit_unary_expr","","",9,[[["unaryexpr",3]]]],[11,"visit_call_expr","","",9,[[["callexpr",3]]]],[11,"visit_as_expr","","",9,[[["asexpr",3]]]],[11,"visit_block_stmt","","",9,[[["blockstmt",3]]]],[11,"visit_while_stmt","","",9,[[["whilestmt",3]]]],[11,"visit_if_stmt","","",9,[[["ifstmt",3]]]],[11,"visit_expr_stmt","","",9,[[["expr",4]]]],[11,"visit_decl_stmt","","",9,[[["declstmt",3]]]],[11,"visit_return_stmt","","",9,[[["returnstmt",3]]]],[11,"visit_break_stmt","","",9,[[["span",3]]]],[11,"visit_continue_stmt","","",9,[[["span",3]]]],[11,"visit_empty_stmt","","",9,[[["span",3]]]]],"p":[[4,"Error"],[13,"WrongParamLength"],[13,"TypeMismatch"],[3,"StringInterner"],[3,"NumberingCounter"],[3,"Variable"],[3,"ScopeBuilder"],[3,"Scope"],[3,"BreakTarget"],[3,"FuncCompiler"]]},\
"azuki_tacvm":{"doc":"","i":[[0,"inspector","azuki_tacvm","",null,null],[8,"Inspector","azuki_tacvm::inspector","Trait for collecting data about the code running.",null,null],[10,"before_inst","","Called before every instruction is runned.",0,[[["inst",3],["frame",3]]]],[10,"before_branch","","Called before every instruction is runned.",0,[[["branch",4],["frame",3]]]],[10,"before_call","","Called before every function call.",0,[[["tacfunc",3]]]],[10,"before_ret","","Called after every function is returned",0,[[["frame",3]]]],[0,"value","azuki_tacvm","",null,null],[4,"Value","azuki_tacvm::value","",null,null],[13,"Int","","",1,null],[13,"StackPointer","","",1,null],[12,"frame","azuki_tacvm::value::Value","",2,null],[12,"value","","",2,null],[12,"offset","","",2,null],[13,"HeapPointer","azuki_tacvm::value","",1,null],[3,"Vm","azuki_tacvm","",null,null],[12,"program","","",3,null],[12,"stack","","",3,null],[12,"inspectors","","",3,null],[3,"Frame","","",null,null],[12,"func","","",4,null],[12,"last_bb","","",4,null],[12,"bb","","",4,null],[12,"params","","",4,null],[12,"instruction","","",4,null],[12,"vars","","",4,null],[11,"eval","","",4,[[["value",4]],["option",4]]],[11,"move_to","","",4,[[["bbid",3]]]],[11,"bb","","Get a reference to the frame\'s bb.",4,[[],["bbid",3]]],[11,"last_bb","","Get a reference to the frame\'s last bb.",4,[[],["bbid",3]]],[11,"func","","Get a reference to the frame\'s func.",4,[[],["tacfunc",3]]],[11,"instruction","","Get a reference to the frame\'s instruction.",4,[[],[["option",4],["inst",3]]]],[11,"vars","","Get a reference to the frame\'s vars.",4,[[],["hashmap",3]]],[4,"CurrInst","","",null,null],[13,"Instruction","","",5,null],[13,"Jump","","",5,null],[4,"JumpAction","","",null,null],[13,"Goto","","",6,null],[13,"Return","","",6,null],[13,"Error","","",6,null],[11,"new","","",3,[[["program",3]],["vm",3]]],[11,"add_inspector_boxed","","",3,[[["rc",3],["refcell",3]]]],[11,"run_func","","",3,[[["vec",3]],["option",4]]],[11,"run_till_return","","",3,[[],["option",4]]],[11,"run_inst_in_curr_func","","",3,[[["instid",6]]]],[11,"run_binary_inst","","",3,[[["binaryinst",3],["frame",3]],["option",4]]],[11,"run_jump_inst","","",3,[[],[["option",4],["option",4]]]],[11,"from","azuki_tacvm::value","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","azuki_tacvm","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",5,[[["option",4],["instid",6]]]]],"p":[[8,"Inspector"],[4,"Value"],[13,"StackPointer"],[3,"Vm"],[3,"Frame"],[4,"CurrInst"],[4,"JumpAction"]]},\
"azvm":{"doc":"","i":[[3,"Opt","azvm","",null,null],[12,"file","","",0,null],[12,"debug","","",0,null],[12,"entry_point","","",0,null],[12,"entry_params","","",0,null],[12,"instruction_count","","",0,null],[5,"main","","",null,[[]]],[3,"InstCounter","","",null,null],[12,"0","","",1,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"before_inst","","",1,[[["inst",3],["frame",3]]]],[11,"before_branch","","",1,[[["branch",4],["frame",3]]]],[11,"before_call","","",1,[[["tacfunc",3]]]],[11,"before_ret","","",1,[[["frame",3]]]],[11,"into_app","","",0,[[],["app",3]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_arg_matches","","",0,[[["argmatches",3]]]]],"p":[[3,"Opt"],[3,"InstCounter"]]},\
"beef":{"doc":"Faster, more compact implementation of <code>Cow</code>.","i":[[0,"generic","beef","This module contains the actual, albeit generic, …",null,null],[3,"Cow","beef::generic","A clone-on-write smart pointer, mostly compatible with …",null,null],[11,"owned","","Owned data.",0,[[]]],[11,"borrowed","","Borrowed data.",0,[[]]],[11,"into_owned","","Extracts the owned data.",0,[[]]],[11,"unwrap_borrowed","","Extracts borrowed data.",0,[[]]],[11,"is_borrowed","","Returns <code>true</code> if data is borrowed or had no capacity.",0,[[]]],[11,"is_owned","","Returns <code>true</code> if data is owned and has non-0 capacity.",0,[[]]],[11,"const_str","","Borrowed data.",0,[[]]],[11,"const_str","","Borrowed data.",0,[[]]],[0,"lean","beef","Namespace containing the 2-word <code>Cow</code> implementation.",null,null],[6,"Cow","beef::lean","Faster, 2-word <code>Cow</code>. This version is available only on …",null,null],[6,"Cow","beef","Compact three word <code>Cow</code> that puts the ownership tag in …",null,null],[11,"from","beef::generic","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"deref","","",0,[[]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[["string",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["stdcow",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["cow",3]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["string",3]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["vec",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[["cow",3]],[["ordering",4],["option",4]]]],[11,"drop","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"clone","","",0,[[]]],[11,"default","","",0,[[]]]],"p":[[3,"Cow"]]},\
"bit_set":{"doc":"An implementation of a set using a bit vector as an …","i":[[3,"BitSet","bit_set","",null,null],[11,"new","","Creates a new empty <code>BitSet</code>.",0,[[]]],[11,"with_capacity","","Creates a new <code>BitSet</code> with initially no contents, able to …",0,[[]]],[11,"from_bit_vec","","Creates a new <code>BitSet</code> from the given bit vector.",0,[[["bitvec",3]]]],[11,"from_bytes","","",0,[[]]],[11,"capacity","","Returns the capacity in bits for this bit vector. …",0,[[]]],[11,"reserve_len","","Reserves capacity for the given <code>BitSet</code> to contain <code>len</code> …",0,[[]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given <code>BitSet</code> to …",0,[[]]],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,[[],["bitvec",3]]],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,[[],["bitvec",3]]],[11,"shrink_to_fit","","Truncates the underlying vector to the least length …",0,[[]]],[11,"iter","","Iterator over each usize stored in the <code>BitSet</code>.",0,[[],["iter",3]]],[11,"union","","Iterator over each usize stored in <code>self</code> union <code>other</code>. See …",0,[[],["union",3]]],[11,"intersection","","Iterator over each usize stored in <code>self</code> intersect <code>other</code>. …",0,[[],["intersection",3]]],[11,"difference","","Iterator over each usize stored in the <code>self</code> setminus <code>other</code>…",0,[[],["difference",3]]],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric …",0,[[],["symmetricdifference",3]]],[11,"union_with","","Unions in-place with the specified other bit vector.",0,[[]]],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,[[]]],[11,"difference_with","","Makes this bit vector the difference with the specified …",0,[[]]],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the …",0,[[]]],[11,"len","","Returns the number of set bits in this set.",0,[[]]],[11,"is_empty","","Returns whether there are no bits set in this set",0,[[]]],[11,"clear","","Clears all bits in this set",0,[[]]],[11,"contains","","Returns <code>true</code> if this set contains the specified integer.",0,[[]]],[11,"is_disjoint","","Returns <code>true</code> if the set has no elements in common with …",0,[[]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another.",0,[[]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another.",0,[[]]],[11,"insert","","Adds a value to the set. Returns <code>true</code> if the value was …",0,[[]]],[11,"remove","","Removes a value from the set. Returns <code>true</code> if the value …",0,[[]]],[3,"Iter","","An iterator for <code>BitSet</code>.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"into_iter","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"hash","","",0,[[]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"clone","","",0,[[]]],[11,"clone_from","","",0,[[]]],[11,"clone","","",1,[[],["iter",3]]],[11,"clone","","",2,[[],["union",3]]],[11,"clone","","",3,[[],["intersection",3]]],[11,"clone","","",4,[[],["difference",3]]],[11,"clone","","",5,[[],["symmetricdifference",3]]],[11,"default","","",0,[[]]]],"p":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]},\
"bit_vec":{"doc":"Collections implemented with bit vectors.","i":[[8,"BitBlock","bit_vec","Abstracts over a pile of bits (basically unsigned …",null,null],[10,"bits","","How many bits it has",0,[[]]],[11,"bytes","","How many bytes it has",0,[[]]],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,[[]]],[10,"count_ones","","Count the number of 1\'s in the bitwise repr",0,[[]]],[10,"zero","","Get <code>0</code>",0,[[]]],[10,"one","","Get <code>1</code>",0,[[]]],[3,"BitVec","","The bitvector type.",null,null],[11,"new","","Creates an empty <code>BitVec</code>.",1,[[]]],[11,"from_elem","","Creates a <code>BitVec</code> that holds <code>nbits</code> elements, setting each …",1,[[]]],[11,"with_capacity","","Constructs a new, empty <code>BitVec</code> with the specified …",1,[[]]],[11,"from_bytes","","Transforms a byte-vector into a <code>BitVec</code>. Each byte becomes …",1,[[]]],[11,"from_fn","","Creates a <code>BitVec</code> of the specified length where the value …",1,[[]]],[11,"blocks","","Iterator over the underlying blocks of data",1,[[],["blocks",3]]],[11,"storage","","Exposes the raw block storage of this BitVec",1,[[]]],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,[[],["vec",3]]],[11,"get","","Retrieves the value at index <code>i</code>, or <code>None</code> if the index is …",1,[[],["option",4]]],[11,"set","","Sets the value of a bit at an index <code>i</code>.",1,[[]]],[11,"set_all","","Sets all bits to 1.",1,[[]]],[11,"negate","","Flips all bits.",1,[[]]],[11,"union","","Calculates the union of two bitvectors. This acts like …",1,[[]]],[11,"intersect","","Calculates the intersection of two bitvectors. This acts …",1,[[]]],[11,"or","","Calculates the bitwise <code>or</code> of two bitvectors.",1,[[]]],[11,"and","","Calculates the bitwise <code>and</code> of two bitvectors.",1,[[]]],[11,"difference","","Calculates the difference between two bitvectors.",1,[[]]],[11,"xor","","Calculates the xor of two bitvectors.",1,[[]]],[11,"nand","","Calculates the nand of two bitvectors.",1,[[]]],[11,"nor","","Calculates the nor of two bitvectors.",1,[[]]],[11,"xnor","","Calculates the xnor of two bitvectors.",1,[[]]],[11,"all","","Returns <code>true</code> if all bits are 1.",1,[[]]],[11,"iter","","Returns an iterator over the elements of the vector in …",1,[[],["iter",3]]],[11,"append","","Moves all bits from <code>other</code> into <code>Self</code>, leaving <code>other</code> empty.",1,[[]]],[11,"split_off","","Splits the <code>BitVec</code> into two at the given bit, retaining …",1,[[]]],[11,"none","","Returns <code>true</code> if all bits are 0.",1,[[]]],[11,"any","","Returns <code>true</code> if any bit is 1.",1,[[]]],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in …",1,[[],["vec",3]]],[11,"eq_vec","","Compares a <code>BitVec</code> to a slice of <code>bool</code>s. Both the <code>BitVec</code> …",1,[[]]],[11,"truncate","","Shortens a <code>BitVec</code>, dropping excess elements.",1,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more bits to be …",1,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",1,[[]]],[11,"capacity","","Returns the capacity in bits for this bit vector. …",1,[[]]],[11,"grow","","Grows the <code>BitVec</code> in-place, adding <code>n</code> copies of <code>value</code> to …",1,[[]]],[11,"pop","","Removes the last bit from the BitVec, and returns it. …",1,[[],["option",4]]],[11,"push","","Pushes a <code>bool</code> onto the end.",1,[[]]],[11,"len","","Returns the total number of bits in this vector",1,[[]]],[11,"set_len","","Sets the number of bits that this BitVec considers …",1,[[]]],[11,"is_empty","","Returns true if there are no bits in this vector",1,[[]]],[11,"clear","","Clears all bits in this vector.",1,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the underlying storage as much as …",1,[[]]],[3,"Iter","","An iterator for <code>BitVec</code>.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a <code>BitVec</code>.",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"partial_cmp","","",1,[[],[["ordering",4],["option",4]]]],[11,"index","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"into_iter","","",1,[[],["intoiter",3]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",2,[[],["iter",3]]],[11,"clone","","",4,[[],["blocks",3]]],[11,"default","","",1,[[]]]],"p":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","i":[[8,"ByteOrder","byteorder","<code>ByteOrder</code> describes types that can serialize integers as …",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from <code>buf</code>.",0,[[]]],[11,"read_u24","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.",0,[[]]],[10,"read_u32","","Reads an unsigned 32 bit integer from <code>buf</code>.",0,[[]]],[11,"read_u48","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.",0,[[]]],[10,"read_u64","","Reads an unsigned 64 bit integer from <code>buf</code>.",0,[[]]],[10,"read_u128","","Reads an unsigned 128 bit integer from <code>buf</code>.",0,[[]]],[10,"read_uint","","Reads an unsigned n-bytes integer from <code>buf</code>.",0,[[]]],[10,"read_uint128","","Reads an unsigned n-bytes integer from <code>buf</code>.",0,[[]]],[10,"write_u16","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[11,"write_u24","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.",0,[[]]],[10,"write_u32","","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[11,"write_u48","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.",0,[[]]],[10,"write_u64","","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[10,"write_u128","","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[10,"write_uint","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[]]],[10,"write_uint128","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[]]],[11,"read_i16","","Reads a signed 16 bit integer from <code>buf</code>.",0,[[]]],[11,"read_i24","","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.",0,[[]]],[11,"read_i32","","Reads a signed 32 bit integer from <code>buf</code>.",0,[[]]],[11,"read_i48","","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.",0,[[]]],[11,"read_i64","","Reads a signed 64 bit integer from <code>buf</code>.",0,[[]]],[11,"read_i128","","Reads a signed 128 bit integer from <code>buf</code>.",0,[[]]],[11,"read_int","","Reads a signed n-bytes integer from <code>buf</code>.",0,[[]]],[11,"read_int128","","Reads a signed n-bytes integer from <code>buf</code>.",0,[[]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point …",0,[[]]],[11,"write_i16","","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[11,"write_i24","","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.",0,[[]]],[11,"write_i32","","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[11,"write_i48","","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.",0,[[]]],[11,"write_i64","","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[11,"write_i128","","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.",0,[[]]],[11,"write_int","","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[]]],[11,"write_int128","","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating …",0,[[]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating …",0,[[]]],[10,"read_u16_into","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"read_u32_into","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"read_u64_into","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"read_u128_into","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_i16_into","","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.",0,[[]]],[11,"read_i32_into","","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_i64_into","","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_i128_into","","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_f32_into","","Reads IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"read_f32_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[]]],[11,"read_f64_into","","Reads IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"read_f64_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[]]],[10,"write_u16_into","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"write_u32_into","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"write_u64_into","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"write_u128_into","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i8_into","","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i16_into","","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i32_into","","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i64_into","","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i128_into","","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point …",0,[[]]],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a …",0,[[]]],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a …",0,[[]]],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a …",0,[[]]],[10,"from_slice_u128","","Converts the given slice of unsigned 128 bit integers to …",0,[[]]],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a …",0,[[]]],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a …",0,[[]]],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a …",0,[[]]],[11,"from_slice_i128","","Converts the given slice of signed 128 bit integers to a …",0,[[]]],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 …",0,[[]]],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 …",0,[[]]],[4,"BigEndian","","Defines big-endian serialization.",null,null],[6,"BE","","A type alias for <code>BigEndian</code>.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"LE","","A type alias for <code>LittleEndian</code>.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"read_u16","","",1,[[]]],[11,"read_u32","","",1,[[]]],[11,"read_u64","","",1,[[]]],[11,"read_u128","","",1,[[]]],[11,"read_uint","","",1,[[]]],[11,"read_uint128","","",1,[[]]],[11,"write_u16","","",1,[[]]],[11,"write_u32","","",1,[[]]],[11,"write_u64","","",1,[[]]],[11,"write_u128","","",1,[[]]],[11,"write_uint","","",1,[[]]],[11,"write_uint128","","",1,[[]]],[11,"read_u16_into","","",1,[[]]],[11,"read_u32_into","","",1,[[]]],[11,"read_u64_into","","",1,[[]]],[11,"read_u128_into","","",1,[[]]],[11,"write_u16_into","","",1,[[]]],[11,"write_u32_into","","",1,[[]]],[11,"write_u64_into","","",1,[[]]],[11,"write_u128_into","","",1,[[]]],[11,"from_slice_u16","","",1,[[]]],[11,"from_slice_u32","","",1,[[]]],[11,"from_slice_u64","","",1,[[]]],[11,"from_slice_u128","","",1,[[]]],[11,"from_slice_f32","","",1,[[]]],[11,"from_slice_f64","","",1,[[]]],[11,"read_u16","","",2,[[]]],[11,"read_u32","","",2,[[]]],[11,"read_u64","","",2,[[]]],[11,"read_u128","","",2,[[]]],[11,"read_uint","","",2,[[]]],[11,"read_uint128","","",2,[[]]],[11,"write_u16","","",2,[[]]],[11,"write_u32","","",2,[[]]],[11,"write_u64","","",2,[[]]],[11,"write_u128","","",2,[[]]],[11,"write_uint","","",2,[[]]],[11,"write_uint128","","",2,[[]]],[11,"read_u16_into","","",2,[[]]],[11,"read_u32_into","","",2,[[]]],[11,"read_u64_into","","",2,[[]]],[11,"read_u128_into","","",2,[[]]],[11,"write_u16_into","","",2,[[]]],[11,"write_u32_into","","",2,[[]]],[11,"write_u64_into","","",2,[[]]],[11,"write_u128_into","","",2,[[]]],[11,"from_slice_u16","","",2,[[]]],[11,"from_slice_u32","","",2,[[]]],[11,"from_slice_u64","","",2,[[]]],[11,"from_slice_u128","","",2,[[]]],[11,"from_slice_f32","","",2,[[]]],[11,"from_slice_f64","","",2,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[["bigendian",4]]]],[11,"eq","","",2,[[["littleendian",4]]]],[11,"cmp","","",1,[[["bigendian",4]],["ordering",4]]],[11,"cmp","","",2,[[["littleendian",4]],["ordering",4]]],[11,"partial_cmp","","",1,[[["bigendian",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["littleendian",4]],[["option",4],["ordering",4]]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"clone","","",1,[[],["bigendian",4]]],[11,"clone","","",2,[[],["littleendian",4]]],[11,"default","","",1,[[],["bigendian",4]]],[11,"default","","",2,[[],["littleendian",4]]]],"p":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate …",null,null]],"p":[]},\
"chrono":{"doc":"Chrono: Date and Time for RustIt aims to be a …","i":[[0,"prelude","chrono","A convenience module appropriate for glob imports (…",null,null],[0,"offset","","The time zone, which calculates offsets from the local …",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the …",null,null],[13,"None","","Given local time representation is invalid. This can …",0,null],[13,"Single","","Given local time representation has a single unique …",0,null],[13,"Ambiguous","","Given local time representation has multiple results and …",0,null],[11,"single","","Returns <code>Some</code> only when the conversion result is unique, …",0,[[],["option",4]]],[11,"earliest","","Returns <code>Some</code> for the earliest possible conversion result, …",0,[[],["option",4]]],[11,"latest","","Returns <code>Some</code> for the latest possible conversion result, …",0,[[],["option",4]]],[11,"map","","Maps a <code>LocalResult<T></code> into <code>LocalResult<U></code> with given …",0,[[["fnmut",8]],["localresult",4]]],[11,"and_time","","Makes a new <code>DateTime</code> from the current date and given …",0,[[["naivetime",3]],[["localresult",4],["datetime",3]]]],[11,"and_hms_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute …",0,[[],[["localresult",4],["datetime",3]]]],[11,"and_hms_milli_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[],[["localresult",4],["datetime",3]]]],[11,"and_hms_micro_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[],[["localresult",4],["datetime",3]]]],[11,"and_hms_nano_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[],[["localresult",4],["datetime",3]]]],[11,"unwrap","","Returns the single unique conversion result, or panics …",0,[[]]],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time …",1,[[],["fixedoffset",3]]],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the …",2,null],[11,"ymd","","Makes a new <code>Date</code> from year, month, day and the current …",2,[[],["date",3]]],[11,"ymd_opt","","Makes a new <code>Date</code> from year, month, day and the current …",2,[[],[["date",3],["localresult",4]]]],[11,"yo","","Makes a new <code>Date</code> from year, day of year (DOY or …",2,[[],["date",3]]],[11,"yo_opt","","Makes a new <code>Date</code> from year, day of year (DOY or …",2,[[],[["date",3],["localresult",4]]]],[11,"isoywd","","Makes a new <code>Date</code> from ISO week date (year and week …",2,[[["weekday",4]],["date",3]]],[11,"isoywd_opt","","Makes a new <code>Date</code> from ISO week date (year and week …",2,[[["weekday",4]],[["date",3],["localresult",4]]]],[11,"timestamp","","Makes a new <code>DateTime</code> from the number of non-leap seconds …",2,[[],["datetime",3]]],[11,"timestamp_opt","","Makes a new <code>DateTime</code> from the number of non-leap seconds …",2,[[],[["localresult",4],["datetime",3]]]],[11,"timestamp_millis","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[],["datetime",3]]],[11,"timestamp_millis_opt","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[],[["localresult",4],["datetime",3]]]],[11,"timestamp_nanos","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[],["datetime",3]]],[11,"datetime_from_str","","Parses a string with the specified format string and …",2,[[],[["parseresult",6],["datetime",3]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",2,[[]]],[10,"offset_from_local_date","","Creates the offset(s) for given local <code>NaiveDate</code> if …",2,[[["naivedate",3]],["localresult",4]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …",2,[[["naivedatetime",3]],["localresult",4]]],[11,"from_local_date","","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> …",2,[[["naivedate",3]],[["date",3],["localresult",4]]]],[11,"from_local_datetime","","Converts the local <code>NaiveDateTime</code> to the timezone-aware …",2,[[["naivedatetime",3]],[["localresult",4],["datetime",3]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …",2,[[["naivedate",3]]]],[10,"offset_from_utc_datetime","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …",2,[[["naivedatetime",3]]]],[11,"from_utc_date","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …",2,[[["naivedate",3]],["date",3]]],[11,"from_utc_datetime","","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …",2,[[["naivedatetime",3]],["datetime",3]]],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to …",null,null],[3,"Local","","The local timescale. This is implemented via the standard …",null,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone …",null,null],[0,"naive","chrono","Date and time types unconcerned with timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every …",null,null],[17,"MAX_DATE","","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).",null,null],[17,"MIN_DATE","","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[17,"MAX_DATETIME","","The maximum possible <code>NaiveDateTime</code>.",null,null],[17,"MIN_DATETIME","","The minimum possible <code>NaiveDateTime</code>.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond …",null,null],[0,"format","chrono","Formatting (and parsing) utilities for date and time.",null,null],[0,"strftime","chrono::format","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting …",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for <code>strftime</code>-like format strings.",null,null],[11,"new","","Creates a new parsing iterator from the <code>strftime</code>-like …",3,[[],["strftimeitems",3]]],[5,"parse","chrono::format","Tries to parse given string into <code>parsed</code> with given …",null,[[["parsed",3]],["parseresult",6]]],[3,"Parsed","","Parsed parts of date and time. There are two classes of …",null,null],[12,"year","","Year.",4,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE …",4,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when …",4,null],[12,"isoyear","","Year in the ISO week date.",4,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that …",4,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the …",4,null],[12,"month","","Month (1--12).",4,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday …",4,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday …",4,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",4,null],[12,"weekday","","Day of the week.",4,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",4,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending …",4,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 …",4,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",4,null],[12,"minute","","Minute number (0--59).",4,null],[12,"second","","Second number (0--60, accounting for leap seconds).",4,null],[12,"nanosecond","","The number of nanoseconds since the whole second …",4,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on …",4,null],[12,"offset","","Offset from the local time to UTC, in seconds.",4,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",5,null],[13,"Zero","","Zero (<code>0</code>) padding.",5,null],[13,"Space","","Space padding.",5,null],[4,"Numeric","","Numeric item types. They have associated formatting width …",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years …",6,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). …",6,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",6,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept …",6,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). …",6,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot …",6,null],[13,"Month","","Month (FW=PW=2).",6,null],[13,"Day","","Day of the month (FW=PW=2).",6,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday …",6,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday …",6,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",6,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 …",6,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 …",6,null],[13,"Ordinal","","Day of the year (FW=PW=3).",6,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",6,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",6,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",6,null],[13,"Second","","The number of seconds since the last whole minute …",6,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second …",6,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on …",6,null],[13,"Internal","","Internal uses only.",6,null],[3,"InternalNumeric","","An opaque type representing numeric item types for …",null,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",7,null],[13,"LongMonthName","","Full month names.",7,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",7,null],[13,"LongWeekdayName","","Full day of the week names.",7,null],[13,"LowerAmPm","","AM/PM.",7,null],[13,"UpperAmPm","","AM/PM.",7,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned …",7,null],[13,"Nanosecond3","","Same as <code>Nanosecond</code> but the accuracy is fixed to 3.",7,null],[13,"Nanosecond6","","Same as <code>Nanosecond</code> but the accuracy is fixed to 6.",7,null],[13,"Nanosecond9","","Same as <code>Nanosecond</code> but the accuracy is fixed to 9.",7,null],[13,"TimezoneName","","Timezone name.",7,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …",7,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).",7,null],[13,"TimezoneOffset","","Same as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …",7,null],[13,"TimezoneOffsetZ","","Same as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …",7,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email …",7,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",7,null],[13,"Internal","","Internal uses only.",7,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for …",null,null],[4,"Item","","A single formatting item. This is used for both …",null,null],[13,"Literal","","A literally printed and parsed text.",8,null],[13,"OwnedLiteral","","Same as <code>Literal</code> but with the string owned by the item.",8,null],[13,"Space","","Whitespace. Prints literally but reads zero or more …",8,null],[13,"OwnedSpace","","Same as <code>Space</code> but with the string owned by the item.",8,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal …",8,null],[13,"Fixed","","Fixed-format item.",8,null],[13,"Error","","Issues a formatting error. Used to signal an invalid …",8,null],[3,"ParseError","","An error from the <code>parse</code> function.",null,null],[6,"ParseResult","","Same as <code>Result<T, ParseError></code>.",null,null],[5,"format_item","","Formats single formatting item",null,[[["option",4],["option",4],["naivedate",3],["naivetime",3],["item",4],["formatter",3],["option",4]],["result",6]]],[5,"format","","Tries to format given arguments with given formatting …",null,[[["option",4],["option",4],["naivedate",3],["naivetime",3],["formatter",3],["option",4]],["result",6]]],[3,"DelayedFormat","","A <em>temporary</em> object which can be used as an argument to …",null,null],[11,"new","","Makes a new <code>DelayedFormat</code> value out of local date and …",9,[[["naivetime",3],["option",4],["option",4],["naivedate",3]],["delayedformat",3]]],[11,"new_with_offset","","Makes a new <code>DelayedFormat</code> value out of local date and …",9,[[["naivetime",3],["option",4],["option",4],["naivedate",3]],["delayedformat",3]]],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This …",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[17,"MAX_DATE","","The maximum possible <code>Date</code>.",null,null],[17,"MIN_DATE","","The minimum possible <code>Date</code>.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[4,"SecondsFormat","","Specific formatting options for seconds. This may be …",null,null],[13,"Secs","","Format whole seconds only, with no decimal point nor …",10,null],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to …",10,null],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to …",10,null],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to …",10,null],[13,"AutoSi","","Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code>…",10,null],[17,"MAX_DATETIME","","The maximum possible <code>DateTime<Utc></code>.",null,null],[17,"MIN_DATETIME","","The minimum possible <code>DateTime<Utc></code>.",null,null],[8,"DurationRound","","Extension trait for rounding or truncating a DateTime by …",null,null],[16,"Err","","Error that can occur in rounding or truncating",11,null],[10,"duration_round","","Return a copy rounded by Duration.",11,[[["duration",3]],["result",4]]],[10,"duration_trunc","","Return a copy truncated by Duration.",11,[[["duration",3]],["result",4]]],[4,"RoundingError","","An error from rounding by <code>Duration</code>",null,null],[13,"DurationExceedsTimestamp","","Error when the Duration exceeds the Duration from or …",12,null],[13,"DurationExceedsLimit","","Error when <code>Duration.num_nanoseconds</code> exceeds the limit.",12,null],[13,"TimestampExceedsLimit","","Error when <code>DateTime.timestamp_nanos</code> exceeds the limit.",12,null],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a …",null,null],[10,"round_subsecs","","Return a copy rounded to the specified number of …",13,[[]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of …",13,[[]]],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",14,null],[13,"Tue","","Tuesday.",14,null],[13,"Wed","","Wednesday.",14,null],[13,"Thu","","Thursday.",14,null],[13,"Fri","","Friday.",14,null],[13,"Sat","","Saturday.",14,null],[13,"Sun","","Sunday.",14,null],[11,"succ","","The next day in the week.",14,[[],["weekday",4]]],[11,"pred","","The previous day in the week.",14,[[],["weekday",4]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. …",14,[[]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",14,[[]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",14,[[]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",14,[[]]],[3,"ParseWeekdayError","","An error resulting from reading <code>Weekday</code> value with <code>FromStr</code>…",null,null],[4,"Month","","The month of the year.",null,null],[13,"January","","January",15,null],[13,"February","","February",15,null],[13,"March","","March",15,null],[13,"April","","April",15,null],[13,"May","","May",15,null],[13,"June","","June",15,null],[13,"July","","July",15,null],[13,"August","","August",15,null],[13,"September","","September",15,null],[13,"October","","October",15,null],[13,"November","","November",15,null],[13,"December","","December",15,null],[11,"succ","","The next month.",15,[[],["month",4]]],[11,"pred","","The previous month.",15,[[],["month",4]]],[11,"number_from_month","","Returns a month-of-year number starting from January = 1.",15,[[]]],[11,"name","","Get the name of the month",15,[[]]],[3,"ParseMonthError","","An error resulting from reading <code><Month></code> value with <code>FromStr</code>…",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",16,[[]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a …",16,[[]]],[10,"month","","Returns the month number starting from 1.",16,[[]]],[10,"month0","","Returns the month number starting from 0.",16,[[]]],[10,"day","","Returns the day of month starting from 1.",16,[[]]],[10,"day0","","Returns the day of month starting from 0.",16,[[]]],[10,"ordinal","","Returns the day of year starting from 1.",16,[[]]],[10,"ordinal0","","Returns the day of year starting from 0.",16,[[]]],[10,"weekday","","Returns the day of week.",16,[[],["weekday",4]]],[10,"iso_week","","Returns the ISO week.",16,[[],["isoweek",3]]],[10,"with_year","","Makes a new value with the year number changed.",16,[[],["option",4]]],[10,"with_month","","Makes a new value with the month number (starting from 1) …",16,[[],["option",4]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) …",16,[[],["option",4]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) …",16,[[],["option",4]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) …",16,[[],["option",4]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) …",16,[[],["option",4]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) …",16,[[],["option",4]]],[11,"num_days_from_ce","","Counts the days in the proleptic Gregorian calendar, with …",16,[[]]],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",17,[[]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, …",17,[[]]],[10,"minute","","Returns the minute number from 0 to 59.",17,[[]]],[10,"second","","Returns the second number from 0 to 59.",17,[[]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole …",17,[[]]],[10,"with_hour","","Makes a new value with the hour number changed.",17,[[],["option",4]]],[10,"with_minute","","Makes a new value with the minute number changed.",17,[[],["option",4]]],[10,"with_second","","Makes a new value with the second number changed.",17,[[],["option",4]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole …",17,[[],["option",4]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","chrono::offset","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","chrono::naive","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","chrono","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","chrono::format","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","chrono::format::strftime","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","chrono::format","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","chrono","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"fix","chrono::offset","",19,[[],["fixedoffset",3]]],[11,"fix","","",21,[[],["fixedoffset",3]]],[11,"from_offset","","",19,[[["fixedoffset",3]],["fixedoffset",3]]],[11,"offset_from_local_date","","",19,[[["naivedate",3]],[["localresult",4],["fixedoffset",3]]]],[11,"offset_from_local_datetime","","",19,[[["naivedatetime",3]],[["localresult",4],["fixedoffset",3]]]],[11,"offset_from_utc_date","","",19,[[["naivedate",3]],["fixedoffset",3]]],[11,"offset_from_utc_datetime","","",19,[[["naivedatetime",3]],["fixedoffset",3]]],[11,"from_offset","","",20,[[["fixedoffset",3]],["local",3]]],[11,"offset_from_local_date","","",20,[[["naivedate",3]],[["localresult",4],["fixedoffset",3]]]],[11,"offset_from_local_datetime","","",20,[[["naivedatetime",3]],[["localresult",4],["fixedoffset",3]]]],[11,"offset_from_utc_date","","",20,[[["naivedate",3]],["fixedoffset",3]]],[11,"offset_from_utc_datetime","","",20,[[["naivedatetime",3]],["fixedoffset",3]]],[11,"from_local_date","","",20,[[["naivedate",3]],[["date",3],["localresult",4]]]],[11,"from_local_datetime","","",20,[[["naivedatetime",3]],[["datetime",3],["localresult",4]]]],[11,"from_utc_date","","",20,[[["naivedate",3]],[["local",3],["date",3]]]],[11,"from_utc_datetime","","",20,[[["naivedatetime",3]],[["datetime",3],["local",3]]]],[11,"from_offset","","",21,[[["utc",3]],["utc",3]]],[11,"offset_from_local_date","","",21,[[["naivedate",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",21,[[["naivedatetime",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_utc_date","","",21,[[["naivedate",3]],["utc",3]]],[11,"offset_from_utc_datetime","","",21,[[["naivedatetime",3]],["utc",3]]],[11,"duration_round","chrono","",27,[[["duration",3]],["result",4]]],[11,"duration_trunc","","",27,[[["duration",3]],["result",4]]],[11,"year","chrono::naive","Returns the year number in the calendar date.",22,[[]]],[11,"month","","Returns the month number starting from 1.",22,[[]]],[11,"month0","","Returns the month number starting from 0.",22,[[]]],[11,"day","","Returns the day of month starting from 1.",22,[[]]],[11,"day0","","Returns the day of month starting from 0.",22,[[]]],[11,"ordinal","","Returns the day of year starting from 1.",22,[[]]],[11,"ordinal0","","Returns the day of year starting from 0.",22,[[]]],[11,"weekday","","Returns the day of week.",22,[[],["weekday",4]]],[11,"iso_week","","",22,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDate</code> with the year number changed.",22,[[],[["option",4],["naivedate",3]]]],[11,"with_month","","Makes a new <code>NaiveDate</code> with the month number (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_month0","","Makes a new <code>NaiveDate</code> with the month number (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_day","","Makes a new <code>NaiveDate</code> with the day of month (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_day0","","Makes a new <code>NaiveDate</code> with the day of month (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_ordinal","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",22,[[],[["option",4],["naivedate",3]]]],[11,"year","","Returns the year number in the calendar date.",23,[[]]],[11,"month","","Returns the month number starting from 1.",23,[[]]],[11,"month0","","Returns the month number starting from 0.",23,[[]]],[11,"day","","Returns the day of month starting from 1.",23,[[]]],[11,"day0","","Returns the day of month starting from 0.",23,[[]]],[11,"ordinal","","Returns the day of year starting from 1.",23,[[]]],[11,"ordinal0","","Returns the day of year starting from 0.",23,[[]]],[11,"weekday","","Returns the day of week.",23,[[],["weekday",4]]],[11,"iso_week","","",23,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDateTime</code> with the year number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_month","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_month0","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_day","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_day0","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"year","chrono","",26,[[]]],[11,"month","","",26,[[]]],[11,"month0","","",26,[[]]],[11,"day","","",26,[[]]],[11,"day0","","",26,[[]]],[11,"ordinal","","",26,[[]]],[11,"ordinal0","","",26,[[]]],[11,"weekday","","",26,[[],["weekday",4]]],[11,"iso_week","","",26,[[],["isoweek",3]]],[11,"with_year","","",26,[[],[["date",3],["option",4]]]],[11,"with_month","","",26,[[],[["date",3],["option",4]]]],[11,"with_month0","","",26,[[],[["date",3],["option",4]]]],[11,"with_day","","",26,[[],[["date",3],["option",4]]]],[11,"with_day0","","",26,[[],[["date",3],["option",4]]]],[11,"with_ordinal","","",26,[[],[["date",3],["option",4]]]],[11,"with_ordinal0","","",26,[[],[["date",3],["option",4]]]],[11,"year","","",27,[[]]],[11,"month","","",27,[[]]],[11,"month0","","",27,[[]]],[11,"day","","",27,[[]]],[11,"day0","","",27,[[]]],[11,"ordinal","","",27,[[]]],[11,"ordinal0","","",27,[[]]],[11,"weekday","","",27,[[],["weekday",4]]],[11,"iso_week","","",27,[[],["isoweek",3]]],[11,"with_year","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_month","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_month0","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_day","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_day0","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_ordinal","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_ordinal0","","",27,[[],[["option",4],["datetime",3]]]],[11,"hour","chrono::naive","Returns the hour number from 0 to 23.",23,[[]]],[11,"minute","","Returns the minute number from 0 to 59.",23,[[]]],[11,"second","","Returns the second number from 0 to 59.",23,[[]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",23,[[]]],[11,"with_hour","","Makes a new <code>NaiveDateTime</code> with the hour number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_minute","","Makes a new <code>NaiveDateTime</code> with the minute number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_second","","Makes a new <code>NaiveDateTime</code> with the second number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_nanosecond","","Makes a new <code>NaiveDateTime</code> with nanoseconds since the …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"hour","","Returns the hour number from 0 to 23.",25,[[]]],[11,"minute","","Returns the minute number from 0 to 59.",25,[[]]],[11,"second","","Returns the second number from 0 to 59.",25,[[]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",25,[[]]],[11,"with_hour","","Makes a new <code>NaiveTime</code> with the hour number changed.",25,[[],[["naivetime",3],["option",4]]]],[11,"with_minute","","Makes a new <code>NaiveTime</code> with the minute number changed.",25,[[],[["naivetime",3],["option",4]]]],[11,"with_second","","Makes a new <code>NaiveTime</code> with the second number changed.",25,[[],[["naivetime",3],["option",4]]]],[11,"with_nanosecond","","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …",25,[[],[["naivetime",3],["option",4]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",25,[[]]],[11,"hour","chrono","",27,[[]]],[11,"minute","","",27,[[]]],[11,"second","","",27,[[]]],[11,"nanosecond","","",27,[[]]],[11,"with_hour","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_minute","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_second","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_nanosecond","","",27,[[],[["option",4],["datetime",3]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a …",27,[[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a <code>DateTime<Local></code>…",27,[[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",27,[[["datetime",3],["fixedoffset",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",27,[[["datetime",3],["fixedoffset",3]]]],[11,"from","","Convert this <code>DateTime<Local></code> instance into a <code>DateTime<Utc></code>…",27,[[["datetime",3],["local",3]]]],[11,"from","","Convert this <code>DateTime<Local></code> instance into a …",27,[[["datetime",3],["local",3]]]],[11,"from","","",27,[[["systemtime",3]],[["datetime",3],["utc",3]]]],[11,"from","","",27,[[["systemtime",3]],[["datetime",3],["local",3]]]],[11,"next","chrono::format::strftime","",3,[[],[["item",4],["option",4]]]],[11,"clone","chrono","",18,[[],["duration",3]]],[11,"clone","chrono::offset","",0,[[],["localresult",4]]],[11,"clone","","",19,[[],["fixedoffset",3]]],[11,"clone","","",20,[[],["local",3]]],[11,"clone","","",21,[[],["utc",3]]],[11,"clone","chrono::naive","",22,[[],["naivedate",3]]],[11,"clone","","",23,[[],["naivedatetime",3]]],[11,"clone","","",24,[[],["isoweek",3]]],[11,"clone","","",25,[[],["naivetime",3]]],[11,"clone","chrono","",26,[[],["date",3]]],[11,"clone","","",10,[[],["secondsformat",4]]],[11,"clone","","",27,[[],["datetime",3]]],[11,"clone","chrono::format","",5,[[],["pad",4]]],[11,"clone","","",6,[[],["numeric",4]]],[11,"clone","","",28,[[]]],[11,"clone","","",7,[[],["fixed",4]]],[11,"clone","","",29,[[],["internalfixed",3]]],[11,"clone","","",8,[[],["item",4]]],[11,"clone","","",30,[[],["parseerror",3]]],[11,"clone","","",4,[[],["parsed",3]]],[11,"clone","chrono::format::strftime","",3,[[],["strftimeitems",3]]],[11,"clone","chrono","",12,[[],["roundingerror",4]]],[11,"clone","","",14,[[],["weekday",4]]],[11,"clone","","",31,[[],["parseweekdayerror",3]]],[11,"clone","","",15,[[],["month",4]]],[11,"clone","","",32,[[],["parsemontherror",3]]],[11,"default","chrono::format","",4,[[],["parsed",3]]],[11,"cmp","chrono","",18,[[["duration",3]],["ordering",4]]],[11,"cmp","chrono::naive","",22,[[["naivedate",3]],["ordering",4]]],[11,"cmp","","",23,[[["naivedatetime",3]],["ordering",4]]],[11,"cmp","","",24,[[["isoweek",3]],["ordering",4]]],[11,"cmp","","",25,[[["naivetime",3]],["ordering",4]]],[11,"cmp","chrono","",26,[[["date",3]],["ordering",4]]],[11,"cmp","","",27,[[["datetime",3]],["ordering",4]]],[11,"eq","","",18,[[["duration",3]]]],[11,"ne","","",18,[[["duration",3]]]],[11,"eq","chrono::offset","",0,[[["localresult",4]]]],[11,"ne","","",0,[[["localresult",4]]]],[11,"eq","","",19,[[["fixedoffset",3]]]],[11,"ne","","",19,[[["fixedoffset",3]]]],[11,"eq","","",21,[[["utc",3]]]],[11,"eq","chrono::naive","",22,[[["naivedate",3]]]],[11,"ne","","",22,[[["naivedate",3]]]],[11,"eq","","",23,[[["naivedatetime",3]]]],[11,"ne","","",23,[[["naivedatetime",3]]]],[11,"eq","","",24,[[["isoweek",3]]]],[11,"ne","","",24,[[["isoweek",3]]]],[11,"eq","","",25,[[["naivetime",3]]]],[11,"ne","","",25,[[["naivetime",3]]]],[11,"eq","chrono","",26,[[["date",3]]]],[11,"eq","","",10,[[["secondsformat",4]]]],[11,"eq","","",27,[[["datetime",3]]]],[11,"eq","chrono::format","",5,[[["pad",4]]]],[11,"eq","","",6,[[["numeric",4]]]],[11,"ne","","",6,[[["numeric",4]]]],[11,"eq","","",28,[[["internalnumeric",3]]]],[11,"eq","","",7,[[["fixed",4]]]],[11,"ne","","",7,[[["fixed",4]]]],[11,"eq","","",29,[[["internalfixed",3]]]],[11,"ne","","",29,[[["internalfixed",3]]]],[11,"eq","","",8,[[["item",4]]]],[11,"ne","","",8,[[["item",4]]]],[11,"eq","","",30,[[["parseerror",3]]]],[11,"ne","","",30,[[["parseerror",3]]]],[11,"eq","","",4,[[["parsed",3]]]],[11,"ne","","",4,[[["parsed",3]]]],[11,"eq","chrono","",12,[[["roundingerror",4]]]],[11,"eq","","",14,[[["weekday",4]]]],[11,"eq","","",31,[[["parseweekdayerror",3]]]],[11,"ne","","",31,[[["parseweekdayerror",3]]]],[11,"eq","","",15,[[["month",4]]]],[11,"eq","","",32,[[["parsemontherror",3]]]],[11,"ne","","",32,[[["parsemontherror",3]]]],[11,"partial_cmp","","",18,[[["duration",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["duration",3]]]],[11,"le","","",18,[[["duration",3]]]],[11,"gt","","",18,[[["duration",3]]]],[11,"ge","","",18,[[["duration",3]]]],[11,"partial_cmp","chrono::naive","",22,[[["naivedate",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["naivedate",3]]]],[11,"le","","",22,[[["naivedate",3]]]],[11,"gt","","",22,[[["naivedate",3]]]],[11,"ge","","",22,[[["naivedate",3]]]],[11,"partial_cmp","","",23,[[["naivedatetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["naivedatetime",3]]]],[11,"le","","",23,[[["naivedatetime",3]]]],[11,"gt","","",23,[[["naivedatetime",3]]]],[11,"ge","","",23,[[["naivedatetime",3]]]],[11,"partial_cmp","","",24,[[["isoweek",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["isoweek",3]]]],[11,"le","","",24,[[["isoweek",3]]]],[11,"gt","","",24,[[["isoweek",3]]]],[11,"ge","","",24,[[["isoweek",3]]]],[11,"partial_cmp","","",25,[[["naivetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["naivetime",3]]]],[11,"le","","",25,[[["naivetime",3]]]],[11,"gt","","",25,[[["naivetime",3]]]],[11,"ge","","",25,[[["naivetime",3]]]],[11,"partial_cmp","chrono","",26,[[["date",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","Compare two DateTimes based on their true time, ignoring …",27,[[["datetime",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::offset","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::naive","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format::strftime","",3,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",9,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::offset","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::naive","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"div","","",18,[[],["duration",3]]],[11,"sub","","",18,[[["duration",3]],["duration",3]]],[11,"sub","chrono::naive","",25,[[["fixedoffset",3]],["naivetime",3]]],[11,"sub","","",23,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"sub","chrono","",27,[[["fixedoffset",3]],["datetime",3]]],[11,"sub","chrono::naive","",22,[[["oldduration",3]],["naivedate",3]]],[11,"sub","","",22,[[["naivedate",3]],["oldduration",3]]],[11,"sub","","",23,[[["oldduration",3]],["naivedatetime",3]]],[11,"sub","","",23,[[["naivedatetime",3]],["oldduration",3]]],[11,"sub","","",25,[[["oldduration",3]],["naivetime",3]]],[11,"sub","","",25,[[["naivetime",3]],["oldduration",3]]],[11,"sub","chrono","",26,[[["oldduration",3]],["date",3]]],[11,"sub","","",26,[[["date",3]],["oldduration",3]]],[11,"sub","","",27,[[["oldduration",3]],["datetime",3]]],[11,"sub","","",27,[[["datetime",3]],["oldduration",3]]],[11,"add","","",18,[[["duration",3]],["duration",3]]],[11,"add","chrono::naive","",25,[[["fixedoffset",3]],["naivetime",3]]],[11,"add","","",23,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"add","chrono","",27,[[["fixedoffset",3]],["datetime",3]]],[11,"add","chrono::naive","",22,[[["oldduration",3]],["naivedate",3]]],[11,"add","","",23,[[["oldduration",3]],["naivedatetime",3]]],[11,"add","","",25,[[["oldduration",3]],["naivetime",3]]],[11,"add","chrono","",26,[[["oldduration",3]],["date",3]]],[11,"add","","",27,[[["oldduration",3]],["datetime",3]]],[11,"mul","","",18,[[],["duration",3]]],[11,"neg","","",18,[[],["duration",3]]],[11,"add_assign","chrono::naive","",22,[[["oldduration",3]]]],[11,"add_assign","","",23,[[["oldduration",3]]]],[11,"add_assign","","",25,[[["oldduration",3]]]],[11,"sub_assign","","",22,[[["oldduration",3]]]],[11,"sub_assign","","",23,[[["oldduration",3]]]],[11,"sub_assign","","",25,[[["oldduration",3]]]],[11,"hash","chrono::offset","",0,[[]]],[11,"hash","","",19,[[]]],[11,"hash","chrono::naive","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",25,[[]]],[11,"hash","chrono","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"from_str","chrono::naive","",22,[[],[["naivedate",3],["parseresult",6]]]],[11,"from_str","","",23,[[],[["parseresult",6],["naivedatetime",3]]]],[11,"from_str","","",25,[[],[["parseresult",6],["naivetime",3]]]],[11,"from_str","chrono","",27,[[],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",27,[[],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",27,[[],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",14,[[],["result",4]]],[11,"from_str","","",15,[[],["result",4]]],[11,"description","chrono::format","",30,[[]]],[11,"description","chrono","",12,[[]]],[11,"from_i64","","",14,[[],[["option",4],["weekday",4]]]],[11,"from_u64","","",14,[[],[["option",4],["weekday",4]]]],[11,"from_u64","","Returns an Option from a i64, assuming a 1-index, January …",15,[[],[["month",4],["option",4]]]],[11,"from_i64","","",15,[[],[["month",4],["option",4]]]],[11,"from_u32","","",15,[[],[["month",4],["option",4]]]],[11,"weeks","","Makes a new <code>Duration</code> with given number of weeks. …",18,[[],["duration",3]]],[11,"days","","Makes a new <code>Duration</code> with given number of days. …",18,[[],["duration",3]]],[11,"hours","","Makes a new <code>Duration</code> with given number of hours. …",18,[[],["duration",3]]],[11,"minutes","","Makes a new <code>Duration</code> with given number of minutes. …",18,[[],["duration",3]]],[11,"seconds","","Makes a new <code>Duration</code> with given number of seconds. Panics …",18,[[],["duration",3]]],[11,"milliseconds","","Makes a new <code>Duration</code> with given number of milliseconds.",18,[[],["duration",3]]],[11,"microseconds","","Makes a new <code>Duration</code> with given number of microseconds.",18,[[],["duration",3]]],[11,"nanoseconds","","Makes a new <code>Duration</code> with given number of nanoseconds.",18,[[],["duration",3]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",18,[[]]],[11,"num_days","","Returns the total number of whole days in the duration.",18,[[]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",18,[[]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",18,[[]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",18,[[]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the …",18,[[]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the …",18,[[],["option",4]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the …",18,[[],["option",4]]],[11,"checked_add","","Add two durations, returning <code>None</code> if overflow occurred.",18,[[["duration",3]],[["option",4],["duration",3]]]],[11,"checked_sub","","Subtract two durations, returning <code>None</code> if overflow …",18,[[["duration",3]],[["option",4],["duration",3]]]],[11,"abs","","Returns the duration as an absolute (non-negative) value.",18,[[],["duration",3]]],[11,"min_value","","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.",18,[[],["duration",3]]],[11,"max_value","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.",18,[[],["duration",3]]],[11,"zero","","A duration where the stored seconds and nanoseconds are …",18,[[],["duration",3]]],[11,"is_zero","","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.",18,[[]]],[11,"from_std","","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>",18,[[["stdduration",3]],[["duration",3],["result",4],["outofrangeerror",3]]]],[11,"to_std","","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>",18,[[],[["result",4],["stdduration",3],["outofrangeerror",3]]]],[11,"east","chrono::offset","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",19,[[],["fixedoffset",3]]],[11,"east_opt","","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",19,[[],[["option",4],["fixedoffset",3]]]],[11,"west","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",19,[[],["fixedoffset",3]]],[11,"west_opt","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",19,[[],[["option",4],["fixedoffset",3]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC …",19,[[]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the …",19,[[]]],[11,"today","","Returns a <code>Date</code> which corresponds to the current date.",20,[[],[["local",3],["date",3]]]],[11,"now","","Returns a <code>DateTime</code> which corresponds to the current date.",20,[[],[["datetime",3],["local",3]]]],[11,"today","","Returns a <code>Date</code> which corresponds to the current date.",21,[[],[["utc",3],["date",3]]]],[11,"now","","Returns a <code>DateTime</code> which corresponds to the current date.",21,[[],[["datetime",3],["utc",3]]]],[11,"from_ymd","chrono::naive","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",22,[[],["naivedate",3]]],[11,"from_ymd_opt","","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",22,[[],[["option",4],["naivedate",3]]]],[11,"from_yo","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",22,[[],["naivedate",3]]],[11,"from_yo_opt","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",22,[[],[["option",4],["naivedate",3]]]],[11,"from_isoywd","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",22,[[["weekday",4]],["naivedate",3]]],[11,"from_isoywd_opt","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",22,[[["weekday",4]],[["option",4],["naivedate",3]]]],[11,"from_num_days_from_ce","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",22,[[],["naivedate",3]]],[11,"from_num_days_from_ce_opt","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",22,[[],[["option",4],["naivedate",3]]]],[11,"from_weekday_of_month","","Makes a new <code>NaiveDate</code> by counting the number of …",22,[[["weekday",4]],["naivedate",3]]],[11,"from_weekday_of_month_opt","","Makes a new <code>NaiveDate</code> by counting the number of …",22,[[["weekday",4]],[["option",4],["naivedate",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",22,[[],[["naivedate",3],["parseresult",6]]]],[11,"and_time","","Makes a new <code>NaiveDateTime</code> from the current date and given …",22,[[["naivetime",3]],["naivedatetime",3]]],[11,"and_hms","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_milli","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_micro","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_nano","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"succ","","Makes a new <code>NaiveDate</code> for the next calendar date.",22,[[],["naivedate",3]]],[11,"succ_opt","","Makes a new <code>NaiveDate</code> for the next calendar date.",22,[[],[["option",4],["naivedate",3]]]],[11,"pred","","Makes a new <code>NaiveDate</code> for the previous calendar date.",22,[[],["naivedate",3]]],[11,"pred_opt","","Makes a new <code>NaiveDate</code> for the previous calendar date.",22,[[],[["option",4],["naivedate",3]]]],[11,"checked_add_signed","","Adds the <code>days</code> part of given <code>Duration</code> to the current date.",22,[[["oldduration",3]],[["option",4],["naivedate",3]]]],[11,"checked_sub_signed","","Subtracts the <code>days</code> part of given <code>Duration</code> from the …",22,[[["oldduration",3]],[["option",4],["naivedate",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDate</code> from the current date. …",22,[[["naivedate",3]],["oldduration",3]]],[11,"format_with_items","","Formats the date with the specified formatting items. …",22,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",22,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"iter_days","","Returns an iterator that steps by days until the last …",22,[[],["naivedatedaysiterator",3]]],[11,"iter_weeks","","Returns an iterator that steps by weeks until the last …",22,[[],["naivedateweeksiterator",3]]],[11,"new","","Makes a new <code>NaiveDateTime</code> from date and time components. …",23,[[["naivetime",3],["naivedate",3]],["naivedatetime",3]]],[11,"from_timestamp","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",23,[[],["naivedatetime",3]]],[11,"from_timestamp_opt","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",23,[[],[["parseresult",6],["naivedatetime",3]]]],[11,"date","","Retrieves a date component.",23,[[],["naivedate",3]]],[11,"time","","Retrieves a time component.",23,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight …",23,[[]]],[11,"timestamp_millis","","Returns the number of non-leap <em>milliseconds</em> since …",23,[[]]],[11,"timestamp_nanos","","Returns the number of non-leap <em>nanoseconds</em> since midnight …",23,[[]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole …",23,[[]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole …",23,[[]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole …",23,[[]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",23,[[["oldduration",3]],[["option",4],["naivedatetime",3]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",23,[[["oldduration",3]],[["option",4],["naivedatetime",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDateTime</code> from the current date and …",23,[[["naivedatetime",3]],["oldduration",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",23,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",23,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"year","","Returns the year number for this ISO week.",24,[[]]],[11,"week","","Returns the ISO week number starting from 1.",24,[[]]],[11,"week0","","Returns the ISO week number starting from 0.",24,[[]]],[11,"from_hms","","Makes a new <code>NaiveTime</code> from hour, minute and second.",25,[[],["naivetime",3]]],[11,"from_hms_opt","","Makes a new <code>NaiveTime</code> from hour, minute and second.",25,[[],[["naivetime",3],["option",4]]]],[11,"from_hms_milli","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],["naivetime",3]]],[11,"from_hms_milli_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],[["naivetime",3],["option",4]]]],[11,"from_hms_micro","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],["naivetime",3]]],[11,"from_hms_micro_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],[["naivetime",3],["option",4]]]],[11,"from_hms_nano","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],["naivetime",3]]],[11,"from_hms_nano_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],[["naivetime",3],["option",4]]]],[11,"from_num_seconds_from_midnight","","Makes a new <code>NaiveTime</code> from the number of seconds since …",25,[[],["naivetime",3]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new <code>NaiveTime</code> from the number of seconds since …",25,[[],[["naivetime",3],["option",4]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",25,[[],[["parseresult",6],["naivetime",3]]]],[11,"overflowing_add_signed","","Adds given <code>Duration</code> to the current time, and also returns …",25,[[["oldduration",3]]]],[11,"overflowing_sub_signed","","Subtracts given <code>Duration</code> from the current time, and also …",25,[[["oldduration",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveTime</code> from the current time. …",25,[[["naivetime",3]],["oldduration",3]]],[11,"format_with_items","","Formats the time with the specified formatting items. …",25,[[],["delayedformat",3]]],[11,"format","","Formats the time with the specified format string. See …",25,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"from_utc","chrono","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The …",26,[[["naivedate",3]],["date",3]]],[11,"and_time","","Makes a new <code>DateTime</code> from the current date and given …",26,[[["naivetime",3]],[["option",4],["datetime",3]]]],[11,"and_hms","","Makes a new <code>DateTime</code> from the current date, hour, minute …",26,[[],["datetime",3]]],[11,"and_hms_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute …",26,[[],[["option",4],["datetime",3]]]],[11,"and_hms_milli","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],["datetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],[["option",4],["datetime",3]]]],[11,"and_hms_micro","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],["datetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],[["option",4],["datetime",3]]]],[11,"and_hms_nano","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],["datetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],[["option",4],["datetime",3]]]],[11,"succ","","Makes a new <code>Date</code> for the next date.",26,[[],["date",3]]],[11,"succ_opt","","Makes a new <code>Date</code> for the next date.",26,[[],[["date",3],["option",4]]]],[11,"pred","","Makes a new <code>Date</code> for the prior date.",26,[[],["date",3]]],[11,"pred_opt","","Makes a new <code>Date</code> for the prior date.",26,[[],[["date",3],["option",4]]]],[11,"offset","","Retrieves an associated offset from UTC.",26,[[]]],[11,"timezone","","Retrieves an associated time zone.",26,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",26,[[],[["timezone",8],["date",3]]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date.",26,[[["oldduration",3]],[["date",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date.",26,[[["oldduration",3]],[["date",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>Date</code> from the current date. Returns a …",26,[[["timezone",8],["date",3]],["oldduration",3]]],[11,"naive_utc","","Returns a view to the naive UTC date.",26,[[],["naivedate",3]]],[11,"naive_local","","Returns a view to the naive local date.",26,[[],["naivedate",3]]],[11,"format_with_items","","Formats the date with the specified formatting items.",26,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",26,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"from_utc","","Makes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …",27,[[["naivedatetime",3]],["datetime",3]]],[11,"date","","Retrieves a date component.",27,[[],["date",3]]],[11,"time","","Retrieves a time component. Unlike <code>date</code>, this is not …",27,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, …",27,[[]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January …",27,[[]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January …",27,[[]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second …",27,[[]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second …",27,[[]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second …",27,[[]]],[11,"offset","","Retrieves an associated offset from UTC.",27,[[]]],[11,"timezone","","Retrieves an associated time zone.",27,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",27,[[],[["datetime",3],["timezone",8]]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",27,[[["oldduration",3]],[["option",4],["datetime",3]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",27,[[["oldduration",3]],[["option",4],["datetime",3]]]],[11,"signed_duration_since","","Subtracts another <code>DateTime</code> from the current date and time.…",27,[[["datetime",3],["timezone",8]],["oldduration",3]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",27,[[],["naivedatetime",3]]],[11,"naive_local","","Returns a view to the naive local datetime.",27,[[],["naivedatetime",3]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as …",27,[[],[["datetime",3],["parseresult",6]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such …",27,[[],[["datetime",3],["parseresult",6]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",27,[[],[["datetime",3],["parseresult",6]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as …",27,[[],["string",3]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string …",27,[[],["string",3]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with …",27,[[["secondsformat",4]],["string",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",27,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",27,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"new","chrono::format","Returns the initial value of parsed parts.",4,[[],["parsed",3]]],[11,"set_year","","Tries to set the <code>year</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_year_div_100","","Tries to set the <code>year_div_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_year_mod_100","","Tries to set the <code>year_mod_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoyear","","Tries to set the <code>isoyear</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoyear_div_100","","Tries to set the <code>isoyear_div_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoyear_mod_100","","Tries to set the <code>isoyear_mod_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_month","","Tries to set the <code>month</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_week_from_sun","","Tries to set the <code>week_from_sun</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_week_from_mon","","Tries to set the <code>week_from_mon</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoweek","","Tries to set the <code>isoweek</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_weekday","","Tries to set the <code>weekday</code> field from given value.",4,[[["weekday",4]],["parseresult",6]]],[11,"set_ordinal","","Tries to set the <code>ordinal</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_day","","Tries to set the <code>day</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_ampm","","Tries to set the <code>hour_div_12</code> field from given value. (…",4,[[],["parseresult",6]]],[11,"set_hour12","","Tries to set the <code>hour_mod_12</code> field from given hour number …",4,[[],["parseresult",6]]],[11,"set_hour","","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …",4,[[],["parseresult",6]]],[11,"set_minute","","Tries to set the <code>minute</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_second","","Tries to set the <code>second</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_nanosecond","","Tries to set the <code>nanosecond</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_timestamp","","Tries to set the <code>timestamp</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_offset","","Tries to set the <code>offset</code> field from given value.",4,[[],["parseresult",6]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",4,[[],[["naivedate",3],["parseresult",6]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",4,[[],[["parseresult",6],["naivetime",3]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, …",4,[[],[["parseresult",6],["naivedatetime",3]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given …",4,[[],[["parseresult",6],["fixedoffset",3]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of …",4,[[],[["datetime",3],["parseresult",6]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of …",4,[[],[["datetime",3],["parseresult",6]]]]],"p":[[4,"LocalResult"],[8,"Offset"],[8,"TimeZone"],[3,"StrftimeItems"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"DelayedFormat"],[4,"SecondsFormat"],[8,"DurationRound"],[4,"RoundingError"],[8,"SubsecRound"],[4,"Weekday"],[4,"Month"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"],[3,"FixedOffset"],[3,"Local"],[3,"Utc"],[3,"NaiveDate"],[3,"NaiveDateTime"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"Date"],[3,"DateTime"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"ParseWeekdayError"],[3,"ParseMonthError"]]},\
"clap":{"doc":"https://github.com/clap-rs/clap","i":[[3,"App","clap","Represents a command line interface which is made up of …",null,null],[4,"AppSettings","","Application level settings, which affect how <code>App</code> operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should <em>not</em> …",0,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument <em>…",0,null],[13,"AllArgsOverrideSelf","","Specifies that all arguments override themselves. This is …",0,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is …",0,null],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where …",0,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which …",0,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid argument negates [subcomands…",0,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and …",0,null],[13,"SubcommandPrecedenceOverArg","","Instructs the parser to stop when encountering a …",0,null],[13,"ColoredHelp","","Uses colorized help messages.",0,null],[13,"ColorAuto","","Enables colored output only when the output is going to a …",0,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the …",0,null],[13,"ColorNever","","Disables colored output no matter if the output is going …",0,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into …",0,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when <code>--</code> or …",0,null],[13,"DisableHelpFlags","","Disables <code>-h</code> and <code>--help</code> <code>App</code> without affecting any of the …",0,null],[13,"DisableHelpSubcommand","","Disables the <code>help</code> subcommand",0,null],[13,"DisableVersion","","Disables <code>-V</code> and <code>--version</code> <code>App</code> without affecting any of …",0,null],[13,"DeriveDisplayOrder","","Displays the arguments and ``s in the help message in the …",0,null],[13,"GlobalVersion","","Specifies to use the version of the current command for …",0,null],[13,"Hidden","","Specifies that this `` should be hidden from help messages",0,null],[13,"HidePossibleValuesInHelp","","Tells <code>clap</code> <em>not</em> to print possible values when displaying …",0,null],[13,"HelpRequired","","Tells <code>clap</code> to panic if help strings are omitted",0,null],[13,"InferSubcommands","","Tries to match unknown args to partial <code>subcommands</code> or …",0,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first …",0,null],[13,"NextLineHelp","","Places the help string for all arguments on the line …",0,null],[13,"SubcommandsNegateReqs","","Allows ``s to override all requirements of the parent …",0,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before …",0,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be …",0,null],[13,"SubcommandRequired","","Allows specifying that if no `` is present at runtime, …",0,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a …",0,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more …",0,null],[13,"VersionlessSubcommands","","Disables <code>-V</code> and <code>--version</code> for all ``s (Defaults to <code>false</code>; …",0,null],[13,"WaitOnError","","Will display a message \\\"Press [ENTER]/[RETURN] to …",0,null],[13,"NoAutoHelp","","@TODO-v3: @docs write them...maybe rename",0,null],[13,"NoAutoVersion","","@TODO-v3: @docs write them...maybe rename",0,null],[3,"Arg","","The abstract representation of a command line argument. …",null,null],[3,"ArgGroup","","<code>ArgGroup</code>s are a family of related arguments and way for …",null,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, …",null,null],[13,"Required","","Specifies that an arg must be used",1,null],[13,"MultipleValues","","Allows an arg to accept multiple values",1,null],[13,"MultipleOccurrences","","Allows an arg to appear multiple times",1,null],[13,"AllowEmptyValues","","Allows an arg accept empty values such as <code>\\\"\\\"</code>",1,null],[13,"Hidden","","Hides an arg from the help message",1,null],[13,"TakesValue","","Allows an argument to take a value (such as <code>--option value</code>…",1,null],[13,"UseValueDelimiter","","Enables a delimiter to break up arguments …",1,null],[13,"NextLineHelp","","Tells an arg to display it\'s help on the line below the …",1,null],[13,"RequireDelimiter","","Says that arg <em>must</em> use a delimiter to separate values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help message",1,null],[13,"AllowHyphenValues","","Allows values that start with a hyphen",1,null],[13,"RequireEquals","","Requires that an equals be used to provide a value to an …",1,null],[13,"Last","","Says that a positional arg will be the last positional, …",1,null],[13,"HideDefaultValue","","Hides the default value from the help message",1,null],[13,"IgnoreCase","","Possible values become case insensitive",1,null],[13,"HideEnvValues","","Hides any values currently assigned to ENV variables in …",1,null],[13,"HiddenShortHelp","","The argument should <strong>not</strong> be shown in short help text",1,null],[13,"HiddenLongHelp","","The argument should <strong>not</strong> be shown in long help text",1,null],[4,"ValueHint","","Provides hints about argument types for shell command …",null,null],[13,"Unknown","","Default value if hint is not specified. Follows shell …",2,null],[13,"Other","","None of the hints below apply. Disables shell completion …",2,null],[13,"AnyPath","","Any existing path.",2,null],[13,"FilePath","","Path to a file.",2,null],[13,"DirPath","","Path to a directory.",2,null],[13,"ExecutablePath","","Path to an executable file.",2,null],[13,"CommandName","","Name of a command, without arguments. May be relative to …",2,null],[13,"CommandString","","A single string containing a command and its arguments.",2,null],[13,"CommandWithArguments","","Capture the remaining arguments as a command name and …",2,null],[13,"Username","","Name of a local operating system user.",2,null],[13,"Hostname","","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …",2,null],[13,"Url","","Complete web address.",2,null],[13,"EmailAddress","","Email address.",2,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"kind","","The type of error",3,null],[12,"info","","Additional information depending on the error kind, like …",3,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an <code>Arg</code> has a set of possible values, and the …",4,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or …",4,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [``] which …",4,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized `` which …",4,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an …",4,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument …",4,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument …",4,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an …",4,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of …",4,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict …",4,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more …",4,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by …",4,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or `` is required, as …",4,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an …",4,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid …",4,null],[13,"DisplayHelp","","Not a true \\\"error\\\" as it means <code>--help</code> or similar was used.…",4,null],[13,"DisplayVersion","","Not a true \\\"error\\\" as it means <code>--version</code> or similar was …",4,null],[13,"ArgumentNotFound","","Occurs when using the [<code>ArgMathes::value_of_t</code>] and friends …",4,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to …",4,null],[13,"Format","","Represents a Format error (which is a part of <code>Display</code>). …",4,null],[6,"Result","","Short hand for <code>Result</code> type",null,null],[3,"ArgMatches","","Used to get information about the arguments that were …",null,null],[3,"Indices","","An iterator for getting multiple indices out of an …",null,null],[3,"OsValues","","An iterator for getting multiple values out of an …",null,null],[3,"Values","","An iterator for getting multiple values out of an …",null,null],[8,"ArgEnum","","@TODO @release @docs",null,null],[18,"VARIANTS","","@TODO @release @docs",5,null],[10,"from_str","","@TODO @release @docs",5,[[],[["result",4],["string",3]]]],[8,"Clap","","The primary one-stop-shop trait used to create an …",null,null],[11,"parse","","Parse from <code>std::env::args_os()</code>, exit on error",6,[[]]],[11,"try_parse","","Parse from <code>std::env::args_os()</code>, return Err on error.",6,[[],[["result",4],["error",3]]]],[11,"parse_from","","Parse from iterator, exit on error",6,[[]]],[11,"try_parse_from","","Parse from iterator, return Err on error.",6,[[],[["result",4],["error",3]]]],[8,"FromArgMatches","","Converts an instance of <code>ArgMatches</code> to a consumer defined …",null,null],[10,"from_arg_matches","","It\'s common to have an \\\"application context\\\" struct …",7,[[["argmatches",3]]]],[8,"IntoApp","","Build an App according to the struct",null,null],[10,"into_app","","@TODO @release @docs",8,[[],["app",3]]],[10,"augment_clap","","@TODO @release @docs",8,[[["app",3]],["app",3]]],[8,"Subcommand","","@TODO @release @docs",null,null],[10,"from_subcommand","","@TODO @release @docs",9,[[["option",4]],["option",4]]],[10,"augment_subcommands","","@TODO @release @docs",9,[[["app",3]],["app",3]]],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at …",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your …",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml …",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at …",null,null],[14,"app_from_crate","","Allows you to build the <code>App</code> instance from your Cargo.toml …",null,null],[14,"clap_app","","Build <code>App</code>, <code>Arg</code> and <code>Group</code> with Usage-string like input but …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"equivalent","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",11,[[["arg",3]]]],[11,"from","","",11,[[]]],[11,"from","","",12,[[["arggroup",3]]]],[11,"from","","",3,[[["error",3]]]],[11,"from","","",3,[[["error",3]]]],[11,"next_back","","",14,[[],["option",4]]],[11,"next_back","","",15,[[],[["osstr",3],["option",4]]]],[11,"next_back","","",16,[[],["option",4]]],[11,"next","","",14,[[],["option",4]]],[11,"size_hint","","",14,[[]]],[11,"next","","",15,[[],[["osstr",3],["option",4]]]],[11,"size_hint","","",15,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"clone","","",0,[[],["appsettings",4]]],[11,"clone","","",10,[[],["app",3]]],[11,"clone","","",1,[[],["argsettings",4]]],[11,"clone","","",2,[[],["valuehint",4]]],[11,"clone","","",11,[[],["arg",3]]],[11,"clone","","",12,[[]]],[11,"clone","","",4,[[],["errorkind",4]]],[11,"clone","","",13,[[],["argmatches",3]]],[11,"clone","","",14,[[],["values",3]]],[11,"clone","","",15,[[],["osvalues",3]]],[11,"clone","","",16,[[],["indices",3]]],[11,"default","","",10,[[],["app",3]]],[11,"default","","",2,[[]]],[11,"default","","",11,[[],["arg",3]]],[11,"default","","",12,[[],["arggroup",3]]],[11,"default","","",13,[[]]],[11,"default","","",14,[[]]],[11,"default","","",15,[[]]],[11,"default","","",16,[[]]],[11,"cmp","","",11,[[["arg",3]],["ordering",4]]],[11,"eq","","",0,[[["appsettings",4]]]],[11,"eq","","",1,[[["argsettings",4]]]],[11,"eq","","",2,[[["valuehint",4]]]],[11,"eq","","",11,[[["arg",3]]]],[11,"eq","","",4,[[["errorkind",4]]]],[11,"partial_cmp","","",11,[[],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[],["result",4]]],[11,"from_str","","",1,[[],["result",4]]],[11,"from_str","","",2,[[],["result",4]]],[11,"parse","","Parse from <code>std::env::args_os()</code>, exit on error",6,[[]]],[11,"try_parse","","Parse from <code>std::env::args_os()</code>, return Err on error.",6,[[],[["result",4],["error",3]]]],[11,"parse_from","","Parse from iterator, exit on error",6,[[]]],[11,"try_parse_from","","Parse from iterator, return Err on error.",6,[[],[["result",4],["error",3]]]],[18,"VARIANTS","","@TODO @release @docs",5,null],[11,"get_name","","Get the name of the app.",10,[[]]],[11,"get_short_flag","","Get the short flag of the subcommand.",10,[[],["option",4]]],[11,"get_long_flag","","Get the long flag of the subcommand.",10,[[],["option",4]]],[11,"get_bin_name","","Get the name of the binary.",10,[[],["option",4]]],[11,"set_bin_name","","Set binary name. Uses <code>&mut self</code> instead of <code>self</code>.",10,[[["into",8],["string",3]]]],[11,"get_about","","Get the help message specified via <code>App::about</code>.",10,[[],["option",4]]],[11,"get_visible_aliases","","Iterate through the <em>visible</em> aliases for this subcommand.",10,[[]]],[11,"get_visible_short_flag_aliases","","Iterate through the <em>visible</em> short aliases for this …",10,[[]]],[11,"get_visible_long_flag_aliases","","Iterate through the <em>visible</em> short aliases for this …",10,[[]]],[11,"get_all_aliases","","Iterate through the set of <em>all</em> the aliases for this …",10,[[]]],[11,"get_all_short_flag_aliases","","Iterate through the set of <em>all</em> the short aliases for this …",10,[[]]],[11,"get_all_long_flag_aliases","","Iterate through the set of <em>all</em> the long aliases for this …",10,[[]]],[11,"get_subcommands","","Iterate through the set of subcommands, getting a …",10,[[]]],[11,"get_subcommands_mut","","Iterate through the set of subcommands, getting a mutable …",10,[[]]],[11,"get_arguments","","Iterate through the set of arguments.",10,[[]]],[11,"get_positionals","","Get the list of <em>positional</em> arguments.",10,[[]]],[11,"get_flags_with_no_heading","","Iterate through the <em>flags</em> that don\'t have custom heading.",10,[[]]],[11,"get_opts_with_no_heading","","Iterate through the <em>options</em> that don\'t have custom …",10,[[]]],[11,"get_arg_conflicts_with","","Get a list of all arguments the given argument conflicts …",10,[[["arg",3]],[["arg",3],["vec",3]]]],[11,"is_set","","Returns <code>true</code> if the given <code>AppSettings</code> variant is …",10,[[["appsettings",4]]]],[11,"has_subcommands","","Returns <code>true</code> if this <code>App</code> has subcommands.",10,[[]]],[11,"find_subcommand","","Find subcommand such that its name or one of aliases …",10,[[],[["option",4],["app",3]]]],[11,"new","","Creates a new instance of an <code>App</code> requiring a <code>name</code>.",10,[[["into",8],["string",3]]]],[11,"author","","Sets a string of author(s) that will be displayed to the …",10,[[["into",8]]]],[11,"bin_name","","Overrides the runtime-determined name of the binary. This …",10,[[["into",8],["string",3]]]],[11,"about","","Sets a string describing what the program does. This will …",10,[[["into",8]]]],[11,"long_about","","Sets a long format string describing what the program …",10,[[["into",8]]]],[11,"name","","(Re)Sets the program\'s name. This will be displayed when …",10,[[["into",8],["string",3]]]],[11,"after_help","","Adds additional help information to be displayed at the …",10,[[["into",8]]]],[11,"after_long_help","","Adds additional help information to be displayed in …",10,[[["into",8]]]],[11,"before_help","","Adds additional help information to be displayed prior to …",10,[[["into",8]]]],[11,"before_long_help","","Adds additional help information to be displayed prior to …",10,[[["into",8]]]],[11,"short_flag","","Allows the subcommand to be used as if it were an …",10,[[]]],[11,"long_flag","","Allows the subcommand to be used as if it were an …",10,[[]]],[11,"version","","Sets a string of the version number to be displayed when …",10,[[["into",8]]]],[11,"long_version","","Sets a string of the version number to be displayed when …",10,[[["into",8]]]],[11,"override_usage","","Overrides the <code>clap</code> generated usage string.",10,[[["into",8]]]],[11,"override_help","","Overrides the <code>clap</code> generated help message. This should …",10,[[["into",8]]]],[11,"help_template","","Sets the help template to be used, overriding the default …",10,[[["into",8]]]],[11,"setting","","Enables a single settings for the current (this <code>App</code> …",10,[[["appsettings",4]]]],[11,"unset_setting","","Disables a single setting for the current (this <code>App</code> …",10,[[["appsettings",4]]]],[11,"global_setting","","Enables a single setting that is propagated <strong>down</strong> through …",10,[[["appsettings",4]]]],[11,"unset_global_setting","","Disables a global setting, and stops propagating down to …",10,[[["appsettings",4]]]],[11,"term_width","","Sets the terminal width at which to wrap help messages. …",10,[[]]],[11,"max_term_width","","Sets the maximum terminal width at which to wrap help …",10,[[]]],[11,"arg","","Adds an argument to the list of valid possibilities.",10,[[["arg",3],["into",8]]]],[11,"help_heading","","Set a custom section heading for future args. Every call …",10,[[]]],[11,"stop_custom_headings","","Stop using custom argument headings and return to default …",10,[[]]],[11,"args","","Adds multiple arguments to the list of valid …",10,[[]]],[11,"alias","","If this <code>App</code> instance is a subcommand, this method adds an …",10,[[["into",8]]]],[11,"short_flag_alias","","Allows adding an alias, which function as \\\"hidden\\\" short …",10,[[]]],[11,"long_flag_alias","","Allows adding an alias, which function as \\\"hidden\\\" long …",10,[[]]],[11,"aliases","","If this <code>App</code> instance is a subcommand, this method adds a …",10,[[]]],[11,"short_flag_aliases","","Allows adding aliases, which function as \\\"hidden\\\" short …",10,[[]]],[11,"long_flag_aliases","","Allows adding aliases, which function as \\\"hidden\\\" long …",10,[[]]],[11,"visible_alias","","If this <code>App</code> instance is a subcommand, this method adds a …",10,[[["into",8]]]],[11,"visible_short_flag_alias","","Allows adding an alias that functions exactly like those …",10,[[]]],[11,"visible_long_flag_alias","","Allows adding an alias that functions exactly like those …",10,[[]]],[11,"visible_aliases","","If this <code>App</code> instance is a subcommand, this method adds …",10,[[]]],[11,"visible_short_flag_aliases","","Allows adding multiple short flag aliases that functions …",10,[[]]],[11,"visible_long_flag_aliases","","Allows adding multiple long flag aliases that functions …",10,[[]]],[11,"replace","","Replaces an argument or subcommand used on the CLI at …",10,[[]]],[11,"group","","Adds an <code>ArgGroup</code> to the application. <code>ArgGroup</code>s are a …",10,[[["arggroup",3]]]],[11,"groups","","Adds multiple <code>ArgGroup</code>s to the <code>App</code> at once.",10,[[]]],[11,"subcommand","","Adds a subcommand to the list of valid possibilities. …",10,[[["app",3]]]],[11,"subcommands","","Adds multiple subcommands to the list of valid …",10,[[]]],[11,"display_order","","Allows custom ordering of subcommands within the help …",10,[[]]],[11,"mut_arg","","Allows one to mutate an <code>Arg</code> after it\'s been added to an …",10,[[]]],[11,"print_help","","Prints the full help message to <code>io::stdout()</code> using a […",10,[[],["result",6]]],[11,"print_long_help","","Prints the full help message to <code>io::stdout()</code> using a …",10,[[],["result",6]]],[11,"write_help","","Writes the full help message to the user to a <code>io::Write</code> …",10,[[],["result",6]]],[11,"write_long_help","","Writes the full help message to the user to a <code>io::Write</code> …",10,[[],["result",6]]],[11,"render_version","","Returns the version message rendered as if the user ran <code>-V</code>…",10,[[],["string",3]]],[11,"render_long_version","","Returns the version message rendered as if the user ran …",10,[[],["string",3]]],[11,"generate_usage","","@TODO-v3-alpha @docs @p2: write docs",10,[[],["string",3]]],[11,"get_matches","","Starts the parsing process, upon a failed parse an error …",10,[[],["argmatches",3]]],[11,"get_matches_mut","","Starts the parsing process, just like <code>App::get_matches</code> …",10,[[],["argmatches",3]]],[11,"try_get_matches","","Starts the parsing process. This method will return a …",10,[[],[["clapresult",6],["argmatches",3]]]],[11,"get_matches_from","","Starts the parsing process. Like <code>App::get_matches</code> this …",10,[[],["argmatches",3]]],[11,"try_get_matches_from","","Starts the parsing process. A combination of …",10,[[],[["clapresult",6],["argmatches",3]]]],[11,"try_get_matches_from_mut","","Starts the parsing process without consuming the <code>App</code> …",10,[[],[["clapresult",6],["argmatches",3]]]],[11,"subcommand_placeholder","","Sets the placeholder text used for subcommands when …",10,[[]]],[11,"get_name","","Get the name of the argument",11,[[]]],[11,"get_about","","Get the help specified for this argument, if any",11,[[],["option",4]]],[11,"get_help_heading","","Get the help heading specified for this argument, if any",11,[[],["option",4]]],[11,"get_short","","Get the short option name for this argument, if any",11,[[],["option",4]]],[11,"get_visible_short_aliases","","Get visible short aliases for this argument, if any",11,[[],[["vec",3],["option",4]]]],[11,"get_long","","Get the long option name for this argument, if any",11,[[],["option",4]]],[11,"get_possible_values","","Get the list of the possible values for this argument, if …",11,[[],["option",4]]],[11,"get_index","","Get the index of this argument, if any",11,[[],["option",4]]],[11,"get_value_hint","","Get the value hint of this argument",11,[[],["valuehint",4]]],[11,"new","","Creates a new instance of <code>Arg</code> using a unique string name. …",11,[[["into",8]]]],[11,"short","","Sets the short version of the argument without the …",11,[[]]],[11,"long","","Sets the long version of the argument without the …",11,[[]]],[11,"alias","","Allows adding a <code>Arg</code> alias, which function as \\\"hidden\\\" …",11,[[["into",8]]]],[11,"short_alias","","Allows adding a <code>Arg</code> alias, which function as \\\"hidden\\\" …",11,[[]]],[11,"aliases","","Allows adding <code>Arg</code> aliases, which function as \\\"hidden\\\" …",11,[[]]],[11,"short_aliases","","Allows adding <code>Arg</code> aliases, which function as \\\"hidden\\\" …",11,[[]]],[11,"visible_alias","","Allows adding a <code>Arg</code> alias that functions exactly like …",11,[[["into",8]]]],[11,"visible_short_alias","","Allows adding a <code>Arg</code> alias that functions exactly like …",11,[[]]],[11,"visible_aliases","","Allows adding multiple <code>Arg</code> aliases that functions exactly …",11,[[]]],[11,"visible_short_aliases","","Allows adding multiple <code>Arg</code> aliases that functions exactly …",11,[[]]],[11,"about","","Sets the short help text of the argument that will be …",11,[[]]],[11,"long_about","","Sets the long help text of the argument that will be …",11,[[]]],[11,"required_unless_present","","Set this arg as required as long as the specified …",11,[[["key",8]]]],[11,"required_unless_present_all","","Sets this arg as [required] unless <em>all</em> of the specified …",11,[[]]],[11,"required_unless_present_any","","Sets this arg as required unless <em>any</em> of the specified …",11,[[]]],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this …",11,[[["key",8]]]],[11,"conflicts_with_all","","The same as <code>Arg::conflicts_with</code> but allows specifying …",11,[[]]],[11,"exclusive","","Set an exclusive argument by name. An exclusive argument …",11,[[]]],[11,"overrides_with","","Sets an overridable argument by name. I.e. this argument …",11,[[["key",8]]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. …",11,[[]]],[11,"requires","","Sets an argument by name that is required when this one …",11,[[["key",8]]]],[11,"requires_if","","Require another argument if this arg was present on …",11,[[["key",8]]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement …",11,[[]]],[11,"required_if_eq","","Allows specifying that this argument is required only if …",11,[[["key",8]]]],[11,"required_if_eq_any","","Allows specifying that this argument is required based on …",11,[[]]],[11,"requires_all","","Sets multiple arguments by names that are required when …",11,[[]]],[11,"index","","Specifies the index of a positional argument <strong>starting at</strong> …",11,[[]]],[11,"value_terminator","","Specifies a value that <em>stops</em> parsing multiple values of a …",11,[[]]],[11,"possible_values","","Specifies a list of possible values for this argument. At …",11,[[]]],[11,"possible_value","","Specifies a possible value for this argument, one at a …",11,[[]]],[11,"group","","Specifies the name of the <code>ArgGroup</code> the argument belongs …",11,[[["key",8]]]],[11,"groups","","Specifies the names of multiple <code>ArgGroup</code>\'s the argument …",11,[[]]],[11,"number_of_values","","Specifies how many values are required to satisfy this …",11,[[]]],[11,"validator","","Allows one to perform a custom validation on the argument …",11,[[]]],[11,"validator_os","","Works identically to Validator but is intended to be used …",11,[[]]],[11,"max_values","","Specifies the <em>maximum</em> number of values are for this …",11,[[]]],[11,"min_values","","Specifies the <em>minimum</em> number of values for this argument. …",11,[[]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped …",11,[[]]],[11,"value_names","","Specify multiple names for values of option arguments. …",11,[[]]],[11,"value_name","","Specifies the name for value of option or positional …",11,[[]]],[11,"default_value","","Specifies the value of the argument when <em>not</em> specified at …",11,[[]]],[11,"default_value_os","","Provides a default value in the exact same manner as […",11,[[["osstr",3]]]],[11,"default_values","","Like […",11,[[]]],[11,"default_values_os","","Provides default values in the exact same manner as […",11,[[]]],[11,"default_missing_value","","Specifies a value for the argument when the argument is …",11,[[]]],[11,"default_missing_value_os","","Provides a default value in the exact same manner as […",11,[[["osstr",3]]]],[11,"default_missing_values","","Like […",11,[[]]],[11,"default_missing_values_os","","Provides default values in the exact same manner as […",11,[[]]],[11,"default_value_if","","Specifies the value of the argument if <code>arg</code> has been used …",11,[[["key",8],["option",4]]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same …",11,[[["key",8],["option",4],["osstr",3]]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same …",11,[[]]],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact …",11,[[]]],[11,"env","","Specifies that if the value is not passed in as an …",11,[[]]],[11,"env_os","","Specifies that if the value is not passed in as an …",11,[[["osstr",3]]]],[11,"display_order","","Allows custom ordering of args within the help message. …",11,[[]]],[11,"last","","Specifies that this arg is the last, or final, positional …",11,[[]]],[11,"required","","Specifies that the argument is required by default. …",11,[[]]],[11,"takes_value","","Specifies that the argument takes a value at run time.",11,[[]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (<code>-</code>)",11,[[]]],[11,"require_equals","","Requires that options use the <code>--option=val</code> syntax (i.e. …",11,[[]]],[11,"global","","Specifies that an argument can be matched to all child ``…",11,[[]]],[11,"require_delimiter","","Specifies that <em>multiple values</em> may only be set using the …",11,[[]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be …",11,[[]]],[11,"hide_default_value","","Specifies that the default value of an argument should …",11,[[]]],[11,"hidden","","Hides an argument from help message output.",11,[[]]],[11,"case_insensitive","","When used with [<code>Arg::possible_values</code>] it allows the …",11,[[]]],[11,"use_delimiter","","Specifies that an argument should allow grouping of …",11,[[]]],[11,"hide_env_values","","Specifies that any values inside the associated ENV …",11,[[]]],[11,"next_line_help","","When set to <code>true</code> the help string will be displayed on the …",11,[[]]],[11,"multiple","","Specifies that the argument may have an unknown number of …",11,[[]]],[11,"multiple_values","","Allows an argument to accept explicitly empty values. An …",11,[[]]],[11,"multiple_occurrences","","Specifies that the argument may appear more than once. …",11,[[]]],[11,"raw","","Indicates that all parameters passed after this should …",11,[[]]],[11,"hidden_short_help","","Hides an argument from short help message output.",11,[[]]],[11,"hidden_long_help","","Hides an argument from long help message output.",11,[[]]],[11,"is_set","","Checks if one of the [<code>ArgSettings</code>] is set for the argument…",11,[[["argsettings",4]]]],[11,"setting","","Sets one of the [<code>ArgSettings</code>] settings for the argument […",11,[[["argsettings",4]]]],[11,"settings","","Sets multiple [<code>ArgSettings</code>] for the argument [<code>ArgSettings</code>]…",11,[[]]],[11,"unset_setting","","Unsets one of the [<code>ArgSettings</code>] for the argument […",11,[[["argsettings",4]]]],[11,"help_heading","","Set a custom heading for this arg to be printed under",11,[[["option",4]]]],[11,"value_hint","","Sets a hint about the type of the value for shell …",11,[[["valuehint",4]]]],[11,"new","","Creates a new instance of <code>ArgGroup</code> using a unique string …",12,[[["into",8]]]],[11,"arg","","Adds an argument to this group by name",12,[[["key",8]]]],[11,"args","","Adds multiple arguments to this group by name",12,[[]]],[11,"multiple","","Allows more than one of the \'Arg\'s in this group to be …",12,[[]]],[11,"required","","Sets the group as required or not. A required group will …",12,[[]]],[11,"requires","","Sets the requirement rules of this group. This is not to …",12,[[["key",8]]]],[11,"requires_all","","Sets the requirement rules of this group. This is not to …",12,[[]]],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka …",12,[[["key",8]]]],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules …",12,[[]]],[11,"use_stderr","","Should the message be written to <code>stdout</code> or not",3,[[]]],[11,"exit","","Prints the error to <code>stderr</code> and exits with a status of <code>1</code>",3,[[]]],[11,"with_description","","Create an error with a custom description.",3,[[["string",3],["errorkind",4]]]],[11,"value_of","","Gets the value of a specific option or positional …",13,[[["key",8]],["option",4]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the …",13,[[["key",8]],[["cow",4],["option",4]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific …",13,[[["key",8]],[["option",4],["osstr",3]]]],[11,"values_of","","Gets a <code>Values</code> struct which implements <code>Iterator</code> for values …",13,[[["key",8]],[["option",4],["values",3]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the …",13,[[["key",8]],[["vec",3],["option",4]]]],[11,"values_of_os","","Gets a [<code>OsValues</code>] struct which is implements [<code>Iterator</code>] …",13,[[["key",8]],[["option",4],["osvalues",3]]]],[11,"value_of_t","","Gets the value of a specific argument (i.e. an argument …",13,[[],[["result",4],["error",3]]]],[11,"value_of_t_or_exit","","Gets the value of a specific argument (i.e. an argument …",13,[[]]],[11,"values_of_t","","Gets the typed values of a specific argument (i.e. an …",13,[[],[["result",4],["error",3],["vec",3]]]],[11,"values_of_t_or_exit","","Gets the typed values of a specific argument (i.e. an …",13,[[],["vec",3]]],[11,"is_present","","Returns <code>true</code> if an argument was present at runtime, …",13,[[["key",8]]]],[11,"occurrences_of","","Returns the number of times an argument was used at …",13,[[["key",8]]]],[11,"index_of","","Gets the starting index of the argument in respect to all …",13,[[["key",8]],["option",4]]],[11,"indices_of","","Gets all indices of the argument in respect to all other …",13,[[["key",8]],[["option",4],["indices",3]]]],[11,"subcommand_matches","","Because <code>Subcommand</code>s are essentially \\\"sub-<code>App</code>s\\\" they have …",13,[[["key",8]],[["option",4],["argmatches",3]]]],[11,"subcommand_name","","Because <code>Subcommand</code>s are essentially \\\"sub-<code>App</code>s\\\" they have …",13,[[],["option",4]]],[11,"subcommand","","This brings together <code>ArgMatches::subcommand_matches</code> and …",13,[[],["option",4]]]],"p":[[4,"AppSettings"],[4,"ArgSettings"],[4,"ValueHint"],[3,"Error"],[4,"ErrorKind"],[8,"ArgEnum"],[8,"Clap"],[8,"FromArgMatches"],[8,"IntoApp"],[8,"Subcommand"],[3,"App"],[3,"Arg"],[3,"ArgGroup"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"Indices"]]},\
"clap_derive":{"doc":"This crate is custom derive for clap. It should not be …","i":[[24,"ArgEnum","clap_derive","Generates the <code>ArgEnum</code> impl.",null,null],[24,"Clap","","Generates the <code>Clap</code> implementation.",null,null],[24,"IntoApp","","Generates the <code>IntoApp</code> impl.",null,null],[24,"Subcommand","","Generates the <code>Subcommand</code> impl.",null,null]],"p":[]},\
"enum_as_inner":{"doc":"enum-as-innerA deriving proc-macro for generating …","i":[[24,"EnumAsInner","enum_as_inner","",null,null]],"p":[]},\
"fixedbitset":{"doc":"<code>FixedBitSet</code> is a simple fixed size set of bits.","i":[[8,"IndexRange","fixedbitset","<strong>IndexRange</strong> is implemented by Rust\'s built-in range types, …",null,null],[11,"start","","Start index (inclusive)",0,[[],["option",4]]],[11,"end","","End index (exclusive)",0,[[],["option",4]]],[3,"FixedBitSet","","<code>FixedBitSet</code> is a simple fixed size set of bits that each …",null,null],[11,"with_capacity","","Create a new <strong>FixedBitSet</strong> with a specific number of bits, …",1,[[]]],[11,"grow","","Grow capacity to <strong>bits</strong>, all new bits initialized to zero",1,[[]]],[11,"len","","Return the length of the <code>FixedBitSet</code> in bits.",1,[[]]],[11,"contains","","Return <strong>true</strong> if the bit is enabled in the <strong>FixedBitSet</strong>, <strong>…",1,[[]]],[11,"clear","","Clear all bits.",1,[[]]],[11,"insert","","Enable <code>bit</code>.",1,[[]]],[11,"put","","Enable <code>bit</code>, and return its previous value.",1,[[]]],[11,"toggle","","Toggle <code>bit</code> (inverting its state).",1,[[]]],[11,"set","","<strong>Panics</strong> if <strong>bit</strong> is out of bounds.",1,[[]]],[11,"copy_bit","","Copies boolean value from specified bit to the specified …",1,[[]]],[11,"count_ones","","Count the number of set bits in the given bit range.",1,[[["indexrange",8]]]],[11,"set_range","","Sets every bit in the given range to the given state (…",1,[[["indexrange",8]]]],[11,"insert_range","","Enables every bit in the given range.",1,[[["indexrange",8]]]],[11,"as_slice","","View the bitset as a slice of <code>u32</code> blocks",1,[[]]],[11,"as_mut_slice","","View the bitset as a mutable slice of <code>u32</code> blocks. Writing …",1,[[]]],[11,"ones","","Iterates over all enabled bits.",1,[[],["ones",3]]],[11,"intersection","","Returns a lazy iterator over the intersection of two …",1,[[["fixedbitset",3]],["intersection",3]]],[11,"union","","Returns a lazy iterator over the union of two <code>FixedBitSet</code>…",1,[[["fixedbitset",3]],["union",3]]],[11,"difference","","Returns a lazy iterator over the difference of two …",1,[[["fixedbitset",3]],["difference",3]]],[11,"symmetric_difference","","Returns a lazy iterator over the symmetric difference of …",1,[[["fixedbitset",3]],["symmetricdifference",3]]],[11,"union_with","","In-place union of two <code>FixedBitSet</code>s.",1,[[["fixedbitset",3]]]],[11,"intersect_with","","In-place intersection of two <code>FixedBitSet</code>s.",1,[[["fixedbitset",3]]]],[11,"symmetric_difference_with","","In-place symmetric difference of two <code>FixedBitSet</code>s.",1,[[["fixedbitset",3]]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>…",1,[[["fixedbitset",3]]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code>…",1,[[["fixedbitset",3]]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e. …",1,[[["fixedbitset",3]]]],[3,"Difference","","An iterator producing elements in the difference of two …",null,null],[3,"SymmetricDifference","","An iterator producing elements in the symmetric …",null,null],[3,"Intersection","","An iterator producing elements in the intersection of two …",null,null],[3,"Union","","An iterator producing elements in the union of two sets.",null,null],[3,"Ones","","An  iterator producing the indices of the set bit in a …",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[["fixedbitset",3]]]],[11,"ne","","",1,[[["fixedbitset",3]]]],[11,"cmp","","",1,[[["fixedbitset",3]],["ordering",4]]],[11,"partial_cmp","","",1,[[["fixedbitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["fixedbitset",3]]]],[11,"le","","",1,[[["fixedbitset",3]]]],[11,"gt","","",1,[[["fixedbitset",3]]]],[11,"ge","","",1,[[["fixedbitset",3]]]],[11,"bitand_assign","","",1,[[]]],[11,"bitor_assign","","",1,[[]]],[11,"bitxor_assign","","",1,[[]]],[11,"index","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"clone","","",1,[[]]],[11,"default","","",1,[[],["fixedbitset",3]]],[11,"start","","Start index (inclusive)",0,[[],["option",4]]],[11,"end","","End index (exclusive)",0,[[],["option",4]]]],"p":[[8,"IndexRange"],[3,"FixedBitSet"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Ones"]]},\
"fnv":{"doc":"An implementation of the [Fowler–Noll–Vo hash function…","i":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[11,"with_key","","Create an FNV hasher starting with a state corresponding …",0,[[],["fnvhasher",3]]],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A <code>HashMap</code> using a default FNV hasher.",null,null],[6,"FnvHashSet","","A <code>HashSet</code> using a default FNV hasher.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"default","","",0,[[],["fnvhasher",3]]],[11,"finish","","",0,[[]]],[11,"write","","",0,[[]]]],"p":[[3,"FnvHasher"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google\'s high-performance …","i":[[0,"raw","hashbrown","Experimental and unsafe <code>RawTable</code> API. This module is only …",null,null],[3,"Bucket","hashbrown::raw","A reference to a hash table bucket containing a <code>T</code>.",null,null],[3,"RawTable","","A raw hash table with an unsafe API.",null,null],[3,"RawIter","","Iterator which returns a raw pointer to every full bucket …",null,null],[3,"RawIntoIter","","Iterator which consumes a table and returns elements.",null,null],[3,"RawDrain","","Iterator which consumes elements without freeing the …",null,null],[3,"RawIterHash","","Iterator over occupied buckets that could match a given …",null,null],[0,"hash_map","hashbrown","A hash map implemented with quadratic probing and SIMD …",null,null],[4,"DefaultHashBuilder","hashbrown::hash_map","Dummy default hasher for <code>HashMap</code>.",null,null],[3,"HashMap","","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"Iter","","An iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>HashMap</code>.",null,null],[3,"Keys","","An iterator over the keys of a <code>HashMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>HashMap</code>.",null,null],[3,"Drain","","A draining iterator over the entries of a <code>HashMap</code>.",null,null],[3,"DrainFilter","","A draining iterator over entries of a <code>HashMap</code> which don\'t …",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>HashMap</code>.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a [<code>HashMap</code>] a key-value …",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",0,null],[13,"Vacant","","A vacant entry.",0,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawEntryBuilder","","A builder for computing where in a [<code>HashMap</code>] a key-value …",null,null],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",1,null],[13,"Vacant","","A vacant entry.",1,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[0,"hash_set","hashbrown","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"HashSet","hashbrown::hash_set","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"Iter","","An iterator over the items of a <code>HashSet</code>.",null,null],[3,"IntoIter","","An owning iterator over the items of a <code>HashSet</code>.",null,null],[3,"Drain","","A draining iterator over the items of a <code>HashSet</code>.",null,null],[3,"DrainFilter","","A draining iterator over entries of a <code>HashSet</code> which don\'t …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Union","","A lazy iterator producing elements in the union of <code>HashSet</code>…",null,null],[3,"HashMap","hashbrown","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"HashSet","","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[4,"TryReserveError","","The error type for <code>try_reserve</code> methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the …",2,null],[13,"AllocError","","The memory allocator returned an error",2,null],[12,"layout","hashbrown::TryReserveError","The layout of the allocation request that failed.",3,null],[11,"from","hashbrown::raw","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","hashbrown::hash_map","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"into_iter","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"into_iter","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"into_iter","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"into_iter","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"into_iter","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"into_iter","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"into_iter","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"into_iter","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","hashbrown::hash_set","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"into_iter","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"into_iter","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"into_iter","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"into_iter","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"into_iter","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"into_iter","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"into_iter","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"into_iter","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"from","hashbrown","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"fmt","hashbrown::hash_map","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","hashbrown::hash_set","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","hashbrown","",2,[[["formatter",3]],["result",6]]],[11,"eq","hashbrown::hash_map","",11,[[]]],[11,"eq","hashbrown::hash_set","",26,[[]]],[11,"eq","hashbrown","",2,[[["tryreserveerror",4]]]],[11,"ne","","",2,[[["tryreserveerror",4]]]],[11,"drop","hashbrown::raw","",5,[[]]],[11,"drop","","",7,[[]]],[11,"drop","","",8,[[]]],[11,"drop","hashbrown::hash_map","",18,[[]]],[11,"drop","hashbrown::hash_set","",30,[[]]],[11,"index","hashbrown::hash_map","Returns a reference to the value corresponding to the …",11,[[]]],[11,"len","","",12,[[]]],[11,"len","","",13,[[]]],[11,"len","","",14,[[]]],[11,"len","","",15,[[]]],[11,"len","","",16,[[]]],[11,"len","","",19,[[]]],[11,"len","","",17,[[]]],[11,"len","hashbrown::hash_set","",27,[[]]],[11,"len","","",28,[[]]],[11,"len","","",29,[[]]],[11,"from_iter","hashbrown::hash_map","",11,[[["intoiterator",8]]]],[11,"from_iter","hashbrown::hash_set","",26,[[["intoiterator",8]]]],[11,"next","hashbrown::raw","",6,[[],[["option",4],["bucket",3]]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],[["option",4],["bucket",3]]]],[11,"next","hashbrown::hash_map","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"size_hint","","",13,[[]]],[11,"next","","",14,[[],["option",4]]],[11,"size_hint","","",14,[[]]],[11,"next","","",15,[[],["option",4]]],[11,"size_hint","","",15,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"next","","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","hashbrown::hash_set","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","","",28,[[],["option",4]]],[11,"size_hint","","",28,[[]]],[11,"next","","",29,[[],["option",4]]],[11,"size_hint","","",29,[[]]],[11,"next","","",30,[[],["option",4]]],[11,"size_hint","","",30,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"size_hint","","",31,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"next","","",33,[[],["option",4]]],[11,"size_hint","","",33,[[]]],[11,"next","","",34,[[],["option",4]]],[11,"size_hint","","",34,[[]]],[11,"into_iter","hashbrown::raw","",5,[[],["rawintoiter",3]]],[11,"into_iter","hashbrown::hash_map","Creates a consuming iterator, that is, one that moves …",11,[[],["intoiter",3]]],[11,"into_iter","hashbrown::hash_set","Creates a consuming iterator, that is, one that moves …",26,[[],["intoiter",3]]],[11,"extend","hashbrown::hash_map","",11,[[["intoiterator",8]]]],[11,"extend","","",11,[[["intoiterator",8]]]],[11,"extend","hashbrown::hash_set","",26,[[["intoiterator",8]]]],[11,"extend","","",26,[[["intoiterator",8]]]],[11,"clone","hashbrown::raw","",4,[[]]],[11,"clone","","",5,[[]]],[11,"clone_from","","",5,[[]]],[11,"clone","","",6,[[]]],[11,"clone","hashbrown::hash_map","",11,[[]]],[11,"clone_from","","",11,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",15,[[]]],[11,"clone","","",16,[[]]],[11,"clone","hashbrown::hash_set","",26,[[]]],[11,"clone_from","","",26,[[]]],[11,"clone","","",27,[[]]],[11,"clone","","",31,[[]]],[11,"clone","","",32,[[]]],[11,"clone","","",33,[[]]],[11,"clone","","",34,[[]]],[11,"clone","hashbrown","",2,[[],["tryreserveerror",4]]],[11,"default","hashbrown::hash_map","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …",11,[[]]],[11,"default","hashbrown::hash_set","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …",26,[[]]],[11,"as_ptr","hashbrown::raw","",4,[[]]],[11,"drop","","",4,[[]]],[11,"read","","",4,[[]]],[11,"write","","",4,[[]]],[11,"as_ref","","",4,[[]]],[11,"as_mut","","",4,[[]]],[11,"copy_from_nonoverlapping","","",4,[[]]],[11,"new","","Creates a new empty hash table without allocating any …",5,[[]]],[11,"try_with_capacity","","Attempts to allocate a new hash table with at least …",5,[[],[["result",4],["tryreserveerror",4]]]],[11,"with_capacity","","Allocates a new hash table with at least enough capacity …",5,[[]]],[11,"data_end","","Returns pointer to one past last element of data table.",5,[[],["nonnull",3]]],[11,"bucket_index","","Returns the index of a bucket from a <code>Bucket</code>.",5,[[["bucket",3]]]],[11,"bucket","","Returns a pointer to an element in the table.",5,[[],["bucket",3]]],[11,"erase_no_drop","","Erases an element from the table without dropping it.",5,[[["bucket",3]]]],[11,"erase","","Erases an element from the table, dropping it in place.",5,[[["bucket",3]]]],[11,"erase_entry","","Finds and erases an element from the table, dropping it …",5,[[]]],[11,"remove","","Removes an element from the table, returning it.",5,[[["bucket",3]]]],[11,"remove_entry","","Finds and removes an element from the table, returning it.",5,[[],["option",4]]],[11,"clear_no_drop","","Marks all table buckets as empty without dropping their …",5,[[]]],[11,"clear","","Removes all elements from the table without freeing the …",5,[[]]],[11,"shrink_to","","Shrinks the table to fit <code>max(self.len(), min_size)</code> …",5,[[]]],[11,"reserve","","Ensures that at least <code>additional</code> items can be inserted …",5,[[]]],[11,"try_reserve","","Tries to ensure that at least <code>additional</code> items can be …",5,[[],[["result",4],["tryreserveerror",4]]]],[11,"insert","","Inserts a new element into the table, and returns its raw …",5,[[],["bucket",3]]],[11,"insert_entry","","Inserts a new element into the table, and returns a …",5,[[]]],[11,"insert_no_grow","","Inserts a new element into the table, without growing the …",5,[[],["bucket",3]]],[11,"replace_bucket_with","","Temporary removes a bucket, applying the given function …",5,[[["bucket",3]]]],[11,"find","","Searches for an element in the table.",5,[[],[["option",4],["bucket",3]]]],[11,"get","","Gets a reference to an element in the table.",5,[[],["option",4]]],[11,"get_mut","","Gets a mutable reference to an element in the table.",5,[[],["option",4]]],[11,"capacity","","Returns the number of elements the map can hold without …",5,[[]]],[11,"len","","Returns the number of elements in the table.",5,[[]]],[11,"buckets","","Returns the number of buckets in the table.",5,[[]]],[11,"iter","","Returns an iterator over every element in the table. It …",5,[[],["rawiter",3]]],[11,"iter_hash","","Returns an iterator over occupied buckets that could …",5,[[],["rawiterhash",3]]],[11,"drain","","Returns an iterator which removes all elements from the …",5,[[],["rawdrain",3]]],[11,"drain_iter_from","","Returns an iterator which removes all elements from the …",5,[[["rawiter",3]],["rawdrain",3]]],[11,"into_iter_from","","Returns an iterator which consumes all elements from the …",5,[[["rawiter",3]],["rawintoiter",3]]],[11,"clone_from_with_hasher","","Variant of <code>clone_from</code> to use when a hasher is available.",5,[[]]],[11,"reflect_remove","","Refresh the iterator so that it reflects a removal from …",6,[[["bucket",3]]]],[11,"reflect_insert","","Refresh the iterator so that it reflects an insertion …",6,[[["bucket",3]]]],[11,"iter","","",7,[[],["rawiter",3]]],[11,"iter","","",8,[[],["rawiter",3]]],[11,"with_hasher","hashbrown::hash_map","Creates an empty <code>HashMap</code> which will use the given hash …",11,[[]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashMap</code> with the specified capacity, …",11,[[]]],[11,"hasher","","Returns a reference to the map\'s <code>BuildHasher</code>.",11,[[]]],[11,"capacity","","Returns the number of elements the map can hold without …",11,[[]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The …",11,[[],["keys",3]]],[11,"values","","An iterator visiting all values in arbitrary order. The …",11,[[],["values",3]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary …",11,[[],["valuesmut",3]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary …",11,[[],["iter",3]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary …",11,[[],["itermut",3]]],[11,"len","","Returns the number of elements in the map.",11,[[]]],[11,"is_empty","","Returns <code>true</code> if the map contains no elements.",11,[[]]],[11,"drain","","Clears the map, returning all key-value pairs as an …",11,[[],["drain",3]]],[11,"retain","","Retains only the elements specified by the predicate.",11,[[]]],[11,"drain_filter","","Drains elements which are true under the given predicate, …",11,[[],["drainfilter",3]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the …",11,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",11,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",11,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It …",11,[[]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It …",11,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",11,[[],["entry",4]]],[11,"get","","Returns a reference to the value corresponding to the key.",11,[[],["option",4]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied …",11,[[],["option",4]]],[11,"get_key_value_mut","","Returns the key-value pair corresponding to the supplied …",11,[[],["option",4]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",11,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",11,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map.",11,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",11,[[],["option",4]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",11,[[],["option",4]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",11,[[],["rawentrybuildermut",3]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",11,[[],["rawentrybuilder",3]]],[11,"from_key","","Creates a <code>RawEntryMut</code> from the given key.",20,[[],["rawentrymut",4]]],[11,"from_key_hashed_nocheck","","Creates a <code>RawEntryMut</code> from the given key and its hash.",20,[[],["rawentrymut",4]]],[11,"from_hash","","Creates a <code>RawEntryMut</code> from the given hash.",20,[[],["rawentrymut",4]]],[11,"from_key","","Access an entry by key.",23,[[],["option",4]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",23,[[],["option",4]]],[11,"from_hash","","Access an entry by hash.",23,[[],["option",4]]],[11,"insert","","Sets the value of the entry, and returns a …",0,[[],["rawoccupiedentrymut",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",0,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",0,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",0,[[]]],[11,"and_replace_entry_with","","Provides shared access to the key and owned access to the …",0,[[]]],[11,"key","","Gets a reference to the key in the entry.",21,[[]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",21,[[]]],[11,"into_key","","Converts the entry into a mutable reference to the key in …",21,[[]]],[11,"get","","Gets a reference to the value in the entry.",21,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",21,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",21,[[]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",21,[[]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the …",21,[[]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to …",21,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",21,[[]]],[11,"insert_key","","Sets the value of the entry, and returns the entry\'s old …",21,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",21,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",21,[[]]],[11,"replace_entry_with","","Provides shared access to the key and owned access to the …",21,[[],["rawentrymut",4]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",22,[[]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry\'s key, …",22,[[]]],[11,"insert_with_hasher","","Set the value of an entry with a custom hasher function.",22,[[]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",1,[[],["occupiedentry",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",1,[[["fnonce",8]]]],[11,"or_insert_with_key","","Ensures a value is in the entry by inserting, if empty, …",1,[[["fnonce",8]]]],[11,"key","","Returns a reference to this entry\'s key.",1,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",1,[[]]],[11,"and_replace_entry_with","","Provides shared access to the key and owned access to the …",1,[[]]],[11,"or_default","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"key","","Gets a reference to the key in the entry.",24,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",24,[[]]],[11,"get","","Gets a reference to the value in the entry.",24,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",24,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",24,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",24,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",24,[[]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The …",24,[[]]],[11,"replace_key","","Replaces the key in the hash map with the key used to …",24,[[]]],[11,"replace_entry_with","","Provides shared access to the key and owned access to the …",24,[[],["entry",4]]],[11,"key","","Gets a reference to the key that would be used when …",25,[[]]],[11,"into_key","","Take ownership of the key.",25,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",25,[[]]],[11,"with_hasher","hashbrown::hash_set","Creates a new empty hash set which will use the given …",26,[[]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashSet</code> with the specified capacity, …",26,[[]]],[11,"capacity","","Returns the number of elements the set can hold without …",26,[[]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The …",26,[[],["iter",3]]],[11,"len","","Returns the number of elements in the set.",26,[[]]],[11,"is_empty","","Returns <code>true</code> if the set contains no elements.",26,[[]]],[11,"drain","","Clears the set, returning all elements in an iterator.",26,[[],["drain",3]]],[11,"retain","","Retains only the elements specified by the predicate.",26,[[]]],[11,"drain_filter","","Drains elements which are true under the given predicate, …",26,[[],["drainfilter",3]]],[11,"clear","","Clears the set, removing all values.",26,[[]]],[11,"hasher","","Returns a reference to the set\'s <code>BuildHasher</code>.",26,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",26,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",26,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It …",26,[[]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It …",26,[[]]],[11,"difference","","Visits the values representing the difference, i.e., the …",26,[[],["difference",3]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, …",26,[[],["symmetricdifference",3]]],[11,"intersection","","Visits the values representing the intersection, i.e., …",26,[[],["intersection",3]]],[11,"union","","Visits the values representing the union, i.e., all the …",26,[[],["union",3]]],[11,"contains","","Returns <code>true</code> if the set contains a value.",26,[[]]],[11,"get","","Returns a reference to the value in the set, if any, that …",26,[[],["option",4]]],[11,"get_or_insert","","Inserts the given <code>value</code> into the set if it is not …",26,[[]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given <code>value</code> into the set if …",26,[[]]],[11,"get_or_insert_with","","Inserts a value computed from <code>f</code> into the set if the given …",26,[[]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…",26,[[]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e., …",26,[[]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e., …",26,[[]]],[11,"insert","","Adds a value to the set.",26,[[]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",26,[[],["option",4]]],[11,"remove","","Removes a value from the set. Returns whether the value …",26,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",26,[[],["option",4]]]],"p":[[4,"RawEntryMut"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[3,"Bucket"],[3,"RawTable"],[3,"RawIter"],[3,"RawIntoIter"],[3,"RawDrain"],[3,"RawIterHash"],[4,"DefaultHashBuilder"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","i":[[8,"CamelCase","heck","This trait defines a camel case conversion.",null,null],[10,"to_camel_case","","Convert this type to camel case.",0,[[]]],[8,"KebabCase","","This trait defines a kebab case conversion.",null,null],[10,"to_kebab_case","","Convert this type to kebab case.",1,[[]]],[8,"MixedCase","","This trait defines a mixed case conversion.",null,null],[10,"to_mixed_case","","Convert this type to mixed case.",2,[[]]],[8,"ShoutyKebabCase","","This trait defines a shouty kebab case conversion.",null,null],[10,"to_shouty_kebab_case","","Convert this type to shouty kebab case.",3,[[]]],[8,"ShoutySnakeCase","","This trait defines a shouty snake case conversion.",null,null],[10,"to_shouty_snake_case","","Convert this type to shouty snake case.",4,[[]]],[8,"ShoutySnekCase","","Oh heck, ShoutySnekCase is an alias for ShoutySnakeCase. …",null,null],[10,"TO_SHOUTY_SNEK_CASE","","CONVERT THIS TYPE TO SNEK CASE.",5,[[]]],[8,"SnakeCase","","This trait defines a snake case conversion.",null,null],[10,"to_snake_case","","Convert this type to snake case.",6,[[]]],[8,"SnekCase","","Oh heck, SnekCase is an alias for SnakeCase. See …",null,null],[10,"to_snek_case","","Convert this type to snek case.",7,[[]]],[8,"TitleCase","","This trait defines a title case conversion.",null,null],[10,"to_title_case","","Convert this type to title case.",8,[[]]]],"p":[[8,"CamelCase"],[8,"KebabCase"],[8,"MixedCase"],[8,"ShoutyKebabCase"],[8,"ShoutySnakeCase"],[8,"ShoutySnekCase"],[8,"SnakeCase"],[8,"SnekCase"],[8,"TitleCase"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","i":[[0,"map","indexmap","<code>IndexMap</code> is a hash table where the iteration order of the …",null,null],[8,"MutableKeys","indexmap::map","Opt-in mutable access to keys.",null,null],[16,"Key","","",0,null],[16,"Value","","",0,null],[10,"get_full_mut2","","Return item index, mutable reference to key and value",0,[[],["option",4]]],[10,"retain2","","Scan through each key-value pair in the map and keep …",0,[[]]],[10,"__private_marker","","This method is not useful in itself – it is there to …",0,[[],["privatemarker",3]]],[4,"Entry","","Entry for an existing key-value pair or a vacant location …",null,null],[13,"Occupied","","Existing slot with equivalent key.",1,null],[13,"Vacant","","Vacant slot (no equivalent key in the map).",1,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>IndexMap</code>. It is part …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>IndexMap</code>. It is part of …",null,null],[3,"IndexMap","","A hash table where the iteration order of the key-value …",null,null],[11,"new","","Create a new map. (Does not allocate.)",2,[[]]],[11,"with_capacity","","Create a new map with capacity for <code>n</code> key-value pairs. …",2,[[]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for <code>n</code> key-value pairs. …",2,[[]]],[11,"with_hasher","","Create a new map with <code>hash_builder</code>",2,[[]]],[11,"capacity","","Computes in <strong>O(1)</strong> time.",2,[[]]],[11,"hasher","","Return a reference to the map\'s <code>BuildHasher</code>.",2,[[]]],[11,"len","","Return the number of key-value pairs in the map.",2,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",2,[[]]],[11,"iter","","Return an iterator over the key-value pairs of the map, …",2,[[],["iter",3]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, …",2,[[],["itermut",3]]],[11,"keys","","Return an iterator over the keys of the map, in their …",2,[[],["keys",3]]],[11,"values","","Return an iterator over the values of the map, in their …",2,[[],["values",3]]],[11,"values_mut","","Return an iterator over mutable references to the the …",2,[[],["valuesmut",3]]],[11,"clear","","Remove all key-value pairs in the map, while preserving …",2,[[]]],[11,"truncate","","Shortens the map, keeping the first <code>len</code> elements and …",2,[[]]],[11,"drain","","Clears the <code>IndexMap</code> in the given index range, returning …",2,[[],["drain",3]]],[11,"split_off","","Splits the collection into two at the given index.",2,[[]]],[11,"reserve","","Reserve capacity for <code>additional</code> more key-value pairs.",2,[[]]],[11,"shrink_to_fit","","Shrink the capacity of the map as much as possible.",2,[[]]],[11,"insert","","Insert a key-value pair in the map.",2,[[],["option",4]]],[11,"insert_full","","Insert a key-value pair in the map, and get their index.",2,[[]]],[11,"entry","","Get the given key’s corresponding entry in the map for …",2,[[],["entry",4]]],[11,"contains_key","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.",2,[[]]],[11,"get","","Return a reference to the value stored for <code>key</code>, if it is …",2,[[],["option",4]]],[11,"get_key_value","","Return references to the key-value pair stored for <code>key</code>, …",2,[[],["option",4]]],[11,"get_full","","Return item index, key and value",2,[[],["option",4]]],[11,"get_index_of","","Return item index, if it exists in the map",2,[[],["option",4]]],[11,"get_mut","","",2,[[],["option",4]]],[11,"get_full_mut","","",2,[[],["option",4]]],[11,"remove","","Remove the key-value pair equivalent to <code>key</code> and return …",2,[[],["option",4]]],[11,"remove_entry","","Remove and return the key-value pair equivalent to <code>key</code>.",2,[[],["option",4]]],[11,"swap_remove","","Remove the key-value pair equivalent to <code>key</code> and return …",2,[[],["option",4]]],[11,"swap_remove_entry","","Remove and return the key-value pair equivalent to <code>key</code>.",2,[[],["option",4]]],[11,"swap_remove_full","","Remove the key-value pair equivalent to <code>key</code> and return it …",2,[[],["option",4]]],[11,"shift_remove","","Remove the key-value pair equivalent to <code>key</code> and return …",2,[[],["option",4]]],[11,"shift_remove_entry","","Remove and return the key-value pair equivalent to <code>key</code>.",2,[[],["option",4]]],[11,"shift_remove_full","","Remove the key-value pair equivalent to <code>key</code> and return it …",2,[[],["option",4]]],[11,"pop","","Remove the last key-value pair",2,[[],["option",4]]],[11,"retain","","Scan through each key-value pair in the map and keep …",2,[[]]],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering …",2,[[]]],[11,"sort_by","","Sort the map’s key-value pairs in place using the …",2,[[]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value …",2,[[],["intoiter",3]]],[11,"reverse","","Reverses the order of the map’s key-value pairs in …",2,[[]]],[11,"get_index","","Get a key-value pair by index",2,[[],["option",4]]],[11,"get_index_mut","","Get a key-value pair by index",2,[[],["option",4]]],[11,"first","","Get the first key-value pair",2,[[],["option",4]]],[11,"first_mut","","Get the first key-value pair, with mutable access to the …",2,[[],["option",4]]],[11,"last","","Get the last key-value pair",2,[[],["option",4]]],[11,"last_mut","","Get the last key-value pair, with mutable access to the …",2,[[],["option",4]]],[11,"swap_remove_index","","Remove the key-value pair by index",2,[[],["option",4]]],[11,"shift_remove_index","","Remove the key-value pair by index",2,[[],["option",4]]],[11,"swap_indices","","Swaps the position of two key-value pairs in the map.",2,[[]]],[3,"Keys","","An iterator over the keys of a <code>IndexMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>IndexMap</code>.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>IndexMap</code>.",null,null],[3,"Iter","","An iterator over the entries of a <code>IndexMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>IndexMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>IndexMap</code>.",null,null],[3,"Drain","","A draining iterator over the entries of a <code>IndexMap</code>.",null,null],[0,"set","indexmap","A hash set implemented using <code>IndexMap</code>",null,null],[3,"IndexSet","indexmap::set","A hash set where the iteration order of the values is …",null,null],[11,"new","","Create a new set. (Does not allocate.)",3,[[]]],[11,"with_capacity","","Create a new set with capacity for <code>n</code> elements. (Does not …",3,[[]]],[11,"with_capacity_and_hasher","","Create a new set with capacity for <code>n</code> elements. (Does not …",3,[[]]],[11,"with_hasher","","Create a new set with <code>hash_builder</code>",3,[[]]],[11,"capacity","","Computes in <strong>O(1)</strong> time.",3,[[]]],[11,"hasher","","Return a reference to the set\'s <code>BuildHasher</code>.",3,[[]]],[11,"len","","Return the number of elements in the set.",3,[[]]],[11,"is_empty","","Returns true if the set contains no elements.",3,[[]]],[11,"iter","","Return an iterator over the values of the set, in their …",3,[[],["iter",3]]],[11,"clear","","Remove all elements in the set, while preserving its …",3,[[]]],[11,"truncate","","Shortens the set, keeping the first <code>len</code> elements and …",3,[[]]],[11,"drain","","Clears the <code>IndexSet</code> in the given index range, returning …",3,[[],["drain",3]]],[11,"split_off","","Splits the collection into two at the given index.",3,[[]]],[11,"reserve","","Reserve capacity for <code>additional</code> more values.",3,[[]]],[11,"shrink_to_fit","","Shrink the capacity of the set as much as possible.",3,[[]]],[11,"insert","","Insert the value into the set.",3,[[]]],[11,"insert_full","","Insert the value into the set, and get its index.",3,[[]]],[11,"difference","","Return an iterator over the values that are in <code>self</code> but …",3,[[["indexset",3]],["difference",3]]],[11,"symmetric_difference","","Return an iterator over the values that are in <code>self</code> or …",3,[[["indexset",3]],["symmetricdifference",3]]],[11,"intersection","","Return an iterator over the values that are in both <code>self</code> …",3,[[["indexset",3]],["intersection",3]]],[11,"union","","Return an iterator over all values that are in <code>self</code> or …",3,[[["indexset",3]],["union",3]]],[11,"contains","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.",3,[[]]],[11,"get","","Return a reference to the value stored in the set, if it …",3,[[],["option",4]]],[11,"get_full","","Return item index and value",3,[[],["option",4]]],[11,"get_index_of","","Return item index, if it exists in the set",3,[[],["option",4]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",3,[[],["option",4]]],[11,"remove","","Remove the value from the set, and return <code>true</code> if it was …",3,[[]]],[11,"swap_remove","","Remove the value from the set, and return <code>true</code> if it was …",3,[[]]],[11,"shift_remove","","Remove the value from the set, and return <code>true</code> if it was …",3,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",3,[[],["option",4]]],[11,"swap_take","","Removes and returns the value in the set, if any, that is …",3,[[],["option",4]]],[11,"shift_take","","Removes and returns the value in the set, if any, that is …",3,[[],["option",4]]],[11,"swap_remove_full","","Remove the value from the set return it and the index it …",3,[[],["option",4]]],[11,"shift_remove_full","","Remove the value from the set return it and the index it …",3,[[],["option",4]]],[11,"pop","","Remove the last value",3,[[],["option",4]]],[11,"retain","","Scan through each value in the set and keep those where …",3,[[]]],[11,"sort","","Sort the set’s values by their default ordering.",3,[[]]],[11,"sort_by","","Sort the set’s values in place using the comparison …",3,[[]]],[11,"sorted_by","","Sort the values of the set and return a by value iterator …",3,[[],["intoiter",3]]],[11,"reverse","","Reverses the order of the set’s values in place.",3,[[]]],[11,"get_index","","Get a value by index",3,[[],["option",4]]],[11,"first","","Get the first value",3,[[],["option",4]]],[11,"last","","Get the last value",3,[[],["option",4]]],[11,"swap_remove_index","","Remove the value by index",3,[[],["option",4]]],[11,"shift_remove_index","","Remove the value by index",3,[[],["option",4]]],[11,"swap_indices","","Swaps the position of two values in the set.",3,[[]]],[3,"IntoIter","","An owning iterator over the items of a <code>IndexSet</code>.",null,null],[3,"Iter","","An iterator over the items of a <code>IndexSet</code>.",null,null],[3,"Drain","","A draining iterator over the items of a <code>IndexSet</code>.",null,null],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.",3,[[["indexset",3]]]],[11,"is_subset","","Returns <code>true</code> if all elements of <code>self</code> are contained in …",3,[[["indexset",3]]]],[11,"is_superset","","Returns <code>true</code> if all elements of <code>other</code> are contained in …",3,[[["indexset",3]]]],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Union","","A lazy iterator producing elements in the union of …",null,null],[8,"Equivalent","indexmap","Key equivalence trait.",null,null],[10,"equivalent","","Compare self to <code>key</code> and return <code>true</code> if they are equal.",4,[[]]],[14,"indexmap","","Create an <code>IndexMap</code> from a list of key-value pairs",null,null],[14,"indexset","","Create an <code>IndexSet</code> from a list of values",null,null],[11,"from","indexmap::map","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"into_iter","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"into_iter","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"into_iter","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"into_iter","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","indexmap::set","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"into_iter","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"into_iter","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"into_iter","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"into_iter","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"into_iter","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"into_iter","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"into_iter","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"get_full_mut2","indexmap::map","",2,[[],["option",4]]],[11,"retain2","","",2,[[]]],[11,"__private_marker","","",2,[[],["privatemarker",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","indexmap::set","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"eq","indexmap::map","",2,[[["indexmap",3]]]],[11,"eq","indexmap::set","",3,[[["indexset",3]]]],[11,"index","indexmap::map","Returns a reference to the value corresponding to the …",2,[[]]],[11,"index","","Returns a reference to the value at the supplied <code>index</code>.",2,[[]]],[11,"index","indexmap::set","Returns a reference to the value at the supplied <code>index</code>.",3,[[]]],[11,"index_mut","indexmap::map","Returns a mutable reference to the value corresponding to …",2,[[]]],[11,"index_mut","","Returns a mutable reference to the value at the supplied …",2,[[]]],[11,"len","","",7,[[]]],[11,"len","","",8,[[]]],[11,"len","","",9,[[]]],[11,"len","","",10,[[]]],[11,"len","","",11,[[]]],[11,"len","","",12,[[]]],[11,"len","indexmap::set","",14,[[]]],[11,"len","","",15,[[]]],[11,"from_iter","indexmap::map","Create an <code>IndexMap</code> from the sequence of key-value pairs …",2,[[["intoiterator",8]]]],[11,"from_iter","indexmap::set","",3,[[["intoiterator",8]]]],[11,"next_back","indexmap::map","",7,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],["option",4]]],[11,"next_back","","",10,[[],["option",4]]],[11,"next_back","","",11,[[],["option",4]]],[11,"next_back","","",12,[[],["option",4]]],[11,"next_back","","",13,[[],["option",4]]],[11,"next_back","indexmap::set","",14,[[],["option",4]]],[11,"next_back","","",15,[[],["option",4]]],[11,"next_back","","",16,[[],["option",4]]],[11,"next_back","","",17,[[],["option",4]]],[11,"next_back","","",18,[[],["option",4]]],[11,"next_back","","",19,[[],["option",4]]],[11,"next_back","","",20,[[],["option",4]]],[11,"next","indexmap::map","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"count","","",7,[[]]],[11,"nth","","",7,[[],["option",4]]],[11,"last","","",7,[[],["option",4]]],[11,"collect","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"count","","",8,[[]]],[11,"nth","","",8,[[],["option",4]]],[11,"last","","",8,[[],["option",4]]],[11,"collect","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"count","","",9,[[]]],[11,"nth","","",9,[[],["option",4]]],[11,"last","","",9,[[],["option",4]]],[11,"collect","","",9,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"count","","",10,[[]]],[11,"nth","","",10,[[],["option",4]]],[11,"last","","",10,[[],["option",4]]],[11,"collect","","",10,[[]]],[11,"next","","",11,[[],["option",4]]],[11,"size_hint","","",11,[[]]],[11,"count","","",11,[[]]],[11,"nth","","",11,[[],["option",4]]],[11,"last","","",11,[[],["option",4]]],[11,"collect","","",11,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"count","","",12,[[]]],[11,"nth","","",12,[[],["option",4]]],[11,"last","","",12,[[],["option",4]]],[11,"collect","","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"size_hint","","",13,[[]]],[11,"count","","",13,[[]]],[11,"nth","","",13,[[],["option",4]]],[11,"last","","",13,[[],["option",4]]],[11,"collect","","",13,[[]]],[11,"next","indexmap::set","",14,[[],["option",4]]],[11,"size_hint","","",14,[[]]],[11,"count","","",14,[[]]],[11,"nth","","",14,[[],["option",4]]],[11,"last","","",14,[[],["option",4]]],[11,"collect","","",14,[[]]],[11,"next","","",15,[[],["option",4]]],[11,"size_hint","","",15,[[]]],[11,"count","","",15,[[]]],[11,"nth","","",15,[[],["option",4]]],[11,"last","","",15,[[],["option",4]]],[11,"collect","","",15,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"count","","",16,[[]]],[11,"nth","","",16,[[],["option",4]]],[11,"last","","",16,[[],["option",4]]],[11,"collect","","",16,[[]]],[11,"next","","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"fold","","",19,[[]]],[11,"next","","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"fold","","",20,[[]]],[11,"into_iter","indexmap::map","",2,[[]]],[11,"into_iter","indexmap::set","",3,[[]]],[11,"extend","indexmap::map","Extend the map with all key-value pairs in the iterable.",2,[[["intoiterator",8]]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",2,[[["intoiterator",8]]]],[11,"extend","indexmap::set","",3,[[["intoiterator",8]]]],[11,"extend","","",3,[[["intoiterator",8]]]],[11,"clone","indexmap::map","",2,[[]]],[11,"clone_from","","",2,[[]]],[11,"clone","","",7,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",10,[[]]],[11,"clone","indexmap::set","",3,[[]]],[11,"clone_from","","",3,[[]]],[11,"clone","","",15,[[]]],[11,"clone","","",17,[[]]],[11,"clone","","",18,[[]]],[11,"clone","","",19,[[]]],[11,"clone","","",20,[[]]],[11,"default","indexmap::map","Return an empty <code>IndexMap</code>",2,[[]]],[11,"default","indexmap::set","Return an empty <code>IndexSet</code>",3,[[]]],[11,"key","indexmap::map","Gets a reference to the entry\'s key in the map.",5,[[]]],[11,"get","","Gets a reference to the entry\'s value in the map.",5,[[]]],[11,"get_mut","","Gets a mutable reference to the entry\'s value in the map.",5,[[]]],[11,"index","","Return the index of the key-value pair",5,[[]]],[11,"into_mut","","Converts into a mutable reference to the entry\'s value in …",5,[[]]],[11,"swap_remove_entry","","Remove and return the key, value pair stored in the map …",5,[[]]],[11,"shift_remove_entry","","Remove and return the key, value pair stored in the map …",5,[[]]],[11,"or_insert","","Inserts the given default value in the entry if it is …",1,[[]]],[11,"or_insert_with","","Inserts the result of the <code>call</code> function in the entry if …",1,[[]]],[11,"or_insert_with_key","","Inserts the result of the <code>call</code> function with a reference …",1,[[]]],[11,"key","","Gets a reference to the entry\'s key, either within the …",1,[[]]],[11,"index","","Return the index where the key-value pair exists or will …",1,[[]]],[11,"and_modify","","Modifies the entry if it is occupied.",1,[[]]],[11,"or_default","","Inserts a default-constructed value in the entry if it is …",1,[[]]],[11,"insert","","Sets the value of the entry to <code>value</code>, and returns the …",5,[[]]],[11,"remove","","Remove the key, value pair stored in the map for this …",5,[[]]],[11,"swap_remove","","Remove the key, value pair stored in the map for this …",5,[[]]],[11,"shift_remove","","Remove the key, value pair stored in the map for this …",5,[[]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map …",5,[[]]],[11,"key","","Gets a reference to the key that was used to find the …",6,[[]]],[11,"into_key","","Takes ownership of the key, leaving the entry vacant.",6,[[]]],[11,"index","","Return the index where the key-value pair will be …",6,[[]]],[11,"insert","","Inserts the entry\'s key and the given value into the map, …",6,[[]]]],"p":[[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"IndexSet"],[8,"Equivalent"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"itoa":{"doc":"github crates-io docs-rs","i":[[5,"write","itoa","Write integer to an <code>io::Write</code>.",null,[[["write",8],["integer",8]],["result",6]]],[5,"fmt","","Write integer to an <code>fmt::Write</code>.",null,[[["write",8],["integer",8]],["result",6]]],[3,"Buffer","","A safe API for formatting integers to text.",null,null],[11,"new","","This is a cheap operation; you don\'t need to worry about …",0,[[],["buffer",3]]],[11,"format","","Print an integer into this buffer and return a reference …",0,[[["integer",8]]]],[8,"Integer","","An integer that can be formatted by <code>itoa::write</code> and …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[]]],[11,"default","","",0,[[],["buffer",3]]]],"p":[[3,"Buffer"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","i":[[8,"LazyStatic","lazy_static","Support trait for enabling a few common operation on lazy …",null,null],[5,"initialize","","Takes a shared reference to a lazy static and initializes …",null,[[]]],[14,"lazy_static","","",null,null]],"p":[]},\
"lexpr":{"doc":"This crate provides facilities for parsing, printing and …","i":[[0,"cons","lexpr","List \\\"cons cell\\\" data type and accompanying iterator …",null,null],[3,"Cons","lexpr::cons","A Lisp \\\"cons cell\\\".",null,null],[11,"new","","Constructs a new cons cell from two values.",0,[[]]],[11,"car","","Returns a reference to the value in the <code>car</code> field.",0,[[],["value",4]]],[11,"car_mut","","Returns a mutable reference to the value in the <code>car</code> field.",0,[[],["value",4]]],[11,"set_car","","Sets the <code>car</code> field.",0,[[]]],[11,"cdr","","Returns a reference to the value in the <code>cdr</code> field.",0,[[],["value",4]]],[11,"cdr_mut","","Returns a mutable reference to the value in the <code>cdr</code> field.",0,[[],["value",4]]],[11,"set_cdr","","Sets the <code>cdr</code> field.",0,[[]]],[11,"as_pair","","Returns references to the values in the <code>car</code> and <code>cdr</code> …",0,[[]]],[11,"into_pair","","Converts <code>self</code> into a pair of values without cloning.",0,[[]]],[11,"iter","","Obtains an iterator yielding references to all the cons …",0,[[],["iter",3]]],[11,"into_vec","","Converts <code>self</code> into a vector without cloning the elements.",0,[[]]],[11,"to_vec","","Retrieves a vector, cloning the values.",0,[[]]],[11,"to_ref_vec","","Retrieves a vector, taking references to the values.",0,[[]]],[11,"list_iter","","Returns an iterator that returns each element (<code>car</code> field) …",0,[[],["listiter",3]]],[3,"Iter","","An iterator over a chain of cons cells.",null,null],[11,"peek","","Returns the current cons cell, without advancing the …",1,[[],[["option",4],["cons",3]]]],[3,"IntoIter","","An iterator consuming a chain of cons cells.",null,null],[11,"peek","","Returns the current cons cell, without advancing the …",2,[[],[["option",4],["cons",3]]]],[11,"peek_mut","","Returns a mutable reference to the current cons cell, …",2,[[],[["option",4],["cons",3]]]],[3,"ListIter","","An iterator yielding the <code>car</code> field of a chain of cons …",null,null],[11,"is_empty","","Returns true when the iterator is completely exhausted.",3,[[]]],[11,"peek","","Returns a peek at the value that would be returned by a …",3,[[],[["value",4],["option",4]]]],[0,"datum","lexpr","S-expression values including source location.",null,null],[3,"Datum","lexpr::datum","Combines an S-expression value with location information.",null,null],[11,"value","","Returns a reference to the contained value.",4,[[],["value",4]]],[11,"span","","Returns the span for the compelete value.",4,[[],["span",3]]],[11,"as_ref","","Returns a reference to the datum.",4,[[],["ref",3]]],[11,"list_iter","","Returns an iterator over the elements of a list.",4,[[],[["option",4],["listiter",3]]]],[11,"vector_iter","","Returns an iterator over the elements of a vector.",4,[[],[["vectoriter",3],["option",4]]]],[3,"Ref","","A reference to a value and corresponding location …",null,null],[11,"span","","Returns the span of the referenced value.",5,[[],["span",3]]],[11,"value","","Returns a reference to the contained value.",5,[[],["value",4]]],[11,"list_iter","","If the value referenced is not either a cons cell or <code>Null</code>…",5,[[],[["option",4],["listiter",3]]]],[11,"vector_iter","","Returns an iterator over the elements of a vector.",5,[[],[["vectoriter",3],["option",4]]]],[11,"as_pair","","Returns a pair of references to the fields of a cons cell.",5,[[],["option",4]]],[3,"Span","","The start and end for a span of text.",null,null],[11,"start","","Get the starting line/column in the source file for this …",6,[[],["position",3]]],[11,"end","","Get the ending line/column in the source file for this …",6,[[],["position",3]]],[3,"VectorIter","","An iterator over the elements",null,null],[3,"ListIter","","An iterator yielding the <code>car</code> field of a chain of cons …",null,null],[11,"is_empty","","Returns true when the iterator is completely exhausted.",7,[[]]],[11,"peek","","Returns a peek at the value that would be returned by a …",7,[[],[["ref",3],["option",4]]]],[5,"from_reader_custom","","Parse a datum from an IO stream containing a single …",null,[[["options",3]],[["result",6],["datum",3]]]],[5,"from_reader","","Parse a datum from an IO stream of S-expressions, using …",null,[[],[["result",6],["datum",3]]]],[5,"from_reader_elisp","","Parse a datum from an IO stream of S-expressions, using …",null,[[],[["result",6],["datum",3]]]],[5,"from_slice_custom","","Parse a datum from bytes representing a single …",null,[[["options",3]],[["result",6],["datum",3]]]],[5,"from_slice","","Parse a datum from bytes representing a single …",null,[[],[["result",6],["datum",3]]]],[5,"from_slice_elisp","","Parse a datum from bytes representing a single …",null,[[],[["result",6],["datum",3]]]],[5,"from_str_custom","","Parse a datum from a string slice representing a single …",null,[[["options",3]],[["result",6],["datum",3]]]],[5,"from_str","","Parse a datum from a string slice representing a single …",null,[[],[["result",6],["datum",3]]]],[5,"from_str_elisp","","Parse a datum from a string slice representing a single …",null,[[],[["result",6],["datum",3]]]],[0,"number","lexpr","Dynamically typed number type.",null,null],[3,"Number","lexpr::number","Represents an S-expression number, whether integer or …",null,null],[11,"is_i64","","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …",8,[[]]],[11,"is_u64","","Returns true if the <code>Number</code> is an integer between zero and …",8,[[]]],[11,"is_f64","","Returns true if the <code>Number</code> can be represented by f64.",8,[[]]],[11,"as_i64","","If the <code>Number</code> is an integer, represent it as i64 if …",8,[[],["option",4]]],[11,"as_u64","","If the <code>Number</code> is an integer, represent it as u64 if …",8,[[],["option",4]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None …",8,[[],["option",4]]],[11,"from_f64","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …",8,[[],[["number",3],["option",4]]]],[11,"visit","","Dispatch based on the type of the contained value.",8,[[],["result",4]]],[8,"Visitor","","Trait to access the value stored in <code>Number</code>.",null,null],[16,"Value","","The return type of the visitor methods.",9,null],[16,"Error","","The error type of the visitor methods.",9,null],[10,"error","","Construct an error given a message.",9,[[["into",8],["string",3]]]],[10,"visit_u64","","The stored value is a <code>u64</code>.",9,[[],["result",4]]],[10,"visit_i64","","The stored value is an <code>i64</code>.",9,[[],["result",4]]],[10,"visit_f64","","The stored value is <code>f64</code>.",9,[[],["result",4]]],[0,"parse","lexpr","S-expression parser and options.",null,null],[0,"error","lexpr::parse","When parsing S-expressions goes wrong.",null,null],[3,"Error","lexpr::parse::error","This type represents the possible errors when parsing …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>lexpr::Error</code>.",null,null],[3,"Location","","Location of a parse error.",null,null],[11,"line","","One-based line number at which the error was detected.",10,[[]]],[11,"column","","One-based column number at which the error was detected.",10,[[]]],[11,"location","","Location of the error in the input stream.",11,[[],[["location",3],["option",4]]]],[11,"classify","","Categorizes the cause of this error.",11,[[],["category",4]]],[11,"is_io","","Returns true if this error was caused by a failure to …",11,[[]]],[11,"is_syntax","","Returns true if this error was caused by input that was …",11,[[]]],[11,"is_eof","","Returns true if this error was caused by prematurely …",11,[[]]],[4,"Category","","Categorizes the cause of a <code>lexpr::parse::Error</code>.",null,null],[13,"Io","","The error was caused by a failure to read or bytes from …",12,null],[13,"Syntax","","The error was caused by input that was not a …",12,null],[13,"Eof","","The error was caused by prematurely reaching the end of …",12,null],[4,"CharSyntax","lexpr::parse","Indicates the syntax for characters.",null,null],[13,"R6RS","","Syntax as specified in R6RS.",13,null],[13,"Elisp","","Emacs Lisp syntax.",13,null],[4,"KeywordSyntax","","Indicates a syntax of keywords.",null,null],[13,"ColonPrefix","","Parse identifiers starting with a colon as keywords.",14,null],[13,"ColonPostfix","","Parse identifiers ending with a colon as keywords.",14,null],[13,"Octothorpe","","Parse identifiers prefixed with <code>#:</code> as keywords.",14,null],[4,"StringSyntax","","Indicates the syntax for strings.",null,null],[13,"R6RS","","Syntax as specified the R6RS.",15,null],[13,"Elisp","","Emacs Lisp syntax.",15,null],[3,"IoRead","","S-expression input source that reads from a std::io input …",null,null],[3,"Position","","A location in the parsed text.",null,null],[8,"Read","","Trait used by the parser for iterating over input.",null,null],[11,"parse_elisp_char","","Parses an Emacs Lisp character constant.",16,[[["vec",3]],["result",6]]],[3,"SliceRead","","S-expression input source that reads from a slice of …",null,null],[3,"StrRead","","S-expression input source that reads from a UTF-8 string.",null,null],[3,"Error","","This type represents the possible errors when parsing …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>lexpr::Error</code>.",null,null],[3,"Parser","","Parser for the S-expression text representation.",null,null],[3,"Options","","Various options to influence parser behavior.",null,null],[4,"NilSymbol","","Defines the treatment of the symbol <code>nil</code>.",null,null],[13,"EmptyList","","Parse <code>nil</code> like as the empty list. This the behavior of …",17,null],[13,"Default","","Parse <code>nil</code> as a regular symbol. This is the behavior found …",17,null],[13,"Special","","Parse <code>nil</code> as a special value. This allows treating the <code>nil</code>…",17,null],[4,"TSymbol","","Defines the treatment of the symbol <code>t</code>.",null,null],[13,"True","","Parse <code>t</code> as the boolean true value.",18,null],[13,"Default","","Parse <code>t</code> as a regular symbol.",18,null],[4,"Brackets","","Defines the treatment of brackets.",null,null],[13,"List","","Brackets are synonymous with regular parentheses, and …",19,null],[13,"Vector","","Brackets indicate a vector, like in Emacs Lisp.",19,null],[11,"new","","Construct an empty set of options.",20,[[]]],[11,"elisp","","Construct a set of options suitable for parsing Emacs …",20,[[]]],[11,"with_keyword_syntax","","Add <code>syntax</code> to the recognized keyword syntaxes.",20,[[["keywordsyntax",4]]]],[11,"with_keyword_syntaxes","","Set the recognized keyword syntaxes.",20,[[]]],[11,"with_nil_symbol","","Choose how to parse the <code>nil</code> symbol.",20,[[["nilsymbol",4]]]],[11,"with_t_symbol","","Choose how to parse the <code>t</code> symbol.",20,[[["tsymbol",4]]]],[11,"with_brackets","","Choose how to handle brackets.",20,[[["brackets",4]]]],[11,"with_string_syntax","","Choose the accepted string syntax.",20,[[["stringsyntax",4]]]],[11,"with_char_syntax","","Choose the accepted character syntax.",20,[[["charsyntax",4]]]],[11,"keyword_syntax","","Check wether a keyword syntax is enabled.",20,[[["keywordsyntax",4]]]],[11,"nil_symbol","","Query the way the <code>nil</code> symbol is handled.",20,[[],["nilsymbol",4]]],[11,"t_symbol","","Query the way the <code>t</code> symbol is handled.",20,[[],["tsymbol",4]]],[11,"brackets","","Query the way brackets are handled.",20,[[],["brackets",4]]],[11,"string_syntax","","Query the accepted string syntax.",20,[[],["stringsyntax",4]]],[11,"char_syntax","","Query the accepted character syntax.",20,[[],["charsyntax",4]]],[11,"new","","Create an S-expression parser from one of the possible …",21,[[]]],[11,"with_options","","Create a customized S-expression parser parser from one …",21,[[["options",3]]]],[11,"from_reader","","Creates an S-expression parser from an <code>io::Read</code>.",21,[[]]],[11,"from_reader_custom","","Creates an S-expression parser from an <code>io::Read</code>.",21,[[["options",3]]]],[11,"from_slice","","Creates an S-expression parser from a <code>&[u8]</code>.",21,[[]]],[11,"from_slice_custom","","Creates an S-expression parser from a <code>&[u8]</code>.",21,[[["options",3]]]],[11,"from_str","","Creates a S-expression parser from a <code>&str</code>.",21,[[]]],[11,"from_str_custom","","Creates a S-expression parser from a <code>&str</code>.",21,[[["options",3]]]],[11,"expect_end","","Expect the end of input.",21,[[],["result",6]]],[11,"end","","Expect the end of input.",21,[[],["result",6]]],[11,"value_iter","","Obtain an iterator over the values produced by the parser.",21,[[],["valueiter",3]]],[11,"datum_iter","","Obtain an iterator over the values produced by the …",21,[[],["datumiter",3]]],[11,"parse_value","","Parse a single S-expression from the input source.",21,[[],[["result",6],["value",4]]]],[11,"expect_value","","Parse a single S-expression from the input source.",21,[[],[["result",6],["value",4]]]],[11,"next_value","","Parse an S-expression, returning <code>None</code> on end-of-input.",21,[[],[["result",6],["option",4]]]],[11,"parse","","Parse a single S-expression from the input source.",21,[[],[["result",6],["option",4]]]],[11,"expect_datum","","Parse a single S-expression including location …",21,[[],[["result",6],["datum",3]]]],[11,"next_datum","","Parse a single S-expression including location …",21,[[],[["option",4],["result",6]]]],[5,"from_reader_custom","","Parse a value from an IO stream containing a single …",null,[[["options",3]],[["result",6],["value",4]]]],[5,"from_reader","","Parse a value from an IO stream of S-expressions, using …",null,[[],[["result",6],["value",4]]]],[5,"from_reader_elisp","","Parse a value from an IO stream of S-expressions, using …",null,[[],[["result",6],["value",4]]]],[5,"from_slice_custom","","Parse a value from bytes representing a single …",null,[[["options",3]],[["result",6],["value",4]]]],[5,"from_slice","","Parse a value from bytes representing a single …",null,[[],[["result",6],["value",4]]]],[5,"from_slice_elisp","","Parse a value from bytes representing a single …",null,[[],[["result",6],["value",4]]]],[5,"from_str_custom","","Parse a value from a string slice representing a single …",null,[[["options",3]],[["result",6],["value",4]]]],[5,"from_str","","Parse a value from a string slice representing a single …",null,[[],[["result",6],["value",4]]]],[5,"from_str_elisp","","Parse a value from a string slice representing a single …",null,[[],[["result",6],["value",4]]]],[3,"ValueIter","","Iterator over the values producedd by a parser.",null,null],[3,"DatumIter","","Iterator over the datums producedd by a parser.",null,null],[0,"print","lexpr","Converting S-expression values into text.",null,null],[4,"CharSyntax","lexpr::print","Indicates the syntax for characters.",null,null],[13,"R6RS","","Syntax as specified in R6RS.",13,null],[13,"Elisp","","Emacs Lisp syntax.",13,null],[4,"KeywordSyntax","","Indicates a syntax of keywords.",null,null],[13,"ColonPrefix","","Parse identifiers starting with a colon as keywords.",14,null],[13,"ColonPostfix","","Parse identifiers ending with a colon as keywords.",14,null],[13,"Octothorpe","","Parse identifiers prefixed with <code>#:</code> as keywords.",14,null],[4,"StringSyntax","","Indicates the syntax for strings.",null,null],[13,"R6RS","","Syntax as specified the R6RS.",15,null],[13,"Elisp","","Emacs Lisp syntax.",15,null],[3,"Options","","Options for printing S-expressions.",null,null],[11,"elisp","","Construct parser options suitable for printing Emacs Lisp.",22,[[]]],[11,"with_keyword_syntax","","Set the syntax to use for printing keywords.",22,[[["keywordsyntax",4]]]],[11,"with_nil_syntax","","Set the syntax to use to print the special nil value.",22,[[["nilsyntax",4]]]],[11,"with_bool_syntax","","Set the syntax to use to print boolean values.",22,[[["boolsyntax",4]]]],[11,"with_vector_syntax","","Set the syntax for printing vectors.",22,[[["vectorsyntax",4]]]],[11,"with_bytes_syntax","","Set the syntax to use for printing byte vectors.",22,[[["bytessyntax",4]]]],[11,"with_string_syntax","","Set the syntax used for printing strings.",22,[[["stringsyntax",4]]]],[11,"with_char_syntax","","Set the syntax used for printing characters.",22,[[["charsyntax",4]]]],[4,"NilSyntax","","How to print the special nil value.",null,null],[13,"Symbol","","Output a <code>nil</code> symbol.",23,null],[13,"Token","","Output the <code>#nil</code> token.",23,null],[13,"EmptyList","","Output the empty list.",23,null],[13,"False","","Output a boolean false value.",23,null],[4,"BoolSyntax","","How to print boolean values.",null,null],[13,"Token","","Use the Scheme tokens <code>#t</code> and <code>#f</code>",24,null],[13,"Symbol","","Use symbols <code>nil</code> and <code>t</code>.",24,null],[4,"VectorSyntax","","How to print vectors.",null,null],[13,"Octothorpe","","Use Scheme notation, i.e. <code>#(...)</code>.",25,null],[13,"Brackets","","Use brackets, as used in Emacs Lisp.",25,null],[4,"BytesSyntax","","How to print byte vectors.",null,null],[13,"R6RS","","Use R6RS byte vector syntax, e.g. <code>#vu8(1 2 3)</code>.",26,null],[13,"R7RS","","Use R7RS byte vector syntax, e.g. <code>#u8(1 2 3)</code>.",26,null],[13,"Elisp","","Use Emacs Lisp unibyte string syntax, e.g. <code>\\\"\\\\001\\\\002\\\\003\\\"</code>.",26,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote <code>\\\"</code>",27,null],[13,"ReverseSolidus","","An escaped reverse solidus <code>\\\\</code>",27,null],[13,"Alert","","Alert, also known as \\\"bell\\\" (usually escaped as <code>\\\\a</code>)",27,null],[13,"Backspace","","An escaped backspace character (usually escaped as <code>\\\\b</code>)",27,null],[13,"LineFeed","","An escaped line feed character (usually escaped as <code>\\\\n</code>)",27,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as …",27,null],[13,"Tab","","An escaped tab character (usually escaped as <code>\\\\t</code>)",27,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped …",27,null],[4,"VectorType","","Different vector types",null,null],[13,"Generic","","Generic vector, containing elements of any type.",28,null],[13,"Byte","","Byte vector, containing only byte (octet) values.",28,null],[8,"Formatter","","This trait abstracts away serializing the S-expression …",null,null],[11,"write_nil","","Writes a representation of the special nil value to the …",29,[[],["result",6]]],[11,"write_null","","Writes a representation of the special nil value to the …",29,[[],["result",6]]],[11,"write_bool","","Writes a representation of a boolean value to the …",29,[[],["result",6]]],[11,"write_number","","Writes an integer value like <code>-123</code> to the specified writer.",29,[[["number",3]],["result",6]]],[11,"write_char","","Writes a charactor to the specified writer.",29,[[],["result",6]]],[11,"begin_string","","Called before each series of <code>write_string_fragment</code> and …",29,[[],["result",6]]],[11,"end_string","","Called after each series of <code>write_string_fragment</code> and …",29,[[],["result",6]]],[11,"write_string_fragment","","Writes a string fragment that doesn\'t need any escaping …",29,[[],["result",6]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",29,[[["charescape",4]],["result",6]]],[11,"write_symbol","","Writes a symbol to the specified writer.",29,[[],["result",6]]],[11,"write_keyword","","Writes a keyword to the specified writer.",29,[[],["result",6]]],[11,"write_bytes","","Writes a byte vector to the specified writer.",29,[[],["result",6]]],[11,"begin_list","","Called before any list elements.  Writes a <code>(</code> to the …",29,[[],["result",6]]],[11,"end_list","","Called after all list elements have been written.  Writes …",29,[[],["result",6]]],[11,"begin_seq_element","","Called before starting to write a list or vector element. …",29,[[],["result",6]]],[11,"end_seq_element","","Called after every list or vector element.",29,[[],["result",6]]],[11,"begin_vector","","Called before any vector elements.  Will write <code>#(</code> for …",29,[[["vectortype",4]],["result",6]]],[11,"end_vector","","Called after all vector elements have been written.  …",29,[[],["result",6]]],[11,"write_dot","","Called before writing the tail of an improper list, or …",29,[[],["result",6]]],[3,"DefaultFormatter","","This structure compacts a S-expression value on a single …",null,null],[3,"CustomizedFormatter","","A formatter which can be tuned with regards to …",null,null],[3,"Printer","","A printer for S-expression values.",null,null],[11,"with_options","","Construct an S-expression printer tuned given the …",30,[[["options",3]]]],[11,"with_formatter","","Creates a new S-expression printer whose output will be …",30,[[]]],[11,"into_inner","","Unwrap the <code>Writer</code> from the <code>Printer</code>.",30,[[]]],[11,"print","","Output the representation of the specified value to the …",30,[[["value",4]],["result",6]]],[11,"new","","Creates a new S-expression printer.",30,[[]]],[5,"to_writer","","Serialize the given value value as S-expression text into …",null,[[["write",8],["value",4]],["result",6]]],[5,"to_writer_custom","","Serialize the given value value as S-expression text into …",null,[[["write",8],["options",3],["value",4]],["result",6]]],[5,"to_vec","","Serialize the given value as byte vector containing …",null,[[["value",4]],[["vec",3],["result",6]]]],[5,"to_vec_custom","","Serialize the given value as byte vector containing …",null,[[["options",3],["value",4]],[["vec",3],["result",6]]]],[5,"to_string","","Serialize the given value an S-expression string, using …",null,[[["value",4]],[["result",6],["string",3]]]],[5,"to_string_custom","","Serialize the given value an S-expression string.",null,[[["options",3],["value",4]],[["result",6],["string",3]]]],[0,"value","lexpr","The Value enum, a dynamically typed way of representing …",null,null],[8,"Index","lexpr::value","A type that can be used to index into a <code>lexpr::Value</code>.",null,null],[4,"Value","","Represents an S-expression value.",null,null],[13,"Nil","","The special \\\"nil\\\" value.",31,null],[13,"Null","","The empty list.",31,null],[13,"Bool","","A boolean value.",31,null],[13,"Number","","A number.",31,null],[13,"Char","","A character.",31,null],[13,"String","","A string.",31,null],[13,"Symbol","","A symbol.",31,null],[13,"Keyword","","A keyword.",31,null],[13,"Bytes","","A byte vector.",31,null],[13,"Cons","","Represents a Lisp \\\"cons cell\\\".",31,null],[13,"Vector","","A Lisp vector.",31,null],[11,"symbol","","Construct a symbol, given its name.",31,[[]]],[11,"keyword","","Construct a keyword, given its name.",31,[[]]],[11,"string","","Construct a string.",31,[[]]],[11,"bytes","","Construct a byte vector.",31,[[]]],[11,"cons","","Create a cons cell given its <code>car</code> and <code>cdr</code> fields.",31,[[]]],[11,"list","","Create a list value from elements convertible into <code>Value</code>.",31,[[]]],[11,"is_list","","Returns true if the value is a (proper) list.",31,[[]]],[11,"is_dotted_list","","Returns true if the value is a dotted (improper) list.",31,[[]]],[11,"append","","Create a list value from elements convertible into <code>Value</code>, …",31,[[]]],[11,"vector","","Create a vector value from elements convertible into <code>Value</code>…",31,[[]]],[11,"is_string","","Returns true if the value is a String. Returns false …",31,[[]]],[11,"as_str","","If the value is a String, returns the associated str. …",31,[[],["option",4]]],[11,"is_symbol","","Returns true if the value is a symbol. Returns false …",31,[[]]],[11,"as_symbol","","If the value is a symbol, returns the associated str. …",31,[[],["option",4]]],[11,"is_keyword","","Returns true if the value is a keyword. Returns false …",31,[[]]],[11,"as_keyword","","If the value is a keyword, returns the associated str. …",31,[[],["option",4]]],[11,"as_name","","Get the name of a symbol or keyword, or the value of a …",31,[[],["option",4]]],[11,"is_bytes","","Returns true if the value is a byte vector. Returns false …",31,[[]]],[11,"as_bytes","","If the value is a byte vector, returns the associated byte…",31,[[],["option",4]]],[11,"is_number","","Return <code>true</code> if the value is a number.",31,[[]]],[11,"as_number","","For numbers, return a reference to them. For other …",31,[[],[["option",4],["number",3]]]],[11,"is_i64","","Returns true if the value is an integer between <code>i64::MIN</code> …",31,[[]]],[11,"is_u64","","Returns true if the value is an integer between zero and …",31,[[]]],[11,"is_f64","","Returns true if the value is a number that can be …",31,[[]]],[11,"as_i64","","If the value is an integer, represent it as i64 if …",31,[[],["option",4]]],[11,"as_u64","","If the value is an integer, represent it as u64 if …",31,[[],["option",4]]],[11,"as_f64","","If the value is a number, represent it as f64 if …",31,[[],["option",4]]],[11,"is_boolean","","Returns true if the value is a Boolean. Returns false …",31,[[]]],[11,"as_bool","","If the value is a <code>Boolean</code>, returns the associated bool. …",31,[[],["option",4]]],[11,"is_char","","Returns true if the value is a character. Returns false …",31,[[]]],[11,"as_char","","If the value is a character, returns the associated <code>char</code>. …",31,[[],["option",4]]],[11,"is_nil","","Returns true if the value is <code>Nil</code>. Returns false otherwise.",31,[[]]],[11,"as_nil","","If the value is <code>Nil</code>, returns <code>()</code>. Returns <code>None</code> otherwise.",31,[[],["option",4]]],[11,"is_null","","Returns true if the value is <code>Null</code>. Returns false …",31,[[]]],[11,"as_null","","If the value is <code>Null</code>, returns <code>()</code>. Returns <code>None</code> otherwise.",31,[[],["option",4]]],[11,"is_cons","","Returns true if the value is a cons cell. Returns <code>False</code> …",31,[[]]],[11,"as_cons","","If the value is a cons cell, returns a reference to it. …",31,[[],[["option",4],["cons",3]]]],[11,"as_cons_mut","","If the value is a cons cell, returns a mutable reference …",31,[[],[["option",4],["cons",3]]]],[11,"as_pair","","If the value is a cons cell, return references to its <code>car</code> …",31,[[],["option",4]]],[11,"is_vector","","Returns true if the value is a vector.",31,[[]]],[11,"as_slice","","If the value is a vector, return a reference to its …",31,[[],["option",4]]],[11,"as_slice_mut","","If the value is a vector, return a mutable reference to …",31,[[],["option",4]]],[11,"list_iter","","If the value is a list, return an iterator over the list …",31,[[],[["listiter",3],["option",4]]]],[11,"to_vec","","Attempts conversion to a vector, cloning the values.",31,[[],[["option",4],["vec",3]]]],[11,"to_ref_vec","","Attempts conversion to a vector, taking references to the …",31,[[],[["option",4],["vec",3]]]],[11,"get","","Index into a S-expression list. A string or <code>Value</code> value …",31,[[["index",8]],[["value",4],["option",4]]]],[5,"from_reader","lexpr","Parse a value from an IO stream of S-expressions, using …",null,[[],[["result",6],["value",4]]]],[5,"from_reader_custom","","Parse a value from an IO stream containing a single …",null,[[["options",3]],[["result",6],["value",4]]]],[5,"from_slice","","Parse a value from bytes representing a single …",null,[[],[["result",6],["value",4]]]],[5,"from_slice_custom","","Parse a value from bytes representing a single …",null,[[["options",3]],[["result",6],["value",4]]]],[5,"from_str","","Parse a value from a string slice representing a single …",null,[[],[["result",6],["value",4]]]],[5,"from_str_custom","","Parse a value from a string slice representing a single …",null,[[["options",3]],[["result",6],["value",4]]]],[3,"Parser","","Parser for the S-expression text representation.",null,null],[5,"to_string","","Serialize the given value an S-expression string, using …",null,[[["value",4]],[["result",6],["string",3]]]],[5,"to_string_custom","","Serialize the given value an S-expression string.",null,[[["options",3],["value",4]],[["result",6],["string",3]]]],[5,"to_vec","","Serialize the given value as byte vector containing …",null,[[["value",4]],[["vec",3],["result",6]]]],[5,"to_vec_custom","","Serialize the given value as byte vector containing …",null,[[["options",3],["value",4]],[["vec",3],["result",6]]]],[5,"to_writer","","Serialize the given value value as S-expression text into …",null,[[["write",8],["value",4]],["result",6]]],[5,"to_writer_custom","","Serialize the given value value as S-expression text into …",null,[[["write",8],["options",3],["value",4]],["result",6]]],[3,"Printer","","A printer for S-expression values.",null,null],[4,"Value","","Represents an S-expression value.",null,null],[13,"Nil","","The special \\\"nil\\\" value.",31,null],[13,"Null","","The empty list.",31,null],[13,"Bool","","A boolean value.",31,null],[13,"Number","","A number.",31,null],[13,"Char","","A character.",31,null],[13,"String","","A string.",31,null],[13,"Symbol","","A symbol.",31,null],[13,"Keyword","","A keyword.",31,null],[13,"Bytes","","A byte vector.",31,null],[13,"Cons","","Represents a Lisp \\\"cons cell\\\".",31,null],[13,"Vector","","A Lisp vector.",31,null],[3,"Datum","","Combines an S-expression value with location information.",null,null],[3,"Cons","","A Lisp \\\"cons cell\\\".",null,null],[8,"Index","","A type that can be used to index into a <code>lexpr::Value</code>.",null,null],[3,"Number","","Represents an S-expression number, whether integer or …",null,null],[14,"sexp","","Construct a <code>Value</code> using syntax similar to regular …",null,null],[11,"from","lexpr::parse","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","lexpr","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","lexpr::cons","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","lexpr","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","lexpr::datum","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","lexpr","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","lexpr::parse","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","lexpr::parse::error","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","lexpr::parse","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","lexpr","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","lexpr::parse","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"into_iter","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","lexpr::print","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","lexpr","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"next","lexpr::parse","",34,[[],[["result",6],["option",4]]]],[11,"peek","","",34,[[],[["result",6],["option",4]]]],[11,"discard","","",34,[[]]],[11,"position","","",34,[[],["position",3]]],[11,"peek_position","","",34,[[],["position",3]]],[11,"byte_offset","","",34,[[]]],[11,"parse_r6rs_str","","",34,[[["vec",3]],[["result",6],["reference",4]]]],[11,"parse_elisp_str","","",34,[[["vec",3]],[["result",6],["elispstr",4]]]],[11,"parse_symbol","","",34,[[["vec",3]],[["result",6],["reference",4]]]],[11,"next","","",35,[[],[["result",6],["option",4]]]],[11,"peek","","",35,[[],[["result",6],["option",4]]]],[11,"discard","","",35,[[]]],[11,"position","","",35,[[],["position",3]]],[11,"peek_position","","",35,[[],["position",3]]],[11,"byte_offset","","",35,[[]]],[11,"parse_r6rs_str","","",35,[[["vec",3]],[["result",6],["reference",4]]]],[11,"parse_elisp_str","","",35,[[["vec",3]],[["result",6],["elispstr",4]]]],[11,"parse_symbol","","",35,[[["vec",3]],[["result",6],["reference",4]]]],[11,"next","","",36,[[],[["result",6],["option",4]]]],[11,"peek","","",36,[[],[["result",6],["option",4]]]],[11,"discard","","",36,[[]]],[11,"position","","",36,[[],["position",3]]],[11,"peek_position","","",36,[[],["position",3]]],[11,"byte_offset","","",36,[[]]],[11,"parse_r6rs_str","","",36,[[["vec",3]],[["result",6],["reference",4]]]],[11,"parse_elisp_str","","",36,[[["vec",3]],[["result",6],["elispstr",4]]]],[11,"parse_symbol","","",36,[[["vec",3]],[["result",6],["reference",4]]]],[11,"write_nil","lexpr::print","",40,[[],["result",6]]],[11,"write_bool","","",40,[[],["result",6]]],[11,"write_keyword","","",40,[[],["result",6]]],[11,"begin_vector","","",40,[[["vectortype",4]],["result",6]]],[11,"end_vector","","",40,[[],["result",6]]],[11,"write_char","","",40,[[],["result",6]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",40,[[["charescape",4]],["result",6]]],[11,"write_bytes","","",40,[[],["result",6]]],[11,"index_into","lexpr","",31,[[["value",4]],[["option",4],["value",4]]]],[11,"as_ref","lexpr::datum","",5,[[],["value",4]]],[11,"from","lexpr","",31,[[["datum",3]]]],[11,"from","","Turns a reference into an owned <code>Datum</code>, by cloning the …",4,[[["ref",3]]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[["cow",4]]]],[11,"from","","",31,[[["box",3]]]],[11,"from","","",31,[[["string",3]]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[["box",3]]]],[11,"from","","",31,[[["vec",3]]]],[11,"from","","",31,[[["number",3]]]],[11,"from","","",31,[[]]],[11,"from","","",31,[[["cons",3]]]],[11,"from","","",31,[[["vec",3],["value",4]]]],[11,"from","","",31,[[["box",3]]]],[11,"into_iter","","Obtains an iterator yielding the contents of the elements …",0,[[],["intoiter",3]]],[11,"next","lexpr::cons","",1,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","lexpr::datum","",32,[[],["option",4]]],[11,"next","","",7,[[],["option",4]]],[11,"next","lexpr","",21,[[],["option",4]]],[11,"next","lexpr::parse","",37,[[],["option",4]]],[11,"next","","",38,[[],["option",4]]],[11,"clone","","",14,[[],["keywordsyntax",4]]],[11,"clone","","",15,[[],["stringsyntax",4]]],[11,"clone","","",13,[[],["charsyntax",4]]],[11,"clone","lexpr","",0,[[],["cons",3]]],[11,"clone","lexpr::cons","",3,[[],["listiter",3]]],[11,"clone","lexpr","",4,[[],["datum",3]]],[11,"clone","lexpr::datum","",5,[[],["ref",3]]],[11,"clone","","",6,[[],["span",3]]],[11,"clone","","",32,[[],["vectoriter",3]]],[11,"clone","","",7,[[],["listiter",3]]],[11,"clone","lexpr","",8,[[],["number",3]]],[11,"clone","lexpr::parse","",20,[[],["options",3]]],[11,"clone","","",17,[[],["nilsymbol",4]]],[11,"clone","","",18,[[],["tsymbol",4]]],[11,"clone","","",19,[[],["brackets",4]]],[11,"clone","lexpr::parse::error","",10,[[],["location",3]]],[11,"clone","","",12,[[],["category",4]]],[11,"clone","lexpr::parse","",33,[[],["position",3]]],[11,"clone","lexpr::print","",22,[[],["options",3]]],[11,"clone","","",23,[[],["nilsyntax",4]]],[11,"clone","","",24,[[],["boolsyntax",4]]],[11,"clone","","",25,[[],["vectorsyntax",4]]],[11,"clone","","",26,[[],["bytessyntax",4]]],[11,"clone","","",39,[[],["defaultformatter",3]]],[11,"clone","","",40,[[],["customizedformatter",3]]],[11,"clone","lexpr","",31,[[],["value",4]]],[11,"default","lexpr::parse","Construct a default set of options. This corresponds most …",20,[[]]],[11,"default","lexpr::print","",22,[[]]],[11,"cmp","lexpr::parse","",33,[[["position",3]],["ordering",4]]],[11,"eq","","",14,[[["keywordsyntax",4]]]],[11,"eq","","",15,[[["stringsyntax",4]]]],[11,"eq","","",13,[[["charsyntax",4]]]],[11,"eq","lexpr","",0,[[["cons",3]]]],[11,"ne","","",0,[[["cons",3]]]],[11,"eq","","",4,[[["datum",3]]]],[11,"ne","","",4,[[["datum",3]]]],[11,"eq","lexpr::datum","",5,[[["ref",3]]]],[11,"ne","","",5,[[["ref",3]]]],[11,"eq","","",6,[[["span",3]]]],[11,"ne","","",6,[[["span",3]]]],[11,"eq","lexpr","",8,[[["number",3]]]],[11,"ne","","",8,[[["number",3]]]],[11,"eq","lexpr::parse","",17,[[["nilsymbol",4]]]],[11,"eq","","",18,[[["tsymbol",4]]]],[11,"eq","","",19,[[["brackets",4]]]],[11,"eq","lexpr::parse::error","",10,[[["location",3]]]],[11,"ne","","",10,[[["location",3]]]],[11,"eq","","",12,[[["category",4]]]],[11,"eq","lexpr::parse","",33,[[["position",3]]]],[11,"ne","","",33,[[["position",3]]]],[11,"eq","lexpr","",31,[[["value",4]]]],[11,"ne","","",31,[[["value",4]]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[["string",3]]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"eq","","",31,[[]]],[11,"partial_cmp","lexpr::parse","",33,[[["position",3]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["position",3]]]],[11,"le","","",33,[[["position",3]]]],[11,"gt","","",33,[[["position",3]]]],[11,"ge","","",33,[[["position",3]]]],[11,"deref","lexpr::datum","",5,[[]]],[11,"fmt","lexpr::parse","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr","",0,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::cons","",3,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr","",4,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::datum","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr","",8,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::parse","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::parse::error","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::parse","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::print","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr::parse","",11,[[["formatter",3]],["result",6]]],[11,"fmt","lexpr","Display an S-expression value as a string.",31,[[["formatter",3]],["result",6]]],[11,"index","","Index into a <code>lexpr::Value</code> using the syntax <code>value[0]</code> or …",31,[[],["value",4]]],[11,"hash","lexpr::datum","",6,[[]]],[11,"hash","lexpr::parse","",33,[[]]],[11,"from_str","lexpr","",31,[[],["result",4]]],[11,"source","lexpr::parse","",11,[[],[["option",4],["error",8]]]],[11,"write","lexpr","",30,[[],["result",6]]],[11,"flush","","",30,[[],["result",6]]],[11,"parse_elisp_char","lexpr::parse","Parses an Emacs Lisp character constant.",16,[[["vec",3]],["result",6]]],[11,"line","","Returns the 1-based line number.",33,[[]]],[11,"column","","Returns the column.",33,[[]]],[11,"new","","Create a S-expression input source to read from a std::io …",34,[[]]],[11,"new","","Create a S-expression input source to read from a slice …",35,[[]]],[11,"new","","Create a S-expression input source to read from a UTF-8 …",36,[[]]]],"p":[[3,"Cons"],[3,"Iter"],[3,"IntoIter"],[3,"ListIter"],[3,"Datum"],[3,"Ref"],[3,"Span"],[3,"ListIter"],[3,"Number"],[8,"Visitor"],[3,"Location"],[3,"Error"],[4,"Category"],[4,"CharSyntax"],[4,"KeywordSyntax"],[4,"StringSyntax"],[8,"Read"],[4,"NilSymbol"],[4,"TSymbol"],[4,"Brackets"],[3,"Options"],[3,"Parser"],[3,"Options"],[4,"NilSyntax"],[4,"BoolSyntax"],[4,"VectorSyntax"],[4,"BytesSyntax"],[4,"CharEscape"],[4,"VectorType"],[8,"Formatter"],[3,"Printer"],[4,"Value"],[3,"VectorIter"],[3,"Position"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"ValueIter"],[3,"DatumIter"],[3,"DefaultFormatter"],[3,"CustomizedFormatter"]]},\
"lexpr_macros":{"doc":"Internal crate implementing macros exposed by the <code>lexpr</code> …","i":[[14,"proc_macro_hack_sexp","lexpr_macros","",null,null]],"p":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms\' system libraries","i":[[4,"c_void","libc","Equivalent to C\'s <code>void</code> type when used as a pointer.",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"isblank","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"qsort","","",null,null],[5,"bsearch","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fmemopen","","",null,null],[5,"open_memstream","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"clearerr","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strndup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strcasecmp","","",null,null],[5,"strncasecmp","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"strsignal","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"wmemchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setegid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"ttyname_r","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"timegm","","",null,null],[5,"mknod","","",null,null],[5,"gethostname","","",null,null],[5,"endservent","","",null,null],[5,"getservbyname","","",null,null],[5,"getservbyport","","",null,null],[5,"getservent","","",null,null],[5,"setservent","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"strcasestr","","",null,null],[5,"getline","","",null,null],[5,"lockf","","",null,null],[5,"open_wmemstream","","",null,null],[5,"getsid","","",null,null],[5,"truncate","","",null,null],[5,"pause","","",null,null],[5,"readlinkat","","",null,null],[5,"mkdirat","","",null,null],[5,"openat","","",null,null],[5,"fdopendir","","",null,null],[5,"readdir_r","","The 64-bit libc on Solaris and illumos only has …",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetspeed","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_init","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"clock_getcpuclockid","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"posix_fadvise64","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"login_tty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"uname","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"forkpty","","",null,null],[5,"openpty","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"getnameinfo","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"futimes","","",null,null],[5,"strerror_r","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"getspnam_r","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"fallocate64","","",null,null],[5,"posix_fallocate","","",null,null],[5,"posix_fallocate64","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_timedreceive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_timedsend","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"accept4","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sendfile64","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"inotify_rm_watch","","",null,null],[5,"inotify_init","","",null,null],[5,"inotify_init1","","",null,null],[5,"inotify_add_watch","","",null,null],[5,"fanotify_init","","",null,null],[5,"regcomp","","",null,null],[5,"regexec","","",null,null],[5,"regerror","","",null,null],[5,"regfree","","",null,null],[5,"iconv_open","","",null,null],[5,"iconv","","",null,null],[5,"iconv_close","","",null,null],[5,"gettid","","",null,null],[5,"fgetspent_r","","",null,null],[5,"sgetspent_r","","",null,null],[5,"getspent_r","","",null,null],[5,"qsort_r","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"utmpname","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"mallopt","","",null,null],[5,"gettimeofday","","",null,null],[5,"statx","","",null,null],[5,"getrandom","","",null,null],[5,"memmem","","",null,null],[5,"getauxval","","",null,null],[5,"adjtimex","","",null,null],[5,"ntp_adjtime","","",null,null],[5,"ntp_gettime","","",null,null],[5,"copy_file_range","","",null,null],[5,"fanotify_mark","","",null,null],[5,"preadv2","","",null,null],[5,"pwritev2","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"pthread_getname_np","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"dlmopen","","",null,null],[5,"dlinfo","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[4,"DIR","","",null,null],[6,"locale_t","","",null,null],[3,"group","","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",6,null],[12,"ipv6mr_interface","","",6,null],[3,"hostent","","",null,null],[12,"h_name","","",7,null],[12,"h_aliases","","",7,null],[12,"h_addrtype","","",7,null],[12,"h_length","","",7,null],[12,"h_addr_list","","",7,null],[3,"iovec","","",null,null],[12,"iov_base","","",8,null],[12,"iov_len","","",8,null],[3,"pollfd","","",null,null],[12,"fd","","",9,null],[12,"events","","",9,null],[12,"revents","","",9,null],[3,"winsize","","",null,null],[12,"ws_row","","",10,null],[12,"ws_col","","",10,null],[12,"ws_xpixel","","",10,null],[12,"ws_ypixel","","",10,null],[3,"linger","","",null,null],[12,"l_onoff","","",11,null],[12,"l_linger","","",11,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",12,null],[3,"itimerval","","",null,null],[12,"it_interval","","",13,null],[12,"it_value","","",13,null],[3,"tms","","",null,null],[12,"tms_utime","","",14,null],[12,"tms_stime","","",14,null],[12,"tms_cutime","","",14,null],[12,"tms_cstime","","",14,null],[3,"servent","","",null,null],[12,"s_name","","",15,null],[12,"s_aliases","","",15,null],[12,"s_port","","",15,null],[12,"s_proto","","",15,null],[3,"protoent","","",null,null],[12,"p_name","","",16,null],[12,"p_aliases","","",16,null],[12,"p_proto","","",16,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"ARPOP_REQUEST","","",null,null],[17,"ARPOP_REPLY","","",null,null],[17,"ATF_COM","","",null,null],[17,"ATF_PERM","","",null,null],[17,"ATF_PUBL","","",null,null],[17,"ATF_USETRAILERS","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[4,"timezone","","",null,null],[3,"in_addr","","",null,null],[12,"s_addr","","",17,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",18,null],[12,"imr_interface","","",18,null],[3,"ip_mreq_source","","",null,null],[12,"imr_multiaddr","","",19,null],[12,"imr_interface","","",19,null],[12,"imr_sourceaddr","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",24,null],[12,"sll_protocol","","",24,null],[12,"sll_ifindex","","",24,null],[12,"sll_hatype","","",24,null],[12,"sll_pkttype","","",24,null],[12,"sll_halen","","",24,null],[12,"sll_addr","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",26,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",27,null],[12,"dli_fbase","","",27,null],[12,"dli_sname","","",27,null],[12,"dli_saddr","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",29,null],[12,"ipi_spec_dst","","",29,null],[12,"ipi_addr","","",29,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",30,null],[12,"ifa_name","","",30,null],[12,"ifa_flags","","",30,null],[12,"ifa_addr","","",30,null],[12,"ifa_netmask","","",30,null],[12,"ifa_ifu","","",30,null],[12,"ifa_data","","",30,null],[3,"in6_rtmsg","","",null,null],[3,"arpreq","","",null,null],[12,"arp_pa","","",31,null],[12,"arp_ha","","",31,null],[12,"arp_flags","","",31,null],[12,"arp_netmask","","",31,null],[12,"arp_dev","","",31,null],[3,"arpreq_old","","",null,null],[12,"arp_pa","","",32,null],[12,"arp_ha","","",32,null],[12,"arp_flags","","",32,null],[12,"arp_netmask","","",32,null],[3,"arphdr","","",null,null],[12,"ar_hrd","","",33,null],[12,"ar_pro","","",33,null],[12,"ar_hln","","",33,null],[12,"ar_pln","","",33,null],[12,"ar_op","","",33,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",34,null],[12,"msg_len","","",34,null],[3,"epoll_event","","",null,null],[12,"events","","",35,null],[12,"u64","","",35,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",36,null],[12,"sun_path","","",36,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",37,null],[3,"utsname","","",null,null],[12,"sysname","","",38,null],[12,"nodename","","",38,null],[12,"release","","",38,null],[12,"version","","",38,null],[12,"machine","","",38,null],[12,"domainname","","",38,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",39,null],[12,"sigev_signo","","",39,null],[12,"sigev_notify","","",39,null],[12,"sigev_notify_thread_id","","",39,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"CLOCK_TAI","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_ALG","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_TOS","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_OPTIONS","","",null,null],[17,"IP_ROUTER_ALERT","","",null,null],[17,"IP_RECVOPTS","","",null,null],[17,"IP_RETOPTS","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_PKTOPTIONS","","",null,null],[17,"IP_MTU_DISCOVER","","",null,null],[17,"IP_RECVERR","","",null,null],[17,"IP_RECVTTL","","",null,null],[17,"IP_RECVTOS","","",null,null],[17,"IP_MTU","","",null,null],[17,"IP_FREEBIND","","",null,null],[17,"IP_IPSEC_POLICY","","",null,null],[17,"IP_XFRM_POLICY","","",null,null],[17,"IP_PASSSEC","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IP_ORIGDSTADDR","","",null,null],[17,"IP_RECVORIGDSTADDR","","",null,null],[17,"IP_MINTTL","","",null,null],[17,"IP_NODEFRAG","","",null,null],[17,"IP_CHECKSUM","","",null,null],[17,"IP_BIND_ADDRESS_NO_PORT","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_UNBLOCK_SOURCE","","",null,null],[17,"IP_BLOCK_SOURCE","","",null,null],[17,"IP_ADD_SOURCE_MEMBERSHIP","","",null,null],[17,"IP_DROP_SOURCE_MEMBERSHIP","","",null,null],[17,"IP_MSFILTER","","",null,null],[17,"IP_MULTICAST_ALL","","",null,null],[17,"IP_UNICAST_IF","","",null,null],[17,"IP_DEFAULT_MULTICAST_TTL","","",null,null],[17,"IP_DEFAULT_MULTICAST_LOOP","","",null,null],[17,"IP_PMTUDISC_DONT","","",null,null],[17,"IP_PMTUDISC_WANT","","",null,null],[17,"IP_PMTUDISC_DO","","",null,null],[17,"IP_PMTUDISC_PROBE","","",null,null],[17,"IP_PMTUDISC_INTERFACE","","",null,null],[17,"IP_PMTUDISC_OMIT","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"MCAST_EXCLUDE","","",null,null],[17,"MCAST_INCLUDE","","",null,null],[17,"MCAST_JOIN_GROUP","","",null,null],[17,"MCAST_BLOCK_SOURCE","","",null,null],[17,"MCAST_UNBLOCK_SOURCE","","",null,null],[17,"MCAST_LEAVE_GROUP","","",null,null],[17,"MCAST_JOIN_SOURCE_GROUP","","",null,null],[17,"MCAST_LEAVE_SOURCE_GROUP","","",null,null],[17,"MCAST_MSFILTER","","",null,null],[17,"IPV6_ADDRFORM","","",null,null],[17,"IPV6_2292PKTINFO","","",null,null],[17,"IPV6_2292HOPOPTS","","",null,null],[17,"IPV6_2292DSTOPTS","","",null,null],[17,"IPV6_2292RTHDR","","",null,null],[17,"IPV6_2292PKTOPTIONS","","",null,null],[17,"IPV6_CHECKSUM","","",null,null],[17,"IPV6_2292HOPLIMIT","","",null,null],[17,"IPV6_NEXTHOP","","",null,null],[17,"IPV6_AUTHHDR","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ROUTER_ALERT","","",null,null],[17,"IPV6_MTU_DISCOVER","","",null,null],[17,"IPV6_MTU","","",null,null],[17,"IPV6_RECVERR","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_JOIN_ANYCAST","","",null,null],[17,"IPV6_LEAVE_ANYCAST","","",null,null],[17,"IPV6_IPSEC_POLICY","","",null,null],[17,"IPV6_XFRM_POLICY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"IPV6_RECVHOPLIMIT","","",null,null],[17,"IPV6_HOPLIMIT","","",null,null],[17,"IPV6_RECVHOPOPTS","","",null,null],[17,"IPV6_HOPOPTS","","",null,null],[17,"IPV6_RTHDRDSTOPTS","","",null,null],[17,"IPV6_RECVRTHDR","","",null,null],[17,"IPV6_RTHDR","","",null,null],[17,"IPV6_RECVDSTOPTS","","",null,null],[17,"IPV6_DSTOPTS","","",null,null],[17,"IPV6_RECVPATHMTU","","",null,null],[17,"IPV6_PATHMTU","","",null,null],[17,"IPV6_DONTFRAG","","",null,null],[17,"IPV6_RECVTCLASS","","",null,null],[17,"IPV6_TCLASS","","",null,null],[17,"IPV6_AUTOFLOWLABEL","","",null,null],[17,"IPV6_ADDR_PREFERENCES","","",null,null],[17,"IPV6_MINHOPCOUNT","","",null,null],[17,"IPV6_ORIGDSTADDR","","",null,null],[17,"IPV6_RECVORIGDSTADDR","","",null,null],[17,"IPV6_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_IF","","",null,null],[17,"IPV6_PREFER_SRC_TMP","","",null,null],[17,"IPV6_PREFER_SRC_PUBLIC","","",null,null],[17,"IPV6_PREFER_SRC_PUBTMP_DEFAULT","","",null,null],[17,"IPV6_PREFER_SRC_COA","","",null,null],[17,"IPV6_PREFER_SRC_HOME","","",null,null],[17,"IPV6_PREFER_SRC_CGA","","",null,null],[17,"IPV6_PREFER_SRC_NONCGA","","",null,null],[17,"IPV6_PMTUDISC_DONT","","",null,null],[17,"IPV6_PMTUDISC_WANT","","",null,null],[17,"IPV6_PMTUDISC_DO","","",null,null],[17,"IPV6_PMTUDISC_PROBE","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"UIO_MAXIOV","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"MMAP_PAGE_ZERO","","",null,null],[17,"ADDR_LIMIT_32BIT","","",null,null],[17,"SHORT_INODE","","",null,null],[17,"WHOLE_SECONDS","","",null,null],[17,"STICKY_TIMEOUTS","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"CLD_EXITED","","",null,null],[17,"CLD_KILLED","","",null,null],[17,"CLD_DUMPED","","",null,null],[17,"CLD_TRAPPED","","",null,null],[17,"CLD_STOPPED","","",null,null],[17,"CLD_CONTINUED","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"P_PIDFD","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPTOS_ECN_MASK","","",null,null],[17,"IPTOS_ECN_ECT1","","",null,null],[17,"IPTOS_ECN_ECT0","","",null,null],[17,"IPTOS_ECN_CE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ARPOP_RREQUEST","","",null,null],[17,"ARPOP_RREPLY","","",null,null],[17,"ARPOP_InREQUEST","","",null,null],[17,"ARPOP_InREPLY","","",null,null],[17,"ARPOP_NAK","","",null,null],[17,"ATF_NETMASK","","",null,null],[17,"ATF_DONTPUB","","",null,null],[17,"ARPHRD_NETROM","","",null,null],[17,"ARPHRD_ETHER","","",null,null],[17,"ARPHRD_EETHER","","",null,null],[17,"ARPHRD_AX25","","",null,null],[17,"ARPHRD_PRONET","","",null,null],[17,"ARPHRD_CHAOS","","",null,null],[17,"ARPHRD_IEEE802","","",null,null],[17,"ARPHRD_ARCNET","","",null,null],[17,"ARPHRD_APPLETLK","","",null,null],[17,"ARPHRD_DLCI","","",null,null],[17,"ARPHRD_ATM","","",null,null],[17,"ARPHRD_METRICOM","","",null,null],[17,"ARPHRD_IEEE1394","","",null,null],[17,"ARPHRD_EUI64","","",null,null],[17,"ARPHRD_INFINIBAND","","",null,null],[17,"ARPHRD_SLIP","","",null,null],[17,"ARPHRD_CSLIP","","",null,null],[17,"ARPHRD_SLIP6","","",null,null],[17,"ARPHRD_CSLIP6","","",null,null],[17,"ARPHRD_RSRVD","","",null,null],[17,"ARPHRD_ADAPT","","",null,null],[17,"ARPHRD_ROSE","","",null,null],[17,"ARPHRD_X25","","",null,null],[17,"ARPHRD_HWX25","","",null,null],[17,"ARPHRD_PPP","","",null,null],[17,"ARPHRD_CISCO","","",null,null],[17,"ARPHRD_HDLC","","",null,null],[17,"ARPHRD_LAPB","","",null,null],[17,"ARPHRD_DDCMP","","",null,null],[17,"ARPHRD_RAWHDLC","","",null,null],[17,"ARPHRD_TUNNEL","","",null,null],[17,"ARPHRD_TUNNEL6","","",null,null],[17,"ARPHRD_FRAD","","",null,null],[17,"ARPHRD_SKIP","","",null,null],[17,"ARPHRD_LOOPBACK","","",null,null],[17,"ARPHRD_LOCALTLK","","",null,null],[17,"ARPHRD_FDDI","","",null,null],[17,"ARPHRD_BIF","","",null,null],[17,"ARPHRD_SIT","","",null,null],[17,"ARPHRD_IPDDP","","",null,null],[17,"ARPHRD_IPGRE","","",null,null],[17,"ARPHRD_PIMREG","","",null,null],[17,"ARPHRD_HIPPI","","",null,null],[17,"ARPHRD_ASH","","",null,null],[17,"ARPHRD_ECONET","","",null,null],[17,"ARPHRD_IRDA","","",null,null],[17,"ARPHRD_FCPP","","",null,null],[17,"ARPHRD_FCAL","","",null,null],[17,"ARPHRD_FCPL","","",null,null],[17,"ARPHRD_FCFABRIC","","",null,null],[17,"ARPHRD_IEEE802_TR","","",null,null],[17,"ARPHRD_IEEE80211","","",null,null],[17,"ARPHRD_IEEE80211_PRISM","","",null,null],[17,"ARPHRD_IEEE80211_RADIOTAP","","",null,null],[17,"ARPHRD_IEEE802154","","",null,null],[17,"ARPHRD_VOID","","",null,null],[17,"ARPHRD_NONE","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPV6_HDRINCL","","",null,null],[17,"IPV6_PMTUDISC_INTERFACE","","",null,null],[17,"IPV6_PMTUDISC_OMIT","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"ADDR_NO_RANDOMIZE","","",null,null],[17,"ADDR_COMPAT_LAYOUT","","",null,null],[17,"READ_IMPLIES_EXEC","","",null,null],[17,"ADDR_LIMIT_3GB","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[5,"CMSG_FIRSTHDR","","",null,[[]]],[5,"CMSG_DATA","","",null,[[]]],[5,"CMSG_SPACE","","",null,[[["c_uint",6]],["c_uint",6]]],[5,"CMSG_LEN","","",null,[[["c_uint",6]],["c_uint",6]]],[5,"FD_CLR","","",null,[[["c_int",6]]]],[5,"FD_ISSET","","",null,[[["c_int",6]]]],[5,"FD_SET","","",null,[[["c_int",6]]]],[5,"FD_ZERO","","",null,[[]]],[5,"WIFSTOPPED","","",null,[[["c_int",6]]]],[5,"WSTOPSIG","","",null,[[["c_int",6]],["c_int",6]]],[5,"WIFCONTINUED","","",null,[[["c_int",6]]]],[5,"WIFSIGNALED","","",null,[[["c_int",6]]]],[5,"WTERMSIG","","",null,[[["c_int",6]],["c_int",6]]],[5,"WIFEXITED","","",null,[[["c_int",6]]]],[5,"WEXITSTATUS","","",null,[[["c_int",6]],["c_int",6]]],[5,"WCOREDUMP","","",null,[[["c_int",6]]]],[5,"W_EXITCODE","","",null,[[["c_int",6]],["c_int",6]]],[5,"W_STOPCODE","","",null,[[["c_int",6]],["c_int",6]]],[5,"QCMD","","",null,[[["c_int",6]],["c_int",6]]],[5,"IPOPT_COPIED","","",null,[[]]],[5,"IPOPT_CLASS","","",null,[[]]],[5,"IPOPT_NUMBER","","",null,[[]]],[5,"IPTOS_ECN","","",null,[[]]],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"Elf64_Sxword","","",null,null],[6,"Elf32_Section","","",null,null],[6,"Elf64_Section","","",null,null],[6,"canid_t","","",null,null],[6,"can_err_mask_t","","",null,null],[6,"iconv_t","","",null,null],[4,"fpos64_t","","",null,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",40,null],[12,"rlim_max","","",40,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"passwd","","",null,null],[12,"pw_name","","",42,null],[12,"pw_passwd","","",42,null],[12,"pw_uid","","",42,null],[12,"pw_gid","","",42,null],[12,"pw_gecos","","",42,null],[12,"pw_dir","","",42,null],[12,"pw_shell","","",42,null],[3,"spwd","","",null,null],[12,"sp_namp","","",43,null],[12,"sp_pwdp","","",43,null],[12,"sp_lstchg","","",43,null],[12,"sp_min","","",43,null],[12,"sp_max","","",43,null],[12,"sp_warn","","",43,null],[12,"sp_inact","","",43,null],[12,"sp_expire","","",43,null],[12,"sp_flag","","",43,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",44,null],[12,"dqb_bsoftlimit","","",44,null],[12,"dqb_curspace","","",44,null],[12,"dqb_ihardlimit","","",44,null],[12,"dqb_isoftlimit","","",44,null],[12,"dqb_curinodes","","",44,null],[12,"dqb_btime","","",44,null],[12,"dqb_itime","","",44,null],[12,"dqb_valid","","",44,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",45,null],[12,"ssi_errno","","",45,null],[12,"ssi_code","","",45,null],[12,"ssi_pid","","",45,null],[12,"ssi_uid","","",45,null],[12,"ssi_fd","","",45,null],[12,"ssi_tid","","",45,null],[12,"ssi_band","","",45,null],[12,"ssi_overrun","","",45,null],[12,"ssi_trapno","","",45,null],[12,"ssi_status","","",45,null],[12,"ssi_int","","",45,null],[12,"ssi_ptr","","",45,null],[12,"ssi_utime","","",45,null],[12,"ssi_stime","","",45,null],[12,"ssi_addr","","",45,null],[12,"ssi_addr_lsb","","",45,null],[12,"ssi_syscall","","",45,null],[12,"ssi_call_addr","","",45,null],[12,"ssi_arch","","",45,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",46,null],[12,"it_value","","",46,null],[3,"fsid_t","","",null,null],[3,"packet_mreq","","",null,null],[12,"mr_ifindex","","",47,null],[12,"mr_type","","",47,null],[12,"mr_alen","","",47,null],[12,"mr_address","","",47,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",48,null],[12,"if_name","","",48,null],[3,"msginfo","","",null,null],[12,"msgpool","","",49,null],[12,"msgmap","","",49,null],[12,"msgmax","","",49,null],[12,"msgmnb","","",49,null],[12,"msgmni","","",49,null],[12,"msgssz","","",49,null],[12,"msgtql","","",49,null],[12,"msgseg","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Ehdr","","",null,null],[12,"e_ident","","",66,null],[12,"e_type","","",66,null],[12,"e_machine","","",66,null],[12,"e_version","","",66,null],[12,"e_entry","","",66,null],[12,"e_phoff","","",66,null],[12,"e_shoff","","",66,null],[12,"e_flags","","",66,null],[12,"e_ehsize","","",66,null],[12,"e_phentsize","","",66,null],[12,"e_phnum","","",66,null],[12,"e_shentsize","","",66,null],[12,"e_shnum","","",66,null],[12,"e_shstrndx","","",66,null],[3,"Elf64_Ehdr","","",null,null],[12,"e_ident","","",67,null],[12,"e_type","","",67,null],[12,"e_machine","","",67,null],[12,"e_version","","",67,null],[12,"e_entry","","",67,null],[12,"e_phoff","","",67,null],[12,"e_shoff","","",67,null],[12,"e_flags","","",67,null],[12,"e_ehsize","","",67,null],[12,"e_phentsize","","",67,null],[12,"e_phnum","","",67,null],[12,"e_shentsize","","",67,null],[12,"e_shnum","","",67,null],[12,"e_shstrndx","","",67,null],[3,"Elf32_Sym","","",null,null],[12,"st_name","","",68,null],[12,"st_value","","",68,null],[12,"st_size","","",68,null],[12,"st_info","","",68,null],[12,"st_other","","",68,null],[12,"st_shndx","","",68,null],[3,"Elf64_Sym","","",null,null],[12,"st_name","","",69,null],[12,"st_info","","",69,null],[12,"st_other","","",69,null],[12,"st_shndx","","",69,null],[12,"st_value","","",69,null],[12,"st_size","","",69,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",70,null],[12,"p_offset","","",70,null],[12,"p_vaddr","","",70,null],[12,"p_paddr","","",70,null],[12,"p_filesz","","",70,null],[12,"p_memsz","","",70,null],[12,"p_flags","","",70,null],[12,"p_align","","",70,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",71,null],[12,"p_flags","","",71,null],[12,"p_offset","","",71,null],[12,"p_vaddr","","",71,null],[12,"p_paddr","","",71,null],[12,"p_filesz","","",71,null],[12,"p_memsz","","",71,null],[12,"p_align","","",71,null],[3,"Elf32_Shdr","","",null,null],[12,"sh_name","","",72,null],[12,"sh_type","","",72,null],[12,"sh_flags","","",72,null],[12,"sh_addr","","",72,null],[12,"sh_offset","","",72,null],[12,"sh_size","","",72,null],[12,"sh_link","","",72,null],[12,"sh_info","","",72,null],[12,"sh_addralign","","",72,null],[12,"sh_entsize","","",72,null],[3,"Elf64_Shdr","","",null,null],[12,"sh_name","","",73,null],[12,"sh_type","","",73,null],[12,"sh_flags","","",73,null],[12,"sh_addr","","",73,null],[12,"sh_offset","","",73,null],[12,"sh_size","","",73,null],[12,"sh_link","","",73,null],[12,"sh_info","","",73,null],[12,"sh_addralign","","",73,null],[12,"sh_entsize","","",73,null],[3,"ucred","","",null,null],[12,"pid","","",74,null],[12,"uid","","",74,null],[12,"gid","","",74,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",75,null],[12,"mnt_dir","","",75,null],[12,"mnt_type","","",75,null],[12,"mnt_opts","","",75,null],[12,"mnt_freq","","",75,null],[12,"mnt_passno","","",75,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",76,null],[12,"version","","",76,null],[12,"reserved","","",76,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",77,null],[12,"ipi6_ifindex","","",77,null],[3,"arpd_request","","",null,null],[12,"req","","",78,null],[12,"ip","","",78,null],[12,"dev","","",78,null],[12,"stamp","","",78,null],[12,"updated","","",78,null],[12,"ha","","",78,null],[3,"inotify_event","","",null,null],[12,"wd","","",79,null],[12,"mask","","",79,null],[12,"cookie","","",79,null],[12,"len","","",79,null],[3,"fanotify_response","","",null,null],[12,"fd","","",80,null],[12,"response","","",80,null],[3,"sockaddr_vm","","",null,null],[12,"svm_family","","",81,null],[12,"svm_reserved1","","",81,null],[12,"svm_port","","",81,null],[12,"svm_cid","","",81,null],[12,"svm_zero","","",81,null],[3,"regmatch_t","","",null,null],[12,"rm_so","","",82,null],[12,"rm_eo","","",82,null],[3,"sock_extended_err","","",null,null],[12,"ee_errno","","",83,null],[12,"ee_origin","","",83,null],[12,"ee_type","","",83,null],[12,"ee_code","","",83,null],[12,"ee_pad","","",83,null],[12,"ee_info","","",83,null],[12,"ee_data","","",83,null],[3,"__c_anonymous_sockaddr_can_tp","","",null,null],[12,"rx_id","","",84,null],[12,"tx_id","","",84,null],[3,"__c_anonymous_sockaddr_can_j1939","","",null,null],[12,"name","","",85,null],[12,"pgn","","",85,null],[12,"addr","","",85,null],[3,"can_filter","","",null,null],[12,"can_id","","",86,null],[12,"can_mask","","",86,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",87,null],[12,"nl_pid","","",87,null],[12,"nl_groups","","",87,null],[3,"dirent","","",null,null],[12,"d_ino","","",88,null],[12,"d_off","","",88,null],[12,"d_reclen","","",88,null],[12,"d_type","","",88,null],[12,"d_name","","",88,null],[3,"dirent64","","",null,null],[12,"d_ino","","",89,null],[12,"d_off","","",89,null],[12,"d_reclen","","",89,null],[12,"d_type","","",89,null],[12,"d_name","","",89,null],[3,"sockaddr_alg","","",null,null],[12,"salg_family","","",90,null],[12,"salg_type","","",90,null],[12,"salg_feat","","",90,null],[12,"salg_mask","","",90,null],[12,"salg_name","","",90,null],[3,"af_alg_iv","","WARNING: The <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of …",null,null],[12,"ivlen","","",91,null],[12,"iv","","",91,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",92,null],[12,"mq_maxmsg","","",92,null],[12,"mq_msgsize","","",92,null],[12,"mq_curmsgs","","",92,null],[19,"__c_anonymous_sockaddr_can_can_addr","","",null,null],[12,"tp","","",93,null],[12,"j1939","","",93,null],[3,"sockaddr_can","","",null,null],[12,"can_family","","",94,null],[12,"can_ifindex","","",94,null],[12,"can_addr","","",94,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_SEAL_FUTURE_WRITE","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFA_UNSPEC","","",null,null],[17,"IFA_ADDRESS","","",null,null],[17,"IFA_LOCAL","","",null,null],[17,"IFA_LABEL","","",null,null],[17,"IFA_BROADCAST","","",null,null],[17,"IFA_ANYCAST","","",null,null],[17,"IFA_CACHEINFO","","",null,null],[17,"IFA_MULTICAST","","",null,null],[17,"IFA_F_SECONDARY","","",null,null],[17,"IFA_F_TEMPORARY","","",null,null],[17,"IFA_F_NODAD","","",null,null],[17,"IFA_F_OPTIMISTIC","","",null,null],[17,"IFA_F_DADFAILED","","",null,null],[17,"IFA_F_HOMEADDRESS","","",null,null],[17,"IFA_F_DEPRECATED","","",null,null],[17,"IFA_F_TENTATIVE","","",null,null],[17,"IFA_F_PERMANENT","","",null,null],[17,"IFLA_UNSPEC","","",null,null],[17,"IFLA_ADDRESS","","",null,null],[17,"IFLA_BROADCAST","","",null,null],[17,"IFLA_IFNAME","","",null,null],[17,"IFLA_MTU","","",null,null],[17,"IFLA_LINK","","",null,null],[17,"IFLA_QDISC","","",null,null],[17,"IFLA_STATS","","",null,null],[17,"IFLA_COST","","",null,null],[17,"IFLA_PRIORITY","","",null,null],[17,"IFLA_MASTER","","",null,null],[17,"IFLA_WIRELESS","","",null,null],[17,"IFLA_PROTINFO","","",null,null],[17,"IFLA_TXQLEN","","",null,null],[17,"IFLA_MAP","","",null,null],[17,"IFLA_WEIGHT","","",null,null],[17,"IFLA_OPERSTATE","","",null,null],[17,"IFLA_LINKMODE","","",null,null],[17,"IFLA_LINKINFO","","",null,null],[17,"IFLA_NET_NS_PID","","",null,null],[17,"IFLA_IFALIAS","","",null,null],[17,"IFLA_NUM_VF","","",null,null],[17,"IFLA_VFINFO_LIST","","",null,null],[17,"IFLA_STATS64","","",null,null],[17,"IFLA_VF_PORTS","","",null,null],[17,"IFLA_PORT_SELF","","",null,null],[17,"IFLA_AF_SPEC","","",null,null],[17,"IFLA_GROUP","","",null,null],[17,"IFLA_NET_NS_FD","","",null,null],[17,"IFLA_EXT_MASK","","",null,null],[17,"IFLA_PROMISCUITY","","",null,null],[17,"IFLA_NUM_TX_QUEUES","","",null,null],[17,"IFLA_NUM_RX_QUEUES","","",null,null],[17,"IFLA_CARRIER","","",null,null],[17,"IFLA_PHYS_PORT_ID","","",null,null],[17,"IFLA_CARRIER_CHANGES","","",null,null],[17,"IFLA_PHYS_SWITCH_ID","","",null,null],[17,"IFLA_LINK_NETNSID","","",null,null],[17,"IFLA_PHYS_PORT_NAME","","",null,null],[17,"IFLA_PROTO_DOWN","","",null,null],[17,"IFLA_GSO_MAX_SEGS","","",null,null],[17,"IFLA_GSO_MAX_SIZE","","",null,null],[17,"IFLA_PAD","","",null,null],[17,"IFLA_XDP","","",null,null],[17,"IFLA_EVENT","","",null,null],[17,"IFLA_NEW_NETNSID","","",null,null],[17,"IFLA_IF_NETNSID","","",null,null],[17,"IFLA_TARGET_NETNSID","","",null,null],[17,"IFLA_CARRIER_UP_COUNT","","",null,null],[17,"IFLA_CARRIER_DOWN_COUNT","","",null,null],[17,"IFLA_NEW_IFINDEX","","",null,null],[17,"IFLA_MIN_MTU","","",null,null],[17,"IFLA_MAX_MTU","","",null,null],[17,"IFLA_PROP_LIST","","",null,null],[17,"IFLA_ALT_IFNAME","","",null,null],[17,"IFLA_PERM_ADDRESS","","",null,null],[17,"IFLA_PROTO_DOWN_REASON","","",null,null],[17,"IFLA_INFO_UNSPEC","","",null,null],[17,"IFLA_INFO_KIND","","",null,null],[17,"IFLA_INFO_DATA","","",null,null],[17,"IFLA_INFO_XSTATS","","",null,null],[17,"IFLA_INFO_SLAVE_KIND","","",null,null],[17,"IFLA_INFO_SLAVE_DATA","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"SCHED_RESET_ON_FORK","","",null,null],[17,"IPPROTO_MPTCP","","Multipath TCP",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"TCP_ULP","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"IPV6_MULTICAST_ALL","","",null,null],[17,"IPV6_ROUTER_ALERT_ISOLATE","","",null,null],[17,"PACKET_MR_UNICAST","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"UDP_SEGMENT","","",null,null],[17,"UDP_GRO","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IP_RECVFRAGSIZE","","",null,null],[17,"IPV6_FLOWINFO","","",null,null],[17,"IPV6_FLOWLABEL_MGR","","",null,null],[17,"IPV6_FLOWINFO_SEND","","",null,null],[17,"IPV6_RECVFRAGSIZE","","",null,null],[17,"IPV6_FREEBIND","","",null,null],[17,"IPV6_FLOWINFO_FLOWLABEL","","",null,null],[17,"IPV6_FLOWINFO_PRIORITY","","",null,null],[17,"IPV6_RTHDR_LOOSE","","",null,null],[17,"IPV6_RTHDR_STRICT","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"MFD_HUGETLB","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NFNLGRP_NONE","","",null,null],[17,"NFNLGRP_CONNTRACK_NEW","","",null,null],[17,"NFNLGRP_CONNTRACK_UPDATE","","",null,null],[17,"NFNLGRP_CONNTRACK_DESTROY","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_NEW","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_UPDATE","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_DESTROY","","",null,null],[17,"NFNLGRP_NFTABLES","","",null,null],[17,"NFNLGRP_ACCT_QUOTA","","",null,null],[17,"NFNETLINK_V0","","",null,null],[17,"NFNL_SUBSYS_NONE","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK_EXP","","",null,null],[17,"NFNL_SUBSYS_QUEUE","","",null,null],[17,"NFNL_SUBSYS_ULOG","","",null,null],[17,"NFNL_SUBSYS_OSF","","",null,null],[17,"NFNL_SUBSYS_IPSET","","",null,null],[17,"NFNL_SUBSYS_ACCT","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK_TIMEOUT","","",null,null],[17,"NFNL_SUBSYS_CTHELPER","","",null,null],[17,"NFNL_SUBSYS_NFTABLES","","",null,null],[17,"NFNL_SUBSYS_NFT_COMPAT","","",null,null],[17,"NFNL_SUBSYS_COUNT","","",null,null],[17,"NFNL_MSG_BATCH_BEGIN","","",null,null],[17,"NFNL_MSG_BATCH_END","","",null,null],[17,"NFULNL_MSG_PACKET","","",null,null],[17,"NFULNL_MSG_CONFIG","","",null,null],[17,"NFULA_UNSPEC","","",null,null],[17,"NFULA_PACKET_HDR","","",null,null],[17,"NFULA_MARK","","",null,null],[17,"NFULA_TIMESTAMP","","",null,null],[17,"NFULA_IFINDEX_INDEV","","",null,null],[17,"NFULA_IFINDEX_OUTDEV","","",null,null],[17,"NFULA_IFINDEX_PHYSINDEV","","",null,null],[17,"NFULA_IFINDEX_PHYSOUTDEV","","",null,null],[17,"NFULA_HWADDR","","",null,null],[17,"NFULA_PAYLOAD","","",null,null],[17,"NFULA_PREFIX","","",null,null],[17,"NFULA_UID","","",null,null],[17,"NFULA_SEQ","","",null,null],[17,"NFULA_SEQ_GLOBAL","","",null,null],[17,"NFULA_GID","","",null,null],[17,"NFULA_HWTYPE","","",null,null],[17,"NFULA_HWHEADER","","",null,null],[17,"NFULA_HWLEN","","",null,null],[17,"NFULA_CT","","",null,null],[17,"NFULA_CT_INFO","","",null,null],[17,"NFULNL_CFG_CMD_NONE","","",null,null],[17,"NFULNL_CFG_CMD_BIND","","",null,null],[17,"NFULNL_CFG_CMD_UNBIND","","",null,null],[17,"NFULNL_CFG_CMD_PF_BIND","","",null,null],[17,"NFULNL_CFG_CMD_PF_UNBIND","","",null,null],[17,"NFULA_CFG_UNSPEC","","",null,null],[17,"NFULA_CFG_CMD","","",null,null],[17,"NFULA_CFG_MODE","","",null,null],[17,"NFULA_CFG_NLBUFSIZ","","",null,null],[17,"NFULA_CFG_TIMEOUT","","",null,null],[17,"NFULA_CFG_QTHRESH","","",null,null],[17,"NFULA_CFG_FLAGS","","",null,null],[17,"NFULNL_COPY_NONE","","",null,null],[17,"NFULNL_COPY_META","","",null,null],[17,"NFULNL_COPY_PACKET","","",null,null],[17,"NFULNL_CFG_F_SEQ","","",null,null],[17,"NFULNL_CFG_F_SEQ_GLOBAL","","",null,null],[17,"NFULNL_CFG_F_CONNTRACK","","",null,null],[17,"NFQNL_MSG_PACKET","","",null,null],[17,"NFQNL_MSG_VERDICT","","",null,null],[17,"NFQNL_MSG_CONFIG","","",null,null],[17,"NFQNL_MSG_VERDICT_BATCH","","",null,null],[17,"NFQA_UNSPEC","","",null,null],[17,"NFQA_PACKET_HDR","","",null,null],[17,"NFQA_VERDICT_HDR","","",null,null],[17,"NFQA_MARK","","",null,null],[17,"NFQA_TIMESTAMP","","",null,null],[17,"NFQA_IFINDEX_INDEV","","",null,null],[17,"NFQA_IFINDEX_OUTDEV","","",null,null],[17,"NFQA_IFINDEX_PHYSINDEV","","",null,null],[17,"NFQA_IFINDEX_PHYSOUTDEV","","",null,null],[17,"NFQA_HWADDR","","",null,null],[17,"NFQA_PAYLOAD","","",null,null],[17,"NFQA_CT","","",null,null],[17,"NFQA_CT_INFO","","",null,null],[17,"NFQA_CAP_LEN","","",null,null],[17,"NFQA_SKB_INFO","","",null,null],[17,"NFQA_EXP","","",null,null],[17,"NFQA_UID","","",null,null],[17,"NFQA_GID","","",null,null],[17,"NFQA_SECCTX","","",null,null],[17,"NFQNL_CFG_CMD_NONE","","",null,null],[17,"NFQNL_CFG_CMD_BIND","","",null,null],[17,"NFQNL_CFG_CMD_UNBIND","","",null,null],[17,"NFQNL_CFG_CMD_PF_BIND","","",null,null],[17,"NFQNL_CFG_CMD_PF_UNBIND","","",null,null],[17,"NFQNL_COPY_NONE","","",null,null],[17,"NFQNL_COPY_META","","",null,null],[17,"NFQNL_COPY_PACKET","","",null,null],[17,"NFQA_CFG_UNSPEC","","",null,null],[17,"NFQA_CFG_CMD","","",null,null],[17,"NFQA_CFG_PARAMS","","",null,null],[17,"NFQA_CFG_QUEUE_MAXLEN","","",null,null],[17,"NFQA_CFG_MASK","","",null,null],[17,"NFQA_CFG_FLAGS","","",null,null],[17,"NFQA_CFG_F_FAIL_OPEN","","",null,null],[17,"NFQA_CFG_F_CONNTRACK","","",null,null],[17,"NFQA_CFG_F_GSO","","",null,null],[17,"NFQA_CFG_F_UID_GID","","",null,null],[17,"NFQA_CFG_F_SECCTX","","",null,null],[17,"NFQA_CFG_F_MAX","","",null,null],[17,"NFQA_SKB_CSUMNOTREADY","","",null,null],[17,"NFQA_SKB_GSO","","",null,null],[17,"NFQA_SKB_CSUM_NOTVERIFIED","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"PACKET_ADD_MEMBERSHIP","","",null,null],[17,"PACKET_DROP_MEMBERSHIP","","",null,null],[17,"PACKET_MR_MULTICAST","","",null,null],[17,"PACKET_MR_PROMISC","","",null,null],[17,"PACKET_MR_ALLMULTI","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"IP6T_SO_ORIGINAL_DST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"IPTOS_ECN_NOT_ECT","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"NUD_NONE","","",null,null],[17,"NUD_INCOMPLETE","","",null,null],[17,"NUD_REACHABLE","","",null,null],[17,"NUD_STALE","","",null,null],[17,"NUD_DELAY","","",null,null],[17,"NUD_PROBE","","",null,null],[17,"NUD_FAILED","","",null,null],[17,"NUD_NOARP","","",null,null],[17,"NUD_PERMANENT","","",null,null],[17,"NTF_USE","","",null,null],[17,"NTF_SELF","","",null,null],[17,"NTF_MASTER","","",null,null],[17,"NTF_PROXY","","",null,null],[17,"NTF_ROUTER","","",null,null],[17,"NDA_UNSPEC","","",null,null],[17,"NDA_DST","","",null,null],[17,"NDA_LLADDR","","",null,null],[17,"NDA_CACHEINFO","","",null,null],[17,"NDA_PROBES","","",null,null],[17,"NDA_VLAN","","",null,null],[17,"NDA_PORT","","",null,null],[17,"NDA_VNI","","",null,null],[17,"NDA_IFINDEX","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TCA_UNSPEC","","",null,null],[17,"TCA_KIND","","",null,null],[17,"TCA_OPTIONS","","",null,null],[17,"TCA_STATS","","",null,null],[17,"TCA_XSTATS","","",null,null],[17,"TCA_RATE","","",null,null],[17,"TCA_FCNT","","",null,null],[17,"TCA_STATS2","","",null,null],[17,"TCA_STAB","","",null,null],[17,"RTM_NEWLINK","","",null,null],[17,"RTM_DELLINK","","",null,null],[17,"RTM_GETLINK","","",null,null],[17,"RTM_SETLINK","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_GETADDR","","",null,null],[17,"RTM_NEWROUTE","","",null,null],[17,"RTM_DELROUTE","","",null,null],[17,"RTM_GETROUTE","","",null,null],[17,"RTM_NEWNEIGH","","",null,null],[17,"RTM_DELNEIGH","","",null,null],[17,"RTM_GETNEIGH","","",null,null],[17,"RTM_NEWRULE","","",null,null],[17,"RTM_DELRULE","","",null,null],[17,"RTM_GETRULE","","",null,null],[17,"RTM_NEWQDISC","","",null,null],[17,"RTM_DELQDISC","","",null,null],[17,"RTM_GETQDISC","","",null,null],[17,"RTM_NEWTCLASS","","",null,null],[17,"RTM_DELTCLASS","","",null,null],[17,"RTM_GETTCLASS","","",null,null],[17,"RTM_NEWTFILTER","","",null,null],[17,"RTM_DELTFILTER","","",null,null],[17,"RTM_GETTFILTER","","",null,null],[17,"RTM_NEWACTION","","",null,null],[17,"RTM_DELACTION","","",null,null],[17,"RTM_GETACTION","","",null,null],[17,"RTM_NEWPREFIX","","",null,null],[17,"RTM_GETMULTICAST","","",null,null],[17,"RTM_GETANYCAST","","",null,null],[17,"RTM_NEWNEIGHTBL","","",null,null],[17,"RTM_GETNEIGHTBL","","",null,null],[17,"RTM_SETNEIGHTBL","","",null,null],[17,"RTM_NEWNDUSEROPT","","",null,null],[17,"RTM_NEWADDRLABEL","","",null,null],[17,"RTM_DELADDRLABEL","","",null,null],[17,"RTM_GETADDRLABEL","","",null,null],[17,"RTM_GETDCB","","",null,null],[17,"RTM_SETDCB","","",null,null],[17,"RTM_NEWNETCONF","","",null,null],[17,"RTM_GETNETCONF","","",null,null],[17,"RTM_NEWMDB","","",null,null],[17,"RTM_DELMDB","","",null,null],[17,"RTM_GETMDB","","",null,null],[17,"RTM_NEWNSID","","",null,null],[17,"RTM_DELNSID","","",null,null],[17,"RTM_GETNSID","","",null,null],[17,"RTM_F_NOTIFY","","",null,null],[17,"RTM_F_CLONED","","",null,null],[17,"RTM_F_EQUALIZE","","",null,null],[17,"RTM_F_PREFIX","","",null,null],[17,"RTA_UNSPEC","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_SRC","","",null,null],[17,"RTA_IIF","","",null,null],[17,"RTA_OIF","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_PRIORITY","","",null,null],[17,"RTA_PREFSRC","","",null,null],[17,"RTA_METRICS","","",null,null],[17,"RTA_MULTIPATH","","",null,null],[17,"RTA_PROTOINFO","","",null,null],[17,"RTA_FLOW","","",null,null],[17,"RTA_CACHEINFO","","",null,null],[17,"RTA_SESSION","","",null,null],[17,"RTA_MP_ALGO","","",null,null],[17,"RTA_TABLE","","",null,null],[17,"RTA_MARK","","",null,null],[17,"RTA_MFC_STATS","","",null,null],[17,"RTN_UNSPEC","","",null,null],[17,"RTN_UNICAST","","",null,null],[17,"RTN_LOCAL","","",null,null],[17,"RTN_BROADCAST","","",null,null],[17,"RTN_ANYCAST","","",null,null],[17,"RTN_MULTICAST","","",null,null],[17,"RTN_BLACKHOLE","","",null,null],[17,"RTN_UNREACHABLE","","",null,null],[17,"RTN_PROHIBIT","","",null,null],[17,"RTN_THROW","","",null,null],[17,"RTN_NAT","","",null,null],[17,"RTN_XRESOLVE","","",null,null],[17,"RTPROT_UNSPEC","","",null,null],[17,"RTPROT_REDIRECT","","",null,null],[17,"RTPROT_KERNEL","","",null,null],[17,"RTPROT_BOOT","","",null,null],[17,"RTPROT_STATIC","","",null,null],[17,"RT_SCOPE_UNIVERSE","","",null,null],[17,"RT_SCOPE_SITE","","",null,null],[17,"RT_SCOPE_LINK","","",null,null],[17,"RT_SCOPE_HOST","","",null,null],[17,"RT_SCOPE_NOWHERE","","",null,null],[17,"RT_TABLE_UNSPEC","","",null,null],[17,"RT_TABLE_COMPAT","","",null,null],[17,"RT_TABLE_DEFAULT","","",null,null],[17,"RT_TABLE_MAIN","","",null,null],[17,"RT_TABLE_LOCAL","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"MAX_ADDR_LEN","","",null,null],[17,"ARPD_UPDATE","","",null,null],[17,"ARPD_LOOKUP","","",null,null],[17,"ARPD_FLUSH","","",null,null],[17,"ATF_MAGIC","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",null,null],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",null,null],[17,"SOF_TIMESTAMPING_TX_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_TX_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_RX_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_RX_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_SYS_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_RAW_HARDWARE","","",null,null],[17,"ALG_SET_KEY","","",null,null],[17,"ALG_SET_IV","","",null,null],[17,"ALG_SET_OP","","",null,null],[17,"ALG_SET_AEAD_ASSOCLEN","","",null,null],[17,"ALG_SET_AEAD_AUTHSIZE","","",null,null],[17,"ALG_OP_DECRYPT","","",null,null],[17,"ALG_OP_ENCRYPT","","",null,null],[17,"UDP_CORK","","",null,null],[17,"UDP_ENCAP","","",null,null],[17,"UDP_NO_CHECK6_TX","","",null,null],[17,"UDP_NO_CHECK6_RX","","",null,null],[17,"MAP_SHARED_VALIDATE","","",null,null],[17,"MAP_FIXED_NOREPLACE","","",null,null],[17,"VMADDR_CID_ANY","","",null,null],[17,"VMADDR_CID_HYPERVISOR","","",null,null],[17,"VMADDR_CID_RESERVED","","",null,null],[17,"VMADDR_CID_LOCAL","","",null,null],[17,"VMADDR_CID_HOST","","",null,null],[17,"VMADDR_PORT_ANY","","",null,null],[17,"IN_ACCESS","","",null,null],[17,"IN_MODIFY","","",null,null],[17,"IN_ATTRIB","","",null,null],[17,"IN_CLOSE_WRITE","","",null,null],[17,"IN_CLOSE_NOWRITE","","",null,null],[17,"IN_CLOSE","","",null,null],[17,"IN_OPEN","","",null,null],[17,"IN_MOVED_FROM","","",null,null],[17,"IN_MOVED_TO","","",null,null],[17,"IN_MOVE","","",null,null],[17,"IN_CREATE","","",null,null],[17,"IN_DELETE","","",null,null],[17,"IN_DELETE_SELF","","",null,null],[17,"IN_MOVE_SELF","","",null,null],[17,"IN_UNMOUNT","","",null,null],[17,"IN_Q_OVERFLOW","","",null,null],[17,"IN_IGNORED","","",null,null],[17,"IN_ONLYDIR","","",null,null],[17,"IN_DONT_FOLLOW","","",null,null],[17,"KEY_SPEC_THREAD_KEYRING","","",null,null],[17,"KEY_SPEC_PROCESS_KEYRING","","",null,null],[17,"KEY_SPEC_SESSION_KEYRING","","",null,null],[17,"KEY_SPEC_USER_KEYRING","","",null,null],[17,"KEY_SPEC_USER_SESSION_KEYRING","","",null,null],[17,"KEY_SPEC_GROUP_KEYRING","","",null,null],[17,"KEY_SPEC_REQKEY_AUTH_KEY","","",null,null],[17,"KEY_SPEC_REQUESTOR_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_NO_CHANGE","","",null,null],[17,"KEY_REQKEY_DEFL_DEFAULT","","",null,null],[17,"KEY_REQKEY_DEFL_THREAD_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_PROCESS_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_SESSION_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_USER_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_USER_SESSION_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_GROUP_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_REQUESTOR_KEYRING","","",null,null],[17,"KEYCTL_GET_KEYRING_ID","","",null,null],[17,"KEYCTL_JOIN_SESSION_KEYRING","","",null,null],[17,"KEYCTL_UPDATE","","",null,null],[17,"KEYCTL_REVOKE","","",null,null],[17,"KEYCTL_CHOWN","","",null,null],[17,"KEYCTL_SETPERM","","",null,null],[17,"KEYCTL_DESCRIBE","","",null,null],[17,"KEYCTL_CLEAR","","",null,null],[17,"KEYCTL_LINK","","",null,null],[17,"KEYCTL_UNLINK","","",null,null],[17,"KEYCTL_SEARCH","","",null,null],[17,"KEYCTL_READ","","",null,null],[17,"KEYCTL_INSTANTIATE","","",null,null],[17,"KEYCTL_NEGATE","","",null,null],[17,"KEYCTL_SET_REQKEY_KEYRING","","",null,null],[17,"KEYCTL_SET_TIMEOUT","","",null,null],[17,"KEYCTL_ASSUME_AUTHORITY","","",null,null],[17,"KEYCTL_GET_SECURITY","","",null,null],[17,"KEYCTL_SESSION_TO_PARENT","","",null,null],[17,"KEYCTL_REJECT","","",null,null],[17,"KEYCTL_INSTANTIATE_IOV","","",null,null],[17,"KEYCTL_INVALIDATE","","",null,null],[17,"KEYCTL_GET_PERSISTENT","","",null,null],[17,"IN_ISDIR","","",null,null],[17,"IN_ONESHOT","","",null,null],[17,"IN_ALL_EVENTS","","",null,null],[17,"IN_CLOEXEC","","",null,null],[17,"IN_NONBLOCK","","",null,null],[17,"FAN_ACCESS","","",null,null],[17,"FAN_MODIFY","","",null,null],[17,"FAN_CLOSE_WRITE","","",null,null],[17,"FAN_CLOSE_NOWRITE","","",null,null],[17,"FAN_OPEN","","",null,null],[17,"FAN_Q_OVERFLOW","","",null,null],[17,"FAN_OPEN_PERM","","",null,null],[17,"FAN_ACCESS_PERM","","",null,null],[17,"FAN_ONDIR","","",null,null],[17,"FAN_EVENT_ON_CHILD","","",null,null],[17,"FAN_CLOSE","","",null,null],[17,"FAN_CLOEXEC","","",null,null],[17,"FAN_NONBLOCK","","",null,null],[17,"FAN_CLASS_NOTIF","","",null,null],[17,"FAN_CLASS_CONTENT","","",null,null],[17,"FAN_CLASS_PRE_CONTENT","","",null,null],[17,"FAN_UNLIMITED_QUEUE","","",null,null],[17,"FAN_UNLIMITED_MARKS","","",null,null],[17,"FAN_MARK_ADD","","",null,null],[17,"FAN_MARK_REMOVE","","",null,null],[17,"FAN_MARK_DONT_FOLLOW","","",null,null],[17,"FAN_MARK_ONLYDIR","","",null,null],[17,"FAN_MARK_IGNORED_MASK","","",null,null],[17,"FAN_MARK_IGNORED_SURV_MODIFY","","",null,null],[17,"FAN_MARK_FLUSH","","",null,null],[17,"FANOTIFY_METADATA_VERSION","","",null,null],[17,"FAN_ALLOW","","",null,null],[17,"FAN_DENY","","",null,null],[17,"FAN_NOFD","","",null,null],[17,"FUTEX_WAIT","","",null,null],[17,"FUTEX_WAKE","","",null,null],[17,"FUTEX_FD","","",null,null],[17,"FUTEX_REQUEUE","","",null,null],[17,"FUTEX_CMP_REQUEUE","","",null,null],[17,"FUTEX_WAKE_OP","","",null,null],[17,"FUTEX_LOCK_PI","","",null,null],[17,"FUTEX_UNLOCK_PI","","",null,null],[17,"FUTEX_TRYLOCK_PI","","",null,null],[17,"FUTEX_WAIT_BITSET","","",null,null],[17,"FUTEX_WAKE_BITSET","","",null,null],[17,"FUTEX_WAIT_REQUEUE_PI","","",null,null],[17,"FUTEX_CMP_REQUEUE_PI","","",null,null],[17,"FUTEX_PRIVATE_FLAG","","",null,null],[17,"FUTEX_CLOCK_REALTIME","","",null,null],[17,"FUTEX_CMD_MASK","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"REG_EXTENDED","","",null,null],[17,"REG_ICASE","","",null,null],[17,"REG_NEWLINE","","",null,null],[17,"REG_NOSUB","","",null,null],[17,"REG_NOTBOL","","",null,null],[17,"REG_NOTEOL","","",null,null],[17,"REG_ENOSYS","","",null,null],[17,"REG_NOMATCH","","",null,null],[17,"REG_BADPAT","","",null,null],[17,"REG_ECOLLATE","","",null,null],[17,"REG_ECTYPE","","",null,null],[17,"REG_EESCAPE","","",null,null],[17,"REG_ESUBREG","","",null,null],[17,"REG_EBRACK","","",null,null],[17,"REG_EPAREN","","",null,null],[17,"REG_EBRACE","","",null,null],[17,"REG_BADBR","","",null,null],[17,"REG_ERANGE","","",null,null],[17,"REG_ESPACE","","",null,null],[17,"REG_BADRPT","","",null,null],[17,"SO_EE_ORIGIN_NONE","","",null,null],[17,"SO_EE_ORIGIN_LOCAL","","",null,null],[17,"SO_EE_ORIGIN_ICMP","","",null,null],[17,"SO_EE_ORIGIN_ICMP6","","",null,null],[17,"SO_EE_ORIGIN_TXSTATUS","","",null,null],[17,"SO_EE_ORIGIN_TIMESTAMPING","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"CAN_EFF_FLAG","","",null,null],[17,"CAN_RTR_FLAG","","",null,null],[17,"CAN_ERR_FLAG","","",null,null],[17,"CAN_SFF_MASK","","",null,null],[17,"CAN_EFF_MASK","","",null,null],[17,"CAN_ERR_MASK","","",null,null],[17,"CAN_SFF_ID_BITS","","",null,null],[17,"CAN_EFF_ID_BITS","","",null,null],[17,"CAN_MAX_DLC","","",null,null],[17,"CAN_MAX_DLEN","","",null,null],[17,"CANFD_MAX_DLC","","",null,null],[17,"CANFD_MAX_DLEN","","",null,null],[17,"CANFD_BRS","","",null,null],[17,"CANFD_ESI","","",null,null],[17,"CAN_MTU","","",null,null],[17,"CANFD_MTU","","",null,null],[17,"CAN_RAW","","",null,null],[17,"CAN_BCM","","",null,null],[17,"CAN_TP16","","",null,null],[17,"CAN_TP20","","",null,null],[17,"CAN_MCNET","","",null,null],[17,"CAN_ISOTP","","",null,null],[17,"CAN_J1939","","",null,null],[17,"CAN_NPROTO","","",null,null],[17,"SOL_CAN_BASE","","",null,null],[17,"CAN_INV_FILTER","","",null,null],[17,"CAN_RAW_FILTER_MAX","","",null,null],[5,"NLA_ALIGN","","",null,[[["c_int",6]],["c_int",6]]],[5,"CMSG_NXTHDR","","",null,[[]]],[5,"CPU_ALLOC_SIZE","","",null,[[["c_int",6]],["size_t",6]]],[5,"CPU_ZERO","","",null,[[["cpu_set_t",3]]]],[5,"CPU_SET","","",null,[[["cpu_set_t",3]]]],[5,"CPU_CLR","","",null,[[["cpu_set_t",3]]]],[5,"CPU_ISSET","","",null,[[["cpu_set_t",3]]]],[5,"CPU_COUNT_S","","",null,[[["cpu_set_t",3]],["c_int",6]]],[5,"CPU_COUNT","","",null,[[["cpu_set_t",3]],["c_int",6]]],[5,"CPU_EQUAL","","",null,[[["cpu_set_t",3]]]],[5,"major","","",null,[[["dev_t",6]],["c_uint",6]]],[5,"minor","","",null,[[["dev_t",6]],["c_uint",6]]],[5,"makedev","","",null,[[["c_uint",6]],["dev_t",6]]],[5,"IPTOS_TOS","","",null,[[]]],[5,"IPTOS_PREC","","",null,[[]]],[5,"RT_TOS","","",null,[[]]],[5,"RT_ADDRCLASS","","",null,[[]]],[5,"RT_LOCALADDR","","",null,[[]]],[5,"SO_EE_OFFENDER","","",null,[[]]],[6,"pthread_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"__rlimit_resource_t","","",null,null],[6,"Lmid_t","","",null,null],[6,"regoff_t","","",null,null],[3,"statx","","",null,null],[12,"stx_mask","","",95,null],[12,"stx_blksize","","",95,null],[12,"stx_attributes","","",95,null],[12,"stx_nlink","","",95,null],[12,"stx_uid","","",95,null],[12,"stx_gid","","",95,null],[12,"stx_mode","","",95,null],[12,"stx_ino","","",95,null],[12,"stx_size","","",95,null],[12,"stx_blocks","","",95,null],[12,"stx_attributes_mask","","",95,null],[12,"stx_atime","","",95,null],[12,"stx_btime","","",95,null],[12,"stx_ctime","","",95,null],[12,"stx_mtime","","",95,null],[12,"stx_rdev_major","","",95,null],[12,"stx_rdev_minor","","",95,null],[12,"stx_dev_major","","",95,null],[12,"stx_dev_minor","","",95,null],[12,"stx_mnt_id","","",95,null],[3,"statx_timestamp","","",null,null],[12,"tv_sec","","",96,null],[12,"tv_nsec","","",96,null],[12,"__statx_timestamp_pad1","","",96,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",97,null],[12,"aio_lio_opcode","","",97,null],[12,"aio_reqprio","","",97,null],[12,"aio_buf","","",97,null],[12,"aio_nbytes","","",97,null],[12,"aio_sigevent","","",97,null],[12,"aio_offset","","",97,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",98,null],[12,"e_exit","","",98,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",99,null],[12,"tv_usec","","",99,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",100,null],[12,"gl_pathv","","",100,null],[12,"gl_offs","","",100,null],[12,"gl_flags","","",100,null],[3,"msghdr","","",null,null],[12,"msg_name","","",101,null],[12,"msg_namelen","","",101,null],[12,"msg_iov","","",101,null],[12,"msg_iovlen","","",101,null],[12,"msg_control","","",101,null],[12,"msg_controllen","","",101,null],[12,"msg_flags","","",101,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",102,null],[12,"cmsg_level","","",102,null],[12,"cmsg_type","","",102,null],[3,"termios","","",null,null],[12,"c_iflag","","",103,null],[12,"c_oflag","","",103,null],[12,"c_cflag","","",103,null],[12,"c_lflag","","",103,null],[12,"c_line","","",103,null],[12,"c_cc","","",103,null],[12,"c_ispeed","","",103,null],[12,"c_ospeed","","",103,null],[3,"mallinfo","","",null,null],[12,"arena","","",104,null],[12,"ordblks","","",104,null],[12,"smblks","","",104,null],[12,"hblks","","",104,null],[12,"hblkhd","","",104,null],[12,"usmblks","","",104,null],[12,"fsmblks","","",104,null],[12,"uordblks","","",104,null],[12,"fordblks","","",104,null],[12,"keepcost","","",104,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",105,null],[12,"nlmsg_type","","",105,null],[12,"nlmsg_flags","","",105,null],[12,"nlmsg_seq","","",105,null],[12,"nlmsg_pid","","",105,null],[3,"nlmsgerr","","",null,null],[12,"error","","",106,null],[12,"msg","","",106,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",107,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",108,null],[12,"nm_block_nr","","",108,null],[12,"nm_frame_size","","",108,null],[12,"nm_frame_nr","","",108,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",109,null],[12,"nm_len","","",109,null],[12,"nm_group","","",109,null],[12,"nm_pid","","",109,null],[12,"nm_uid","","",109,null],[12,"nm_gid","","",109,null],[3,"nlattr","","",null,null],[12,"nla_len","","",110,null],[12,"nla_type","","",110,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",111,null],[12,"rt_dst","","",111,null],[12,"rt_gateway","","",111,null],[12,"rt_genmask","","",111,null],[12,"rt_flags","","",111,null],[12,"rt_pad2","","",111,null],[12,"rt_pad3","","",111,null],[12,"rt_tos","","",111,null],[12,"rt_class","","",111,null],[12,"rt_pad4","","",111,null],[12,"rt_metric","","",111,null],[12,"rt_dev","","",111,null],[12,"rt_mtu","","",111,null],[12,"rt_window","","",111,null],[12,"rt_irtt","","",111,null],[3,"timex","","",null,null],[12,"modes","","",112,null],[12,"offset","","",112,null],[12,"freq","","",112,null],[12,"maxerror","","",112,null],[12,"esterror","","",112,null],[12,"status","","",112,null],[12,"constant","","",112,null],[12,"precision","","",112,null],[12,"tolerance","","",112,null],[12,"time","","",112,null],[12,"tick","","",112,null],[12,"ppsfreq","","",112,null],[12,"jitter","","",112,null],[12,"shift","","",112,null],[12,"stabil","","",112,null],[12,"jitcnt","","",112,null],[12,"calcnt","","",112,null],[12,"errcnt","","",112,null],[12,"stbcnt","","",112,null],[12,"tai","","",112,null],[12,"__unused1","","",112,null],[12,"__unused2","","",112,null],[12,"__unused3","","",112,null],[12,"__unused4","","",112,null],[12,"__unused5","","",112,null],[12,"__unused6","","",112,null],[12,"__unused7","","",112,null],[12,"__unused8","","",112,null],[12,"__unused9","","",112,null],[12,"__unused10","","",112,null],[12,"__unused11","","",112,null],[3,"ntptimeval","","",null,null],[12,"time","","",113,null],[12,"maxerror","","",113,null],[12,"esterror","","",113,null],[12,"tai","","",113,null],[12,"__glibc_reserved1","","",113,null],[12,"__glibc_reserved2","","",113,null],[12,"__glibc_reserved3","","",113,null],[12,"__glibc_reserved4","","",113,null],[3,"regex_t","","",null,null],[3,"Elf64_Chdr","","",null,null],[12,"ch_type","","",114,null],[12,"ch_reserved","","",114,null],[12,"ch_size","","",114,null],[12,"ch_addralign","","",114,null],[3,"Elf32_Chdr","","",null,null],[12,"ch_type","","",115,null],[12,"ch_size","","",115,null],[12,"ch_addralign","","",115,null],[3,"utmpx","","",null,null],[12,"ut_type","","",116,null],[12,"ut_pid","","",116,null],[12,"ut_line","","",116,null],[12,"ut_id","","",116,null],[12,"ut_user","","",116,null],[12,"ut_host","","",116,null],[12,"ut_exit","","",116,null],[12,"ut_session","","",116,null],[12,"ut_tv","","",116,null],[12,"ut_addr_v6","","",116,null],[17,"HUGETLB_FLAG_ENCODE_SHIFT","","",null,null],[17,"HUGETLB_FLAG_ENCODE_MASK","","",null,null],[17,"HUGETLB_FLAG_ENCODE_64KB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_512KB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_1MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_2MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_8MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_16MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_32MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_256MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_512MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_1GB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_2GB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_16GB","","",null,null],[17,"MAP_HUGE_SHIFT","","",null,null],[17,"MAP_HUGE_MASK","","",null,null],[17,"MAP_HUGE_64KB","","",null,null],[17,"MAP_HUGE_512KB","","",null,null],[17,"MAP_HUGE_1MB","","",null,null],[17,"MAP_HUGE_2MB","","",null,null],[17,"MAP_HUGE_8MB","","",null,null],[17,"MAP_HUGE_16MB","","",null,null],[17,"MAP_HUGE_32MB","","",null,null],[17,"MAP_HUGE_256MB","","",null,null],[17,"MAP_HUGE_512MB","","",null,null],[17,"MAP_HUGE_1GB","","",null,null],[17,"MAP_HUGE_2GB","","",null,null],[17,"MAP_HUGE_16GB","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"LM_ID_BASE","","",null,null],[17,"LM_ID_NEWLM","","",null,null],[17,"RTLD_DI_LMID","","",null,null],[17,"RTLD_DI_LINKMAP","","",null,null],[17,"RTLD_DI_CONFIGADDR","","",null,null],[17,"RTLD_DI_SERINFO","","",null,null],[17,"RTLD_DI_SERINFOSIZE","","",null,null],[17,"RTLD_DI_ORIGIN","","",null,null],[17,"RTLD_DI_PROFILENAME","","",null,null],[17,"RTLD_DI_PROFILEOUT","","",null,null],[17,"RTLD_DI_TLS_MODID","","",null,null],[17,"RTLD_DI_TLS_DATA","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_NFC","","",null,null],[17,"SOL_XDP","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"TCP_FASTOPEN_CONNECT","","",null,null],[17,"FAN_MARK_INODE","","",null,null],[17,"FAN_MARK_MOUNT","","",null,null],[17,"FAN_MARK_FILESYSTEM","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"AF_XDP","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"PF_XDP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening …",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"AFS_SUPER_MAGIC","","",null,null],[17,"AUTOFS_SUPER_MAGIC","","",null,null],[17,"BINDERFS_SUPER_MAGIC","","",null,null],[17,"BPF_FS_MAGIC","","",null,null],[17,"BTRFS_SUPER_MAGIC","","",null,null],[17,"CGROUP2_SUPER_MAGIC","","",null,null],[17,"CGROUP_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEBUGFS_MAGIC","","",null,null],[17,"DEVPTS_SUPER_MAGIC","","",null,null],[17,"ECRYPTFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"F2FS_SUPER_MAGIC","","",null,null],[17,"FUTEXFS_SUPER_MAGIC","","",null,null],[17,"HOSTFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX3_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NILFS_SUPER_MAGIC","","",null,null],[17,"OCFS2_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"OVERLAYFS_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"QNX6_SUPER_MAGIC","","",null,null],[17,"RDTGROUP_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SECURITYFS_MAGIC","","",null,null],[17,"SELINUX_MAGIC","","",null,null],[17,"SMACK_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSFS_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"TRACEFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"XENFS_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"RWF_HIPRI","","",null,null],[17,"RWF_DSYNC","","",null,null],[17,"RWF_SYNC","","",null,null],[17,"RWF_NOWAIT","","",null,null],[17,"RWF_APPEND","","",null,null],[17,"TCA_PAD","","",null,null],[17,"TCA_DUMP_INVISIBLE","","",null,null],[17,"TCA_CHAIN","","",null,null],[17,"TCA_HW_OFFLOAD","","",null,null],[17,"RTM_DELNETCONF","","",null,null],[17,"RTM_NEWSTATS","","",null,null],[17,"RTM_GETSTATS","","",null,null],[17,"RTM_NEWCACHEREPORT","","",null,null],[17,"RTM_F_LOOKUP_TABLE","","",null,null],[17,"RTM_F_FIB_MATCH","","",null,null],[17,"RTA_VIA","","",null,null],[17,"RTA_NEWDST","","",null,null],[17,"RTA_PREF","","",null,null],[17,"RTA_ENCAP_TYPE","","",null,null],[17,"RTA_ENCAP","","",null,null],[17,"RTA_EXPIRES","","",null,null],[17,"RTA_PAD","","",null,null],[17,"RTA_UID","","",null,null],[17,"RTA_TTL_PROPAGATE","","",null,null],[17,"NTF_EXT_LEARNED","","",null,null],[17,"NTF_OFFLOADED","","",null,null],[17,"NDA_MASTER","","",null,null],[17,"NDA_LINK_NETNSID","","",null,null],[17,"NDA_SRC_VNI","","",null,null],[17,"UNAME26","","",null,null],[17,"FDPIC_FUNCPTRS","","",null,null],[17,"IFA_FLAGS","","",null,null],[17,"IFA_F_MANAGETEMPADDR","","",null,null],[17,"IFA_F_NOPREFIXROUTE","","",null,null],[17,"IFA_F_MCAUTOJOIN","","",null,null],[17,"IFA_F_STABLE_PRIVACY","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"KEYCTL_DH_COMPUTE","","",null,null],[17,"KEYCTL_PKEY_QUERY","","",null,null],[17,"KEYCTL_PKEY_ENCRYPT","","",null,null],[17,"KEYCTL_PKEY_DECRYPT","","",null,null],[17,"KEYCTL_PKEY_SIGN","","",null,null],[17,"KEYCTL_PKEY_VERIFY","","",null,null],[17,"KEYCTL_RESTRICT_KEYRING","","",null,null],[17,"KEYCTL_SUPPORTS_ENCRYPT","","",null,null],[17,"KEYCTL_SUPPORTS_DECRYPT","","",null,null],[17,"KEYCTL_SUPPORTS_SIGN","","",null,null],[17,"KEYCTL_SUPPORTS_VERIFY","","",null,null],[17,"KEYCTL_MOVE","","",null,null],[17,"KEYCTL_CAPABILITIES","","",null,null],[17,"KEYCTL_CAPS0_CAPABILITIES","","",null,null],[17,"KEYCTL_CAPS0_PERSISTENT_KEYRINGS","","",null,null],[17,"KEYCTL_CAPS0_DIFFIE_HELLMAN","","",null,null],[17,"KEYCTL_CAPS0_PUBLIC_KEY","","",null,null],[17,"KEYCTL_CAPS0_BIG_KEY","","",null,null],[17,"KEYCTL_CAPS0_INVALIDATE","","",null,null],[17,"KEYCTL_CAPS0_RESTRICT_KEYRING","","",null,null],[17,"KEYCTL_CAPS0_MOVE","","",null,null],[17,"KEYCTL_CAPS1_NS_KEYRING_NAME","","",null,null],[17,"KEYCTL_CAPS1_NS_KEY_TAG","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"M_MXFAST","","",null,null],[17,"M_NLBLKS","","",null,null],[17,"M_GRAIN","","",null,null],[17,"M_KEEP","","",null,null],[17,"M_TRIM_THRESHOLD","","",null,null],[17,"M_TOP_PAD","","",null,null],[17,"M_MMAP_THRESHOLD","","",null,null],[17,"M_MMAP_MAX","","",null,null],[17,"M_CHECK_ACTION","","",null,null],[17,"M_PERTURB","","",null,null],[17,"M_ARENA_TEST","","",null,null],[17,"M_ARENA_MAX","","",null,null],[17,"AT_STATX_SYNC_TYPE","","",null,null],[17,"AT_STATX_SYNC_AS_STAT","","",null,null],[17,"AT_STATX_FORCE_SYNC","","",null,null],[17,"AT_STATX_DONT_SYNC","","",null,null],[17,"STATX_TYPE","","",null,null],[17,"STATX_MODE","","",null,null],[17,"STATX_NLINK","","",null,null],[17,"STATX_UID","","",null,null],[17,"STATX_GID","","",null,null],[17,"STATX_ATIME","","",null,null],[17,"STATX_MTIME","","",null,null],[17,"STATX_CTIME","","",null,null],[17,"STATX_INO","","",null,null],[17,"STATX_SIZE","","",null,null],[17,"STATX_BLOCKS","","",null,null],[17,"STATX_BASIC_STATS","","",null,null],[17,"STATX_BTIME","","",null,null],[17,"STATX_MNT_ID","","",null,null],[17,"STATX_ALL","","",null,null],[17,"STATX__RESERVED","","",null,null],[17,"STATX_ATTR_COMPRESSED","","",null,null],[17,"STATX_ATTR_IMMUTABLE","","",null,null],[17,"STATX_ATTR_APPEND","","",null,null],[17,"STATX_ATTR_NODUMP","","",null,null],[17,"STATX_ATTR_ENCRYPTED","","",null,null],[17,"STATX_ATTR_AUTOMOUNT","","",null,null],[17,"AT_NULL","","",null,null],[17,"AT_IGNORE","","",null,null],[17,"AT_EXECFD","","",null,null],[17,"AT_PHDR","","",null,null],[17,"AT_PHENT","","",null,null],[17,"AT_PHNUM","","",null,null],[17,"AT_PAGESZ","","",null,null],[17,"AT_BASE","","",null,null],[17,"AT_FLAGS","","",null,null],[17,"AT_ENTRY","","",null,null],[17,"AT_NOTELF","","",null,null],[17,"AT_UID","","",null,null],[17,"AT_EUID","","",null,null],[17,"AT_GID","","",null,null],[17,"AT_EGID","","",null,null],[17,"AT_PLATFORM","","",null,null],[17,"AT_HWCAP","","",null,null],[17,"AT_CLKTCK","","",null,null],[17,"AT_SECURE","","",null,null],[17,"AT_BASE_PLATFORM","","",null,null],[17,"AT_RANDOM","","",null,null],[17,"AT_HWCAP2","","",null,null],[17,"AT_EXECFN","","",null,null],[17,"ADJ_OFFSET","","",null,null],[17,"ADJ_FREQUENCY","","",null,null],[17,"ADJ_MAXERROR","","",null,null],[17,"ADJ_ESTERROR","","",null,null],[17,"ADJ_STATUS","","",null,null],[17,"ADJ_TIMECONST","","",null,null],[17,"ADJ_TAI","","",null,null],[17,"ADJ_SETOFFSET","","",null,null],[17,"ADJ_MICRO","","",null,null],[17,"ADJ_NANO","","",null,null],[17,"ADJ_TICK","","",null,null],[17,"ADJ_OFFSET_SINGLESHOT","","",null,null],[17,"ADJ_OFFSET_SS_READ","","",null,null],[17,"MOD_OFFSET","","",null,null],[17,"MOD_FREQUENCY","","",null,null],[17,"MOD_MAXERROR","","",null,null],[17,"MOD_ESTERROR","","",null,null],[17,"MOD_STATUS","","",null,null],[17,"MOD_TIMECONST","","",null,null],[17,"MOD_CLKB","","",null,null],[17,"MOD_CLKA","","",null,null],[17,"MOD_TAI","","",null,null],[17,"MOD_MICRO","","",null,null],[17,"MOD_NANO","","",null,null],[17,"STA_PLL","","",null,null],[17,"STA_PPSFREQ","","",null,null],[17,"STA_PPSTIME","","",null,null],[17,"STA_FLL","","",null,null],[17,"STA_INS","","",null,null],[17,"STA_DEL","","",null,null],[17,"STA_UNSYNC","","",null,null],[17,"STA_FREQHOLD","","",null,null],[17,"STA_PPSSIGNAL","","",null,null],[17,"STA_PPSJITTER","","",null,null],[17,"STA_PPSWANDER","","",null,null],[17,"STA_PPSERROR","","",null,null],[17,"STA_CLOCKERR","","",null,null],[17,"STA_NANO","","",null,null],[17,"STA_MODE","","",null,null],[17,"STA_CLK","","",null,null],[17,"STA_RONLY","","",null,null],[17,"NTP_API","","",null,null],[17,"TIME_OK","","",null,null],[17,"TIME_INS","","",null,null],[17,"TIME_DEL","","",null,null],[17,"TIME_OOP","","",null,null],[17,"TIME_WAIT","","",null,null],[17,"TIME_ERROR","","",null,null],[17,"TIME_BAD","","",null,null],[17,"MAXTC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"REG_STARTEND","","",null,null],[17,"REG_EEND","","",null,null],[17,"REG_ESIZE","","",null,null],[17,"REG_ERPAREN","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",117,null],[12,"loads","","",117,null],[12,"totalram","","",117,null],[12,"freeram","","",117,null],[12,"sharedram","","",117,null],[12,"bufferram","","",117,null],[12,"totalswap","","",117,null],[12,"freeswap","","",117,null],[12,"procs","","",117,null],[12,"pad","","",117,null],[12,"totalhigh","","",117,null],[12,"freehigh","","",117,null],[12,"mem_unit","","",117,null],[12,"_f","","",117,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",118,null],[12,"msg_stime","","",118,null],[12,"msg_rtime","","",118,null],[12,"msg_ctime","","",118,null],[12,"msg_qnum","","",118,null],[12,"msg_qbytes","","",118,null],[12,"msg_lspid","","",118,null],[12,"msg_lrpid","","",118,null],[17,"RLIM_INFINITY","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",119,null],[12,"sa_mask","","",119,null],[12,"sa_flags","","",119,null],[12,"sa_restorer","","",119,null],[3,"statfs","","",null,null],[12,"f_type","","",120,null],[12,"f_bsize","","",120,null],[12,"f_blocks","","",120,null],[12,"f_bfree","","",120,null],[12,"f_bavail","","",120,null],[12,"f_files","","",120,null],[12,"f_ffree","","",120,null],[12,"f_fsid","","",120,null],[12,"f_namelen","","",120,null],[12,"f_frsize","","",120,null],[3,"flock","","",null,null],[12,"l_type","","",121,null],[12,"l_whence","","",121,null],[12,"l_start","","",121,null],[12,"l_len","","",121,null],[12,"l_pid","","",121,null],[3,"flock64","","",null,null],[12,"l_type","","",122,null],[12,"l_whence","","",122,null],[12,"l_start","","",122,null],[12,"l_len","","",122,null],[12,"l_pid","","",122,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",123,null],[12,"si_errno","","",123,null],[12,"si_code","","",123,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",124,null],[12,"ss_flags","","",124,null],[12,"ss_size","","",124,null],[3,"stat","","",null,null],[12,"st_dev","","",125,null],[12,"st_ino","","",125,null],[12,"st_nlink","","",125,null],[12,"st_mode","","",125,null],[12,"st_uid","","",125,null],[12,"st_gid","","",125,null],[12,"st_rdev","","",125,null],[12,"st_size","","",125,null],[12,"st_blksize","","",125,null],[12,"st_blocks","","",125,null],[12,"st_atime","","",125,null],[12,"st_atime_nsec","","",125,null],[12,"st_mtime","","",125,null],[12,"st_mtime_nsec","","",125,null],[12,"st_ctime","","",125,null],[12,"st_ctime_nsec","","",125,null],[3,"stat64","","",null,null],[12,"st_dev","","",126,null],[12,"st_ino","","",126,null],[12,"st_nlink","","",126,null],[12,"st_mode","","",126,null],[12,"st_uid","","",126,null],[12,"st_gid","","",126,null],[12,"st_rdev","","",126,null],[12,"st_size","","",126,null],[12,"st_blksize","","",126,null],[12,"st_blocks","","",126,null],[12,"st_atime","","",126,null],[12,"st_atime_nsec","","",126,null],[12,"st_mtime","","",126,null],[12,"st_mtime_nsec","","",126,null],[12,"st_ctime","","",126,null],[12,"st_ctime_nsec","","",126,null],[3,"statfs64","","",null,null],[12,"f_type","","",127,null],[12,"f_bsize","","",127,null],[12,"f_blocks","","",127,null],[12,"f_bfree","","",127,null],[12,"f_bavail","","",127,null],[12,"f_files","","",127,null],[12,"f_ffree","","",127,null],[12,"f_fsid","","",127,null],[12,"f_namelen","","",127,null],[12,"f_frsize","","",127,null],[12,"f_flags","","",127,null],[12,"f_spare","","",127,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",128,null],[12,"f_frsize","","",128,null],[12,"f_blocks","","",128,null],[12,"f_bfree","","",128,null],[12,"f_bavail","","",128,null],[12,"f_files","","",128,null],[12,"f_ffree","","",128,null],[12,"f_favail","","",128,null],[12,"f_fsid","","",128,null],[12,"f_flag","","",128,null],[12,"f_namemax","","",128,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",129,null],[12,"exponent","","",129,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",130,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",131,null],[12,"swd","","",131,null],[12,"ftw","","",131,null],[12,"fop","","",131,null],[12,"rip","","",131,null],[12,"rdp","","",131,null],[12,"mxcsr","","",131,null],[12,"mxcr_mask","","",131,null],[12,"_st","","",131,null],[12,"_xmm","","",131,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",132,null],[12,"r14","","",132,null],[12,"r13","","",132,null],[12,"r12","","",132,null],[12,"rbp","","",132,null],[12,"rbx","","",132,null],[12,"r11","","",132,null],[12,"r10","","",132,null],[12,"r9","","",132,null],[12,"r8","","",132,null],[12,"rax","","",132,null],[12,"rcx","","",132,null],[12,"rdx","","",132,null],[12,"rsi","","",132,null],[12,"rdi","","",132,null],[12,"orig_rax","","",132,null],[12,"rip","","",132,null],[12,"cs","","",132,null],[12,"eflags","","",132,null],[12,"rsp","","",132,null],[12,"ss","","",132,null],[12,"fs_base","","",132,null],[12,"gs_base","","",132,null],[12,"ds","","",132,null],[12,"es","","",132,null],[12,"fs","","",132,null],[12,"gs","","",132,null],[3,"user","","",null,null],[12,"regs","","",133,null],[12,"u_fpvalid","","",133,null],[12,"i387","","",133,null],[12,"u_tsize","","",133,null],[12,"u_dsize","","",133,null],[12,"u_ssize","","",133,null],[12,"start_code","","",133,null],[12,"start_stack","","",133,null],[12,"signal","","",133,null],[12,"u_ar0","","",133,null],[12,"u_fpstate","","",133,null],[12,"magic","","",133,null],[12,"u_comm","","",133,null],[12,"u_debugreg","","",133,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",134,null],[12,"fpregs","","",134,null],[3,"ipc_perm","","",null,null],[12,"__key","","",135,null],[12,"uid","","",135,null],[12,"gid","","",135,null],[12,"cuid","","",135,null],[12,"cgid","","",135,null],[12,"mode","","",135,null],[12,"__seq","","",135,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",136,null],[12,"shm_segsz","","",136,null],[12,"shm_atime","","",136,null],[12,"shm_dtime","","",136,null],[12,"shm_ctime","","",136,null],[12,"shm_cpid","","",136,null],[12,"shm_lpid","","",136,null],[12,"shm_nattch","","",136,null],[3,"termios2","","",null,null],[12,"c_iflag","","",137,null],[12,"c_oflag","","",137,null],[12,"c_cflag","","",137,null],[12,"c_lflag","","",137,null],[12,"c_line","","",137,null],[12,"c_cc","","",137,null],[12,"c_ispeed","","",137,null],[12,"c_ospeed","","",137,null],[3,"ip_mreqn","","",null,null],[12,"imr_multiaddr","","",138,null],[12,"imr_address","","",138,null],[12,"imr_ifindex","","",138,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",139,null],[12,"swd","","",139,null],[12,"ftw","","",139,null],[12,"fop","","",139,null],[12,"rip","","",139,null],[12,"rdp","","",139,null],[12,"mxcsr","","",139,null],[12,"mxcr_mask","","",139,null],[12,"st_space","","",139,null],[12,"xmm_space","","",139,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",140,null],[12,"uc_link","","",140,null],[12,"uc_stack","","",140,null],[12,"uc_mcontext","","",140,null],[12,"uc_sigmask","","",140,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"VEOF","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCGRS485","","",null,null],[17,"TIOCSRS485","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SO_ATTACH_REUSEPORT_CBPF","","",null,null],[17,"SO_ATTACH_REUSEPORT_EBPF","","",null,null],[17,"SO_CNX_ADVICE","","",null,null],[17,"SCM_TIMESTAMPING_OPT_STATS","","",null,null],[17,"SO_MEMINFO","","",null,null],[17,"SO_INCOMING_NAPI_ID","","",null,null],[17,"SO_COOKIE","","",null,null],[17,"SCM_TIMESTAMPING_PKTINFO","","",null,null],[17,"SO_PEERGROUPS","","",null,null],[17,"SO_ZEROCOPY","","",null,null],[17,"SO_TXTIME","","",null,null],[17,"SCM_TXTIME","","",null,null],[17,"SO_BINDTOIFINDEX","","",null,null],[17,"SO_TIMESTAMP_NEW","","",null,null],[17,"SO_TIMESTAMPNS_NEW","","",null,null],[17,"SO_TIMESTAMPING_NEW","","",null,null],[17,"SO_RCVTIMEO_NEW","","",null,null],[17,"SO_SNDTIMEO_NEW","","",null,null],[17,"SO_DETACH_REUSEPORT_BPF","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_OFD_GETLK","","",null,null],[17,"F_OFD_SETLK","","",null,null],[17,"F_OFD_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_SYNC","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"PTRACE_SYSEMU","","",null,null],[17,"PTRACE_SYSEMU_SINGLESTEP","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"REG_R8","","",null,null],[17,"REG_R9","","",null,null],[17,"REG_R10","","",null,null],[17,"REG_R11","","",null,null],[17,"REG_R12","","",null,null],[17,"REG_R13","","",null,null],[17,"REG_R14","","",null,null],[17,"REG_R15","","",null,null],[17,"REG_RDI","","",null,null],[17,"REG_RSI","","",null,null],[17,"REG_RBP","","",null,null],[17,"REG_RBX","","",null,null],[17,"REG_RDX","","",null,null],[17,"REG_RAX","","",null,null],[17,"REG_RCX","","",null,null],[17,"REG_RSP","","",null,null],[17,"REG_RIP","","",null,null],[17,"REG_EFL","","",null,null],[17,"REG_CSGSFS","","",null,null],[17,"REG_ERR","","",null,null],[17,"REG_TRAPNO","","",null,null],[17,"REG_OLDMASK","","",null,null],[17,"REG_CR2","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",141,null],[12,"f_frsize","","",141,null],[12,"f_blocks","","",141,null],[12,"f_bfree","","",141,null],[12,"f_bavail","","",141,null],[12,"f_files","","",141,null],[12,"f_ffree","","",141,null],[12,"f_favail","","",141,null],[12,"f_fsid","","",141,null],[12,"f_flag","","",141,null],[12,"f_namemax","","",141,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[17,"SYS_statx","","",null,null],[17,"SYS_pidfd_open","","",null,null],[17,"SYS_clone3","","",null,null],[3,"max_align_t","","",null,null],[3,"sem_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"fanotify_event_metadata","","",null,null],[12,"event_len","","",142,null],[12,"vers","","",142,null],[12,"reserved","","",142,null],[12,"metadata_len","","",142,null],[12,"mask","","",142,null],[12,"fd","","",142,null],[12,"pid","","",142,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"can_frame","","",null,null],[12,"can_id","","",143,null],[12,"can_dlc","","",143,null],[12,"data","","",143,null],[3,"canfd_frame","","",null,null],[12,"can_id","","",144,null],[12,"len","","",144,null],[12,"flags","","",144,null],[12,"data","","",144,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",145,null],[11,"from","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"into","","",146,[[]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"into","","",141,[[]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"into","","",147,[[]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"into","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"into","","",123,[[]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"into","","",124,[[]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"into","","",125,[[]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"into","","",126,[[]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"into","","",127,[[]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"into","","",128,[[]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"into","","",148,[[]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"into","","",129,[[]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"into","","",130,[[]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"into","","",131,[[]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"into","","",132,[[]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"into","","",133,[[]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"into","","",134,[[]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"into","","",135,[[]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"into","","",136,[[]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"into","","",137,[[]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"into","","",138,[[]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"into","","",139,[[]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"into","","",140,[[]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"into","","",149,[[]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"into","","",118,[[]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"into","","",150,[[]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"into","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"into","","",98,[[]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"into","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"into","","",103,[[]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"into","","",105,[[]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"into","","",107,[[]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"into","","",109,[[]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"into","","",113,[[]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"into","","",151,[[]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"into","","",152,[[]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"into","","",153,[[]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"into","","",154,[[]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"into","","",155,[[]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"from","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"into","","",156,[[]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"into","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"into","","",85,[[]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"into","","",89,[[]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"into","","",90,[[]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"into","","",157,[[]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"from","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"into","","",158,[[]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"from","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"into","","",159,[[]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"into","","",142,[[]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"into","","",160,[[]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"from","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"into","","",161,[[]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"from","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"into","","",162,[[]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"into","","",143,[[]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"into","","",144,[[]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"into","","",163,[[]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"into","","",164,[[]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"into","","",165,[[]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"into","","",145,[[]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"into","","",166,[[]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"into","","",167,[[]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"from","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"into","","",168,[[]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"fmt","","",146,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",166,[[],["dir",4]]],[11,"clone","","",0,[[],["group",3]]],[11,"clone","","",1,[[],["utimbuf",3]]],[11,"clone","","",2,[[],["timeval",3]]],[11,"clone","","",3,[[],["timespec",3]]],[11,"clone","","",4,[[],["rlimit",3]]],[11,"clone","","",5,[[],["rusage",3]]],[11,"clone","","",6,[[],["ipv6_mreq",3]]],[11,"clone","","",7,[[],["hostent",3]]],[11,"clone","","",8,[[],["iovec",3]]],[11,"clone","","",9,[[],["pollfd",3]]],[11,"clone","","",10,[[],["winsize",3]]],[11,"clone","","",11,[[],["linger",3]]],[11,"clone","","",12,[[],["sigval",3]]],[11,"clone","","",13,[[],["itimerval",3]]],[11,"clone","","",14,[[],["tms",3]]],[11,"clone","","",15,[[],["servent",3]]],[11,"clone","","",16,[[],["protoent",3]]],[11,"clone","","",167,[[],["file",4]]],[11,"clone","","",168,[[],["fpos_t",4]]],[11,"clone","","",163,[[],["timezone",4]]],[11,"clone","","",17,[[],["in_addr",3]]],[11,"clone","","",18,[[],["ip_mreq",3]]],[11,"clone","","",19,[[],["ip_mreq_source",3]]],[11,"clone","","",20,[[],["sockaddr",3]]],[11,"clone","","",21,[[],["sockaddr_in",3]]],[11,"clone","","",22,[[],["sockaddr_in6",3]]],[11,"clone","","",23,[[],["addrinfo",3]]],[11,"clone","","",24,[[],["sockaddr_ll",3]]],[11,"clone","","",164,[[],["fd_set",3]]],[11,"clone","","",25,[[],["tm",3]]],[11,"clone","","",26,[[],["sched_param",3]]],[11,"clone","","",27,[[],["dl_info",3]]],[11,"clone","","",28,[[],["lconv",3]]],[11,"clone","","",29,[[],["in_pktinfo",3]]],[11,"clone","","",30,[[],["ifaddrs",3]]],[11,"clone","","",165,[[],["in6_rtmsg",3]]],[11,"clone","","",31,[[],["arpreq",3]]],[11,"clone","","",32,[[],["arpreq_old",3]]],[11,"clone","","",33,[[],["arphdr",3]]],[11,"clone","","",34,[[],["mmsghdr",3]]],[11,"clone","","",35,[[],["epoll_event",3]]],[11,"clone","","",36,[[],["sockaddr_un",3]]],[11,"clone","","",37,[[],["sockaddr_storage",3]]],[11,"clone","","",38,[[],["utsname",3]]],[11,"clone","","",39,[[],["sigevent",3]]],[11,"clone","","",152,[[],["fpos64_t",4]]],[11,"clone","","",40,[[],["rlimit64",3]]],[11,"clone","","",41,[[],["glob_t",3]]],[11,"clone","","",42,[[],["passwd",3]]],[11,"clone","","",43,[[],["spwd",3]]],[11,"clone","","",44,[[],["dqblk",3]]],[11,"clone","","",45,[[],["signalfd_siginfo",3]]],[11,"clone","","",46,[[],["itimerspec",3]]],[11,"clone","","",153,[[],["fsid_t",3]]],[11,"clone","","",47,[[],["packet_mreq",3]]],[11,"clone","","",154,[[],["cpu_set_t",3]]],[11,"clone","","",48,[[],["if_nameindex",3]]],[11,"clone","","",49,[[],["msginfo",3]]],[11,"clone","","",50,[[],["sembuf",3]]],[11,"clone","","",51,[[],["input_event",3]]],[11,"clone","","",52,[[],["input_id",3]]],[11,"clone","","",53,[[],["input_absinfo",3]]],[11,"clone","","",54,[[],["input_keymap_entry",3]]],[11,"clone","","",55,[[],["input_mask",3]]],[11,"clone","","",56,[[],["ff_replay",3]]],[11,"clone","","",57,[[],["ff_trigger",3]]],[11,"clone","","",58,[[],["ff_envelope",3]]],[11,"clone","","",59,[[],["ff_constant_effect",3]]],[11,"clone","","",60,[[],["ff_ramp_effect",3]]],[11,"clone","","",61,[[],["ff_condition_effect",3]]],[11,"clone","","",62,[[],["ff_periodic_effect",3]]],[11,"clone","","",63,[[],["ff_rumble_effect",3]]],[11,"clone","","",64,[[],["ff_effect",3]]],[11,"clone","","",65,[[],["dl_phdr_info",3]]],[11,"clone","","",66,[[],["elf32_ehdr",3]]],[11,"clone","","",67,[[],["elf64_ehdr",3]]],[11,"clone","","",68,[[],["elf32_sym",3]]],[11,"clone","","",69,[[],["elf64_sym",3]]],[11,"clone","","",70,[[],["elf32_phdr",3]]],[11,"clone","","",71,[[],["elf64_phdr",3]]],[11,"clone","","",72,[[],["elf32_shdr",3]]],[11,"clone","","",73,[[],["elf64_shdr",3]]],[11,"clone","","",74,[[],["ucred",3]]],[11,"clone","","",75,[[],["mntent",3]]],[11,"clone","","",155,[[],["posix_spawn_file_actions_t",3]]],[11,"clone","","",156,[[],["posix_spawnattr_t",3]]],[11,"clone","","",76,[[],["genlmsghdr",3]]],[11,"clone","","",77,[[],["in6_pktinfo",3]]],[11,"clone","","",78,[[],["arpd_request",3]]],[11,"clone","","",79,[[],["inotify_event",3]]],[11,"clone","","",80,[[],["fanotify_response",3]]],[11,"clone","","",81,[[],["sockaddr_vm",3]]],[11,"clone","","",82,[[],["regmatch_t",3]]],[11,"clone","","",83,[[],["sock_extended_err",3]]],[11,"clone","","",84,[[],["__c_anonymous_sockaddr_can_tp",3]]],[11,"clone","","",85,[[],["__c_anonymous_sockaddr_can_j1939",3]]],[11,"clone","","",86,[[],["can_filter",3]]],[11,"clone","","",87,[[],["sockaddr_nl",3]]],[11,"clone","","",88,[[],["dirent",3]]],[11,"clone","","",89,[[],["dirent64",3]]],[11,"clone","","",90,[[],["sockaddr_alg",3]]],[11,"clone","","",91,[[],["af_alg_iv",3]]],[11,"clone","","",92,[[],["mq_attr",3]]],[11,"clone","","",93,[[],["__c_anonymous_sockaddr_can_can_addr",19]]],[11,"clone","","",94,[[],["sockaddr_can",3]]],[11,"clone","","",95,[[],["statx",3]]],[11,"clone","","",96,[[],["statx_timestamp",3]]],[11,"clone","","",97,[[],["aiocb",3]]],[11,"clone","","",98,[[],["__exit_status",3]]],[11,"clone","","",99,[[],["__timeval",3]]],[11,"clone","","",100,[[],["glob64_t",3]]],[11,"clone","","",101,[[],["msghdr",3]]],[11,"clone","","",102,[[],["cmsghdr",3]]],[11,"clone","","",103,[[],["termios",3]]],[11,"clone","","",104,[[],["mallinfo",3]]],[11,"clone","","",105,[[],["nlmsghdr",3]]],[11,"clone","","",106,[[],["nlmsgerr",3]]],[11,"clone","","",107,[[],["nl_pktinfo",3]]],[11,"clone","","",108,[[],["nl_mmap_req",3]]],[11,"clone","","",109,[[],["nl_mmap_hdr",3]]],[11,"clone","","",110,[[],["nlattr",3]]],[11,"clone","","",111,[[],["rtentry",3]]],[11,"clone","","",112,[[],["timex",3]]],[11,"clone","","",113,[[],["ntptimeval",3]]],[11,"clone","","",151,[[],["regex_t",3]]],[11,"clone","","",114,[[],["elf64_chdr",3]]],[11,"clone","","",115,[[],["elf32_chdr",3]]],[11,"clone","","",116,[[],["utmpx",3]]],[11,"clone","","",149,[[],["sigset_t",3]]],[11,"clone","","",117,[[],["sysinfo",3]]],[11,"clone","","",118,[[],["msqid_ds",3]]],[11,"clone","","",119,[[],["sigaction",3]]],[11,"clone","","",120,[[],["statfs",3]]],[11,"clone","","",121,[[],["flock",3]]],[11,"clone","","",122,[[],["flock64",3]]],[11,"clone","","",123,[[],["siginfo_t",3]]],[11,"clone","","",124,[[],["stack_t",3]]],[11,"clone","","",125,[[],["stat",3]]],[11,"clone","","",126,[[],["stat64",3]]],[11,"clone","","",127,[[],["statfs64",3]]],[11,"clone","","",128,[[],["statvfs64",3]]],[11,"clone","","",148,[[],["pthread_attr_t",3]]],[11,"clone","","",129,[[],["_libc_fpxreg",3]]],[11,"clone","","",130,[[],["_libc_xmmreg",3]]],[11,"clone","","",131,[[],["_libc_fpstate",3]]],[11,"clone","","",132,[[],["user_regs_struct",3]]],[11,"clone","","",133,[[],["user",3]]],[11,"clone","","",134,[[],["mcontext_t",3]]],[11,"clone","","",135,[[],["ipc_perm",3]]],[11,"clone","","",136,[[],["shmid_ds",3]]],[11,"clone","","",137,[[],["termios2",3]]],[11,"clone","","",138,[[],["ip_mreqn",3]]],[11,"clone","","",139,[[],["user_fpregs_struct",3]]],[11,"clone","","",140,[[],["ucontext_t",3]]],[11,"clone","","",141,[[],["statvfs",3]]],[11,"clone","","",147,[[],["max_align_t",3]]],[11,"clone","","",150,[[],["sem_t",3]]],[11,"clone","","",157,[[],["pthread_mutexattr_t",3]]],[11,"clone","","",158,[[],["pthread_rwlockattr_t",3]]],[11,"clone","","",159,[[],["pthread_condattr_t",3]]],[11,"clone","","",142,[[],["fanotify_event_metadata",3]]],[11,"clone","","",160,[[],["pthread_cond_t",3]]],[11,"clone","","",161,[[],["pthread_mutex_t",3]]],[11,"clone","","",162,[[],["pthread_rwlock_t",3]]],[11,"clone","","",143,[[],["can_frame",3]]],[11,"clone","","",144,[[],["canfd_frame",3]]],[11,"clone","","",145,[[],["in6_addr",3]]],[11,"si_addr","","",123,[[]]],[11,"si_value","","",123,[[],["sigval",3]]],[11,"si_pid","","",123,[[],["pid_t",6]]],[11,"si_uid","","",123,[[],["uid_t",6]]],[11,"si_status","","",123,[[],["c_int",6]]],[11,"si_utime","","",123,[[],["c_long",6]]],[11,"si_stime","","",123,[[],["c_long",6]]]],"p":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreq_source"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"sock_extended_err"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"sockaddr_nl"],[3,"dirent"],[3,"dirent64"],[3,"sockaddr_alg"],[3,"af_alg_iv"],[3,"mq_attr"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"utmpx"],[3,"sysinfo"],[3,"msqid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"ip_mreqn"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"fanotify_event_metadata"],[3,"can_frame"],[3,"canfd_frame"],[3,"in6_addr"],[4,"c_void"],[3,"max_align_t"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"regex_t"],[4,"fpos64_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[4,"timezone"],[3,"fd_set"],[3,"in6_rtmsg"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"]]},\
"log":{"doc":"A lightweight logging facade.","i":[[4,"Level","log","An enum representing the available verbosity levels of …",null,null],[13,"Error","","The \\\"error\\\" level.",0,null],[13,"Warn","","The \\\"warn\\\" level.",0,null],[13,"Info","","The \\\"info\\\" level.",0,null],[13,"Debug","","The \\\"debug\\\" level.",0,null],[13,"Trace","","The \\\"trace\\\" level.",0,null],[11,"max","","Returns the most verbose logging level.",0,[[],["level",4]]],[11,"to_level_filter","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.",0,[[],["levelfilter",4]]],[11,"as_str","","Returns the string representation of the <code>Level</code>.",0,[[]]],[4,"LevelFilter","","An enum representing the available verbosity level …",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the <code>Error</code> log level.",1,null],[13,"Warn","","Corresponds to the <code>Warn</code> log level.",1,null],[13,"Info","","Corresponds to the <code>Info</code> log level.",1,null],[13,"Debug","","Corresponds to the <code>Debug</code> log level.",1,null],[13,"Trace","","Corresponds to the <code>Trace</code> log level.",1,null],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter",4]]],[11,"to_level","","Converts <code>self</code> to the equivalent <code>Level</code>.",1,[[],[["option",4],["level",4]]]],[11,"as_str","","Returns the string representation of the <code>LevelFilter</code>.",1,[[]]],[3,"Record","","The \\\"payload\\\" of a log message.",null,null],[11,"builder","","Returns a new builder.",2,[[],["recordbuilder",3]]],[11,"args","","The message body.",2,[[],["arguments",3]]],[11,"metadata","","Metadata about the log directive.",2,[[],["metadata",3]]],[11,"level","","The verbosity level of the message.",2,[[],["level",4]]],[11,"target","","The name of the target of the directive.",2,[[]]],[11,"module_path","","The module path of the message.",2,[[],["option",4]]],[11,"module_path_static","","The module path of the message, if it is a <code>\'static</code> string.",2,[[],["option",4]]],[11,"file","","The source file containing the message.",2,[[],["option",4]]],[11,"file_static","","The module path of the message, if it is a <code>\'static</code> string.",2,[[],["option",4]]],[11,"line","","The line containing the message.",2,[[],["option",4]]],[3,"RecordBuilder","","Builder for <code>Record</code>.",null,null],[11,"new","","Construct new <code>RecordBuilder</code>.",3,[[],["recordbuilder",3]]],[11,"args","","Set <code>args</code>.",3,[[["arguments",3]],["recordbuilder",3]]],[11,"metadata","","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …",3,[[["metadata",3]],["recordbuilder",3]]],[11,"level","","Set <code>Metadata::level</code>.",3,[[["level",4]],["recordbuilder",3]]],[11,"target","","Set <code>Metadata::target</code>",3,[[],["recordbuilder",3]]],[11,"module_path","","Set <code>module_path</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"module_path_static","","Set <code>module_path</code> to a <code>\'static</code> string",3,[[["option",4]],["recordbuilder",3]]],[11,"file","","Set <code>file</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"file_static","","Set <code>file</code> to a <code>\'static</code> string.",3,[[["option",4]],["recordbuilder",3]]],[11,"line","","Set <code>line</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"build","","Invoke the builder and return a <code>Record</code>",3,[[],["record",3]]],[3,"Metadata","","Metadata about a log message.",null,null],[11,"builder","","Returns a new builder.",4,[[],["metadatabuilder",3]]],[11,"level","","The verbosity level of the message.",4,[[],["level",4]]],[11,"target","","The name of the target of the directive.",4,[[]]],[3,"MetadataBuilder","","Builder for <code>Metadata</code>.",null,null],[11,"new","","Construct a new <code>MetadataBuilder</code>.",5,[[],["metadatabuilder",3]]],[11,"level","","Setter for <code>level</code>.",5,[[["level",4]],["metadatabuilder",3]]],[11,"target","","Setter for <code>target</code>.",5,[[],["metadatabuilder",3]]],[11,"build","","Returns a <code>Metadata</code> object.",5,[[],["metadata",3]]],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata …",6,[[["metadata",3]]]],[10,"log","","Logs the <code>Record</code>.",6,[[["record",3]]]],[10,"flush","","Flushes any buffered records.",6,[[]]],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter",4]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter",4]]],[5,"set_boxed_logger","","Sets the global logger to a <code>Box<Log></code>.",null,[[["box",3],["log",8]],[["result",4],["setloggererror",3]]]],[5,"set_logger","","Sets the global logger to a <code>&\'static Log</code>.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[5,"set_logger_racy","","A thread-unsafe version of <code>set_logger</code>.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[3,"SetLoggerError","","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …",null,null],[3,"ParseLevelError","","The type returned by <code>from_str</code> when the string doesn\'t …",null,null],[5,"logger","","Returns a reference to the logger.",null,[[],["log",8]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"clone","","",0,[[],["level",4]]],[11,"clone","","",1,[[],["levelfilter",4]]],[11,"clone","","",2,[[],["record",3]]],[11,"clone","","",4,[[],["metadata",3]]],[11,"cmp","","",0,[[["level",4]],["ordering",4]]],[11,"cmp","","",1,[[["levelfilter",4]],["ordering",4]]],[11,"cmp","","",4,[[["metadata",3]],["ordering",4]]],[11,"cmp","","",5,[[["metadatabuilder",3]],["ordering",4]]],[11,"eq","","",0,[[["level",4]]]],[11,"eq","","",0,[[["levelfilter",4]]]],[11,"eq","","",1,[[["levelfilter",4]]]],[11,"eq","","",1,[[["level",4]]]],[11,"eq","","",4,[[["metadata",3]]]],[11,"ne","","",4,[[["metadata",3]]]],[11,"eq","","",5,[[["metadatabuilder",3]]]],[11,"ne","","",5,[[["metadatabuilder",3]]]],[11,"eq","","",8,[[["parselevelerror",3]]]],[11,"ne","","",8,[[["parselevelerror",3]]]],[11,"partial_cmp","","",0,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["level",4]]]],[11,"le","","",0,[[["level",4]]]],[11,"gt","","",0,[[["level",4]]]],[11,"ge","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["levelfilter",4]]]],[11,"le","","",0,[[["levelfilter",4]]]],[11,"gt","","",0,[[["levelfilter",4]]]],[11,"ge","","",0,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["levelfilter",4]]]],[11,"le","","",1,[[["levelfilter",4]]]],[11,"gt","","",1,[[["levelfilter",4]]]],[11,"ge","","",1,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["level",4]]]],[11,"le","","",1,[[["level",4]]]],[11,"gt","","",1,[[["level",4]]]],[11,"ge","","",1,[[["level",4]]]],[11,"partial_cmp","","",4,[[["metadata",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["metadata",3]]]],[11,"le","","",4,[[["metadata",3]]]],[11,"gt","","",4,[[["metadata",3]]]],[11,"ge","","",4,[[["metadata",3]]]],[11,"partial_cmp","","",5,[[["metadatabuilder",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["metadatabuilder",3]]]],[11,"le","","",5,[[["metadatabuilder",3]]]],[11,"gt","","",5,[[["metadatabuilder",3]]]],[11,"ge","","",5,[[["metadatabuilder",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"from_str","","",0,[[],[["result",4],["level",4]]]],[11,"from_str","","",1,[[],[["levelfilter",4],["result",4]]]]],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[8,"Log"],[3,"SetLoggerError"],[3,"ParseLevelError"]]},\
"logos":{"doc":"Logos<em>Create ridiculously fast Lexers.</em>","i":[[24,"Logos","logos","",null,null],[0,"source","","This module contains a bunch of traits necessary for …",null,null],[8,"Source","logos::source","Trait for types the <code>Lexer</code> can read from.",null,null],[16,"Slice","","A type this <code>Source</code> can be sliced into.",0,null],[10,"len","","Length of the source",0,[[]]],[10,"read","","Read a chunk of bytes into an array. Returns <code>None</code> when …",0,[[],["option",4]]],[10,"read_unchecked","","Read a chunk of bytes into an array without doing bounds …",0,[[]]],[10,"slice","","Get a slice of the source at given range. This is …",0,[[["range",3]],["option",4]]],[10,"slice_unchecked","","Get a slice of the source at given range. This is …",0,[[["range",3]]]],[11,"find_boundary","","For <code>&str</code> sources attempts to find the closest <code>char</code> …",0,[[]]],[10,"is_boundary","","Check if <code>index</code> is valid for this <code>Source</code>, that is:",0,[[]]],[8,"Chunk","","A fixed, statically sized chunk of data that can be read …",null,null],[18,"SIZE","","Size of the chunk being accessed in bytes.",1,null],[10,"from_ptr","","Create a chunk from a raw byte pointer.",1,[[]]],[3,"Lexer","logos","<code>Lexer</code> is the main struct of the crate that allows you to …",null,null],[12,"extras","","Extras associated with the <code>Token</code>.",2,null],[6,"Span","","Byte range in the source.",null,null],[3,"SpannedIter","","Iterator that pairs tokens with their position in the …",null,null],[8,"Logos","","Trait implemented for an enum representing all tokens. …",null,null],[16,"Extras","","Associated type <code>Extras</code> for the particular lexer. This can …",3,null],[16,"Source","","Source type this token can be lexed from. This will …",3,null],[18,"ERROR","","Helper <code>const</code> of the variant marked as <code>#[error]</code>.",3,null],[10,"lex","","The heart of Logos. Called by the <code>Lexer</code>. The …",3,[[["lexer",3]]]],[11,"lexer","","Create a new instance of a <code>Lexer</code> that will produce tokens …",3,[[],["lexer",3]]],[11,"lexer_with_extras","","Create a new instance of a <code>Lexer</code> with the provided <code>Extras</code> …",3,[[],["lexer",3]]],[3,"Skip","","Type that can be returned from a callback, informing the …",null,null],[4,"Filter","","Type that can be returned from a callback, either …",null,null],[13,"Emit","","Emit a token with a given value <code>T</code>. Use <code>()</code> for unit …",4,null],[13,"Skip","","Skip current match, analog to <code>Skip</code>.",4,null],[5,"skip","","Predefined callback that will inform the <code>Lexer</code> to skip a …",null,[[["lexer",3]],["skip",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"clone","","",2,[[]]],[11,"new","","Create a new <code>Lexer</code>.",2,[[]]],[11,"with_extras","","Create a new <code>Lexer</code> with the provided <code>Extras</code>.",2,[[]]],[11,"source","","Source from which this Lexer is reading tokens.",2,[[]]],[11,"spanned","","Wrap the <code>Lexer</code> in an <code>Iterator</code> that produces tuples of …",2,[[],["spannediter",3]]],[11,"span","","Get the range for the current token in <code>Source</code>.",2,[[],["span",6]]],[11,"slice","","Get a string slice of the current token.",2,[[]]],[11,"remainder","","Get a slice of remaining source, starting at the end of …",2,[[]]],[11,"morph","","Turn this lexer into a lexer for a new token type.",2,[[],["lexer",3]]],[11,"bump","","Bumps the end of currently lexed token by <code>n</code> bytes.",2,[[]]]],"p":[[8,"Source"],[8,"Chunk"],[3,"Lexer"],[8,"Logos"],[4,"Filter"],[3,"SpannedIter"],[3,"Skip"]]},\
"logos_derive":{"doc":"LogosThis is a <code>#[derive]</code> macro crate, for documentation …","i":[[24,"Logos","logos_derive","",null,null]],"p":[]},\
"matchers":{"doc":"Regex matchers on character and byte streams.","i":[[3,"Error","matchers","An error that occurred during the construction of a DFA.",null,null],[3,"Pattern","","A compiled match pattern that can match multipe inputs, …",null,null],[3,"Matcher","","A reference to a <code>Pattern</code> that matches a single input.",null,null],[11,"new","","Returns a new <code>Pattern</code> for the given regex, or an error if …",0,[[],[["error",3],["result",4]]]],[11,"matches","","Returns <code>true</code> if this pattern matches the given string.",0,[[]]],[11,"debug_matches","","Returns <code>true</code> if this pattern matches the formatted output …",0,[[]]],[11,"display_matches","","Returns <code>true</code> if this pattern matches the formatted output …",0,[[]]],[11,"read_matches","","Returns either a <code>bool</code> indicating whether or not this …",0,[[],["result",6]]],[11,"is_matched","","Returns <code>true</code> if this <code>Matcher</code> has matched any input that …",1,[[]]],[11,"matches","","Returns <code>true</code> if this pattern matches the formatted output …",1,[[]]],[11,"debug_matches","","Returns <code>true</code> if this pattern matches the formatted output …",1,[[]]],[11,"display_matches","","Returns <code>true</code> if this pattern matches the formatted output …",1,[[]]],[11,"read_matches","","Returns either a <code>bool</code> indicating whether or not this …",1,[[],["result",6]]],[8,"ToMatcher","","",null,null],[16,"Automaton","","",2,null],[10,"matcher","","",2,[[],["matcher",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"description","","",3,[[]]],[11,"clone","","",3,[[],["error",3]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"matcher","","",0,[[],["matcher",3]]],[11,"matcher","","",0,[[],["matcher",3]]],[11,"clone","","",0,[[],["pattern",3]]],[11,"clone","","",1,[[],["matcher",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[],["result",4]]],[11,"write_str","","",1,[[],["result",6]]],[11,"write","","",1,[[],[["error",3],["result",4]]]],[11,"flush","","",1,[[],[["error",3],["result",4]]]],[11,"kind","","Return the kind of this error.",3,[[],["errorkind",4]]]],"p":[[3,"Pattern"],[3,"Matcher"],[8,"ToMatcher"],[3,"Error"]]},\
"multimap":{"doc":"A MultiMap implementation which is just a wrapper around …","i":[[3,"IterAll","multimap","An iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IterAllMut","","A mutable iterator over the entries of a <code>HashMap</code>.",null,null],[0,"serde","","Serde trait implementations for MultiMap",null,null],[4,"Entry","","A view into a single location in a map, which may be …",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[3,"OccupiedEntry","","A view into a single occupied location in a MultiMap.",null,null],[3,"VacantEntry","","A view into a single empty location in a MultiMap.",null,null],[3,"MultiMap","","",null,null],[11,"new","","Creates an empty MultiMap",1,[[],["multimap",3]]],[11,"with_capacity","","Creates an empty multimap with the given initial capacity.",1,[[],["multimap",3]]],[11,"with_hasher","","Creates an empty MultiMap which will use the given hash …",1,[[],["multimap",3]]],[11,"with_capacity_and_hasher","","Creates an empty MultiMap with the given intial capacity …",1,[[],["multimap",3]]],[11,"insert","","Inserts a key-value pair into the multimap. If the key …",1,[[]]],[11,"insert_many","","Inserts multiple key-value pairs into the multimap. If …",1,[[["intoiterator",8]]]],[11,"insert_many_from_slice","","Inserts multiple key-value pairs into the multimap. If …",1,[[]]],[11,"contains_key","","Returns true if the map contains a value for the …",1,[[]]],[11,"len","","Returns the number of elements in the map.",1,[[]]],[11,"remove","","Removes a key from the map, returning the vector of …",1,[[],[["vec",3],["option",4]]]],[11,"get","","Returns a reference to the first item in the vector …",1,[[],["option",4]]],[11,"get_mut","","Returns a mutable reference to the first item in the …",1,[[],["option",4]]],[11,"get_vec","","Returns a reference to the vector corresponding to the …",1,[[],[["vec",3],["option",4]]]],[11,"get_vec_mut","","Returns a mutable reference to the vector corresponding …",1,[[],[["vec",3],["option",4]]]],[11,"is_vec","","Returns true if the key is multi-valued.",1,[[]]],[11,"capacity","","Returns the number of elements the map can hold without …",1,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the …",1,[[]]],[11,"keys","","An iterator visiting all keys in arbitrary order. …",1,[[],[["vec",3],["keys",3]]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary …",1,[[],["iter",3]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary …",1,[[],["itermut",3]]],[11,"iter_all","","An iterator visiting all key-value pairs in arbitrary …",1,[[],[["iterall",3],["vec",3]]]],[11,"iter_all_mut","","An iterator visiting all key-value pairs in arbitrary …",1,[[],[["iterallmut",3],["vec",3]]]],[11,"entry","","Gets the specified key\'s corresponding entry in the map …",1,[[],["entry",4]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[]]],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[14,"multimap","","Create a <code>MultiMap</code> from a list of key value pairs",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"len","","",3,[[]]],[11,"len","","",2,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",2,[[],["iter",3]]],[11,"len","","",6,[[]]],[11,"len","","",7,[[]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"into_iter","","",1,[[],[["vec",3],["intoiter",3]]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"clone","","",1,[[],["multimap",3]]],[11,"clone","","",6,[[],["iter",3]]],[11,"default","","",1,[[],["multimap",3]]],[11,"eq","","",1,[[["multimap",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"index","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]],["multimap",3]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"get","","Gets a reference to the first item in value in the vector …",4,[[]]],[11,"get_vec","","Gets a reference to the values (vector) corresponding to …",4,[[],["vec",3]]],[11,"get_mut","","Gets a mut reference to the first item in value in the …",4,[[]]],[11,"get_vec_mut","","Gets a mut reference to the values (vector) corresponding …",4,[[],["vec",3]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",4,[[]]],[11,"into_vec_mut","","Converts the OccupiedEntry into a mutable reference to …",4,[[],["vec",3]]],[11,"insert","","Inserts a new value onto the vector of the entry.",4,[[]]],[11,"insert_vec","","Extends the existing vector with the specified values.",4,[[["vec",3]]]],[11,"remove","","Takes the values (vector) out of the entry, and returns it",4,[[],["vec",3]]],[11,"insert","","Sets the first value in the vector of the entry with the …",5,[[]]],[11,"insert_vec","","Sets values in the entry with the VacantEntry\'s key, and …",5,[[["vec",3]],["vec",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",0,[[]]],[11,"or_insert_vec","","Ensures a value is in the entry by inserting the default …",0,[[["vec",3]],["vec",3]]]],"p":[[4,"Entry"],[3,"MultiMap"],[3,"IterAll"],[3,"IterAllMut"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","i":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[6,"Rational","","Alias for a <code>Ratio</code> of machine-sized integers.",null,null],[6,"Rational32","","Alias for a <code>Ratio</code> of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a <code>Ratio</code> of 64-bit-sized integers.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple …",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",1,[[]]],[10,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",1,[[]]],[10,"is_multiple_of","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.",1,[[]]],[10,"is_even","","Returns <code>true</code> if the number is even.",1,[[]]],[10,"is_odd","","Returns <code>true</code> if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. …",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. …",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[5,"range","","Returns an iterator over the given range [start, stop) …",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by <code>step</code>. …",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by <code>step</code>. …",null,[[],["rangestepinclusive",3]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",2,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",2,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",2,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",2,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",2,[[]]],[10,"classify","","Returns the floating point category of the number. If …",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",2,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",2,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",2,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",2,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",2,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",2,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",2,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",3,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",3,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",3,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",3,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",4,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",5,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",6,[[]]],[5,"cast","num","Cast from one machine scalar to another.",null,[[],["option",4]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[],["option",4]]],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[]]],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",7,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[],["option",4]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation …",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"CheckedAdd","","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",9,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",10,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",11,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",12,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",4,[[],["option",4]]],[8,"Num","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…",null,null],[16,"FromStrRadixErr","","",13,null],[10,"from_str_radix","","Convert from a string and radix (typically <code>2..=36</code>).",13,[[],["result",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",5,[[],["option",4]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",14,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",14,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",14,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",15,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",15,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",15,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",16,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",17,[[]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",3,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",3,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",3,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",3,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",3,[[],["option",4]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Zero","","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",18,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",18,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",18,[[]]],[0,"bigint","","",null,null],[3,"ParseBigIntError","num::bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion …",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a <code>BigUint</code>.",null,null],[10,"to_biguint","","Converts the value of <code>self</code> to a <code>BigUint</code>.",19,[[],[["biguint",3],["option",4]]]],[3,"U32Digits","","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …",null,null],[3,"U64Digits","","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a <code>BigInt</code>\'s composing element.",null,null],[13,"Minus","","",20,null],[13,"NoSign","","",20,null],[13,"Plus","","",20,null],[8,"ToBigInt","","A generic trait for converting a value to a <code>BigInt</code>. This …",null,null],[10,"to_bigint","","Converts the value of <code>self</code> to a <code>BigInt</code>.",21,[[],[["bigint",3],["option",4]]]],[0,"complex","num","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple …",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",1,[[]]],[10,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",1,[[]]],[10,"is_multiple_of","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.",1,[[]]],[10,"is_even","","Returns <code>true</code> if the number is even.",1,[[]]],[10,"is_odd","","Returns <code>true</code> if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. …",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. …",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",22,null],[12,"x","","",22,null],[12,"y","","",22,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[]]],[5,"div_floor","","Floored integer division",null,[[]]],[5,"mod_floor","","Floored integer modulus",null,[[]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[]]],[5,"div_ceil","","Ceiled integer division",null,[[]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",null,[[]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",null,[[]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",null,[[]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,[[]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[]]],[8,"Roots","","Provides methods to compute an integer\'s square root, …",null,null],[10,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",23,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",23,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",23,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[]]],[5,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",null,[[]]],[5,"sqrt","","Returns the truncated principal square root of an integer …",null,[[]]],[8,"Average","","Provides methods to compute the average of two integers, …",null,null],[10,"average_ceil","","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…",24,[[]]],[10,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>. …",24,[[]]],[5,"average_ceil","","Returns the ceiling value of the average of <code>x</code> and <code>y</code> -- …",null,[[]]],[5,"average_floor","","Returns the floor value of the average of <code>x</code> and <code>y</code> -- see …",null,[[]]],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) …",null,[[],["range",3]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[3,"RangeStep","","An iterator over the range [start, stop) by <code>step</code>. It …",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by <code>step</code>. …",null,[[],["rangestep",3]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by <code>step</code>. It …",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by <code>step</code>. …",null,[[],["rangestepinclusive",3]]],[3,"RangeFrom","","An iterator over the infinite range starting at <code>start</code>",null,null],[5,"range_from","","Return an iterator over the infinite range starting at …",null,[[],["rangefrom",3]]],[3,"RangeStepFrom","","An iterator over the infinite range starting at <code>start</code> by …",null,null],[5,"range_step_from","","Return an iterator over the infinite range starting at …",null,[[],["rangestepfrom",3]]],[0,"traits","num","",null,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",3,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",3,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",3,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",3,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",4,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",5,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",6,[[]]],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with …",null,null],[10,"infinity","","Returns positive infinity.",25,[[]]],[10,"neg_infinity","","Returns negative infinity.",25,[[]]],[10,"nan","","Returns NaN.",25,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",25,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",25,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",25,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",25,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",25,[[]]],[11,"is_nan","","Returns <code>true</code> if the number is NaN.",25,[[]]],[11,"is_infinite","","Returns <code>true</code> if the number is infinite.",25,[[]]],[11,"is_finite","","Returns <code>true</code> if the number is neither infinite or NaN.",25,[[]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",25,[[]]],[10,"classify","","Returns the floating point category of the number. If …",25,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a …",25,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",25,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",25,[[]]],[11,"trunc","","Return the integer part of a number.",25,[[]]],[11,"fract","","Returns the fractional part of a number.",25,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns …",25,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",25,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …",25,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …",25,[[]]],[11,"min","","Returns the minimum of the two numbers.",25,[[]]],[11,"max","","Returns the maximum of the two numbers.",25,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the …",25,[[]]],[11,"powi","","Raise a number to an integer power.",25,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",25,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",25,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",25,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",2,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",2,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",2,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",2,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",2,[[]]],[10,"classify","","Returns the floating point category of the number. If …",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",2,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",2,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",2,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",2,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",2,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",2,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",2,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",26,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",26,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",26,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",26,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",26,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",26,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",26,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",26,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",26,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",26,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",26,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",26,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",26,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",26,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",26,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",26,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",26,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",26,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",26,[[]]],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",18,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",18,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",18,[[]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",14,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",14,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",14,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[]]],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",15,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",15,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",15,[[]]],[0,"ops","num::traits","",null,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",9,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",12,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",11,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",10,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",27,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",28,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",29,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",30,[[],["option",4]]],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",31,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",31,[[]]],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",32,null],[10,"mul_add","","Performs the fused multiply-add operation.",32,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,[[]]],[0,"overflowing","num::traits::ops","",null,null],[8,"OverflowingAdd","num::traits::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean …",34,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean …",35,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean …",36,[[]]],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",16,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",37,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",38,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",39,[[]]],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",40,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",41,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",42,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",43,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",44,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",45,[[]]],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",7,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[],["option",4]]],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can …",46,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",46,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",46,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",46,[[]]],[10,"floor","","Returns the largest integer less than or equal to a …",46,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",46,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",46,[[]]],[10,"trunc","","Return the integer part of a number.",46,[[]]],[10,"fract","","Returns the fractional part of a number.",46,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",46,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",46,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",46,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",46,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",46,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",46,[[]]],[10,"powi","","Raise a number to an integer power.",46,[[]]],[10,"powf","","Raise a number to a real number power.",46,[[]]],[10,"sqrt","","Take the square root of a number.",46,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",46,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",46,[[]]],[10,"ln","","Returns the natural logarithm of the number.",46,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",46,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",46,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",46,[[]]],[10,"to_degrees","","Converts radians to degrees.",46,[[]]],[10,"to_radians","","Converts degrees to radians.",46,[[]]],[10,"max","","Returns the maximum of the two numbers.",46,[[]]],[10,"min","","Returns the minimum of the two numbers.",46,[[]]],[10,"abs_sub","","The positive difference of two numbers.",46,[[]]],[10,"cbrt","","Take the cubic root of a number.",46,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",46,[[]]],[10,"sin","","Computes the sine of a number (in radians).",46,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",46,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",46,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",46,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",46,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",46,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",46,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",46,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",46,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",46,[[]]],[10,"sinh","","Hyperbolic sine function.",46,[[]]],[10,"cosh","","Hyperbolic cosine function.",46,[[]]],[10,"tanh","","Hyperbolic tangent function.",46,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",46,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",46,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",46,[[]]],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",17,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num::traits","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…",null,null],[16,"FromStrRadixErr","","",13,null],[10,"from_str_radix","","Convert from a string and radix (typically <code>2..=36</code>).",13,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for <code>Num</code> types which also implement numeric …",null,null],[8,"RefNum","","The trait for references which implement numeric …",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment …",null,null],[8,"NumAssign","","The trait for <code>Num</code> types which also implement assignment …",null,null],[8,"NumAssignRef","","The trait for <code>NumAssign</code> types which also implement …",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",47,null],[13,"Invalid","","",47,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",48,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",2,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",2,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",2,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",2,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",2,[[]]],[10,"classify","","Returns the floating point category of the number. If …",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",2,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",2,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",2,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",2,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",2,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",2,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",2,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",26,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",26,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",26,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",26,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",26,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",26,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",26,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",26,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",26,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",26,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",26,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",26,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",26,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",26,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",26,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",26,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",26,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",26,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",26,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",6,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",4,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",4,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",4,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",5,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",3,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",3,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",3,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",3,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",3,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",3,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",3,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",14,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",14,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",14,[[]]],[8,"Zero","","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",18,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",18,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",18,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",15,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",15,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",15,[[]]],[8,"CheckedAdd","","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",9,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",10,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",11,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",28,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",27,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",29,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",30,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",12,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",31,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",31,[[]]],[8,"MulAdd","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",32,null],[10,"mul_add","","Performs the fused multiply-add operation.",32,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",16,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",37,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",39,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",38,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",40,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",42,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",43,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",44,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",45,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",41,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",7,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",17,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a <code>Ratio</code> of machine-sized integers.",null,null],[6,"Rational32","","Alias for a <code>Ratio</code> of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a <code>Ratio</code> of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[11,"from","num::bigint","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",49,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",49,[[]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",50,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",50,[[]]],[11,"from","num::complex","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","num::bigint","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"to_string","","",51,[[],["string",3]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"to_string","","",52,[[],["string",3]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"into_iter","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"into_iter","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"from","num::complex","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"to_string","","",55,[[],["string",3]]],[11,"from","num::integer","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"into_iter","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","num::iter","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"into_iter","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"into_iter","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"into_iter","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"into_iter","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"into_iter","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"from","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"into_iter","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"from","num::traits","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_string","","",48,[[],["string",3]]],[11,"from","num::rational","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"to_string","","",63,[[],["string",3]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"to_string","","",64,[[],["string",3]]],[11,"product","num::bigint","",50,[[],["biguint",3]]],[11,"product","","",49,[[],["bigint",3]]],[11,"bitxor_assign","","",50,[[["biguint",3]]]],[11,"bitxor_assign","","",50,[[["biguint",3]]]],[11,"bitxor_assign","","",49,[[["bigint",3]]]],[11,"bitxor_assign","","",49,[[["bigint",3]]]],[11,"one","","",50,[[],["biguint",3]]],[11,"set_one","","",50,[[]]],[11,"is_one","","",50,[[]]],[11,"one","","",49,[[],["bigint",3]]],[11,"set_one","","",49,[[]]],[11,"is_one","","",49,[[]]],[11,"bitand_assign","","",49,[[["bigint",3]]]],[11,"bitand_assign","","",50,[[["biguint",3]]]],[11,"bitand_assign","","",50,[[["biguint",3]]]],[11,"bitand_assign","","",49,[[["bigint",3]]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[["biguint",3]],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"not","","",49,[[],["bigint",3]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",50,[[["biguint",3]]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[["bigint",3]]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[["bigint",3]]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[["biguint",3]]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"checked_div","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",50,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[["biguint",3]]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[["bigint",3]]]],[11,"sub_assign","","",50,[[["biguint",3]]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[["bigint",3]]]],[11,"sub_assign","","",49,[[]]],[11,"nth_root","","",50,[[],["biguint",3]]],[11,"sqrt","","",50,[[],["biguint",3]]],[11,"cbrt","","",50,[[],["biguint",3]]],[11,"nth_root","","",49,[[],["bigint",3]]],[11,"sqrt","","",49,[[],["bigint",3]]],[11,"cbrt","","",49,[[],["bigint",3]]],[11,"bitor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",49,[[["bigint",3]],["bigint",3]]],[11,"to_biguint","","",50,[[],[["biguint",3],["option",4]]]],[11,"to_biguint","","",49,[[],[["biguint",3],["option",4]]]],[11,"sum","","",49,[[],["bigint",3]]],[11,"sum","","",50,[[],["biguint",3]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[["bigint",3]]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",50,[[["biguint",3]]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[["bigint",3]]]],[11,"rem_assign","","",50,[[["biguint",3]]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"default","","",50,[[],["biguint",3]]],[11,"default","","",49,[[],["bigint",3]]],[11,"len","","",54,[[]]],[11,"len","","",53,[[]]],[11,"div_rem","","",50,[[["biguint",3]]]],[11,"div_floor","","",50,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",50,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",50,[[["biguint",3]]]],[11,"div_ceil","","",50,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",50,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",50,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",50,[[["biguint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",50,[[["biguint",3]]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",50,[[["biguint",3]]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",50,[[]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",50,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",50,[[["biguint",3]],["biguint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",50,[[["biguint",3]],["biguint",3]]],[11,"div_rem","","",49,[[["bigint",3]]]],[11,"div_floor","","",49,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",49,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",49,[[["bigint",3]]]],[11,"div_ceil","","",49,[[["bigint",3]],["bigint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",49,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",49,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",49,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",49,[[["bigint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",49,[[["bigint",3]]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",49,[[["bigint",3]]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",49,[[]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",49,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",49,[[["bigint",3]],["bigint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",49,[[["bigint",3]],["bigint",3]]],[11,"checked_add","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_add","","",50,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"zero","","",50,[[],["biguint",3]]],[11,"set_zero","","",50,[[]]],[11,"is_zero","","",50,[[]]],[11,"zero","","",49,[[],["bigint",3]]],[11,"set_zero","","",49,[[]]],[11,"is_zero","","",49,[[]]],[11,"partial_cmp","","",49,[[["bigint",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",20,[[["sign",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",50,[[["biguint",3]],[["ordering",4],["option",4]]]],[11,"bitand","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",49,[[["bigint",3]],["bigint",3]]],[11,"from_i64","","",49,[[],[["bigint",3],["option",4]]]],[11,"from_i128","","",49,[[],[["bigint",3],["option",4]]]],[11,"from_u64","","",49,[[],[["bigint",3],["option",4]]]],[11,"from_u128","","",49,[[],[["bigint",3],["option",4]]]],[11,"from_f64","","",49,[[],[["bigint",3],["option",4]]]],[11,"from_i64","","",50,[[],[["biguint",3],["option",4]]]],[11,"from_i128","","",50,[[],[["biguint",3],["option",4]]]],[11,"from_u64","","",50,[[],[["biguint",3],["option",4]]]],[11,"from_u128","","",50,[[],[["biguint",3],["option",4]]]],[11,"from_f64","","",50,[[],[["biguint",3],["option",4]]]],[11,"description","","",51,[[]]],[11,"description","","",52,[[]]],[11,"cmp","","",20,[[["sign",4]],["ordering",4]]],[11,"cmp","","",50,[[["biguint",3]],["ordering",4]]],[11,"cmp","","",49,[[["bigint",3]],["ordering",4]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[["bigint",3]],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[["bigint",3]],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[["biguint",3]],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[["biguint",3]],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[["biguint",3]],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[["biguint",3]],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[["biguint",3]],["bigint",3]]],[11,"pow","","",50,[[["biguint",3]],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"neg","","Negate Sign value.",20,[[],["sign",4]]],[11,"neg","","",49,[[],["bigint",3]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"checked_sub","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",50,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"next","","",54,[[],["option",4]]],[11,"size_hint","","",54,[[]]],[11,"nth","","",54,[[],["option",4]]],[11,"last","","",54,[[],["option",4]]],[11,"count","","",54,[[]]],[11,"next","","",53,[[],["option",4]]],[11,"size_hint","","",53,[[]]],[11,"last","","",53,[[],["option",4]]],[11,"count","","",53,[[]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[["biguint",3]],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[["bigint",3]],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[["bigint",3]],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[["biguint",3]],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"hash","","",49,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",50,[[]]],[11,"rem","","",49,[[["bigint",3]],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[["biguint",3]],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[["biguint",3]],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[["bigint",3]],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[["bigint",3]],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[["bigint",3]],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[["biguint",3]],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[["biguint",3]],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"abs","","",49,[[],["bigint",3]]],[11,"abs_sub","","",49,[[["bigint",3]],["bigint",3]]],[11,"signum","","",49,[[],["bigint",3]]],[11,"is_positive","","",49,[[]]],[11,"is_negative","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[["biguint",3]]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[["bigint",3]]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[["bigint",3]]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[["biguint",3]]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"try_from","","",50,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[["bigint",3]],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",50,[[["bigint",3]],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"to_i64","","",49,[[],["option",4]]],[11,"to_i128","","",49,[[],["option",4]]],[11,"to_u64","","",49,[[],["option",4]]],[11,"to_u128","","",49,[[],["option",4]]],[11,"to_f32","","",49,[[],["option",4]]],[11,"to_f64","","",49,[[],["option",4]]],[11,"to_i64","","",50,[[],["option",4]]],[11,"to_i128","","",50,[[],["option",4]]],[11,"to_u64","","",50,[[],["option",4]]],[11,"to_u128","","",50,[[],["option",4]]],[11,"to_f32","","",50,[[],["option",4]]],[11,"to_f64","","",50,[[],["option",4]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"eq","","",49,[[["bigint",3]]]],[11,"eq","","",20,[[["sign",4]]]],[11,"eq","","",52,[[["tryfrombiginterror",3]]]],[11,"ne","","",52,[[["tryfrombiginterror",3]]]],[11,"eq","","",51,[[["parsebiginterror",3]]]],[11,"ne","","",51,[[["parsebiginterror",3]]]],[11,"eq","","",50,[[["biguint",3]]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[["biguint",3]],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[["bigint",3]],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",20,[[["sign",4]],["sign",4]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[["bigint",3]],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[["biguint",3]],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"bitor_assign","","",49,[[["bigint",3]]]],[11,"bitor_assign","","",50,[[["biguint",3]]]],[11,"bitor_assign","","",50,[[["biguint",3]]]],[11,"bitor_assign","","",49,[[["bigint",3]]]],[11,"fmt","","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",52,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",49,[[],["bigint",3]]],[11,"clone_from","","",49,[[["bigint",3]]]],[11,"clone","","",51,[[],["parsebiginterror",3]]],[11,"clone","","",20,[[],["sign",4]]],[11,"clone","","",50,[[],["biguint",3]]],[11,"clone_from","","",50,[[["biguint",3]]]],[11,"clone","","",52,[[],["tryfrombiginterror",3]]],[11,"bitxor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",49,[[["bigint",3]],["bigint",3]]],[11,"to_bigint","","",50,[[],[["bigint",3],["option",4]]]],[11,"to_bigint","","",49,[[],[["bigint",3],["option",4]]]],[11,"fmt","","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",52,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[["bigint",3]]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[["bigint",3]]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[["biguint",3]]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[["biguint",3]]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_str","","",49,[[],[["parsebiginterror",3],["result",4],["bigint",3]]]],[11,"from_str","","",50,[[],[["parsebiginterror",3],["result",4],["biguint",3]]]],[11,"checked_mul","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",50,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",49,[[],[["parsebiginterror",3],["result",4],["bigint",3]]]],[11,"from_str_radix","","Creates and initializes a <code>BigUint</code>.",50,[[],[["parsebiginterror",3],["result",4],["biguint",3]]]],[11,"next","num::integer","",56,[[],["option",4]]],[11,"eq","","",22,[[["extendedgcd",3]]]],[11,"ne","","",22,[[["extendedgcd",3]]]],[11,"clone","","",22,[[],["extendedgcd",3]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","num::traits","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"zero","num::complex","",0,[[],["complex",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"product","","",0,[[],["complex",3]]],[11,"product","","",0,[[],["complex",3]]],[11,"description","","",55,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"neg","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"hash","","",0,[[]]],[11,"from_usize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_isize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f64","","",0,[[],[["option",4],["complex",3]]]],[11,"from","","",0,[[],[["option",4],["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[["complex",3]]]],[11,"from","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"as_","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"one","","",0,[[],["complex",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",55,[[["parsecomplexerror",3]]]],[11,"ne","","",55,[[["parsecomplexerror",3]]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"fmt","","",55,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"from_str_radix","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …",0,[[],[["complex",3],["result",4]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"default","","",0,[[],["complex",3]]],[11,"fmt","","",55,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"inv","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_str","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …",0,[[],[["result",4],["complex",3]]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"checked_sub","num::rational","",63,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"to_i64","","",63,[[],["option",4]]],[11,"to_i128","","",63,[[],["option",4]]],[11,"to_u64","","",63,[[],["option",4]]],[11,"to_u128","","",63,[[],["option",4]]],[11,"to_f64","","",63,[[],["option",4]]],[11,"description","","",64,[[]]],[11,"product","","",63,[[],["ratio",3]]],[11,"product","","",63,[[],["ratio",3]]],[11,"cmp","","",63,[[["ratio",3]],["ordering",4]]],[11,"sub","","",63,[[],["ratio",3]]],[11,"sub","","",63,[[["ratio",3]],["ratio",3]]],[11,"sub","","",63,[[],["ratio",3]]],[11,"sub","","",63,[[["ratio",3]],["ratio",3]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"checked_add","","",63,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"into","","",63,[[]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"neg","","",63,[[],["ratio",3]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","","",63,[[],["ratio",3]]],[11,"div","","",63,[[["ratio",3]],["ratio",3]]],[11,"div","","",63,[[["ratio",3]],["ratio",3]]],[11,"div","","",63,[[],["ratio",3]]],[11,"rem","","",63,[[["ratio",3]],["ratio",3]]],[11,"rem","","",63,[[],["ratio",3]]],[11,"rem","","",63,[[],["ratio",3]]],[11,"rem","","",63,[[["ratio",3]],["ratio",3]]],[11,"hash","","",63,[[]]],[11,"checked_div","","",63,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"checked_mul","","",63,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"add","","",63,[[],["ratio",3]]],[11,"add","","",63,[[],["ratio",3]]],[11,"add","","",63,[[["ratio",3]],["ratio",3]]],[11,"add","","",63,[[["ratio",3]],["ratio",3]]],[11,"from","","",63,[[],["ratio",3]]],[11,"from","","",63,[[],["ratio",3]]],[11,"from_str_radix","","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.",63,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"zero","","",63,[[],["ratio",3]]],[11,"is_zero","","",63,[[]]],[11,"set_zero","","",63,[[]]],[11,"div_assign","","",63,[[["ratio",3]]]],[11,"div_assign","","",63,[[]]],[11,"div_assign","","",63,[[]]],[11,"div_assign","","",63,[[["ratio",3]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",63,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",63,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",63,[[],[["option",4],["ratio",3]]]],[11,"add_assign","","",63,[[["ratio",3]]]],[11,"add_assign","","",63,[[]]],[11,"add_assign","","",63,[[]]],[11,"add_assign","","",63,[[["ratio",3]]]],[11,"eq","","",63,[[["ratio",3]]]],[11,"eq","","",64,[[["parseratioerror",3]]]],[11,"ne","","",64,[[["parseratioerror",3]]]],[11,"sub_assign","","",63,[[]]],[11,"sub_assign","","",63,[[]]],[11,"sub_assign","","",63,[[["ratio",3]]]],[11,"sub_assign","","",63,[[["ratio",3]]]],[11,"mul","","",63,[[],["ratio",3]]],[11,"mul","","",63,[[["ratio",3]],["ratio",3]]],[11,"mul","","",63,[[],["ratio",3]]],[11,"mul","","",63,[[["ratio",3]],["ratio",3]]],[11,"fmt","","",64,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",63,[[],["ratio",3]]],[11,"clone","","",64,[[],["parseratioerror",3]]],[11,"abs","","",63,[[],["ratio",3]]],[11,"abs_sub","","",63,[[["ratio",3]],["ratio",3]]],[11,"signum","","",63,[[],["ratio",3]]],[11,"is_positive","","",63,[[]]],[11,"is_negative","","",63,[[]]],[11,"one","","",63,[[],["ratio",3]]],[11,"is_one","","",63,[[]]],[11,"set_one","","",63,[[]]],[11,"sum","","",63,[[],["ratio",3]]],[11,"sum","","",63,[[],["ratio",3]]],[11,"rem_assign","","",63,[[["ratio",3]]]],[11,"rem_assign","","",63,[[]]],[11,"rem_assign","","",63,[[["ratio",3]]]],[11,"rem_assign","","",63,[[]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",64,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_assign","","",63,[[]]],[11,"mul_assign","","",63,[[["ratio",3]]]],[11,"mul_assign","","",63,[[]]],[11,"mul_assign","","",63,[[["ratio",3]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_str","","Parses <code>numer/denom</code> or just <code>numer</code>.",63,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"pow","","",63,[[["bigint",3]],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[["bigint",3]],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[["biguint",3]],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[["biguint",3]],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"pow","","",63,[[],["ratio",3]]],[11,"inv","","",63,[[],["ratio",3]]],[11,"partial_cmp","","",63,[[["ratio",3]],[["ordering",4],["option",4]]]],[11,"clone","num::iter","",61,[[],["rangefrom",3]]],[11,"clone","","",58,[[],["rangeinclusive",3]]],[11,"clone","","",57,[[],["range",3]]],[11,"clone","","",62,[[],["rangestepfrom",3]]],[11,"clone","","",60,[[],["rangestepinclusive",3]]],[11,"clone","","",59,[[],["rangestep",3]]],[11,"next","","",57,[[],["option",4]]],[11,"size_hint","","",57,[[]]],[11,"next","","",61,[[],["option",4]]],[11,"size_hint","","",61,[[]]],[11,"next","","",58,[[],["option",4]]],[11,"size_hint","","",58,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"next","","",60,[[],["option",4]]],[11,"next_back","","",57,[[],["option",4]]],[11,"next_back","","",58,[[],["option",4]]],[11,"new","num::bigint","Creates and initializes a BigInt.",49,[[["sign",4],["global",3],["vec",3]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a <code>BigInt</code>.",49,[[["sign",4],["biguint",3]],["bigint",3]]],[11,"from_slice","","Creates and initializes a <code>BigInt</code>.",49,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a <code>BigInt</code>.",49,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a <code>BigInt</code>.",49,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigInt</code>.",49,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a <code>BigInt</code> from an array of bytes in…",49,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a <code>BigInt</code> from an array of bytes …",49,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigInt</code>.",49,[[],[["bigint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",49,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",49,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the <code>BigInt</code>…",49,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the <code>BigInt</code>…",49,[[]]],[11,"to_u32_digits","","Returns the sign and the <code>u32</code> digits representation of the …",49,[[]]],[11,"to_u64_digits","","Returns the sign and the <code>u64</code> digits representation of the …",49,[[]]],[11,"iter_u32_digits","","Returns an iterator of <code>u32</code> digits representation of the …",49,[[],["u32digits",3]]],[11,"iter_u64_digits","","Returns an iterator of <code>u64</code> digits representation of the …",49,[[],["u64digits",3]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the …",49,[[],[["global",3],["vec",3]]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the …",49,[[],[["global",3],["vec",3]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",49,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",49,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in …",49,[[]]],[11,"sign","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.",49,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.",49,[[],["biguint",3]]],[11,"into_parts","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …",49,[[]]],[11,"bits","","Determines the fewest bits necessary to express the <code>BigInt</code>…",49,[[]]],[11,"to_biguint","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it\'s not negative.",49,[[],[["biguint",3],["option",4]]]],[11,"checked_add","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",49,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"pow","","Returns <code>self ^ exponent</code>.",49,[[],["bigint",3]]],[11,"modpow","","Returns <code>(self ^ exponent) mod modulus</code>",49,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",49,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",49,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- See …",49,[[],["bigint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",49,[[],["option",4]]],[11,"bit","","Returns whether the bit in position <code>bit</code> is set, using the …",49,[[]]],[11,"set_bit","","Sets or clears the bit in the given position, using the …",49,[[]]],[11,"new","","Creates and initializes a <code>BigUint</code>.",50,[[["global",3],["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a <code>BigUint</code>.",50,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a <code>BigUint</code>.",50,[[]]],[11,"from_bytes_be","","Creates and initializes a <code>BigUint</code>.",50,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigUint</code>.",50,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigUint</code>. The input slice must …",50,[[],[["biguint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",50,[[],[["biguint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",50,[[],[["biguint",3],["option",4]]]],[11,"to_bytes_be","","Returns the byte representation of the <code>BigUint</code> in …",50,[[],[["global",3],["vec",3]]]],[11,"to_bytes_le","","Returns the byte representation of the <code>BigUint</code> in …",50,[[],[["global",3],["vec",3]]]],[11,"to_u32_digits","","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …",50,[[],[["global",3],["vec",3]]]],[11,"to_u64_digits","","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …",50,[[],[["vec",3],["global",3]]]],[11,"iter_u32_digits","","Returns an iterator of <code>u32</code> digits representation of the …",50,[[],["u32digits",3]]],[11,"iter_u64_digits","","Returns an iterator of <code>u64</code> digits representation of the …",50,[[],["u64digits",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",50,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",50,[[],[["global",3],["vec",3]]]],[11,"to_radix_le","","Returns the integer in the requested base in …",50,[[],[["global",3],["vec",3]]]],[11,"bits","","Determines the fewest bits necessary to express the …",50,[[]]],[11,"pow","","Returns <code>self ^ exponent</code>.",50,[[],["biguint",3]]],[11,"modpow","","Returns <code>(self ^ exponent) % modulus</code>.",50,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",50,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",50,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- see …",50,[[],["biguint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",50,[[],["option",4]]],[11,"trailing_ones","","Returns the number of least-significant bits that are …",50,[[]]],[11,"count_ones","","Returns the number of one bits.",50,[[]]],[11,"bit","","Returns whether the bit in the given position is set",50,[[]]],[11,"set_bit","","Sets or clears the bit in the given position",50,[[]]],[11,"new","num::complex","Create a new Complex",0,[[],["complex",3]]],[11,"i","","Returns imaginary unit",0,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since <code>T</code> doesn\'t …",0,[[]]],[11,"scale","","Multiplies <code>self</code> by the scalar <code>t</code>.",0,[[],["complex",3]]],[11,"unscale","","Divides <code>self</code> by the scalar <code>t</code>.",0,[[],["complex",3]]],[11,"powu","","Raises <code>self</code> to an unsigned integer power.",0,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. <code>re - i im</code>",0,[[],["complex",3]]],[11,"inv","","Returns <code>1/self</code>",0,[[],["complex",3]]],[11,"powi","","Raises <code>self</code> to a signed integer power.",0,[[],["complex",3]]],[11,"l1_norm","","Returns the L1 norm <code>|re| + |im|</code> -- the Manhattan distance …",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that …",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[],["complex",3]]],[11,"exp","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …",0,[[],["complex",3]]],[11,"ln","","Computes the principal value of natural logarithm of <code>self</code>.",0,[[],["complex",3]]],[11,"sqrt","","Computes the principal value of the square root of <code>self</code>.",0,[[],["complex",3]]],[11,"cbrt","","Computes the principal value of the cube root of <code>self</code>.",0,[[],["complex",3]]],[11,"powf","","Raises <code>self</code> to a floating point power.",0,[[],["complex",3]]],[11,"log","","Returns the logarithm of <code>self</code> with respect to an …",0,[[],["complex",3]]],[11,"powc","","Raises <code>self</code> to a complex power.",0,[[["complex",3]],["complex",3]]],[11,"expf","","Raises a floating point number to the complex power <code>self</code>.",0,[[],["complex",3]]],[11,"sin","","Computes the sine of <code>self</code>.",0,[[],["complex",3]]],[11,"cos","","Computes the cosine of <code>self</code>.",0,[[],["complex",3]]],[11,"tan","","Computes the tangent of <code>self</code>.",0,[[],["complex",3]]],[11,"asin","","Computes the principal value of the inverse sine of <code>self</code>.",0,[[],["complex",3]]],[11,"acos","","Computes the principal value of the inverse cosine of <code>self</code>…",0,[[],["complex",3]]],[11,"atan","","Computes the principal value of the inverse tangent of …",0,[[],["complex",3]]],[11,"sinh","","Computes the hyperbolic sine of <code>self</code>.",0,[[],["complex",3]]],[11,"cosh","","Computes the hyperbolic cosine of <code>self</code>.",0,[[],["complex",3]]],[11,"tanh","","Computes the hyperbolic tangent of <code>self</code>.",0,[[],["complex",3]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine …",0,[[],["complex",3]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine …",0,[[],["complex",3]]],[11,"atanh","","Computes the principal value of inverse hyperbolic …",0,[[],["complex",3]]],[11,"finv","","Returns <code>1/self</code> using floating-point operations.",0,[[],["complex",3]]],[11,"fdiv","","Returns <code>self/other</code> using floating-point operations.",0,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"into_original","num::bigint","Extract the original value, if available. The value will …",52,[[]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients …",56,[[],["iterbinomial",3]]],[11,"new_raw","num::rational","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …",63,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",63,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",63,[[]]],[11,"new","","Creates a new <code>Ratio</code>.",63,[[],["ratio",3]]],[11,"from_integer","","Creates a <code>Ratio</code> representing the integer <code>t</code>.",63,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",63,[[]]],[11,"is_integer","","Returns true if the rational number is an integer …",63,[[]]],[11,"reduced","","Returns a reduced copy of self.",63,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",63,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",63,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",63,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away …",63,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",63,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division …",63,[[],["ratio",3]]],[11,"pow","","Raises the <code>Ratio</code> to the power of an exponent.",63,[[],["ratio",3]]],[11,"from_float","","Converts a float into a rational number.",63,[[],[["option",4],["ratio",3]]]],[11,"approximate_float","","",63,[[],[["option",4],["ratio",3]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Bounded"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"Num"],[8,"One"],[8,"PrimInt"],[8,"Saturating"],[8,"Signed"],[8,"Zero"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Average"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"BigUint"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[3,"U32Digits"],[3,"U64Digits"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion …",null,null],[11,"into_original","","Extract the original value, if available. The value will …",0,[[]]],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a <code>BigUint</code>.",null,null],[10,"to_biguint","","Converts the value of <code>self</code> to a <code>BigUint</code>.",1,[[],[["option",4],["biguint",3]]]],[3,"U32Digits","","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …",null,null],[3,"U64Digits","","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a <code>BigInt</code>\'s composing element.",null,null],[13,"Minus","","",2,null],[13,"NoSign","","",2,null],[13,"Plus","","",2,null],[8,"ToBigInt","","A generic trait for converting a value to a <code>BigInt</code>. This …",null,null],[10,"to_bigint","","Converts the value of <code>self</code> to a <code>BigInt</code>.",3,[[],[["option",4],["bigint",3]]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",4,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",7,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"to_bigint","","",4,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",7,[[],[["option",4],["bigint",3]]]],[11,"to_biguint","","",4,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",7,[[],[["option",4],["biguint",3]]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[["biguint",3]]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",4,[[["bigint",3]],["bigint",3]]],[11,"div","","",4,[[["bigint",3]],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",4,[[],["bigint",3]]],[11,"div","","",7,[[["biguint",3]],["biguint",3]]],[11,"div","","",7,[[["biguint",3]],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"div","","",7,[[],["biguint",3]]],[11,"rem","","",4,[[["bigint",3]],["bigint",3]]],[11,"rem","","",4,[[["bigint",3]],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",4,[[],["bigint",3]]],[11,"rem","","",7,[[["biguint",3]],["biguint",3]]],[11,"rem","","",7,[[["biguint",3]],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"rem","","",7,[[],["biguint",3]]],[11,"sub","","",4,[[["bigint",3]],["bigint",3]]],[11,"sub","","",4,[[["bigint",3]],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",4,[[],["bigint",3]]],[11,"sub","","",7,[[["biguint",3]],["biguint",3]]],[11,"sub","","",7,[[["biguint",3]],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"sub","","",7,[[],["biguint",3]]],[11,"eq","","",2,[[["sign",4]]]],[11,"eq","","",4,[[["bigint",3]]]],[11,"eq","","",7,[[["biguint",3]]]],[11,"eq","","",8,[[["parsebiginterror",3]]]],[11,"ne","","",8,[[["parsebiginterror",3]]]],[11,"eq","","",0,[[["tryfrombiginterror",3]]]],[11,"ne","","",0,[[["tryfrombiginterror",3]]]],[11,"cmp","","",2,[[["sign",4]],["ordering",4]]],[11,"cmp","","",4,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",7,[[["biguint",3]],["ordering",4]]],[11,"partial_cmp","","",2,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["bigint",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[["biguint",3]],[["ordering",4],["option",4]]]],[11,"add","","",4,[[["bigint",3]],["bigint",3]]],[11,"add","","",4,[[["bigint",3]],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",4,[[],["bigint",3]]],[11,"add","","",7,[[["biguint",3]],["biguint",3]]],[11,"add","","",7,[[["biguint",3]],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"add","","",7,[[],["biguint",3]]],[11,"mul","","",2,[[["sign",4]],["sign",4]]],[11,"mul","","",4,[[["bigint",3]],["bigint",3]]],[11,"mul","","",4,[[["bigint",3]],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",4,[[],["bigint",3]]],[11,"mul","","",7,[[["biguint",3]],["biguint",3]]],[11,"mul","","",7,[[["biguint",3]],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"mul","","",7,[[],["biguint",3]]],[11,"neg","","Negate Sign value.",2,[[],["sign",4]]],[11,"neg","","",4,[[],["bigint",3]]],[11,"add_assign","","",4,[[["bigint",3]]]],[11,"add_assign","","",4,[[["bigint",3]]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",7,[[["biguint",3]]]],[11,"add_assign","","",7,[[["biguint",3]]]],[11,"add_assign","","",7,[[]]],[11,"add_assign","","",7,[[]]],[11,"add_assign","","",7,[[]]],[11,"add_assign","","",7,[[]]],[11,"add_assign","","",7,[[]]],[11,"add_assign","","",7,[[]]],[11,"sub_assign","","",4,[[["bigint",3]]]],[11,"sub_assign","","",4,[[["bigint",3]]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",7,[[["biguint",3]]]],[11,"sub_assign","","",7,[[["biguint",3]]]],[11,"sub_assign","","",7,[[]]],[11,"sub_assign","","",7,[[]]],[11,"sub_assign","","",7,[[]]],[11,"sub_assign","","",7,[[]]],[11,"sub_assign","","",7,[[]]],[11,"sub_assign","","",7,[[]]],[11,"mul_assign","","",4,[[["bigint",3]]]],[11,"mul_assign","","",4,[[["bigint",3]]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",7,[[["biguint",3]]]],[11,"mul_assign","","",7,[[["biguint",3]]]],[11,"mul_assign","","",7,[[]]],[11,"mul_assign","","",7,[[]]],[11,"mul_assign","","",7,[[]]],[11,"mul_assign","","",7,[[]]],[11,"mul_assign","","",7,[[]]],[11,"mul_assign","","",7,[[]]],[11,"div_assign","","",4,[[["bigint",3]]]],[11,"div_assign","","",4,[[["bigint",3]]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",4,[[]]],[11,"div_assign","","",7,[[["biguint",3]]]],[11,"div_assign","","",7,[[["biguint",3]]]],[11,"div_assign","","",7,[[]]],[11,"div_assign","","",7,[[]]],[11,"div_assign","","",7,[[]]],[11,"div_assign","","",7,[[]]],[11,"div_assign","","",7,[[]]],[11,"div_assign","","",7,[[]]],[11,"rem_assign","","",4,[[["bigint",3]]]],[11,"rem_assign","","",4,[[["bigint",3]]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",4,[[]]],[11,"rem_assign","","",7,[[["biguint",3]]]],[11,"rem_assign","","",7,[[["biguint",3]]]],[11,"rem_assign","","",7,[[]]],[11,"rem_assign","","",7,[[]]],[11,"rem_assign","","",7,[[]]],[11,"rem_assign","","",7,[[]]],[11,"rem_assign","","",7,[[]]],[11,"rem_assign","","",7,[[]]],[11,"not","","",4,[[],["bigint",3]]],[11,"bitand","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",4,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",7,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",7,[[["biguint",3]],["biguint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",4,[[],["bigint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shl","","",7,[[],["biguint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",4,[[],["bigint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"shr","","",7,[[],["biguint",3]]],[11,"bitand_assign","","",4,[[["bigint",3]]]],[11,"bitand_assign","","",4,[[["bigint",3]]]],[11,"bitand_assign","","",7,[[["biguint",3]]]],[11,"bitand_assign","","",7,[[["biguint",3]]]],[11,"bitor_assign","","",4,[[["bigint",3]]]],[11,"bitor_assign","","",4,[[["bigint",3]]]],[11,"bitor_assign","","",7,[[["biguint",3]]]],[11,"bitor_assign","","",7,[[["biguint",3]]]],[11,"bitxor_assign","","",4,[[["bigint",3]]]],[11,"bitxor_assign","","",4,[[["bigint",3]]]],[11,"bitxor_assign","","",7,[[["biguint",3]]]],[11,"bitxor_assign","","",7,[[["biguint",3]]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",7,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",7,[[]]],[11,"len","","",5,[[]]],[11,"len","","",6,[[]]],[11,"try_from","","",7,[[["bigint",3]],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[["bigint",3]],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",7,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"try_from","","",7,[[],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"from_str","","",4,[[],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"from_str","","",7,[[],[["result",4],["biguint",3],["parsebiginterror",3]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"last","","",5,[[],["option",4]]],[11,"count","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"nth","","",6,[[],["option",4]]],[11,"last","","",6,[[],["option",4]]],[11,"count","","",6,[[]]],[11,"sum","","",4,[[]]],[11,"sum","","",7,[[]]],[11,"product","","",4,[[]]],[11,"product","","",7,[[]]],[11,"clone","","",2,[[],["sign",4]]],[11,"clone","","",4,[[]]],[11,"clone_from","","",4,[[]]],[11,"clone","","",7,[[]]],[11,"clone_from","","",7,[[]]],[11,"clone","","",8,[[],["parsebiginterror",3]]],[11,"clone","","",0,[[],["tryfrombiginterror",3]]],[11,"default","","",4,[[],["bigint",3]]],[11,"default","","",7,[[],["biguint",3]]],[11,"description","","",8,[[]]],[11,"description","","",0,[[]]],[11,"nth_root","","",4,[[]]],[11,"sqrt","","",4,[[]]],[11,"cbrt","","",4,[[]]],[11,"nth_root","","",7,[[]]],[11,"sqrt","","",7,[[]]],[11,"cbrt","","",7,[[]]],[11,"div_rem","","",4,[[["bigint",3]]]],[11,"div_floor","","",4,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",4,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",4,[[["bigint",3]]]],[11,"div_ceil","","",4,[[]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",4,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",4,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",4,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",4,[[["bigint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",4,[[["bigint",3]]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",4,[[["bigint",3]]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",4,[[]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",4,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",4,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",4,[[]]],[11,"div_rem","","",7,[[["biguint",3]]]],[11,"div_floor","","",7,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",7,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",7,[[["biguint",3]]]],[11,"div_ceil","","",7,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",7,[[]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",7,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",7,[[]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",7,[[["biguint",3]]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",7,[[["biguint",3]]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",7,[[]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",7,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",7,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",7,[[]]],[11,"to_i64","","",4,[[],["option",4]]],[11,"to_i128","","",4,[[],["option",4]]],[11,"to_u64","","",4,[[],["option",4]]],[11,"to_u128","","",4,[[],["option",4]]],[11,"to_f32","","",4,[[],["option",4]]],[11,"to_f64","","",4,[[],["option",4]]],[11,"to_i64","","",7,[[],["option",4]]],[11,"to_i128","","",7,[[],["option",4]]],[11,"to_u64","","",7,[[],["option",4]]],[11,"to_u128","","",7,[[],["option",4]]],[11,"to_f32","","",7,[[],["option",4]]],[11,"to_f64","","",7,[[],["option",4]]],[11,"from_i64","","",4,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",4,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",4,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",4,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",4,[[],[["option",4],["bigint",3]]]],[11,"from_i64","","",7,[[],[["option",4],["biguint",3]]]],[11,"from_i128","","",7,[[],[["option",4],["biguint",3]]]],[11,"from_u64","","",7,[[],[["option",4],["biguint",3]]]],[11,"from_u128","","",7,[[],[["option",4],["biguint",3]]]],[11,"from_f64","","",7,[[],[["option",4],["biguint",3]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",4,[[],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"from_str_radix","","Creates and initializes a <code>BigUint</code>.",7,[[],[["result",4],["biguint",3],["parsebiginterror",3]]]],[11,"zero","","",4,[[],["bigint",3]]],[11,"set_zero","","",4,[[]]],[11,"is_zero","","",4,[[]]],[11,"zero","","",7,[[],["biguint",3]]],[11,"set_zero","","",7,[[]]],[11,"is_zero","","",7,[[]]],[11,"one","","",4,[[],["bigint",3]]],[11,"set_one","","",4,[[]]],[11,"is_one","","",4,[[]]],[11,"one","","",7,[[],["biguint",3]]],[11,"set_one","","",7,[[]]],[11,"is_one","","",7,[[]]],[11,"checked_add","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_add","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_sub","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_mul","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_div","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",7,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[],["bigint",3]]],[11,"pow","","",4,[[["biguint",3]],["bigint",3]]],[11,"pow","","",4,[[["biguint",3]],["bigint",3]]],[11,"pow","","",7,[[["biguint",3]],["biguint",3]]],[11,"pow","","",7,[[["biguint",3]],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"pow","","",7,[[],["biguint",3]]],[11,"abs","","",4,[[],["bigint",3]]],[11,"abs_sub","","",4,[[["bigint",3]],["bigint",3]]],[11,"signum","","",4,[[],["bigint",3]]],[11,"is_positive","","",4,[[]]],[11,"is_negative","","",4,[[]]],[11,"new","","Creates and initializes a BigInt.",4,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a <code>BigInt</code>.",4,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a <code>BigInt</code>.",4,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a <code>BigInt</code>.",4,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a <code>BigInt</code>.",4,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigInt</code>.",4,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a <code>BigInt</code> from an array of bytes in…",4,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a <code>BigInt</code> from an array of bytes …",4,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigInt</code>.",4,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",4,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",4,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the <code>BigInt</code>…",4,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the <code>BigInt</code>…",4,[[]]],[11,"to_u32_digits","","Returns the sign and the <code>u32</code> digits representation of the …",4,[[]]],[11,"to_u64_digits","","Returns the sign and the <code>u64</code> digits representation of the …",4,[[]]],[11,"iter_u32_digits","","Returns an iterator of <code>u32</code> digits representation of the …",4,[[],["u32digits",3]]],[11,"iter_u64_digits","","Returns an iterator of <code>u64</code> digits representation of the …",4,[[],["u64digits",3]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the …",4,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the …",4,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",4,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",4,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in …",4,[[]]],[11,"sign","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.",4,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.",4,[[],["biguint",3]]],[11,"into_parts","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …",4,[[]]],[11,"bits","","Determines the fewest bits necessary to express the <code>BigInt</code>…",4,[[]]],[11,"to_biguint","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it\'s not negative.",4,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",4,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"pow","","Returns <code>self ^ exponent</code>.",4,[[]]],[11,"modpow","","Returns <code>(self ^ exponent) mod modulus</code>",4,[[]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",4,[[]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",4,[[]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- See …",4,[[]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",4,[[],["option",4]]],[11,"bit","","Returns whether the bit in position <code>bit</code> is set, using the …",4,[[]]],[11,"set_bit","","Sets or clears the bit in the given position, using the …",4,[[]]],[11,"new","","Creates and initializes a <code>BigUint</code>.",7,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a <code>BigUint</code>.",7,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a <code>BigUint</code>.",7,[[]]],[11,"from_bytes_be","","Creates and initializes a <code>BigUint</code>.",7,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigUint</code>.",7,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigUint</code>. The input slice must …",7,[[],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",7,[[],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",7,[[],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the <code>BigUint</code> in …",7,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the <code>BigUint</code> in …",7,[[],["vec",3]]],[11,"to_u32_digits","","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …",7,[[],["vec",3]]],[11,"to_u64_digits","","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …",7,[[],["vec",3]]],[11,"iter_u32_digits","","Returns an iterator of <code>u32</code> digits representation of the …",7,[[],["u32digits",3]]],[11,"iter_u64_digits","","Returns an iterator of <code>u64</code> digits representation of the …",7,[[],["u64digits",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",7,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",7,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in …",7,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the …",7,[[]]],[11,"pow","","Returns <code>self ^ exponent</code>.",7,[[]]],[11,"modpow","","Returns <code>(self ^ exponent) % modulus</code>.",7,[[]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",7,[[]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",7,[[]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- see …",7,[[]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",7,[[],["option",4]]],[11,"trailing_ones","","Returns the number of least-significant bits that are …",7,[[]]],[11,"count_ones","","Returns the number of one bits.",7,[[]]],[11,"bit","","Returns whether the bit in the given position is set",7,[[]]],[11,"set_bit","","Sets or clears the bit in the given position",7,[[]]]],"p":[[3,"TryFromBigIntError"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[3,"BigInt"],[3,"U32Digits"],[3,"U64Digits"],[3,"BigUint"],[3,"ParseBigIntError"]]},\
"num_complex":{"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"new","","Create a new Complex",0,[[]]],[11,"i","","Returns imaginary unit",0,[[]]],[11,"norm_sqr","","Returns the square of the norm (since <code>T</code> doesn\'t …",0,[[]]],[11,"scale","","Multiplies <code>self</code> by the scalar <code>t</code>.",0,[[]]],[11,"unscale","","Divides <code>self</code> by the scalar <code>t</code>.",0,[[]]],[11,"powu","","Raises <code>self</code> to an unsigned integer power.",0,[[]]],[11,"conj","","Returns the complex conjugate. i.e. <code>re - i im</code>",0,[[]]],[11,"inv","","Returns <code>1/self</code>",0,[[]]],[11,"powi","","Raises <code>self</code> to a signed integer power.",0,[[]]],[11,"l1_norm","","Returns the L1 norm <code>|re| + |im|</code> -- the Manhattan distance …",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that …",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[]]],[11,"exp","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …",0,[[]]],[11,"ln","","Computes the principal value of natural logarithm of <code>self</code>.",0,[[]]],[11,"sqrt","","Computes the principal value of the square root of <code>self</code>.",0,[[]]],[11,"cbrt","","Computes the principal value of the cube root of <code>self</code>.",0,[[]]],[11,"powf","","Raises <code>self</code> to a floating point power.",0,[[]]],[11,"log","","Returns the logarithm of <code>self</code> with respect to an …",0,[[]]],[11,"powc","","Raises <code>self</code> to a complex power.",0,[[]]],[11,"expf","","Raises a floating point number to the complex power <code>self</code>.",0,[[]]],[11,"sin","","Computes the sine of <code>self</code>.",0,[[]]],[11,"cos","","Computes the cosine of <code>self</code>.",0,[[]]],[11,"tan","","Computes the tangent of <code>self</code>.",0,[[]]],[11,"asin","","Computes the principal value of the inverse sine of <code>self</code>.",0,[[]]],[11,"acos","","Computes the principal value of the inverse cosine of <code>self</code>…",0,[[]]],[11,"atan","","Computes the principal value of the inverse tangent of …",0,[[]]],[11,"sinh","","Computes the hyperbolic sine of <code>self</code>.",0,[[]]],[11,"cosh","","Computes the hyperbolic cosine of <code>self</code>.",0,[[]]],[11,"tanh","","Computes the hyperbolic tangent of <code>self</code>.",0,[[]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine …",0,[[]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine …",0,[[]]],[11,"atanh","","Computes the principal value of inverse hyperbolic …",0,[[]]],[11,"finv","","Returns <code>1/self</code> using floating-point operations.",0,[[],["complex",3]]],[11,"fdiv","","Returns <code>self/other</code> using floating-point operations.",0,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[3,"ParseComplexError","","",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",1,[[["parsecomplexerror",3]]]],[11,"ne","","",1,[[["parsecomplexerror",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"from_str","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"clone","","",0,[[],["complex",3]]],[11,"default","","",0,[[],["complex",3]]],[11,"description","","",1,[[]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"from_usize","","",0,[[],["option",4]]],[11,"from_isize","","",0,[[],["option",4]]],[11,"from_u8","","",0,[[],["option",4]]],[11,"from_u16","","",0,[[],["option",4]]],[11,"from_u32","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_i8","","",0,[[],["option",4]]],[11,"from_i16","","",0,[[],["option",4]]],[11,"from_i32","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from","","",0,[[["toprimitive",8]],["option",4]]],[11,"as_","","",0,[[]]],[11,"from_str_radix","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …",0,[[],["result",4]]],[11,"zero","","",0,[[]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"inv","","",0,[[]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[["complex",3]]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[8,"Roots","num_integer","Provides methods to compute an integer\'s square root, …",null,null],[10,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",0,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",null,[[["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer …",null,[[["roots",8]],["roots",8]]],[8,"Average","","Provides methods to compute the average of two integers, …",null,null],[10,"average_ceil","","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…",1,[[]]],[10,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>. …",1,[[]]],[5,"average_ceil","","Returns the ceiling value of the average of <code>x</code> and <code>y</code> -- …",null,[[["average",8]],["average",8]]],[5,"average_floor","","Returns the floor value of the average of <code>x</code> and <code>y</code> -- see …",null,[[["average",8]],["average",8]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",2,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",2,[[]]],[11,"div_ceil","","Ceiled integer division.",2,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",2,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",2,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple …",2,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",2,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",2,[[]]],[10,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",2,[[]]],[10,"is_multiple_of","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.",2,[[]]],[10,"is_even","","Returns <code>true</code> if the number is even.",2,[[]]],[10,"is_odd","","Returns <code>true</code> if the number is odd.",2,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. …",2,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. …",2,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",3,null],[12,"x","","",3,null],[12,"y","","",3,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",null,[[["integer",8]]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[11,"new","","For a given n, iterate over all binomial coefficients …",4,[[],["iterbinomial",3]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["clone",8],["integer",8]],[["clone",8],["integer",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["clone",8],["integer",8]]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["extendedgcd",3]]]],[11,"ne","","",3,[[["extendedgcd",3]]]],[11,"next","","",4,[[],["option",4]]],[11,"clone","","",3,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]]],"p":[[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"ExtendedGcd"],[3,"IterBinomial"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) …",null,[[],["range",3]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[3,"RangeStep","","An iterator over the range [start, stop) by <code>step</code>. It …",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by <code>step</code>. …",null,[[],["rangestep",3]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by <code>step</code>. It …",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by <code>step</code>. …",null,[[],["rangestepinclusive",3]]],[3,"RangeFrom","","An iterator over the infinite range starting at <code>start</code>",null,null],[5,"range_from","","Return an iterator over the infinite range starting at …",null,[[],["rangefrom",3]]],[3,"RangeStepFrom","","An iterator over the infinite range starting at <code>start</code> by …",null,null],[5,"range_step_from","","Return an iterator over the infinite range starting at …",null,[[],["rangestepfrom",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"into_iter","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"into_iter","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"clone","","",0,[[],["range",3]]],[11,"clone","","",1,[[],["rangeinclusive",3]]],[11,"clone","","",2,[[],["rangestep",3]]],[11,"clone","","",3,[[],["rangestepinclusive",3]]],[11,"clone","","",4,[[],["rangefrom",3]]],[11,"clone","","",5,[[],["rangestepfrom",3]]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"]]},\
"num_rational":{"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a <code>Ratio</code> of machine-sized integers.",null,null],[6,"Rational32","","Alias for a <code>Ratio</code> of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a <code>Ratio</code> of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"new_raw","","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …",0,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[]]],[11,"new","","Creates a new <code>Ratio</code>.",0,[[],["ratio",3]]],[11,"from_integer","","Creates a <code>Ratio</code> representing the integer <code>t</code>.",0,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[]]],[11,"is_integer","","Returns true if the rational number is an integer …",0,[[]]],[11,"reduced","","Returns a reduced copy of self.",0,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",0,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",0,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",0,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away …",0,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",0,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division …",0,[[],["ratio",3]]],[11,"pow","","Raises the <code>Ratio</code> to the power of an exponent.",0,[[],["ratio",3]]],[11,"from_float","","Converts a float into a rational number.",0,[[["floatcore",8]],[["bigrational",6],["option",4]]]],[3,"ParseRatioError","","",null,null],[11,"approximate_float","","",0,[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[["parseratioerror",3]]]],[11,"ne","","",1,[[["parseratioerror",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"neg","","",0,[[],["ratio",3]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"from_str","","Parses <code>numer/denom</code> or just <code>numer</code>.",0,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"into","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"clone","","",0,[[],["ratio",3]]],[11,"clone","","",1,[[],["parseratioerror",3]]],[11,"description","","",1,[[]]],[11,"checked_add","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"zero","","",0,[[],["ratio",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"checked_div","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"checked_mul","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"one","","",0,[[],["ratio",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"checked_sub","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_str_radix","","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.",0,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[["biguint",3]],["ratio",3]]],[11,"pow","","",0,[[["biguint",3]],["ratio",3]]],[11,"pow","","",0,[[["bigint",3]],["ratio",3]]],[11,"pow","","",0,[[["bigint",3]],["ratio",3]]],[11,"abs","","",0,[[],["ratio",3]]],[11,"abs_sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"signum","","",0,[[],["ratio",3]]],[11,"is_positive","","",0,[[]]],[11,"is_negative","","",0,[[]]],[11,"inv","","",0,[[],["ratio",3]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,[[]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[]]],[0,"cast","num_traits","",null,null],[8,"ToPrimitive","num_traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",1,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",1,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",1,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",1,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",1,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",1,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",1,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",1,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",2,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",2,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",2,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[["numcast",8]],[["numcast",8],["option",4]]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",3,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",4,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with …",null,null],[10,"infinity","","Returns positive infinity.",5,[[]]],[10,"neg_infinity","","Returns negative infinity.",5,[[]]],[10,"nan","","Returns NaN.",5,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",5,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",5,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",5,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",5,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",5,[[]]],[11,"is_nan","","Returns <code>true</code> if the number is NaN.",5,[[]]],[11,"is_infinite","","Returns <code>true</code> if the number is infinite.",5,[[]]],[11,"is_finite","","Returns <code>true</code> if the number is neither infinite or NaN.",5,[[]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",5,[[]]],[10,"classify","","Returns the floating point category of the number. If …",5,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a …",5,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",5,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",5,[[]]],[11,"trunc","","Return the integer part of a number.",5,[[]]],[11,"fract","","Returns the fractional part of a number.",5,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns …",5,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",5,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …",5,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …",5,[[]]],[11,"min","","Returns the minimum of the two numbers.",5,[[]]],[11,"max","","Returns the maximum of the two numbers.",5,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the …",5,[[]]],[11,"powi","","Raise a number to an integer power.",5,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",5,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",5,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",5,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",6,[[]]],[10,"infinity","","Returns the infinite value.",6,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",6,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",6,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",6,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",6,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",6,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",6,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",6,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",6,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",6,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",6,[[]]],[10,"classify","","Returns the floating point category of the number. If …",6,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",6,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",6,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",6,[[]]],[10,"trunc","","Return the integer part of a number.",6,[[]]],[10,"fract","","Returns the fractional part of a number.",6,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",6,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",6,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",6,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",6,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",6,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",6,[[]]],[10,"powi","","Raise a number to an integer power.",6,[[]]],[10,"powf","","Raise a number to a floating point power.",6,[[]]],[10,"sqrt","","Take the square root of a number.",6,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",6,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",6,[[]]],[10,"ln","","Returns the natural logarithm of the number.",6,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",6,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",6,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",6,[[]]],[11,"to_degrees","","Converts radians to degrees.",6,[[]]],[11,"to_radians","","Converts degrees to radians.",6,[[]]],[10,"max","","Returns the maximum of the two numbers.",6,[[]]],[10,"min","","Returns the minimum of the two numbers.",6,[[]]],[10,"abs_sub","","The positive difference of two numbers.",6,[[]]],[10,"cbrt","","Take the cubic root of a number.",6,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",6,[[]]],[10,"sin","","Computes the sine of a number (in radians).",6,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",6,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",6,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",6,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",6,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",6,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",6,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",6,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",6,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",6,[[]]],[10,"sinh","","Hyperbolic sine function.",6,[[]]],[10,"cosh","","Hyperbolic cosine function.",6,[[]]],[10,"tanh","","Hyperbolic tangent function.",6,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",6,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",6,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",6,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",6,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",7,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",7,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",7,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",7,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",7,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",7,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",7,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",7,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",7,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",7,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",7,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",7,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",7,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",7,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",7,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",7,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",7,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",7,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",7,[[]]],[0,"identities","num_traits","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",8,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",8,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",8,[[]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",9,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",9,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",9,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[],["one",8]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",10,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",10,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",10,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",10,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",10,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",10,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",10,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",10,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",10,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",10,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",11,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",12,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",13,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",14,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",15,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",16,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",17,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",18,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",19,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",19,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",20,null],[10,"mul_add","","Performs the fused multiply-add operation.",20,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",21,[[]]],[0,"overflowing","num_traits::ops","",null,null],[8,"OverflowingAdd","num_traits::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean …",22,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean …",23,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean …",24,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",25,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",25,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",26,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",27,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",28,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",29,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",30,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",31,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",32,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",33,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",34,[[]]],[0,"pow","num_traits","",null,null],[8,"Pow","num_traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",35,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",35,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[["mul",8],["clone",8],["one",8]],[["mul",8],["clone",8],["one",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[["one",8],["clone",8],["checkedmul",8]],[["clone",8],["one",8],["checkedmul",8],["option",4]]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can …",36,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",36,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",36,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",36,[[]]],[10,"floor","","Returns the largest integer less than or equal to a …",36,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",36,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",36,[[]]],[10,"trunc","","Return the integer part of a number.",36,[[]]],[10,"fract","","Returns the fractional part of a number.",36,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",36,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",36,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",36,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",36,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",36,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",36,[[]]],[10,"powi","","Raise a number to an integer power.",36,[[]]],[10,"powf","","Raise a number to a real number power.",36,[[]]],[10,"sqrt","","Take the square root of a number.",36,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",36,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",36,[[]]],[10,"ln","","Returns the natural logarithm of the number.",36,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",36,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",36,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",36,[[]]],[10,"to_degrees","","Converts radians to degrees.",36,[[]]],[10,"to_radians","","Converts degrees to radians.",36,[[]]],[10,"max","","Returns the maximum of the two numbers.",36,[[]]],[10,"min","","Returns the minimum of the two numbers.",36,[[]]],[10,"abs_sub","","The positive difference of two numbers.",36,[[]]],[10,"cbrt","","Take the cubic root of a number.",36,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",36,[[]]],[10,"sin","","Computes the sine of a number (in radians).",36,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",36,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",36,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",36,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",36,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",36,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",36,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",36,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",36,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",36,[[]]],[10,"sinh","","Hyperbolic sine function.",36,[[]]],[10,"cosh","","Hyperbolic cosine function.",36,[[]]],[10,"tanh","","Hyperbolic tangent function.",36,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",36,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",36,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",36,[[]]],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",37,[[]]],[10,"abs_sub","","The positive difference of two numbers.",37,[[]]],[10,"signum","","Returns the sign of the number.",37,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",37,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",37,[[]]],[5,"abs","","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…",null,null],[16,"FromStrRadixErr","","",38,null],[10,"from_str_radix","","Convert from a string and radix (typically <code>2..=36</code>).",38,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for <code>Num</code> types which also implement numeric …",null,null],[8,"RefNum","","The trait for references which implement numeric …",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment …",null,null],[8,"NumAssign","","The trait for <code>Num</code> types which also implement assignment …",null,null],[8,"NumAssignRef","","The trait for <code>NumAssign</code> types which also implement …",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",39,null],[13,"Invalid","","",39,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",40,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_string","","",40,[[],["string",3]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]]],"p":[[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]},\
"once_cell":{"doc":"Overview<code>once_cell</code> provides two new cell-like types, …","i":[[0,"unsync","once_cell","",null,null],[3,"OnceCell","once_cell::unsync","A cell which can be written to only once. It is not …",null,null],[11,"new","","Creates a new empty cell.",0,[[],["oncecell",3]]],[11,"get","","Gets a reference to the underlying value.",0,[[],["option",4]]],[11,"get_mut","","Gets a mutable reference to the underlying value.",0,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",0,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",0,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",0,[[],["result",4]]],[11,"take","","Takes the value out of this <code>OnceCell</code>, moving it back to …",0,[[],["option",4]]],[11,"into_inner","","Consumes the <code>OnceCell</code>, returning the wrapped value.",0,[[],["option",4]]],[3,"Lazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing …",1,[[],["lazy",3]]],[11,"into_value","","Consumes this <code>Lazy</code> returning the stored value.",1,[[["lazy",3]],["result",4]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",1,[[["lazy",3]]]],[0,"sync","once_cell","",null,null],[3,"OnceCell","once_cell::sync","A thread-safe cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",2,[[],["oncecell",3]]],[11,"get","","Gets the reference to the underlying value.",2,[[],["option",4]]],[11,"get_mut","","Gets the mutable reference to the underlying value.",2,[[],["option",4]]],[11,"get_unchecked","","Get the reference to the underlying value, without …",2,[[]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",2,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",2,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",2,[[],["result",4]]],[11,"take","","Takes the value out of this <code>OnceCell</code>, moving it back to …",2,[[],["option",4]]],[11,"into_inner","","Consumes the <code>OnceCell</code>, returning the wrapped value. …",2,[[],["option",4]]],[3,"Lazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing …",3,[[],["lazy",3]]],[11,"into_value","","Consumes this <code>Lazy</code> returning the stored value.",3,[[["lazy",3]],["result",4]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",3,[[["lazy",3]]]],[0,"race","once_cell","\\\"First one wins\\\" flavor of <code>OnceCell</code>.",null,null],[3,"OnceNonZeroUsize","once_cell::race","A thread-safe cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",4,[[],["oncenonzerousize",3]]],[11,"get","","Gets the underlying value.",4,[[],[["nonzerousize",3],["option",4]]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",4,[[["nonzerousize",3]],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",4,[[],["nonzerousize",3]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",4,[[],[["result",4],["nonzerousize",3]]]],[3,"OnceBool","","A thread-safe cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",5,[[],["oncebool",3]]],[11,"get","","Gets the underlying value.",5,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",5,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",5,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",5,[[],["result",4]]],[3,"OnceBox","","A thread-safe cell which can be written to only once.",null,null],[11,"from","once_cell::unsync","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","once_cell::sync","",2,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","once_cell::race","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"drop","","",6,[[]]],[11,"from","once_cell::unsync","",0,[[]]],[11,"from","once_cell::sync","",2,[[]]],[11,"clone","once_cell::unsync","",0,[[],["oncecell",3]]],[11,"clone","once_cell::sync","",2,[[],["oncecell",3]]],[11,"default","once_cell::unsync","",0,[[]]],[11,"default","","Creates a new lazy value using <code>Default</code> as the …",1,[[],["lazy",3]]],[11,"default","once_cell::sync","",2,[[],["oncecell",3]]],[11,"default","","Creates a new lazy value using <code>Default</code> as the …",3,[[],["lazy",3]]],[11,"default","once_cell::race","",4,[[],["oncenonzerousize",3]]],[11,"default","","",5,[[],["oncebool",3]]],[11,"default","","",6,[[]]],[11,"eq","once_cell::unsync","",0,[[]]],[11,"eq","once_cell::sync","",2,[[["oncecell",3]]]],[11,"deref","once_cell::unsync","",1,[[]]],[11,"deref","once_cell::sync","",3,[[]]],[11,"deref_mut","once_cell::unsync","",1,[[]]],[11,"deref_mut","once_cell::sync","",3,[[]]],[11,"fmt","once_cell::unsync","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","once_cell::sync","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","once_cell::race","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"new","","Creates a new empty cell.",6,[[],["oncebox",3]]],[11,"get","","Gets a reference to the underlying value.",6,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",6,[[["box",3]],[["result",4],["box",3]]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",6,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",6,[[],["result",4]]]],"p":[[3,"OnceCell"],[3,"Lazy"],[3,"OnceCell"],[3,"Lazy"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"OnceBox"]]},\
"os_str_bytes":{"doc":"This crate allows interacting with the data stored …","i":[[0,"raw","os_str_bytes","Functions that cannot be implemented outside of this …",null,null],[5,"ends_with","os_str_bytes::raw","Returns <code>true</code> if and only if the encoded bytes end with …",null,[[]]],[5,"starts_with","","Returns <code>true</code> if and only if the encoded bytes start with …",null,[[]]],[3,"EncodingError","os_str_bytes","The error that occurs when a byte sequence is not …",null,null],[8,"OsStrBytes","","A platform agnostic variant of <code>OsStrExt</code>.",null,null],[10,"from_bytes","","Converts a byte slice into an equivalent platform-native …",0,[[],[["cow",4],["result",4],["encodingerror",3]]]],[10,"to_bytes","","Converts a platform-native string into an equivalent byte …",0,[[],["cow",4]]],[8,"OsStringBytes","","A platform agnostic variant of <code>OsStringExt</code>.",null,null],[10,"from_bytes","","Copies a byte slice into an equivalent platform-native …",1,[[],[["result",4],["encodingerror",3]]]],[11,"from_cow","","A convenience method to call either <code>from_bytes</code> or <code>from_vec</code>…",1,[[["cow",4]],[["result",4],["encodingerror",3]]]],[10,"from_vec","","Converts a byte vector into an equivalent platform-native …",1,[[["vec",3]],[["result",4],["encodingerror",3]]]],[10,"into_vec","","Converts a platform-native string into an equivalent byte …",1,[[],["vec",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"eq","","",2,[[["encodingerror",3]]]],[11,"ne","","",2,[[["encodingerror",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]]],"p":[[8,"OsStrBytes"],[8,"OsStringBytes"],[3,"EncodingError"]]},\
"petgraph":{"doc":"<code>petgraph</code> is a graph data structure library.","i":[[0,"visit","petgraph","Graph traits and graph traversals.",null,null],[8,"FilterNode","petgraph::visit","A graph filter for nodes.",null,null],[10,"include_node","","Return true to have the node be part of the graph",0,[[]]],[3,"NodeFiltered","","A node-filtering graph adaptor.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"NodeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"NodeFilteredNodes","","A filtered node references iterator.",null,null],[3,"NodeFilteredEdgeReferences","","A filtered edges iterator.",null,null],[3,"NodeFilteredEdges","","A filtered edges iterator.",null,null],[8,"FilterEdge","","A graph filter for edges",null,null],[10,"include_edge","","Return true to have the edge be part of the graph",2,[[]]],[3,"EdgeFiltered","","An edge-filtering graph adaptor.",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"EdgeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"EdgeFilteredEdges","","A filtered edges iterator.",null,null],[3,"EdgeFilteredNeighborsDirected","","A filtered neighbors-directed iterator.",null,null],[3,"Reversed","","An edge-reversing graph adaptor.",null,null],[12,"0","","",4,null],[3,"ReversedEdges","","A reversed edges iterator.",null,null],[3,"ReversedEdgeReference","","A reversed edge reference",null,null],[3,"ReversedEdgeReferences","","A reversed edge references iterator.",null,null],[3,"Time","","Strictly monotonically increasing event time for a depth …",null,null],[12,"0","","",5,null],[4,"DfsEvent","","A depth first search (DFS) visitor event.",null,null],[13,"Discover","","",6,null],[13,"TreeEdge","","An edge of the tree formed by the traversal.",6,null],[13,"BackEdge","","An edge to an already visited node.",6,null],[13,"CrossForwardEdge","","A cross or forward edge.",6,null],[13,"Finish","","All edges from a node have been reported.",6,null],[4,"Control","","Control flow for <code>depth_first_search</code> callbacks.",null,null],[13,"Continue","","Continue the DFS traversal as normal.",7,null],[13,"Prune","","Prune the current node from the DFS traversal. No more …",7,null],[13,"Break","","Stop the DFS traversal and return the provided value.",7,null],[8,"ControlFlow","","Control flow for callbacks.",null,null],[10,"continuing","","",8,[[]]],[10,"should_break","","",8,[[]]],[10,"should_prune","","",8,[[]]],[5,"depth_first_search","","A recursive depth first search.",null,[[]]],[3,"Dfs","","Visit nodes of a graph in a depth-first-search (DFS) …",null,null],[12,"stack","","The stack of nodes to visit",9,null],[12,"discovered","","The map of discovered nodes",9,null],[3,"DfsPostOrder","","Visit nodes in a depth-first-search (DFS) emitting nodes …",null,null],[12,"stack","","The stack of nodes to visit",10,null],[12,"discovered","","The map of discovered nodes",10,null],[12,"finished","","The map of finished nodes",10,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",11,null],[12,"discovered","","The map of discovered nodes",11,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[8,"Walker","","A walker is a traversal state, but where part of the …",null,null],[16,"Item","","",12,null],[10,"walk_next","","Advance to the next item",12,[[],["option",4]]],[11,"iter","","Create an iterator out of the walker and given <code>context</code>.",12,[[],["walkeriter",3]]],[3,"WalkerIter","","A walker and its context wrapped into an iterator.",null,null],[8,"GraphBase","","Base graph trait: defines the associated node identifier …",null,null],[16,"EdgeId","","edge identifier",13,null],[16,"NodeId","","node identifier",13,null],[8,"GraphRef","","A copyable reference to a graph.",null,null],[8,"IntoNeighbors","","Access to the neighbors of each node",null,null],[16,"Neighbors","","",14,null],[10,"neighbors","","Return an iterator of the neighbors of node <code>a</code>.",14,[[]]],[8,"IntoNeighborsDirected","","Access to the neighbors of each node, through incoming or …",null,null],[16,"NeighborsDirected","","",15,null],[10,"neighbors_directed","","",15,[[["direction",4]]]],[8,"IntoEdges","","Access to the edges of each node.",null,null],[16,"Edges","","",16,null],[10,"edges","","",16,[[]]],[8,"IntoEdgesDirected","","Access to all edges of each node, in the specified …",null,null],[16,"EdgesDirected","","",17,null],[10,"edges_directed","","",17,[[["direction",4]]]],[8,"IntoNodeIdentifiers","","Access to the sequence of the graph’s <code>NodeId</code>s.",null,null],[16,"NodeIdentifiers","","",18,null],[10,"node_identifiers","","",18,[[]]],[8,"Data","","Define associated data for nodes and edges",null,null],[16,"NodeWeight","","",19,null],[16,"EdgeWeight","","",19,null],[8,"EdgeRef","","An edge reference.",null,null],[16,"NodeId","","",20,null],[16,"EdgeId","","",20,null],[16,"Weight","","",20,null],[10,"source","","The source node of the edge.",20,[[]]],[10,"target","","The target node of the edge.",20,[[]]],[10,"weight","","A reference to the weight of the edge.",20,[[]]],[10,"id","","The edge’s identifier.",20,[[]]],[8,"NodeRef","","A node reference.",null,null],[16,"NodeId","","",21,null],[16,"Weight","","",21,null],[10,"id","","",21,[[]]],[10,"weight","","",21,[[]]],[8,"IntoNodeReferences","","Access to the sequence of the graph’s nodes",null,null],[16,"NodeRef","","",22,null],[16,"NodeReferences","","",22,null],[10,"node_references","","",22,[[]]],[8,"IntoEdgeReferences","","Access to the sequence of the graph’s edges",null,null],[16,"EdgeRef","","",23,null],[16,"EdgeReferences","","",23,null],[10,"edge_references","","",23,[[]]],[8,"GraphProp","","Edge kind property (directed or undirected edges)",null,null],[16,"EdgeType","","The kind edges in the graph.",24,null],[11,"is_directed","","",24,[[]]],[8,"NodeIndexable","","The graph’s <code>NodeId</code>s map to indices",null,null],[10,"node_bound","","Return an upper bound of the node indices in the graph …",25,[[]]],[10,"to_index","","Convert <code>a</code> to an integer index.",25,[[]]],[10,"from_index","","Convert <code>i</code> to a node index",25,[[]]],[8,"NodeCount","","A graph with a known node count.",null,null],[10,"node_count","","",26,[[]]],[8,"NodeCompactIndexable","","The graph’s <code>NodeId</code>s map to indices, in a range without …",null,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId <code>N</code>.",null,null],[10,"visit","","Mark <code>a</code> as visited.",27,[[]]],[10,"is_visited","","Return whether <code>a</code> has been visited before.",27,[[]]],[8,"Visitable","","A graph that can create a map that tracks the visited …",null,null],[16,"Map","","The associated map type",28,null],[10,"visit_map","","Create a new visitor map",28,[[]]],[10,"reset_map","","Reset the visitor map (and resize to new size of graph if …",28,[[]]],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph.",null,null],[16,"AdjMatrix","","The associated adjacency matrix type",29,null],[10,"adjacency_matrix","","Create the adjacency matrix",29,[[]]],[10,"is_adjacent","","Return true if there is an edge from <code>a</code> to <code>b</code>, false …",29,[[]]],[0,"data","petgraph","Graph traits for associated data and graph construction.",null,null],[8,"DataMap","petgraph::data","Access node and edge weights (associated data).",null,null],[10,"node_weight","","",30,[[],["option",4]]],[10,"edge_weight","","",30,[[],["option",4]]],[8,"DataMapMut","","Access node and edge weights mutably.",null,null],[10,"node_weight_mut","","",31,[[],["option",4]]],[10,"edge_weight_mut","","",31,[[],["option",4]]],[8,"Build","","A graph that can be extended with further nodes and edges",null,null],[10,"add_node","","",32,[[]]],[11,"add_edge","","Add a new edge. If parallel edges (duplicate) are not …",32,[[],["option",4]]],[10,"update_edge","","Add or update the edge from <code>a</code> to <code>b</code>. Return the id of the …",32,[[]]],[8,"Create","","A graph that can be created",null,null],[10,"with_capacity","","",33,[[]]],[4,"Element","","A graph element.",null,null],[13,"Node","","A graph node.",34,null],[12,"weight","petgraph::data::Element","",35,null],[13,"Edge","petgraph::data","A graph edge.",34,null],[12,"source","petgraph::data::Element","",36,null],[12,"target","","",36,null],[12,"weight","","",36,null],[8,"FromElements","petgraph::data","Create a graph from an iterator of elements.",null,null],[11,"from_elements","","",37,[[]]],[8,"ElementIterator","","Iterator adaptors for iterators of <code>Element</code>.",null,null],[11,"filter_elements","","Create an iterator adaptor that filters graph elements.",38,[[],["filterelements",3]]],[3,"FilterElements","","An iterator that filters graph elements.",null,null],[0,"algo","petgraph","Graph algorithms.",null,null],[0,"dominators","petgraph::algo","Compute dominators of a control-flow graph.",null,null],[3,"Dominators","petgraph::algo::dominators","The dominance relation for some graph and root.",null,null],[11,"root","","Get the root node used to construct these dominance …",39,[[]]],[11,"immediate_dominator","","Get the immediate dominator of the given node.",39,[[],["option",4]]],[11,"strict_dominators","","Iterate over the given node\'s strict dominators.",39,[[],[["option",4],["dominatorsiter",3]]]],[11,"dominators","","Iterate over all of the given node\'s dominators …",39,[[],[["option",4],["dominatorsiter",3]]]],[3,"DominatorsIter","","Iterator for a node\'s dominators.",null,null],[5,"simple_fast","","This is an implementation of the engineered \\\"Simple, Fast …",null,[[],["dominators",3]]],[5,"astar","petgraph::algo","[Generic] A* shortest path algorithm.",null,[[],["option",4]]],[5,"dijkstra","","[Generic] Dijkstra\'s shortest path algorithm.",null,[[["option",4]],["hashmap",3]]],[5,"is_isomorphic","","[Graph] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …",null,[[["graph",3]]]],[5,"is_isomorphic_matching","","[Graph] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …",null,[[["graph",3]]]],[5,"all_simple_paths","","Returns iterator that produces all simple paths from <code>from</code> …",null,[[["option",4]]]],[5,"connected_components","","[Generic] Return the number of connected components of …",null,[[]]],[5,"is_cyclic_undirected","","[Generic] Return <code>true</code> if the input graph contains a cycle.",null,[[]]],[5,"toposort","","[Generic] Perform a topological sort of a directed graph.",null,[[["dfsspace",3],["option",4]],[["result",4],["vec",3],["cycle",3]]]],[5,"is_cyclic_directed","","[Generic] Return <code>true</code> if the input directed graph …",null,[[]]],[3,"DfsSpace","","Workspace for a graph traversal.",null,null],[11,"new","","",40,[[]]],[5,"has_path_connecting","","[Generic] Check if there exists a path starting at <code>from</code> …",null,[[["dfsspace",3],["option",4]]]],[5,"scc","","Renamed to <code>kosaraju_scc</code>.",null,[[],[["vec",3],["vec",3]]]],[5,"kosaraju_scc","","[Generic] Compute the <em>strongly connected components</em> using …",null,[[],[["vec",3],["vec",3]]]],[5,"tarjan_scc","","[Generic] Compute the <em>strongly connected components</em> using …",null,[[],[["vec",3],["vec",3]]]],[5,"condensation","","[Graph] Condense every strongly connected component into …",null,[[["graph",3]],[["graph",3],["vec",3]]]],[5,"min_spanning_tree","","[Generic] Compute a <em>minimum spanning tree</em> of a graph.",null,[[],["minspanningtree",3]]],[3,"MinSpanningTree","","An iterator producing a minimum spanning forest of a …",null,null],[3,"Cycle","","An algorithm error: a cycle was found in the graph.",null,null],[11,"node_id","","Return a node id that participates in the cycle",41,[[]]],[3,"NegativeCycle","","An algorithm error: a cycle of negative weights was found …",null,null],[5,"bellman_ford","","[Generic] Compute shortest paths from node <code>source</code> to all …",null,[[],[["result",4],["negativecycle",3]]]],[5,"is_bipartite_undirected","","Return <code>true</code> if the graph is bipartite. A graph is …",null,[[]]],[8,"Measure","","Associated data that can be used for measures (such as …",null,null],[8,"FloatMeasure","","A floating-point measure.",null,null],[10,"zero","","",42,[[]]],[10,"infinite","","",42,[[]]],[0,"csr","petgraph","Compressed Sparse Row (CSR) is a sparse adjacency matrix …",null,null],[6,"NodeIndex","petgraph::csr","Csr node index type, a plain integer.",null,null],[6,"EdgeIndex","","Csr edge index type, a plain integer.",null,null],[3,"Csr","","Compressed Sparse Row (<code>CSR</code>) is a sparse adjacency matrix …",null,null],[11,"new","","Create an empty <code>Csr</code>.",43,[[]]],[11,"with_nodes","","Create a new <code>Csr</code> with <code>n</code> nodes. <code>N</code> must implement <code>Default</code> …",43,[[]]],[3,"EdgesNotSorted","","Csr creation error: edges were not in sorted order.",null,null],[11,"from_sorted_edges","","Create a new <code>Csr</code> from a sorted sequence of edges",43,[[],[["result",4],["edgesnotsorted",3]]]],[11,"node_count","","",43,[[]]],[11,"edge_count","","",43,[[]]],[11,"is_directed","","",43,[[]]],[11,"clear_edges","","Remove all edges",43,[[]]],[11,"add_node","","Adds a new node with the given weight, returning the …",43,[[],["nodeindex",6]]],[11,"add_edge","","Return <code>true</code> if the edge was added",43,[[["nodeindex",6]]]],[11,"contains_edge","","Computes in <strong>O(log |V|)</strong> time.",43,[[["nodeindex",6]]]],[11,"out_degree","","Computes in <strong>O(1)</strong> time.",43,[[["nodeindex",6]]]],[11,"neighbors_slice","","Computes in <strong>O(1)</strong> time.",43,[[["nodeindex",6]]]],[11,"edges_slice","","Computes in <strong>O(1)</strong> time.",43,[[["nodeindex",6]]]],[11,"edges","","Return an iterator of all edges of <code>a</code>.",43,[[["nodeindex",6]],["edges",3]]],[3,"Edges","","",null,null],[3,"EdgeReference","","",null,null],[11,"weight","","Access the edge’s weight.",44,[[]]],[3,"EdgeReferences","","",null,null],[3,"Neighbors","","",null,null],[3,"NodeIdentifiers","","",null,null],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","<code>Dot</code> implements output to graphviz .dot format for a graph.",null,null],[11,"new","","Create a <code>Dot</code> formatting wrapper with default …",45,[[]]],[11,"with_config","","Create a <code>Dot</code> formatting wrapper with custom configuration.",45,[[]]],[11,"with_attr_getters","","",45,[[["fn",8],["fn",8]]]],[4,"Config","","<code>Dot</code> configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",46,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",46,null],[13,"EdgeNoLabel","","Use no edge labels.",46,null],[13,"NodeNoLabel","","Use no node labels.",46,null],[13,"GraphContentOnly","","Do not print the graph/digraph string.",46,null],[0,"graphmap","petgraph","<code>GraphMap<N, E, Ty></code> is a graph datastructure where node …",null,null],[6,"UnGraphMap","petgraph::graphmap","A <code>GraphMap</code> with undirected edges.",null,null],[6,"DiGraphMap","","A <code>GraphMap</code> with directed edges.",null,null],[3,"GraphMap","","<code>GraphMap<N, E, Ty></code> is a graph datastructure using an …",null,null],[8,"NodeTrait","","A trait group for <code>GraphMap</code>\'s node identifier.",null,null],[11,"new","","Create a new <code>GraphMap</code>",47,[[]]],[11,"with_capacity","","Create a new <code>GraphMap</code> with estimated capacity.",47,[[]]],[11,"capacity","","Return the current node and edge capacity of the graph.",47,[[]]],[11,"is_directed","","Whether the graph has directed edges.",47,[[]]],[11,"from_edges","","Create a new <code>GraphMap</code> from an iterable of edges.",47,[[]]],[11,"node_count","","Return the number of nodes in the graph.",47,[[]]],[11,"edge_count","","Return the number of edges in the graph.",47,[[]]],[11,"clear","","Remove all nodes and edges",47,[[]]],[11,"add_node","","Add node <code>n</code> to the graph.",47,[[]]],[11,"remove_node","","Return <code>true</code> if node <code>n</code> was removed.",47,[[]]],[11,"contains_node","","Return <code>true</code> if the node is contained in the graph.",47,[[]]],[11,"add_edge","","Add an edge connecting <code>a</code> and <code>b</code> to the graph, with …",47,[[],["option",4]]],[11,"remove_edge","","Remove edge from <code>a</code> to <code>b</code> from the graph and return the …",47,[[],["option",4]]],[11,"contains_edge","","Return <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained …",47,[[]]],[11,"nodes","","Return an iterator over the nodes of the graph.",47,[[],["nodes",3]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting …",47,[[],["neighbors",3]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge …",47,[[["direction",4]],["neighborsdirected",3]]],[11,"edges","","Return an iterator of target nodes with an edge starting …",47,[[],["edges",3]]],[11,"edge_weight","","Return a reference to the edge weight connecting <code>a</code> with <code>b</code>…",47,[[],["option",4]]],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting <code>a</code>…",47,[[],["option",4]]],[11,"all_edges","","Return an iterator over all edges of the graph with their …",47,[[],["alledges",3]]],[11,"all_edges_mut","","Return an iterator over all edges of the graph in …",47,[[],["alledgesmut",3]]],[11,"into_graph","","Return a <code>Graph</code> that corresponds to this <code>GraphMap</code>.",47,[[],["graph",3]]],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"NeighborsDirected","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"AllEdgesMut","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer …",null,null],[12,"0","","",48,null],[3,"NodeIdentifiers","","",null,null],[3,"NodeReferences","","",null,null],[0,"matrix_graph","petgraph","<code>MatrixGraph<N, E, Ty, NullN, NullE, Ix></code> is a graph …",null,null],[8,"IndexType","petgraph::matrix_graph","Trait for the unsigned integer type used for node and …",null,null],[10,"new","","",49,[[]]],[10,"index","","",49,[[]]],[10,"max","","",49,[[]]],[6,"NodeIndex","","Node identifier.",null,null],[8,"Nullable","","Wrapper trait for an <code>Option</code>, allowing user-defined …",null,null],[3,"NotZero","","<code>NotZero</code> is used to optimize the memory usage of edge …",null,null],[8,"Zero","","Base trait for types that can be wrapped in a <code>NotZero</code>.",null,null],[10,"zero","","Return the singleton object which can be used as a …",50,[[]]],[10,"is_zero","","Return true if <code>self</code> is equal to the sentinel value.",50,[[]]],[5,"node_index","","Short version of <code>NodeIndex::new</code> (with Ix = <code>DefaultIx</code>)",null,[[],["nodeindex",6]]],[3,"MatrixGraph","","<code>MatrixGraph<N, E, Ty, Null></code> is a graph datastructure …",null,null],[6,"DiMatrix","","A <code>MatrixGraph</code> with directed edges.",null,null],[6,"UnMatrix","","A <code>MatrixGraph</code> with undirected edges.",null,null],[11,"with_capacity","","Create a new <code>MatrixGraph</code> with estimated capacity for …",51,[[]]],[11,"clear","","Remove all nodes and edges.",51,[[]]],[11,"node_count","","Return the number of nodes (vertices) in the graph.",51,[[]]],[11,"edge_count","","Return the number of edges in the graph.",51,[[]]],[11,"is_directed","","Return whether the graph has directed edges or not.",51,[[]]],[11,"add_node","","Add a node (also called vertex) with associated data …",51,[[],["nodeindex",6]]],[11,"remove_node","","Remove <code>a</code> from the graph.",51,[[["nodeindex",6]]]],[11,"update_edge","","Update the edge from <code>a</code> to <code>b</code> to the graph, with its …",51,[[["nodeindex",6]],["option",4]]],[11,"add_edge","","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …",51,[[["nodeindex",6]]]],[11,"remove_edge","","Remove the edge from <code>a</code> to <code>b</code> to the graph.",51,[[["nodeindex",6]]]],[11,"has_edge","","Return true if there is an edge between <code>a</code> and <code>b</code>.",51,[[["nodeindex",6]]]],[11,"node_weight","","Access the weight for node <code>a</code>.",51,[[["nodeindex",6]]]],[11,"node_weight_mut","","Access the weight for node <code>a</code>, mutably.",51,[[["nodeindex",6]]]],[11,"edge_weight","","Access the weight for edge <code>e</code>.",51,[[["nodeindex",6]]]],[11,"edge_weight_mut","","Access the weight for edge <code>e</code>, mutably.",51,[[["nodeindex",6]]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting …",51,[[["nodeindex",6]],["neighbors",3]]],[11,"edges","","Return an iterator of all edges of <code>a</code>.",51,[[["nodeindex",6]],["edges",3]]],[11,"from_edges","","Create a new <code>MatrixGraph</code> from an iterable of edges.",51,[[]]],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",51,[[]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge …",51,[[["nodeindex",6],["direction",4]],[["directed",4],["neighbors",3]]]],[11,"edges_directed","","Return an iterator of all edges of <code>a</code>, in the specified …",51,[[["nodeindex",6],["direction",4]],[["directed",4],["edges",3]]]],[3,"NodeIdentifiers","","Iterator over the node identifiers of a graph.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[11,"new","","Create a new <code>MatrixGraph</code> with directed edges.",51,[[]]],[11,"new_undirected","","Create a new <code>MatrixGraph</code> with undirected edges.",51,[[]]],[0,"unionfind","petgraph","<code>UnionFind<K></code> is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","<code>UnionFind<K></code> is a disjoint-set data structure. It tracks …",null,null],[11,"new","","Create a new <code>UnionFind</code> of <code>n</code> disjoint sets.",52,[[]]],[11,"find","","Return the representative for <code>x</code>.",52,[[]]],[11,"find_mut","","Return the representative for <code>x</code>.",52,[[]]],[11,"equiv","","Returns <code>true</code> if the given elements belong to the same …",52,[[]]],[11,"union","","Unify the two sets containing <code>x</code> and <code>y</code>.",52,[[]]],[11,"into_labeling","","Return a vector mapping each element to its …",52,[[],["vec",3]]],[0,"prelude","petgraph","Commonly used items.",null,null],[0,"graph","","<code>Graph<N, E, Ty, Ix></code> is a graph datastructure using an …",null,null],[5,"edge_index","petgraph::graph","Short version of <code>EdgeIndex::new</code>",null,[[],[["indextype",8],["edgeindex",3]]]],[5,"node_index","","Short version of <code>NodeIndex::new</code>",null,[[],[["indextype",8],["nodeindex",3]]]],[6,"DefaultIx","","The default integer type for graph indices. <code>u32</code> is the …",null,null],[6,"DiGraph","","A <code>Graph</code> with directed edges.",null,null],[3,"Edge","","The graph\'s edge type.",null,null],[12,"weight","","Associated edge data.",53,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[3,"EdgeReference","","Reference to a <code>Graph</code> edge.",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"EdgesConnecting","","Iterator over the multiple directed edges connecting a …",null,null],[3,"Externals","","An iterator over either the nodes without edges to them …",null,null],[3,"Frozen","","<code>Frozen</code> is a graph wrapper.",null,null],[3,"Graph","","<code>Graph<N, E, Ty, Ix></code> is a graph datastructure using an …",null,null],[8,"GraphIndex","","A  <code>GraphIndex</code> is a node or edge index.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and …",null,null],[10,"new","","",49,[[]]],[10,"index","","",49,[[]]],[10,"max","","",49,[[]]],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Node","","The graph\'s node type.",null,null],[12,"weight","","Associated node data.",54,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[6,"UnGraph","","A <code>Graph</code> with undirected edges.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through …",null,null],[0,"stable_graph","petgraph","<code>StableGraph</code> keeps indices stable across removals.",null,null],[3,"StableGraph","petgraph::stable_graph","<code>StableGraph<N, E, Ty, Ix></code> is a graph datastructure using …",null,null],[6,"StableDiGraph","","A <code>StableGraph</code> with directed edges.",null,null],[6,"StableUnGraph","","A <code>StableGraph</code> with undirected edges.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"EdgeReference","","Reference to a <code>StableGraph</code> edge.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"Externals","","An iterator over either the nodes without edges to them …",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through …",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[4,"Direction","petgraph","Edge direction.",null,null],[13,"Outgoing","","An <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.",55,null],[13,"Incoming","","An <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.",55,null],[11,"opposite","","Return the opposite <code>Direction</code>.",55,[[],["direction",4]]],[11,"index","","Return <code>0</code> for <code>Outgoing</code> and <code>1</code> for <code>Incoming</code>.",55,[[]]],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[8,"EdgeType","","A graph\'s edge type determines whether it has directed …",null,null],[10,"is_directed","","",56,[[]]],[8,"IntoWeightedEdge","","Convert an element like <code>(i, j)</code> or <code>(i, j, w)</code> into a triple …",null,null],[16,"NodeId","","",57,null],[10,"into_weighted_edge","","",57,[[]]],[11,"from","petgraph::visit","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"into_iter","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"into_iter","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"into_iter","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"into_iter","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"into_iter","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"into_iter","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"into_iter","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"into_iter","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"into_iter","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"into_iter","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","petgraph::data","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"equivalent","","",34,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"into_iter","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","petgraph::algo::dominators","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"into_iter","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","petgraph::algo","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"into_iter","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","petgraph::csr","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"into_iter","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"into_iter","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"into_iter","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","petgraph::dot","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"equivalent","","",46,[[]]],[11,"from","petgraph::stable_graph","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"into_iter","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"into_iter","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"into_iter","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"into_iter","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"into_iter","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"into_iter","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","petgraph::graph","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"equivalent","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"equivalent","","",90,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"into_iter","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"into_iter","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"into_iter","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"into_iter","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"into_iter","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"into_iter","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"into_iter","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"into_iter","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"into_iter","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"into_iter","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","petgraph::graphmap","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"into_iter","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"into_iter","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"into_iter","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"into_iter","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"into_iter","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"into_iter","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"equivalent","","",48,[[]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"into_iter","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"into_iter","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","petgraph::matrix_graph","",113,[[]]],[11,"into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"into_iter","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"into_iter","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"into_iter","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"into_iter","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"into_iter","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","petgraph::unionfind","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","petgraph","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"equivalent","","",55,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"continuing","petgraph::visit","",7,[[]]],[11,"should_break","","",7,[[]]],[11,"should_prune","","",7,[[]]],[11,"walk_next","","",9,[[],["option",4]]],[11,"walk_next","","",10,[[],["option",4]]],[11,"walk_next","","",11,[[],["option",4]]],[11,"walk_next","","",58,[[],["option",4]]],[11,"source","","",68,[[]]],[11,"target","","",68,[[]]],[11,"weight","","",68,[[]]],[11,"id","","",68,[[]]],[11,"source","petgraph::csr","",44,[[]]],[11,"target","","",44,[[]]],[11,"weight","","",44,[[]]],[11,"id","","",44,[[]]],[11,"source","petgraph::graph","",101,[[]]],[11,"target","","",101,[[]]],[11,"weight","","",101,[[]]],[11,"id","","",101,[[]]],[11,"source","petgraph::stable_graph","",81,[[]]],[11,"target","","",81,[[]]],[11,"weight","","",81,[[]]],[11,"id","","",81,[[]]],[11,"add_node","petgraph::graph","",91,[[]]],[11,"add_edge","","",91,[[],["option",4]]],[11,"update_edge","","",91,[[]]],[11,"add_node","petgraph::stable_graph","",79,[[]]],[11,"add_edge","","",79,[[],["option",4]]],[11,"update_edge","","",79,[[]]],[11,"add_node","petgraph::graphmap","",47,[[]]],[11,"add_edge","","",47,[[],["option",4]]],[11,"update_edge","","",47,[[]]],[11,"add_node","petgraph::matrix_graph","",51,[[]]],[11,"add_edge","","",51,[[],["option",4]]],[11,"update_edge","","",51,[[]]],[11,"with_capacity","petgraph::graph","",91,[[]]],[11,"with_capacity","petgraph::stable_graph","",79,[[]]],[11,"with_capacity","petgraph::graphmap","",47,[[]]],[11,"from_elements","petgraph::graph","",91,[[]]],[11,"from_elements","petgraph::stable_graph","",79,[[]]],[11,"from_elements","petgraph::graphmap","",47,[[]]],[11,"index","petgraph::graph","",89,[[]]],[11,"is_node_index","","",89,[[]]],[11,"index","","",90,[[]]],[11,"is_node_index","","",90,[[]]],[11,"new","petgraph::matrix_graph","",113,[[]]],[11,"is_null","","",113,[[]]],[11,"as_ref","","",113,[[],["option",4]]],[11,"as_mut","","",113,[[],["option",4]]],[11,"is_directed","petgraph","",119,[[]]],[11,"is_directed","","",120,[[]]],[11,"neighbors","petgraph::visit","",4,[[]]],[11,"neighbors_directed","","",4,[[["direction",4]]]],[11,"edges","","",4,[[]]],[11,"edges_directed","","",4,[[["direction",4]]]],[11,"node_identifiers","","",4,[[]]],[11,"node_references","","",4,[[]]],[11,"edge_references","","",4,[[]]],[11,"node_bound","petgraph::graph","",91,[[]]],[11,"to_index","","",91,[[["nodeindex",3]]]],[11,"from_index","","",91,[[]]],[11,"node_bound","petgraph::visit","",1,[[]]],[11,"to_index","","",1,[[]]],[11,"from_index","","",1,[[]]],[11,"node_bound","","",3,[[]]],[11,"to_index","","",3,[[]]],[11,"from_index","","",3,[[]]],[11,"node_bound","","",4,[[]]],[11,"to_index","","",4,[[]]],[11,"from_index","","",4,[[]]],[11,"node_bound","petgraph::csr","",43,[[]]],[11,"to_index","","",43,[[]]],[11,"from_index","","",43,[[]]],[11,"node_bound","petgraph::graph","",104,[[]]],[11,"to_index","","",104,[[]]],[11,"from_index","","",104,[[]]],[11,"node_bound","petgraph::stable_graph","Return an upper bound of the node indices in the graph",79,[[]]],[11,"to_index","","",79,[[["nodeindex",3]]]],[11,"from_index","","",79,[[]]],[11,"node_bound","petgraph::graphmap","",47,[[]]],[11,"to_index","","",47,[[]]],[11,"from_index","","",47,[[]]],[11,"node_bound","petgraph::matrix_graph","",51,[[]]],[11,"to_index","","",51,[[["nodeindex",6]]]],[11,"from_index","","",51,[[]]],[11,"node_count","petgraph::graph","",91,[[]]],[11,"node_count","petgraph::stable_graph","",79,[[]]],[11,"node_count","petgraph::visit","",3,[[]]],[11,"node_count","","",4,[[]]],[11,"node_count","petgraph::csr","",43,[[]]],[11,"node_count","petgraph::graph","",104,[[]]],[11,"node_count","petgraph::graphmap","",47,[[]]],[11,"node_count","petgraph::matrix_graph","",51,[[]]],[11,"visit_map","petgraph::graph","",91,[[],["fixedbitset",3]]],[11,"reset_map","","",91,[[]]],[11,"visit_map","petgraph::stable_graph","",79,[[],["fixedbitset",3]]],[11,"reset_map","","",79,[[]]],[11,"visit_map","petgraph::graphmap","",47,[[],["hashset",3]]],[11,"reset_map","","",47,[[]]],[11,"visit_map","petgraph::visit","",1,[[]]],[11,"reset_map","","",1,[[]]],[11,"visit_map","","",3,[[]]],[11,"reset_map","","",3,[[]]],[11,"visit_map","","",4,[[]]],[11,"reset_map","","",4,[[]]],[11,"visit_map","petgraph::csr","",43,[[],["fixedbitset",3]]],[11,"reset_map","","",43,[[]]],[11,"visit_map","petgraph::graph","",104,[[]]],[11,"reset_map","","",104,[[]]],[11,"visit_map","petgraph::matrix_graph","",51,[[],["fixedbitset",3]]],[11,"reset_map","","",51,[[]]],[11,"adjacency_matrix","petgraph::graphmap","",47,[[]]],[11,"is_adjacent","","",47,[[]]],[11,"adjacency_matrix","petgraph::graph","",104,[[]]],[11,"is_adjacent","","",104,[[]]],[11,"adjacency_matrix","petgraph::matrix_graph","",51,[[]]],[11,"is_adjacent","","",51,[[["nodeindex",6]]]],[11,"adjacency_matrix","petgraph::graph","",91,[[],["fixedbitset",3]]],[11,"is_adjacent","","",91,[[["nodeindex",3],["fixedbitset",3]]]],[11,"adjacency_matrix","petgraph::stable_graph","",79,[[],["fixedbitset",3]]],[11,"is_adjacent","","",79,[[["nodeindex",3],["fixedbitset",3]]]],[11,"node_weight","petgraph::visit","",1,[[],["option",4]]],[11,"edge_weight","","",1,[[],["option",4]]],[11,"node_weight","","",4,[[],["option",4]]],[11,"edge_weight","","",4,[[],["option",4]]],[11,"node_weight","petgraph::graph","",91,[[],["option",4]]],[11,"edge_weight","","",91,[[],["option",4]]],[11,"node_weight","petgraph::stable_graph","",79,[[],["option",4]]],[11,"edge_weight","","",79,[[],["option",4]]],[11,"node_weight","petgraph::graph","",104,[[],["option",4]]],[11,"edge_weight","","",104,[[],["option",4]]],[11,"node_weight_mut","petgraph::visit","",4,[[],["option",4]]],[11,"edge_weight_mut","","",4,[[],["option",4]]],[11,"node_weight_mut","petgraph::graph","",91,[[],["option",4]]],[11,"edge_weight_mut","","",91,[[],["option",4]]],[11,"node_weight_mut","petgraph::stable_graph","",79,[[],["option",4]]],[11,"edge_weight_mut","","",79,[[],["option",4]]],[11,"node_weight_mut","petgraph::graph","",104,[[],["option",4]]],[11,"edge_weight_mut","","",104,[[],["option",4]]],[11,"from","","",89,[[]]],[11,"from","","",90,[[]]],[11,"from","petgraph::stable_graph","",79,[[["graph",3]]]],[11,"from","petgraph::graph","",91,[[["stablegraph",3]]]],[11,"into","petgraph::matrix_graph","",113,[[],["option",4]]],[11,"next_back","petgraph::graph","",99,[[],["option",4]]],[11,"next_back","","",100,[[],["option",4]]],[11,"next_back","","",102,[[],["option",4]]],[11,"next_back","","",103,[[],["option",4]]],[11,"next_back","petgraph::stable_graph","",80,[[],["option",4]]],[11,"next_back","","",83,[[],["option",4]]],[11,"next_back","","",87,[[],["option",4]]],[11,"next_back","","",88,[[],["option",4]]],[11,"next_back","petgraph::graphmap","",109,[[],["option",4]]],[11,"next_back","","",110,[[],["option",4]]],[11,"extend","","",47,[[]]],[11,"next","petgraph::visit","",59,[[],["option",4]]],[11,"next","","",60,[[],["option",4]]],[11,"next","","",61,[[],["option",4]]],[11,"next","","",62,[[],["option",4]]],[11,"next","","",63,[[],["option",4]]],[11,"next","","",64,[[],["option",4]]],[11,"next","","",65,[[],["option",4]]],[11,"next","","",66,[[],["option",4]]],[11,"next","","",67,[[],["option",4]]],[11,"next","","",69,[[],["option",4]]],[11,"next","petgraph::data","",70,[[],["option",4]]],[11,"next","petgraph::algo::dominators","",71,[[],["option",4]]],[11,"next","petgraph::algo","",72,[[],["option",4]]],[11,"next","petgraph::csr","",75,[[],["option",4]]],[11,"next","","",76,[[],["option",4]]],[11,"next","","",77,[[],["option",4]]],[11,"size_hint","","",77,[[]]],[11,"next","","",78,[[],["option",4]]],[11,"size_hint","","",78,[[]]],[11,"next","petgraph::graph","",92,[[],[["nodeindex",3],["option",4]]]],[11,"next","","",93,[[],[["nodeindex",3],["option",4]]]],[11,"next","","",94,[[],["option",4]]],[11,"next","","",95,[[],[["edgereference",3],["option",4]]]],[11,"next","","",96,[[],["option",4]]],[11,"size_hint","","",96,[[]]],[11,"next","","",97,[[],["option",4]]],[11,"size_hint","","",97,[[]]],[11,"next","","",99,[[],["option",4]]],[11,"size_hint","","",99,[[]]],[11,"next","","",100,[[],["option",4]]],[11,"size_hint","","",100,[[]]],[11,"next","","",102,[[],["option",4]]],[11,"size_hint","","",102,[[]]],[11,"next","","",103,[[],["option",4]]],[11,"size_hint","","",103,[[]]],[11,"next","petgraph::stable_graph","",80,[[],["option",4]]],[11,"size_hint","","",80,[[]]],[11,"next","","",82,[[],["option",4]]],[11,"next","","",83,[[],["option",4]]],[11,"next","","",84,[[],[["nodeindex",3],["option",4]]]],[11,"next","","",85,[[],[["nodeindex",3],["option",4]]]],[11,"next","","",87,[[],["option",4]]],[11,"size_hint","","",87,[[]]],[11,"next","","",88,[[],["option",4]]],[11,"size_hint","","",88,[[]]],[11,"next","petgraph::graphmap","",105,[[],["option",4]]],[11,"size_hint","","",105,[[]]],[11,"next","","",106,[[],["option",4]]],[11,"next","","",107,[[],["option",4]]],[11,"next","","",108,[[],["option",4]]],[11,"next","","",109,[[],["option",4]]],[11,"size_hint","","",109,[[]]],[11,"count","","",109,[[]]],[11,"nth","","",109,[[],["option",4]]],[11,"last","","",109,[[],["option",4]]],[11,"next","","",110,[[],["option",4]]],[11,"size_hint","","",110,[[]]],[11,"count","","",110,[[]]],[11,"nth","","",110,[[],["option",4]]],[11,"last","","",110,[[],["option",4]]],[11,"next","","",111,[[],["option",4]]],[11,"next","","",112,[[],["option",4]]],[11,"next","petgraph::matrix_graph","",114,[[],["option",4]]],[11,"next","","",115,[[],["option",4]]],[11,"next","","",116,[[],["option",4]]],[11,"next","","",117,[[],["option",4]]],[11,"next","","",118,[[],["option",4]]],[11,"clone","petgraph::visit","",5,[[],["time",3]]],[11,"clone","","",6,[[],["dfsevent",4]]],[11,"clone","","",7,[[],["control",4]]],[11,"clone","","",9,[[],["dfs",3]]],[11,"clone","","",10,[[],["dfspostorder",3]]],[11,"clone","","",11,[[],["bfs",3]]],[11,"clone","","",58,[[],["topo",3]]],[11,"clone","","",59,[[],["walkeriter",3]]],[11,"clone","","",1,[[],["nodefiltered",3]]],[11,"clone","","",3,[[],["edgefiltered",3]]],[11,"clone","","",4,[[],["reversed",3]]],[11,"clone","","",68,[[],["reversededgereference",3]]],[11,"clone","petgraph::data","",34,[[],["element",4]]],[11,"clone","petgraph::algo::dominators","",39,[[],["dominators",3]]],[11,"clone","petgraph::algo","",40,[[],["dfsspace",3]]],[11,"clone","","",41,[[],["cycle",3]]],[11,"clone","","",73,[[],["negativecycle",3]]],[11,"clone","petgraph::csr","",43,[[]]],[11,"clone","","",74,[[],["edgesnotsorted",3]]],[11,"clone","","",75,[[],["edges",3]]],[11,"clone","","",44,[[]]],[11,"clone","","",77,[[],["neighbors",3]]],[11,"clone","petgraph::graph","",89,[[],["nodeindex",3]]],[11,"clone","","",90,[[],["edgeindex",3]]],[11,"clone","","",54,[[]]],[11,"clone","","",53,[[]]],[11,"clone","","",91,[[]]],[11,"clone_from","","",91,[[]]],[11,"clone","","",93,[[]]],[11,"clone","","",94,[[]]],[11,"clone","","",98,[[]]],[11,"clone","","",99,[[],["nodeindices",3]]],[11,"clone","","",100,[[],["edgeindices",3]]],[11,"clone","","",101,[[]]],[11,"clone","petgraph::stable_graph","",79,[[]]],[11,"clone_from","","",79,[[]]],[11,"clone","","",81,[[]]],[11,"clone","","",86,[[]]],[11,"clone","petgraph::graphmap","",47,[[],["graphmap",3]]],[11,"clone","","",48,[[]]],[11,"clone","petgraph::matrix_graph","",51,[[],["matrixgraph",3]]],[11,"clone","petgraph::unionfind","",52,[[],["unionfind",3]]],[11,"clone","petgraph","",55,[[]]],[11,"clone","","",119,[[]]],[11,"clone","","",120,[[]]],[11,"default","petgraph::visit","",5,[[],["time",3]]],[11,"default","","",7,[[]]],[11,"default","","",9,[[]]],[11,"default","","",10,[[]]],[11,"default","","",11,[[]]],[11,"default","","",58,[[]]],[11,"default","petgraph::algo","",40,[[]]],[11,"default","petgraph::csr","",43,[[]]],[11,"default","petgraph::graph","",89,[[],["nodeindex",3]]],[11,"default","","",90,[[],["edgeindex",3]]],[11,"default","","",91,[[]]],[11,"default","petgraph::stable_graph","",79,[[]]],[11,"default","petgraph::graphmap","",47,[[]]],[11,"default","petgraph::matrix_graph","",113,[[]]],[11,"default","","",51,[[]]],[11,"cmp","petgraph::visit","",5,[[["time",3]],["ordering",4]]],[11,"cmp","petgraph::graph","",89,[[["nodeindex",3]],["ordering",4]]],[11,"cmp","","",90,[[["edgeindex",3]],["ordering",4]]],[11,"cmp","petgraph::graphmap","Ptr is ordered by pointer value, i.e. an arbitrary but …",48,[[["ptr",3]],["ordering",4]]],[11,"cmp","petgraph","",55,[[["direction",4]],["ordering",4]]],[11,"eq","petgraph::visit","",5,[[["time",3]]]],[11,"ne","","",5,[[["time",3]]]],[11,"eq","petgraph::data","",34,[[["element",4]]]],[11,"ne","","",34,[[["element",4]]]],[11,"eq","petgraph::algo","",41,[[["cycle",3]]]],[11,"ne","","",41,[[["cycle",3]]]],[11,"eq","","",73,[[["negativecycle",3]]]],[11,"ne","","",73,[[["negativecycle",3]]]],[11,"eq","petgraph::dot","",46,[[["config",4]]]],[11,"ne","","",46,[[["config",4]]]],[11,"eq","petgraph::graph","",89,[[["nodeindex",3]]]],[11,"ne","","",89,[[["nodeindex",3]]]],[11,"eq","","",90,[[["edgeindex",3]]]],[11,"ne","","",90,[[["edgeindex",3]]]],[11,"eq","","",101,[[]]],[11,"eq","petgraph::stable_graph","",81,[[]]],[11,"eq","petgraph::graphmap","Ptr compares by pointer equality, i.e if they point to …",48,[[["ptr",3]]]],[11,"eq","petgraph","",55,[[["direction",4]]]],[11,"partial_cmp","petgraph::visit","",5,[[["time",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["time",3]]]],[11,"le","","",5,[[["time",3]]]],[11,"gt","","",5,[[["time",3]]]],[11,"ge","","",5,[[["time",3]]]],[11,"partial_cmp","petgraph::graph","",89,[[["nodeindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",89,[[["nodeindex",3]]]],[11,"le","","",89,[[["nodeindex",3]]]],[11,"gt","","",89,[[["nodeindex",3]]]],[11,"ge","","",89,[[["nodeindex",3]]]],[11,"partial_cmp","","",90,[[["edgeindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",90,[[["edgeindex",3]]]],[11,"le","","",90,[[["edgeindex",3]]]],[11,"gt","","",90,[[["edgeindex",3]]]],[11,"ge","","",90,[[["edgeindex",3]]]],[11,"partial_cmp","petgraph::graphmap","",48,[[["ptr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","petgraph","",55,[[["direction",4]],[["option",4],["ordering",4]]]],[11,"deref","petgraph::graph","",104,[[]]],[11,"deref","petgraph::graphmap","",48,[[]]],[11,"fmt","petgraph::visit","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::data","",34,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::algo::dominators","",39,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::algo","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::csr","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::dot","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::graph","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::stable_graph","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::graphmap","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::unionfind","",52,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::dot","",45,[[["formatter",3]],["result",6]]],[11,"index","petgraph::csr","",43,[[["nodeindex",6]]]],[11,"index","petgraph::graph","",91,[[["nodeindex",3]]]],[11,"index","","",91,[[["edgeindex",3]]]],[11,"index","","",104,[[]]],[11,"index","petgraph::stable_graph","",79,[[["nodeindex",3]]]],[11,"index","","",79,[[["edgeindex",3]]]],[11,"index","petgraph::graphmap","",47,[[]]],[11,"index","petgraph::matrix_graph","",51,[[["nodeindex",6]]]],[11,"index","","",51,[[]]],[11,"index_mut","petgraph::csr","",43,[[["nodeindex",6]]]],[11,"index_mut","petgraph::graph","",91,[[["nodeindex",3]]]],[11,"index_mut","","",91,[[["edgeindex",3]]]],[11,"index_mut","","",104,[[]]],[11,"index_mut","petgraph::stable_graph","",79,[[["nodeindex",3]]]],[11,"index_mut","","",79,[[["edgeindex",3]]]],[11,"index_mut","petgraph::graphmap","",47,[[]]],[11,"index_mut","petgraph::matrix_graph","",51,[[["nodeindex",6]]]],[11,"index_mut","","",51,[[]]],[11,"hash","petgraph::visit","",5,[[]]],[11,"hash","petgraph::graph","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","petgraph::graphmap","",48,[[]]],[11,"hash","petgraph","",55,[[]]],[11,"from_iter","petgraph::graphmap","",47,[[]]],[11,"breaking","petgraph::visit","",7,[[],["control",4]]],[11,"break_value","","Get the value in <code>Control::Break(_)</code>, if present.",7,[[],["option",4]]],[11,"new","","Create a new <strong>Dfs</strong>, using the graph\'s visitor map, and put <strong>…",9,[[]]],[11,"from_parts","","Create a <code>Dfs</code> from a vector and a visit map",9,[[["vec",3]]]],[11,"reset","","Clear the visit state",9,[[]]],[11,"empty","","Create a new <strong>Dfs</strong> using the graph\'s visitor map, and no …",9,[[]]],[11,"move_to","","Keep the discovered map, but clear the visit stack and …",9,[[]]],[11,"next","","Return the next node in the dfs, or <strong>None</strong> if the traversal …",9,[[],["option",4]]],[11,"new","","Create a new <code>DfsPostOrder</code> using the graph\'s visitor map, …",10,[[]]],[11,"empty","","Create a new <code>DfsPostOrder</code> using the graph\'s visitor map, …",10,[[]]],[11,"reset","","Clear the visit state",10,[[]]],[11,"move_to","","Keep the discovered and finished map, but clear the visit …",10,[[]]],[11,"next","","Return the next node in the traversal, or <code>None</code> if the …",10,[[],["option",4]]],[11,"new","","Create a new <strong>Bfs</strong>, using the graph\'s visitor map, and put <strong>…",11,[[]]],[11,"next","","Return the next node in the bfs, or <strong>None</strong> if the traversal …",11,[[],["option",4]]],[11,"new","","Create a new <code>Topo</code>, using the graph\'s visitor map, and put …",58,[[]]],[11,"reset","","Clear visited state, and put all initial nodes in the to …",58,[[]]],[11,"next","","Return the next node in the current topological order …",58,[[],["option",4]]],[11,"iter","","Create an iterator out of the walker and given <code>context</code>.",12,[[],["walkeriter",3]]],[11,"context","","",59,[[]]],[11,"inner_ref","","",59,[[]]],[11,"inner_mut","","",59,[[]]],[11,"from_fn","","Create an <code>NodeFiltered</code> adaptor from the closure <code>filter</code>.",1,[[]]],[11,"from_fn","","Create an <code>EdgeFiltered</code> adaptor from the closure <code>filter</code>.",3,[[]]],[11,"as_unreversed","","Return the original, unreversed edge reference.",68,[[]]],[11,"into_unreversed","","Consume <code>self</code> and return the original, unreversed edge …",68,[[]]],[11,"new","petgraph::graph","Create a new <code>Frozen</code> from a mutable reference to a graph.",104,[[]]],[11,"index_twice_mut","","Index the <code>Graph</code> by two indices, any combination of node …",104,[[]]],[11,"new","petgraph::stable_graph","Create a new <code>StableGraph</code> with directed edges.",79,[[]]],[11,"with_capacity","","Create a new <code>StableGraph</code> with estimated capacity.",79,[[]]],[11,"capacity","","Return the current node and edge capacity of the graph.",79,[[]]],[11,"clear","","Remove all nodes and edges",79,[[]]],[11,"clear_edges","","Remove all edges",79,[[]]],[11,"node_count","","Return the number of nodes (vertices) in the graph.",79,[[]]],[11,"edge_count","","Return the number of edges in the graph.",79,[[]]],[11,"is_directed","","Whether the graph has directed edges or not.",79,[[]]],[11,"add_node","","Add a node (also called vertex) with associated data …",79,[[],["nodeindex",3]]],[11,"remove_node","","Remove <code>a</code> from the graph if it exists, and return its …",79,[[["nodeindex",3]],["option",4]]],[11,"contains_node","","",79,[[["nodeindex",3]]]],[11,"add_edge","","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …",79,[[["nodeindex",3]],["edgeindex",3]]],[11,"update_edge","","Add or update an edge from <code>a</code> to <code>b</code>. If the edge already …",79,[[["nodeindex",3]],["edgeindex",3]]],[11,"remove_edge","","Remove an edge and return its edge weight, or <code>None</code> if it …",79,[[["edgeindex",3]],["option",4]]],[11,"node_weight","","Access the weight for node <code>a</code>.",79,[[["nodeindex",3]],["option",4]]],[11,"node_weight_mut","","Access the weight for node <code>a</code>, mutably.",79,[[["nodeindex",3]],["option",4]]],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node …",79,[[]]],[11,"node_indices","","Return an iterator over the node indices of the graph",79,[[],["nodeindices",3]]],[11,"edge_weight","","Access the weight for edge <code>e</code>.",79,[[["edgeindex",3]],["option",4]]],[11,"edge_weight_mut","","Access the weight for edge <code>e</code>, mutably",79,[[["edgeindex",3]],["option",4]]],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge …",79,[[]]],[11,"edge_endpoints","","Access the source and target nodes for <code>e</code>.",79,[[["edgeindex",3]],["option",4]]],[11,"edge_indices","","Return an iterator over the edge indices of the graph",79,[[],["edgeindices",3]]],[11,"contains_edge","","Lookup if there is an edge from <code>a</code> to <code>b</code>.",79,[[["nodeindex",3]]]],[11,"find_edge","","Lookup an edge from <code>a</code> to <code>b</code>.",79,[[["nodeindex",3]],[["option",4],["edgeindex",3]]]],[11,"find_edge_undirected","","Lookup an edge between <code>a</code> and <code>b</code>, in either direction.",79,[[["nodeindex",3]],["option",4]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting …",79,[[["nodeindex",3]],["neighbors",3]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge …",79,[[["nodeindex",3],["direction",4]],["neighbors",3]]],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge …",79,[[["nodeindex",3]],["neighbors",3]]],[11,"edges","","Return an iterator of all edges of <code>a</code>.",79,[[["nodeindex",3]],["edges",3]]],[11,"edges_directed","","Return an iterator of all edges of <code>a</code>, in the specified …",79,[[["nodeindex",3],["direction",4]],["edges",3]]],[11,"externals","","Return an iterator over either the nodes without edges to …",79,[[["direction",4]],["externals",3]]],[11,"index_twice_mut","","Index the <code>StableGraph</code> by two indices, any combination of …",79,[[]]],[11,"retain_nodes","","Keep all nodes that return <code>true</code> from the <code>visit</code> closure, …",79,[[]]],[11,"retain_edges","","Keep all edges that return <code>true</code> from the <code>visit</code> closure, …",79,[[]]],[11,"from_edges","","Create a new <code>StableGraph</code> from an iterable of edges.",79,[[]]],[11,"map","","Create a new <code>StableGraph</code> by mapping node and edge weights …",79,[[],["stablegraph",3]]],[11,"filter_map","","Create a new <code>StableGraph</code> by mapping nodes and edges. A …",79,[[],["stablegraph",3]]],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",79,[[]]],[11,"weight","","Access the edge’s weight.",81,[[]]],[11,"detach","","Return a “walker” object that can be used to step …",85,[[],["walkneighbors",3]]],[11,"next","","Step to the next edge and its endpoint node in the walk …",86,[[["stablegraph",3]],["option",4]]],[11,"next_node","","",86,[[["stablegraph",3]],[["nodeindex",3],["option",4]]]],[11,"next_edge","","",86,[[["stablegraph",3]],[["option",4],["edgeindex",3]]]],[11,"new","petgraph::graph","",89,[[]]],[11,"index","","",89,[[]]],[11,"end","","",89,[[]]],[11,"new","","",90,[[]]],[11,"index","","",90,[[]]],[11,"end","","An invalid <code>EdgeIndex</code> used to denote absence of an edge, …",90,[[]]],[11,"next_edge","","Accessor for data structure internals: the first edge in …",54,[[["direction",4]],["edgeindex",3]]],[11,"next_edge","","Accessor for data structure internals: the next edge for …",53,[[["direction",4]],["edgeindex",3]]],[11,"source","","Return the source node index.",53,[[],["nodeindex",3]]],[11,"target","","Return the target node index.",53,[[],["nodeindex",3]]],[11,"new","","Create a new <code>Graph</code> with directed edges.",91,[[]]],[11,"new_undirected","","Create a new <code>Graph</code> with undirected edges.",91,[[]]],[11,"with_capacity","","Create a new <code>Graph</code> with estimated capacity.",91,[[]]],[11,"node_count","","Return the number of nodes (vertices) in the graph.",91,[[]]],[11,"edge_count","","Return the number of edges in the graph.",91,[[]]],[11,"is_directed","","Whether the graph has directed edges or not.",91,[[]]],[11,"add_node","","Add a node (also called vertex) with associated data …",91,[[],["nodeindex",3]]],[11,"node_weight","","Access the weight for node <code>a</code>.",91,[[["nodeindex",3]],["option",4]]],[11,"node_weight_mut","","Access the weight for node <code>a</code>, mutably.",91,[[["nodeindex",3]],["option",4]]],[11,"add_edge","","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …",91,[[["nodeindex",3]],["edgeindex",3]]],[11,"update_edge","","Add or update an edge from <code>a</code> to <code>b</code>. If the edge already …",91,[[["nodeindex",3]],["edgeindex",3]]],[11,"edge_weight","","Access the weight for edge <code>e</code>.",91,[[["edgeindex",3]],["option",4]]],[11,"edge_weight_mut","","Access the weight for edge <code>e</code>, mutably.",91,[[["edgeindex",3]],["option",4]]],[11,"edge_endpoints","","Access the source and target nodes for <code>e</code>.",91,[[["edgeindex",3]],["option",4]]],[11,"remove_node","","Remove <code>a</code> from the graph if it exists, and return its …",91,[[["nodeindex",3]],["option",4]]],[11,"remove_edge","","Remove an edge and return its edge weight, or <code>None</code> if it …",91,[[["edgeindex",3]],["option",4]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting …",91,[[["nodeindex",3]],["neighbors",3]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge …",91,[[["nodeindex",3],["direction",4]],["neighbors",3]]],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge …",91,[[["nodeindex",3]],["neighbors",3]]],[11,"edges","","Return an iterator of all edges of <code>a</code>.",91,[[["nodeindex",3]],["edges",3]]],[11,"edges_directed","","Return an iterator of all edges of <code>a</code>, in the specified …",91,[[["nodeindex",3],["direction",4]],["edges",3]]],[11,"edges_connecting","","Return an iterator over all the edges connecting <code>a</code> and <code>b</code>.",91,[[["nodeindex",3]],["edgesconnecting",3]]],[11,"contains_edge","","Lookup if there is an edge from <code>a</code> to <code>b</code>.",91,[[["nodeindex",3]]]],[11,"find_edge","","Lookup an edge from <code>a</code> to <code>b</code>.",91,[[["nodeindex",3]],[["option",4],["edgeindex",3]]]],[11,"find_edge_undirected","","Lookup an edge between <code>a</code> and <code>b</code>, in either direction.",91,[[["nodeindex",3]],["option",4]]],[11,"externals","","Return an iterator over either the nodes without edges to …",91,[[["direction",4]],["externals",3]]],[11,"node_indices","","Return an iterator over the node indices of the graph.",91,[[],["nodeindices",3]]],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node …",91,[[],["nodeweightsmut",3]]],[11,"edge_indices","","Return an iterator over the edge indices of the graph",91,[[],["edgeindices",3]]],[11,"edge_references","","Create an iterator over all edges, in indexed order.",91,[[],["edgereferences",3]]],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge …",91,[[],["edgeweightsmut",3]]],[11,"raw_nodes","","Access the internal node array.",91,[[]]],[11,"raw_edges","","Access the internal edge array.",91,[[]]],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of …",91,[[]]],[11,"first_edge","","Accessor for data structure internals: the first edge in …",91,[[["nodeindex",3],["direction",4]],[["option",4],["edgeindex",3]]]],[11,"next_edge","","Accessor for data structure internals: the next edge for …",91,[[["edgeindex",3],["direction",4]],[["option",4],["edgeindex",3]]]],[11,"index_twice_mut","","Index the <code>Graph</code> by two indices, any combination of node …",91,[[]]],[11,"reverse","","Reverse the direction of all edges",91,[[]]],[11,"clear","","Remove all nodes and edges",91,[[]]],[11,"clear_edges","","Remove all edges",91,[[]]],[11,"capacity","","Return the current node and edge capacity of the graph.",91,[[]]],[11,"reserve_nodes","","Reserves capacity for at least <code>additional</code> more nodes to …",91,[[]]],[11,"reserve_edges","","Reserves capacity for at least <code>additional</code> more edges to …",91,[[]]],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly <code>additional</code> more …",91,[[]]],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly <code>additional</code> more …",91,[[]]],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection …",91,[[]]],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection …",91,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",91,[[]]],[11,"retain_nodes","","Keep all nodes that return <code>true</code> from the <code>visit</code> closure, …",91,[[]]],[11,"retain_edges","","Keep all edges that return <code>true</code> from the <code>visit</code> closure, …",91,[[]]],[11,"from_edges","","Create a new <code>Graph</code> from an iterable of edges.",91,[[]]],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",91,[[]]],[11,"map","","Create a new <code>Graph</code> by mapping node and edge weights to …",91,[[],["graph",3]]],[11,"filter_map","","Create a new <code>Graph</code> by mapping nodes and edges. A node or …",91,[[],["graph",3]]],[11,"into_edge_type","","Convert the graph into either undirected or directed. No …",91,[[],["graph",3]]],[11,"detach","","Return a “walker” object that can be used to step …",93,[[],["walkneighbors",3]]],[11,"next","","Step to the next edge and its endpoint node in the walk …",98,[[["graph",3]],["option",4]]],[11,"next_node","","",98,[[["graph",3]],[["nodeindex",3],["option",4]]]],[11,"next_edge","","",98,[[["graph",3]],[["option",4],["edgeindex",3]]]],[11,"weight","","Access the edge’s weight.",101,[[]]]],"p":[[8,"FilterNode"],[3,"NodeFiltered"],[8,"FilterEdge"],[3,"EdgeFiltered"],[3,"Reversed"],[3,"Time"],[4,"DfsEvent"],[4,"Control"],[8,"ControlFlow"],[3,"Dfs"],[3,"DfsPostOrder"],[3,"Bfs"],[8,"Walker"],[8,"GraphBase"],[8,"IntoNeighbors"],[8,"IntoNeighborsDirected"],[8,"IntoEdges"],[8,"IntoEdgesDirected"],[8,"IntoNodeIdentifiers"],[8,"Data"],[8,"EdgeRef"],[8,"NodeRef"],[8,"IntoNodeReferences"],[8,"IntoEdgeReferences"],[8,"GraphProp"],[8,"NodeIndexable"],[8,"NodeCount"],[8,"VisitMap"],[8,"Visitable"],[8,"GetAdjacencyMatrix"],[8,"DataMap"],[8,"DataMapMut"],[8,"Build"],[8,"Create"],[4,"Element"],[13,"Node"],[13,"Edge"],[8,"FromElements"],[8,"ElementIterator"],[3,"Dominators"],[3,"DfsSpace"],[3,"Cycle"],[8,"FloatMeasure"],[3,"Csr"],[3,"EdgeReference"],[3,"Dot"],[4,"Config"],[3,"GraphMap"],[3,"Ptr"],[8,"IndexType"],[8,"Zero"],[3,"MatrixGraph"],[3,"UnionFind"],[3,"Edge"],[3,"Node"],[4,"Direction"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[3,"Topo"],[3,"WalkerIter"],[3,"NodeFilteredNeighbors"],[3,"NodeFilteredNodes"],[3,"NodeFilteredEdgeReferences"],[3,"NodeFilteredEdges"],[3,"EdgeFilteredNeighbors"],[3,"EdgeFilteredEdges"],[3,"EdgeFilteredNeighborsDirected"],[3,"ReversedEdges"],[3,"ReversedEdgeReference"],[3,"ReversedEdgeReferences"],[3,"FilterElements"],[3,"DominatorsIter"],[3,"MinSpanningTree"],[3,"NegativeCycle"],[3,"EdgesNotSorted"],[3,"Edges"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"NodeIdentifiers"],[3,"StableGraph"],[3,"NodeReferences"],[3,"EdgeReference"],[3,"Edges"],[3,"EdgeReferences"],[3,"Externals"],[3,"Neighbors"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"EdgesConnecting"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"EdgeReference"],[3,"NodeReferences"],[3,"EdgeReferences"],[3,"Frozen"],[3,"Nodes"],[3,"Neighbors"],[3,"NeighborsDirected"],[3,"Edges"],[3,"AllEdges"],[3,"AllEdgesMut"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[3,"NotZero"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"Edges"],[4,"Directed"],[4,"Undirected"]]},\
"pin_project_lite":{"doc":"A lightweight version of pin-project written with …","i":[[14,"pin_project","pin_project_lite","A macro that creates a projection type covering all the …",null,null]],"p":[]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the …","i":[[0,"token_stream","proc_macro2","Public implementation details for the <code>TokenStream</code> type, …",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over <code>TokenStream</code>\'s <code>TokenTree</code>s.",null,null],[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a …",null,null],[3,"LexError","","Error returned from <code>TokenStream::from_str</code>.",null,null],[11,"new","","Returns an empty <code>TokenStream</code> containing no token trees.",0,[[],["tokenstream",3]]],[11,"is_empty","","Checks if this <code>TokenStream</code> is empty.",0,[[]]],[3,"Span","","A region of source code, along with macro expansion …",null,null],[11,"call_site","","The span of the invocation of the current procedural …",1,[[],["span",3]]],[11,"mixed_site","","The span located at the invocation of the procedural …",1,[[],["span",3]]],[11,"resolved_at","","Creates a new span with the same line/column information …",1,[[["span",3]],["span",3]]],[11,"located_at","","Creates a new span with the same name resolution behavior …",1,[[["span",3]],["span",3]]],[11,"unwrap","","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.",1,[[],["span",3]]],[11,"join","","Create a new span encompassing <code>self</code> and <code>other</code>.",1,[[["span",3]],[["span",3],["option",4]]]],[4,"TokenTree","","A single token or a delimited sequence of token trees …",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",2,null],[13,"Ident","","An identifier.",2,null],[13,"Punct","","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).",2,null],[13,"Literal","","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…",2,null],[11,"span","","Returns the span of this tree, delegating to the <code>span</code> …",2,[[],["span",3]]],[11,"set_span","","Configures the span for <em>only this token</em>.",2,[[["span",3]]]],[3,"Group","","A delimited token stream.",null,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","<code>( ... )</code>",3,null],[13,"Brace","","<code>{ ... }</code>",3,null],[13,"Bracket","","<code>[ ... ]</code>",3,null],[13,"None","","<code>Ø ... Ø</code>",3,null],[11,"new","","Creates a new <code>Group</code> with the given delimiter and token …",4,[[["tokenstream",3],["delimiter",4]],["group",3]]],[11,"delimiter","","Returns the delimiter of this <code>Group</code>",4,[[],["delimiter",4]]],[11,"stream","","Returns the <code>TokenStream</code> of tokens that are delimited in …",4,[[],["tokenstream",3]]],[11,"span","","Returns the span for the delimiters of this token stream, …",4,[[],["span",3]]],[11,"span_open","","Returns the span pointing to the opening delimiter of …",4,[[],["span",3]]],[11,"span_close","","Returns the span pointing to the closing delimiter of …",4,[[],["span",3]]],[11,"set_span","","Configures the span for this <code>Group</code>\'s delimiters, but not …",4,[[["span",3]]]],[3,"Punct","","An <code>Punct</code> is an single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>…",null,null],[4,"Spacing","","Whether an <code>Punct</code> is followed immediately by another <code>Punct</code> …",null,null],[13,"Alone","","E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.",5,null],[13,"Joint","","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.",5,null],[11,"new","","Creates a new <code>Punct</code> from the given character and spacing.",6,[[["spacing",4]],["punct",3]]],[11,"as_char","","Returns the value of this punctuation character as <code>char</code>.",6,[[]]],[11,"spacing","","Returns the spacing of this punctuation character, …",6,[[],["spacing",4]]],[11,"span","","Returns the span for this punctuation character.",6,[[],["span",3]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["span",3]]]],[3,"Ident","","A word of Rust code, which may be a keyword or legal …",null,null],[11,"new","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …",7,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this <code>Ident</code>.",7,[[],["span",3]]],[11,"set_span","","Configures the span of this <code>Ident</code>, possibly changing its …",7,[[["span",3]]]],[3,"Literal","","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …",null,null],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[],["literal",3]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",8,[[],["literal",3]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[],["literal",3]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",8,[[],["literal",3]]],[11,"string","","String literal.",8,[[],["literal",3]]],[11,"character","","Character literal.",8,[[],["literal",3]]],[11,"byte_string","","Byte string literal.",8,[[],["literal",3]]],[11,"span","","Returns the span encompassing this literal.",8,[[],["span",3]]],[11,"set_span","","Configures the span associated for this literal.",8,[[["span",3]]]],[11,"subspan","","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …",8,[[["rangebounds",8]],[["span",3],["option",4]]]],[11,"from","proc_macro2::token_stream","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","proc_macro2","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",1,[[["span",3]],["span",3]]],[11,"from","","",0,[[["tokenstream",3]],["tokenstream",3]]],[11,"from","","",0,[[["tokentree",4]]]],[11,"from","","",2,[[["group",3]],["tokentree",4]]],[11,"from","","",2,[[["ident",3]],["tokentree",4]]],[11,"from","","",2,[[["punct",3]],["tokentree",4]]],[11,"from","","",2,[[["literal",3]],["tokentree",4]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"into_iter","","",0,[[],["intoiter",3]]],[11,"next","proc_macro2::token_stream","",9,[[],[["tokentree",4],["option",4]]]],[11,"clone","proc_macro2","",0,[[],["tokenstream",3]]],[11,"clone","","",1,[[],["span",3]]],[11,"clone","","",2,[[],["tokentree",4]]],[11,"clone","","",4,[[],["group",3]]],[11,"clone","","",3,[[],["delimiter",4]]],[11,"clone","","",6,[[],["punct",3]]],[11,"clone","","",5,[[],["spacing",4]]],[11,"clone","","",7,[[],["ident",3]]],[11,"clone","","",8,[[],["literal",3]]],[11,"clone","proc_macro2::token_stream","",9,[[],["intoiter",3]]],[11,"default","proc_macro2","",0,[[]]],[11,"cmp","","",7,[[["ident",3]],["ordering",4]]],[11,"eq","","",3,[[["delimiter",4]]]],[11,"eq","","",5,[[["spacing",4]]]],[11,"eq","","",7,[[["ident",3]]]],[11,"eq","","",7,[[]]],[11,"partial_cmp","","",7,[[["ident",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","proc_macro2::token_stream","",9,[[["formatter",3]],["result",6]]],[11,"fmt","proc_macro2","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",7,[[]]],[11,"from_str","","",0,[[],[["tokenstream",3],["lexerror",3],["result",4]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]]],"p":[[3,"TokenStream"],[3,"Span"],[4,"TokenTree"],[4,"Delimiter"],[3,"Group"],[4,"Spacing"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"],[3,"LexError"]]},\
"proc_macro_error":{"doc":"proc-macro-errorThis crate aims to make error reporting …","i":[[23,"proc_macro_error","proc_macro_error","",null,null],[0,"dummy","","Facility to emit dummy implementations (or whatever) in …",null,null],[5,"set_dummy","proc_macro_error::dummy","Sets dummy token stream which will be appended to …",null,[[["tokenstream",3]],[["option",4],["tokenstream",3]]]],[5,"append_dummy","","Same as [<code>set_dummy</code>] but, instead of resetting, appends …",null,[[["tokenstream",3]]]],[3,"Diagnostic","proc_macro_error","Represents a single diagnostic message",null,null],[8,"DiagnosticExt","","A collection of methods that do not exist in …",null,null],[10,"spanned_range","","Create a new diagnostic message that points to the …",0,[[["level",4],["spanrange",3],["string",3]]]],[10,"span_range_error","","Add another error message to self such that it will be …",0,[[["string",3],["spanrange",3]]]],[10,"span_range_help","","Attach a \\\"help\\\" note to your main message, the note will …",0,[[["string",3],["spanrange",3]]]],[10,"span_range_note","","Attach a note to your main message, the note will have …",0,[[["string",3],["spanrange",3]]]],[4,"Level","","Represents a diagnostic level",null,null],[13,"Error","","",1,null],[13,"Warning","","",1,null],[3,"SpanRange","","",null,null],[12,"first","","",2,null],[12,"last","","",2,null],[11,"single_span","","Create a range with the <code>first</code> and <code>last</code> spans being the …",2,[[["span",3]]]],[11,"call_site","","Create a <code>SpanRange</code> resolving at call site.",2,[[]]],[11,"from_tokens","","Construct span range from a <code>TokenStream</code>. This method …",2,[[["totokens",8]]]],[11,"join_range","","Join two span ranges. The resulting range will start at …",2,[[["spanrange",3]]]],[11,"collapse","","Collapse the range into single span, preserving as much …",2,[[],["span",3]]],[8,"ResultExt","","This traits expands <code>Result<T, Into<Diagnostic>></code> with some …",null,null],[16,"Ok","","",3,null],[10,"unwrap_or_abort","","Behaves like <code>Result::unwrap</code>: if self is <code>Ok</code> yield the …",3,[[]]],[10,"expect_or_abort","","Behaves like <code>Result::expect</code>: if self is <code>Ok</code> yield the …",3,[[]]],[8,"OptionExt","","This traits expands <code>Option</code> with some handy shortcuts.",null,null],[16,"Some","","",4,null],[10,"expect_or_abort","","Behaves like <code>Option::expect</code>: if self is <code>Some</code> yield the …",4,[[]]],[5,"abort_if_dirty","","Abort macro execution and display all the emitted errors, …",null,[[]]],[14,"diagnostic","","Build <code>Diagnostic</code> instance from provided arguments.",null,null],[14,"abort","","Abort proc-macro execution right now and display the …",null,null],[14,"abort_call_site","","Shortcut for <code>abort!(Span::call_site(), msg...)</code>. This macro…",null,null],[14,"emit_error","","Emit an error while not aborting the proc-macro right …",null,null],[14,"emit_call_site_error","","Shortcut for <code>emit_error!(Span::call_site(), ...)</code>. This …",null,null],[14,"emit_warning","","Emit a warning. Warnings are not errors and compilation …",null,null],[14,"emit_call_site_warning","","Shortcut for <code>emit_warning!(Span::call_site(), ...)</code>.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"span","","",5,[[],["span",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"spanned_range","","",5,[[["level",4],["spanrange",3],["string",3]]]],[11,"span_range_error","","",5,[[["string",3],["spanrange",3]]]],[11,"span_range_help","","",5,[[["string",3],["spanrange",3]]]],[11,"span_range_note","","",5,[[["string",3],["spanrange",3]]]],[11,"from","","",5,[[["error",3]]]],[11,"clone","","",2,[[],["spanrange",3]]],[11,"eq","","",1,[[["level",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"to_tokens","","",5,[[["tokenstream",3]]]],[11,"new","","Create a new diagnostic message that points to …",5,[[["level",4],["string",3]]]],[11,"spanned","","Create a new diagnostic message that points to the <code>span</code>",5,[[["level",4],["string",3],["span",3]]]],[11,"span_error","","Add another error message to self such that it will be …",5,[[["string",3],["span",3]]]],[11,"span_help","","Attach a \\\"help\\\" note to your main message, the note will …",5,[[["string",3],["span",3]]]],[11,"help","","Attach a \\\"help\\\" note to your main message.",5,[[["string",3]]]],[11,"span_note","","Attach a note to your main message, the note will have …",5,[[["string",3],["span",3]]]],[11,"note","","Attach a note to your main message",5,[[["string",3]]]],[11,"message","","The message of main warning/error (no notes attached)",5,[[]]],[11,"abort","","Abort the proc-macro\'s execution and display the …",5,[[]]],[11,"emit","","Display the diagnostic while not aborting macro execution.",5,[[]]]],"p":[[8,"DiagnosticExt"],[4,"Level"],[3,"SpanRange"],[8,"ResultExt"],[8,"OptionExt"],[3,"Diagnostic"]]},\
"proc_macro_error_attr":{"doc":"This is <code>#[proc_macro_error]</code> attribute to be used with …","i":[[23,"proc_macro_error","proc_macro_error_attr","",null,null]],"p":[]},\
"proc_macro_hack":{"doc":"github crates-io docs-rs","i":[[23,"proc_macro_hack","proc_macro_hack","",null,null]],"p":[]},\
"quote":{"doc":"github crates-io docs-rs","i":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending …",null,null],[10,"append","","For use by <code>ToTokens</code> implementations.",0,[[]]],[10,"append_all","","For use by <code>ToTokens</code> implementations.",0,[[]]],[10,"append_separated","","For use by <code>ToTokens</code> implementations.",0,[[]]],[10,"append_terminated","","For use by <code>ToTokens</code> implementations.",0,[[]]],[8,"IdentFragment","","Specialized formatting trait used by <code>format_ident!</code>.",null,null],[10,"fmt","","Format this value as an identifier fragment.",1,[[["formatter",3]],["result",6]]],[11,"span","","Span associated with this <code>IdentFragment</code>.",1,[[],[["option",4],["span",3]]]],[8,"ToTokens","","Types that can be interpolated inside a <code>quote!</code> invocation.",null,null],[10,"to_tokens","","Write <code>self</code> to the given <code>TokenStream</code>.",2,[[["tokenstream",3]]]],[11,"to_token_stream","","Convert <code>self</code> directly into a <code>TokenStream</code> object.",2,[[],["tokenstream",3]]],[11,"into_token_stream","","Convert <code>self</code> directly into a <code>TokenStream</code> object.",2,[[],["tokenstream",3]]],[14,"format_ident","","Formatting macro for constructing <code>Ident</code>s.",null,null],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as <code>quote!</code>, but applies a given span to all tokens …",null,null],[11,"span","","Span associated with this <code>IdentFragment</code>.",1,[[],[["option",4],["span",3]]]],[11,"to_token_stream","","Convert <code>self</code> directly into a <code>TokenStream</code> object.",2,[[],["tokenstream",3]]],[11,"into_token_stream","","Convert <code>self</code> directly into a <code>TokenStream</code> object.",2,[[],["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","i":[[0,"bytes","regex","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary …",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a …",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture …",null,null],[3,"Split","","Yields all substrings delimited by a regular expression …",null,null],[3,"SplitN","","Yields at most <code>N</code> substrings delimited by a regular …",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw …",null,null],[3,"Captures","","Captures represents a group of captured byte strings for …",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the …",null,null],[8,"Replacer","","Replacer describes types that can be used to replace …",null,null],[10,"replace_append","","Appends text to <code>dst</code> to replace the current match.",0,[[["captures",3],["vec",3]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",0,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",0,[[],["replacerref",3]]],[3,"ReplacerRef","","By-reference adaptor for a <code>Replacer</code>",null,null],[3,"NoExpand","","<code>NoExpand</code> indicates literal byte string replacement.",null,null],[12,"0","","",1,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions …",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex …",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex …",null,null],[11,"new","","Create a new regular expression builder with the given …",2,[[],["regexbuilder",3]]],[11,"build","","Consume the builder and compile the regular expression.",2,[[],[["regex",3],["result",4],["error",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",2,[[],["regexbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",2,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",2,[[],["regexbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",2,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",2,[[],["regexbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",2,[[],["regexbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",2,[[],["regexbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",2,[[],["regexbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",2,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",2,[[],["regexbuilder",3]]],[11,"new","","Create a new regular expression builder with the given …",3,[[],["regexsetbuilder",3]]],[11,"build","","Consume the builder and compile the regular expressions …",3,[[],[["regexset",3],["error",4],["result",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",3,[[],["regexsetbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",3,[[],["regexsetbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",3,[[],["regexsetbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",3,[[],["regexsetbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",3,[[],["regexsetbuilder",3]]],[11,"start","","Returns the starting byte offset of the match in the …",4,[[]]],[11,"end","","Returns the ending byte offset of the match in the …",4,[[]]],[11,"range","","Returns the range over the starting and ending byte …",4,[[],["range",3]]],[11,"as_bytes","","Returns the matched text.",4,[[]]],[11,"new","","Compiles a regular expression. Once compiled, it can be …",5,[[],[["regex",3],["result",4],["error",4]]]],[11,"is_match","","Returns true if and only if there is a match for the …",5,[[]]],[11,"find","","Returns the start and end byte range of the …",5,[[],[["option",4],["match",3]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping …",5,[[],["matches",3]]],[11,"captures","","Returns the capture groups corresponding to the …",5,[[],[["option",4],["captures",3]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture …",5,[[],["capturematches",3]]],[11,"split","","Returns an iterator of substrings of <code>text</code> delimited by a …",5,[[],["split",3]]],[11,"splitn","","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …",5,[[],["splitn",3]]],[11,"replace","","Replaces the leftmost-first match with the replacement …",5,[[["replacer",8]],["cow",4]]],[11,"replace_all","","Replaces all non-overlapping matches in <code>text</code> with the …",5,[[["replacer",8]],["cow",4]]],[11,"replacen","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …",5,[[["replacer",8]],["cow",4]]],[11,"shortest_match","","Returns the end location of a match in the text given.",5,[[],["option",4]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search …",5,[[],["option",4]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at …",5,[[]]],[11,"find_at","","Returns the same as find, but starts the search at the …",5,[[],[["option",4],["match",3]]]],[11,"captures_read","","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …",5,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"captures_read_at","","Returns the same as <code>captures_read</code>, but starts the search …",5,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"as_str","","Returns the original string of this regex.",5,[[]]],[11,"capture_names","","Returns an iterator over the capture names.",5,[[],["capturenames",3]]],[11,"captures_len","","Returns the number of captures.",5,[[]]],[11,"capture_locations","","Returns an empty set of capture locations that can be …",5,[[],["capturelocations",3]]],[11,"get","","Returns the start and end positions of the Nth capture …",6,[[],["option",4]]],[11,"len","","Returns the total number of capturing groups.",6,[[]]],[11,"get","","Returns the match associated with the capture group at …",7,[[],[["option",4],["match",3]]]],[11,"name","","Returns the match for the capture group named <code>name</code>. If …",7,[[],[["option",4],["match",3]]]],[11,"iter","","An iterator that yields all capturing matches in the …",7,[[],["subcapturematches",3]]],[11,"expand","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …",7,[[["vec",3]]]],[11,"len","","Returns the number of captured groups.",7,[[]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",0,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",0,[[],["replacerref",3]]],[11,"new","","Create a new regex set with the given regular expressions.",8,[[],[["regexset",3],["error",4],["result",4]]]],[11,"empty","","Create a new empty regex set.",8,[[],["regexset",3]]],[11,"is_match","","Returns true if and only if one of the regexes in this …",8,[[]]],[11,"matches","","Returns the set of regular expressions that match in the …",8,[[],["setmatches",3]]],[11,"len","","Returns the total number of regular expressions in this …",8,[[]]],[11,"is_empty","","Returns <code>true</code> if this set contains no regular expressions.",8,[[]]],[11,"patterns","","Returns the patterns that this set will match on.",8,[[]]],[11,"matched_any","","Whether this set contains any matches.",9,[[]]],[11,"matched","","Whether the regex at the given index matched.",9,[[]]],[11,"len","","The total number of regexes in the set that created these …",9,[[]]],[11,"iter","","Returns an iterator over indexes in the regex that …",9,[[],["setmatchesiter",3]]],[4,"Error","regex","An error that occurred during parsing or compiling a …",null,null],[13,"Syntax","","A syntax error.",10,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The …",10,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexBuilder","","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions …",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex …",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex …",null,null],[5,"escape","","Escapes all regular expression meta characters in <code>text</code>.",null,[[],["string",3]]],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw …",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture …",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured strings for a …",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a …",null,null],[3,"NoExpand","","<code>NoExpand</code> indicates literal string replacement.",null,null],[12,"0","","",11,null],[3,"Regex","","A compiled regular expression for matching Unicode …",null,null],[8,"Replacer","","Replacer describes types that can be used to replace …",null,null],[10,"replace_append","","Appends text to <code>dst</code> to replace the current match.",12,[[["string",3],["captures",3]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",12,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",12,[[],["replacerref",3]]],[3,"ReplacerRef","","By-reference adaptor for a <code>Replacer</code>",null,null],[3,"Split","","Yields all substrings delimited by a regular expression …",null,null],[3,"SplitN","","Yields at most <code>N</code> substrings delimited by a regular …",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the …",null,null],[11,"from","regex::bytes","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","regex","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"into_iter","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"into_iter","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"replace_append","regex::bytes","",19,[[["captures",3],["vec",3]]]],[11,"no_expansion","","",19,[[],[["cow",4],["option",4]]]],[11,"replace_append","","",1,[[["captures",3],["vec",3]]]],[11,"no_expansion","","",1,[[],[["option",4],["cow",4]]]],[11,"replace_append","regex","",38,[[["string",3],["captures",3]]]],[11,"no_expansion","","",38,[[],[["cow",4],["option",4]]]],[11,"replace_append","","",11,[[["string",3],["captures",3]]]],[11,"no_expansion","","",11,[[],[["cow",4],["option",4]]]],[11,"next_back","","",26,[[],["option",4]]],[11,"next_back","","",27,[[],["option",4]]],[11,"next_back","regex::bytes","",20,[[],["option",4]]],[11,"next_back","","",21,[[],["option",4]]],[11,"into_iter","regex","",25,[[]]],[11,"into_iter","regex::bytes","",9,[[]]],[11,"next","","",13,[[],[["option",4],["match",3]]]],[11,"next","","",14,[[],[["option",4],["captures",3]]]],[11,"next","","",15,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"next","","",17,[[],[["option",4],["option",4]]]],[11,"size_hint","","",17,[[]]],[11,"count","","",17,[[]]],[11,"next","","",18,[[],[["option",4],["option",4]]]],[11,"next","regex","",26,[[],["option",4]]],[11,"size_hint","","",26,[[]]],[11,"next","","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","regex::bytes","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","regex","",30,[[],[["option",4],["option",4]]]],[11,"size_hint","","",30,[[]]],[11,"count","","",30,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"next","","",35,[[],[["option",4],["option",4]]]],[11,"next","","",36,[[],[["option",4],["captures",3]]]],[11,"next","","",37,[[],[["option",4],["match",3]]]],[11,"clone","","",10,[[],["error",4]]],[11,"clone","regex::bytes","",4,[[],["match",3]]],[11,"clone","","",5,[[],["regex",3]]],[11,"clone","","",17,[[],["capturenames",3]]],[11,"clone","","",6,[[],["capturelocations",3]]],[11,"clone","","",18,[[],["subcapturematches",3]]],[11,"clone","","",1,[[],["noexpand",3]]],[11,"clone","regex","",24,[[],["regexset",3]]],[11,"clone","","",25,[[],["setmatches",3]]],[11,"clone","","",27,[[],["setmatchesiter",3]]],[11,"clone","regex::bytes","",8,[[],["regexset",3]]],[11,"clone","","",9,[[],["setmatches",3]]],[11,"clone","","",21,[[],["setmatchesiter",3]]],[11,"clone","regex","",28,[[],["match",3]]],[11,"clone","","",29,[[],["regex",3]]],[11,"clone","","",30,[[],["capturenames",3]]],[11,"clone","","",33,[[],["capturelocations",3]]],[11,"clone","","",35,[[],["subcapturematches",3]]],[11,"clone","","",11,[[],["noexpand",3]]],[11,"eq","","",10,[[["error",4]]]],[11,"ne","","",10,[[["error",4]]]],[11,"eq","regex::bytes","",4,[[["match",3]]]],[11,"ne","","",4,[[["match",3]]]],[11,"eq","regex","",28,[[["match",3]]]],[11,"ne","","",28,[[["match",3]]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",2,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",22,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",3,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",23,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","Shows the original regular expression.",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","Shows the original regular expression.",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","Shows the original regular expression.",5,[[["formatter",3]],["result",6]]],[11,"fmt","regex","Shows the original regular expression.",29,[[["formatter",3]],["result",6]]],[11,"index","regex::bytes","",7,[[]]],[11,"index","","",7,[[]]],[11,"index","regex","",34,[[]]],[11,"index","","",34,[[]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",5,[[],[["regex",3],["result",4],["error",4]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",29,[[],[["regex",3],["result",4],["error",4]]]],[11,"description","","",10,[[]]],[11,"new","","Create a new regular expression builder with the given …",22,[[],["regexbuilder",3]]],[11,"build","","Consume the builder and compile the regular expression.",22,[[],[["regex",3],["result",4],["error",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",22,[[],["regexbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",22,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",22,[[],["regexbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",22,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",22,[[],["regexbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",22,[[],["regexbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",22,[[],["regexbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",22,[[],["regexbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",22,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",22,[[],["regexbuilder",3]]],[11,"new","","Create a new regular expression builder with the given …",23,[[],["regexsetbuilder",3]]],[11,"build","","Consume the builder and compile the regular expressions …",23,[[],[["regexset",3],["error",4],["result",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",23,[[],["regexsetbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",23,[[],["regexsetbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",23,[[],["regexsetbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",23,[[],["regexsetbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",23,[[],["regexsetbuilder",3]]],[11,"new","","Create a new regex set with the given regular expressions.",24,[[],[["regexset",3],["error",4],["result",4]]]],[11,"empty","","Create a new empty regex set.",24,[[],["regexset",3]]],[11,"is_match","","Returns true if and only if one of the regexes in this …",24,[[]]],[11,"matches","","Returns the set of regular expressions that match in the …",24,[[],["setmatches",3]]],[11,"len","","Returns the total number of regular expressions in this …",24,[[]]],[11,"is_empty","","Returns <code>true</code> if this set contains no regular expressions.",24,[[]]],[11,"patterns","","Returns the patterns that this set will match on.",24,[[]]],[11,"matched_any","","Whether this set contains any matches.",25,[[]]],[11,"matched","","Whether the regex at the given index matched.",25,[[]]],[11,"len","","The total number of regexes in the set that created these …",25,[[]]],[11,"iter","","Returns an iterator over indexes in the regex that …",25,[[],["setmatchesiter",3]]],[11,"start","","Returns the starting byte offset of the match in the …",28,[[]]],[11,"end","","Returns the ending byte offset of the match in the …",28,[[]]],[11,"range","","Returns the range over the starting and ending byte …",28,[[],["range",3]]],[11,"as_str","","Returns the matched text.",28,[[]]],[11,"new","","Compiles a regular expression. Once compiled, it can be …",29,[[],[["regex",3],["result",4],["error",4]]]],[11,"is_match","","Returns true if and only if there is a match for the …",29,[[]]],[11,"find","","Returns the start and end byte range of the …",29,[[],[["option",4],["match",3]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping …",29,[[],["matches",3]]],[11,"captures","","Returns the capture groups corresponding to the …",29,[[],[["option",4],["captures",3]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture …",29,[[],["capturematches",3]]],[11,"split","","Returns an iterator of substrings of <code>text</code> delimited by a …",29,[[],["split",3]]],[11,"splitn","","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …",29,[[],["splitn",3]]],[11,"replace","","Replaces the leftmost-first match with the replacement …",29,[[["replacer",8]],["cow",4]]],[11,"replace_all","","Replaces all non-overlapping matches in <code>text</code> with the …",29,[[["replacer",8]],["cow",4]]],[11,"replacen","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …",29,[[["replacer",8]],["cow",4]]],[11,"shortest_match","","Returns the end location of a match in the text given.",29,[[],["option",4]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search …",29,[[],["option",4]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at …",29,[[]]],[11,"find_at","","Returns the same as find, but starts the search at the …",29,[[],[["option",4],["match",3]]]],[11,"captures_read","","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …",29,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at …",29,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"as_str","","Returns the original string of this regex.",29,[[]]],[11,"capture_names","","Returns an iterator over the capture names.",29,[[],["capturenames",3]]],[11,"captures_len","","Returns the number of captures.",29,[[]]],[11,"capture_locations","","Returns an empty set of capture locations that can be …",29,[[],["capturelocations",3]]],[11,"get","","Returns the start and end positions of the Nth capture …",33,[[],["option",4]]],[11,"len","","Returns the total number of capturing groups.",33,[[]]],[11,"get","","Returns the match associated with the capture group at …",34,[[],[["option",4],["match",3]]]],[11,"name","","Returns the match for the capture group named <code>name</code>. If …",34,[[],[["option",4],["match",3]]]],[11,"iter","","An iterator that yields all capturing matches in the …",34,[[],["subcapturematches",3]]],[11,"expand","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …",34,[[["string",3]]]],[11,"len","","Returns the number of captured groups.",34,[[]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",12,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",12,[[],["replacerref",3]]]],"p":[[8,"Replacer"],[3,"NoExpand"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"]]},\
"regex_automata":{"doc":"A low level regular expression library that uses …","i":[[0,"dense","regex_automata","Types and routines specific to dense DFAs.",null,null],[4,"DenseDFA","regex_automata::dense","A dense table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use premultiplication or …",0,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",0,null],[13,"Premultiplied","","A DFA that premultiplies all of its state identifiers in …",0,null],[13,"PremultipliedByteClass","","The default configuration of a DFA, which uses byte …",0,null],[3,"Standard","","A standard dense DFA that does not use premultiplication …",null,null],[3,"ByteClass","","A dense DFA that shrinks its alphabet.",null,null],[3,"Premultiplied","","A dense DFA that premultiplies all of its state …",null,null],[3,"PremultipliedByteClass","","The default configuration of a dense DFA, which uses byte …",null,null],[3,"Builder","","A builder for constructing a deterministic finite …",null,null],[0,"sparse","regex_automata","Types and routines specific to sparse DFAs.",null,null],[4,"SparseDFA","regex_automata::sparse","A sparse table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use byte classes.",1,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",1,null],[3,"Standard","","A standard sparse DFA that does not use premultiplication …",null,null],[3,"ByteClass","","A sparse DFA that shrinks its alphabet.",null,null],[4,"DenseDFA","regex_automata","A dense table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use premultiplication or …",0,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",0,null],[13,"Premultiplied","","A DFA that premultiplies all of its state identifiers in …",0,null],[13,"PremultipliedByteClass","","The default configuration of a DFA, which uses byte …",0,null],[8,"DFA","","A trait describing the interface of a deterministic …",null,null],[16,"ID","","The representation used for state identifiers in this DFA.",2,null],[10,"start_state","","Return the identifier of this DFA\'s start state.",2,[[]]],[10,"is_match_state","","Returns true if and only if the given identifier …",2,[[]]],[10,"is_dead_state","","Returns true if and only if the given identifier …",2,[[]]],[10,"is_match_or_dead_state","","Returns true if and only if the given identifier …",2,[[]]],[10,"is_anchored","","Returns true if and only if this DFA is anchored.",2,[[]]],[10,"next_state","","Given the current state that this DFA is in and the next …",2,[[]]],[10,"next_state_unchecked","","Like <code>next_state</code>, but its implementation may look up the …",2,[[]]],[11,"is_match","","Returns true if and only if the given bytes match this …",2,[[]]],[11,"shortest_match","","Returns the first position at which a match is found.",2,[[],["option",4]]],[11,"find","","Returns the end offset of the longest match. If no match …",2,[[],["option",4]]],[11,"rfind","","Returns the start offset of the longest match in reverse, …",2,[[],["option",4]]],[11,"is_match_at","","Returns the same as <code>is_match</code>, but starts the search at …",2,[[]]],[11,"shortest_match_at","","Returns the same as <code>shortest_match</code>, but starts the search …",2,[[],["option",4]]],[11,"find_at","","Returns the same as <code>find</code>, but starts the search at the …",2,[[],["option",4]]],[11,"rfind_at","","Returns the same as <code>rfind</code>, but starts the search at the …",2,[[],["option",4]]],[3,"Error","","An error that occurred during the construction of a DFA.",null,null],[4,"ErrorKind","","The kind of error that occurred.",null,null],[13,"Syntax","","An error that occurred while parsing a regular …",3,null],[13,"Unsupported","","An error that occurred because an unsupported regex …",3,null],[13,"Serialize","","An error that occurred when attempting to serialize a DFA …",3,null],[13,"StateIDOverflow","","An error that occurs when constructing a DFA would …",3,null],[12,"max","regex_automata::ErrorKind","The maximum possible state ID.",4,null],[13,"PremultiplyOverflow","regex_automata","An error that occurs when premultiplication of state IDs …",3,null],[12,"max","regex_automata::ErrorKind","The maximum possible state id.",5,null],[12,"requested_max","","The maximum ID required by premultiplication.",5,null],[3,"Regex","regex_automata","A regular expression that uses deterministic finite …",null,null],[3,"RegexBuilder","","A builder for a regex based on deterministic finite …",null,null],[4,"SparseDFA","","A sparse table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use byte classes.",1,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",1,null],[8,"StateID","","A trait describing the representation of a DFA\'s state …",null,null],[10,"from_usize","","Convert from a <code>usize</code> to this implementation\'s …",6,[[]]],[10,"to_usize","","Convert this implementation\'s representation to a <code>usize</code>.",6,[[]]],[10,"max_id","","Return the maximum state identifier supported by this …",6,[[]]],[10,"read_bytes","","Read a single state identifier from the given slice of …",6,[[]]],[10,"write_bytes","","Write this state identifier to the given slice of bytes …",6,[[]]],[11,"from","regex_automata::dense","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","regex_automata","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","regex_automata::sparse","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"start_state","regex_automata::dense","",0,[[]]],[11,"is_match_state","","",0,[[]]],[11,"is_dead_state","","",0,[[]]],[11,"is_match_or_dead_state","","",0,[[]]],[11,"is_anchored","","",0,[[]]],[11,"next_state","","",0,[[]]],[11,"next_state_unchecked","","",0,[[]]],[11,"is_match_at","","",0,[[]]],[11,"shortest_match_at","","",0,[[],["option",4]]],[11,"find_at","","",0,[[],["option",4]]],[11,"rfind_at","","",0,[[],["option",4]]],[11,"start_state","","",7,[[]]],[11,"is_match_state","","",7,[[]]],[11,"is_dead_state","","",7,[[]]],[11,"is_match_or_dead_state","","",7,[[]]],[11,"is_anchored","","",7,[[]]],[11,"next_state","","",7,[[]]],[11,"next_state_unchecked","","",7,[[]]],[11,"start_state","","",8,[[]]],[11,"is_match_state","","",8,[[]]],[11,"is_dead_state","","",8,[[]]],[11,"is_match_or_dead_state","","",8,[[]]],[11,"is_anchored","","",8,[[]]],[11,"next_state","","",8,[[]]],[11,"next_state_unchecked","","",8,[[]]],[11,"start_state","","",9,[[]]],[11,"is_match_state","","",9,[[]]],[11,"is_dead_state","","",9,[[]]],[11,"is_match_or_dead_state","","",9,[[]]],[11,"is_anchored","","",9,[[]]],[11,"next_state","","",9,[[]]],[11,"next_state_unchecked","","",9,[[]]],[11,"start_state","","",10,[[]]],[11,"is_match_state","","",10,[[]]],[11,"is_dead_state","","",10,[[]]],[11,"is_match_or_dead_state","","",10,[[]]],[11,"is_anchored","","",10,[[]]],[11,"next_state","","",10,[[]]],[11,"next_state_unchecked","","",10,[[]]],[11,"start_state","regex_automata::sparse","",1,[[]]],[11,"is_match_state","","",1,[[]]],[11,"is_dead_state","","",1,[[]]],[11,"is_match_or_dead_state","","",1,[[]]],[11,"is_anchored","","",1,[[]]],[11,"next_state","","",1,[[]]],[11,"next_state_unchecked","","",1,[[]]],[11,"is_match_at","","",1,[[]]],[11,"shortest_match_at","","",1,[[],["option",4]]],[11,"find_at","","",1,[[],["option",4]]],[11,"rfind_at","","",1,[[],["option",4]]],[11,"start_state","","",15,[[]]],[11,"is_match_state","","",15,[[]]],[11,"is_dead_state","","",15,[[]]],[11,"is_match_or_dead_state","","",15,[[]]],[11,"is_anchored","","",15,[[]]],[11,"next_state","","",15,[[]]],[11,"next_state_unchecked","","",15,[[]]],[11,"start_state","","",16,[[]]],[11,"is_match_state","","",16,[[]]],[11,"is_dead_state","","",16,[[]]],[11,"is_match_or_dead_state","","",16,[[]]],[11,"is_anchored","","",16,[[]]],[11,"next_state","","",16,[[]]],[11,"next_state_unchecked","","",16,[[]]],[11,"clone","regex_automata::dense","",0,[[],["densedfa",4]]],[11,"clone","","",7,[[],["standard",3]]],[11,"clone","","",8,[[],["byteclass",3]]],[11,"clone","","",9,[[],["premultiplied",3]]],[11,"clone","","",10,[[],["premultipliedbyteclass",3]]],[11,"clone","","",11,[[],["builder",3]]],[11,"clone","regex_automata","",12,[[],["error",3]]],[11,"clone","","",3,[[],["errorkind",4]]],[11,"clone","","",13,[[],["regex",3]]],[11,"clone","","",14,[[],["regexbuilder",3]]],[11,"clone","regex_automata::sparse","",1,[[],["sparsedfa",4]]],[11,"clone","","",15,[[],["standard",3]]],[11,"clone","","",16,[[],["byteclass",3]]],[11,"default","regex_automata::dense","",11,[[],["builder",3]]],[11,"default","regex_automata","",14,[[],["regexbuilder",3]]],[11,"fmt","regex_automata::dense","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","regex_automata","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","regex_automata::sparse","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","regex_automata","",12,[[["formatter",3]],["result",6]]],[11,"description","","",12,[[]]],[11,"new","regex_automata::dense","Parse the given regular expression using a default …",0,[[],[["densedfa",4],["error",3],["result",4]]]],[11,"empty","","Create a new empty DFA that never matches any input.",0,[[],[["densedfa",4],["vec",3]]]],[11,"as_ref","","Cheaply return a borrowed version of this dense DFA. …",0,[[],["densedfa",4]]],[11,"to_owned","","Return an owned version of this sparse DFA. Specifically, …",0,[[],[["densedfa",4],["vec",3]]]],[11,"memory_usage","","Returns the memory usage, in bytes, of this DFA.",0,[[]]],[11,"to_sparse","","Convert this dense DFA to a sparse DFA.",0,[[],[["result",4],["sparsedfa",4],["error",3]]]],[11,"to_sparse_sized","","Convert this dense DFA to a sparse DFA.",0,[[],[["error",3],["result",4],["sparsedfa",4]]]],[11,"to_u8","","Create a new DFA whose match semantics are equivalent to …",0,[[],[["densedfa",4],["result",4],["error",3]]]],[11,"to_u16","","Create a new DFA whose match semantics are equivalent to …",0,[[],[["densedfa",4],["result",4],["error",3]]]],[11,"to_u32","","Create a new DFA whose match semantics are equivalent to …",0,[[],[["error",3],["result",4],["densedfa",4]]]],[11,"to_u64","","Create a new DFA whose match semantics are equivalent to …",0,[[],[["result",4],["error",3],["densedfa",4]]]],[11,"to_sized","","Create a new DFA whose match semantics are equivalent to …",0,[[],[["result",4],["densedfa",4],["error",3]]]],[11,"to_bytes_little_endian","","Serialize a DFA to raw bytes, aligned to an 8 byte …",0,[[],[["vec",3],["result",4],["error",3]]]],[11,"to_bytes_big_endian","","Serialize a DFA to raw bytes, aligned to an 8 byte …",0,[[],[["vec",3],["result",4],["error",3]]]],[11,"to_bytes_native_endian","","Serialize a DFA to raw bytes, aligned to an 8 byte …",0,[[],[["vec",3],["result",4],["error",3]]]],[11,"from_bytes","","Deserialize a DFA with a specific state identifier …",0,[[],["densedfa",4]]],[11,"new","","Create a new DenseDFA builder with the default …",11,[[],["builder",3]]],[11,"build","","Build a DFA from the given pattern.",11,[[],[["densedfa",4],["error",3],["result",4]]]],[11,"build_with_size","","Build a DFA from the given pattern using a specific …",11,[[],[["densedfa",4],["result",4],["error",3]]]],[11,"anchored","","Set whether matching must be anchored at the beginning of …",11,[[],["builder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",11,[[],["builder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",11,[[],["builder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag by …",11,[[],["builder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag by default.",11,[[],["builder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",11,[[],["builder",3]]],[11,"allow_invalid_utf8","","When enabled, the builder will permit the construction of …",11,[[],["builder",3]]],[11,"nest_limit","","Set the nesting limit used for the regular expression …",11,[[],["builder",3]]],[11,"minimize","","Minimize the DFA.",11,[[],["builder",3]]],[11,"premultiply","","Premultiply state identifiers in the DFA\'s transition …",11,[[],["builder",3]]],[11,"byte_classes","","Shrink the size of the DFA\'s alphabet by mapping bytes to …",11,[[],["builder",3]]],[11,"reverse","","Reverse the DFA.",11,[[],["builder",3]]],[11,"longest_match","","Find the longest possible match.",11,[[],["builder",3]]],[11,"is_match","regex_automata","Returns true if and only if the given bytes match this …",2,[[]]],[11,"shortest_match","","Returns the first position at which a match is found.",2,[[],["option",4]]],[11,"find","","Returns the end offset of the longest match. If no match …",2,[[],["option",4]]],[11,"rfind","","Returns the start offset of the longest match in reverse, …",2,[[],["option",4]]],[11,"is_match_at","","Returns the same as <code>is_match</code>, but starts the search at …",2,[[]]],[11,"shortest_match_at","","Returns the same as <code>shortest_match</code>, but starts the search …",2,[[],["option",4]]],[11,"find_at","","Returns the same as <code>find</code>, but starts the search at the …",2,[[],["option",4]]],[11,"rfind_at","","Returns the same as <code>rfind</code>, but starts the search at the …",2,[[],["option",4]]],[11,"kind","","Return the kind of this error.",12,[[],["errorkind",4]]],[11,"new","","Parse the given regular expression using a default …",13,[[],[["error",3],["result",4],["regex",3]]]],[11,"new_sparse","","Parse the given regular expression using a default …",13,[[],[["regex",3],["result",4],["error",3]]]],[11,"is_match","","Returns true if and only if the given bytes match.",13,[[]]],[11,"shortest_match","","Returns the first position at which a match is found.",13,[[],["option",4]]],[11,"find","","Returns the start and end offset of the leftmost first …",13,[[],["option",4]]],[11,"is_match_at","","Returns the same as <code>is_match</code>, but starts the search at …",13,[[]]],[11,"shortest_match_at","","Returns the same as <code>shortest_match</code>, but starts the search …",13,[[],["option",4]]],[11,"find_at","","Returns the same as <code>find</code>, but starts the search at the …",13,[[],["option",4]]],[11,"find_iter","","Returns an iterator over all non-overlapping leftmost …",13,[[],["matches",3]]],[11,"from_dfas","","Build a new regex from its constituent forward and …",13,[[],["regex",3]]],[11,"forward","","Return the underlying DFA responsible for forward …",13,[[]]],[11,"reverse","","Return the underlying DFA responsible for reverse …",13,[[]]],[11,"new","","Create a new regex builder with the default configuration.",14,[[],["regexbuilder",3]]],[11,"build","","Build a regex from the given pattern.",14,[[],[["error",3],["result",4],["regex",3]]]],[11,"build_sparse","","Build a regex from the given pattern using sparse DFAs.",14,[[],[["regex",3],["result",4],["error",3]]]],[11,"build_with_size","","Build a regex from the given pattern using a specific …",14,[[],[["regex",3],["result",4],["error",3]]]],[11,"build_with_size_sparse","","Build a regex from the given pattern using a specific …",14,[[],[["regex",3],["error",3],["result",4]]]],[11,"anchored","","Set whether matching must be anchored at the beginning of …",14,[[],["regexbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",14,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",14,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag by …",14,[[],["regexbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag by default.",14,[[],["regexbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",14,[[],["regexbuilder",3]]],[11,"allow_invalid_utf8","","When enabled, the builder will permit the construction of …",14,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit used for the regular expression …",14,[[],["regexbuilder",3]]],[11,"minimize","","Minimize the underlying DFAs.",14,[[],["regexbuilder",3]]],[11,"premultiply","","Premultiply state identifiers in the underlying DFA …",14,[[],["regexbuilder",3]]],[11,"byte_classes","","Shrink the size of the underlying DFA alphabet by mapping …",14,[[],["regexbuilder",3]]],[11,"new","regex_automata::sparse","Parse the given regular expression using a default …",1,[[],[["result",4],["sparsedfa",4],["error",3]]]],[11,"empty","","Create a new empty sparse DFA that never matches any …",1,[[],[["sparsedfa",4],["vec",3]]]],[11,"as_ref","","Cheaply return a borrowed version of this sparse DFA. …",1,[[],["sparsedfa",4]]],[11,"to_owned","","Return an owned version of this sparse DFA. Specifically, …",1,[[],[["sparsedfa",4],["vec",3]]]],[11,"memory_usage","","Returns the memory usage, in bytes, of this DFA.",1,[[]]],[11,"to_u8","","Create a new sparse DFA whose match semantics are …",1,[[],[["sparsedfa",4],["error",3],["result",4]]]],[11,"to_u16","","Create a new sparse DFA whose match semantics are …",1,[[],[["result",4],["sparsedfa",4],["error",3]]]],[11,"to_u32","","Create a new sparse DFA whose match semantics are …",1,[[],[["sparsedfa",4],["error",3],["result",4]]]],[11,"to_u64","","Create a new sparse DFA whose match semantics are …",1,[[],[["result",4],["sparsedfa",4],["error",3]]]],[11,"to_sized","","Create a new sparse DFA whose match semantics are …",1,[[],[["error",3],["result",4],["sparsedfa",4]]]],[11,"to_bytes_little_endian","","Serialize a sparse DFA to raw bytes in little endian …",1,[[],[["vec",3],["result",4],["error",3]]]],[11,"to_bytes_big_endian","","Serialize a sparse DFA to raw bytes in big endian format.",1,[[],[["vec",3],["result",4],["error",3]]]],[11,"to_bytes_native_endian","","Serialize a sparse DFA to raw bytes in native endian …",1,[[],[["vec",3],["result",4],["error",3]]]],[11,"from_bytes","","Deserialize a sparse DFA with a specific state identifier …",1,[[],["sparsedfa",4]]]],"p":[[4,"DenseDFA"],[4,"SparseDFA"],[8,"DFA"],[4,"ErrorKind"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"],[8,"StateID"],[3,"Standard"],[3,"ByteClass"],[3,"Premultiplied"],[3,"PremultipliedByteClass"],[3,"Builder"],[3,"Error"],[3,"Regex"],[3,"RegexBuilder"],[3,"Standard"],[3,"ByteClass"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","i":[[0,"ast","regex_syntax","Defines an abstract syntax for regular expressions.",null,null],[0,"parse","regex_syntax::ast","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[11,"new","","Create a new parser builder with a default configuration.",0,[[],["parserbuilder",3]]],[11,"build","","Build a parser from this configuration with the given …",0,[[],["parser",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",0,[[],["parserbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",0,[[],["parserbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",0,[[],["parserbuilder",3]]],[3,"Parser","","A regular expression parser.",null,null],[11,"new","","Create a new parser with a default configuration.",1,[[],["parser",3]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",1,[[],[["result",4],["ast",4],["error",3]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract …",1,[[],[["withcomments",3],["result",4],["error",3]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for <code>Ast</code>.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"new","","Create a new printer.",2,[[],["printer",3]]],[11,"print","","Print the given <code>Ast</code> to the given writer. The writer must …",2,[[["ast",4],["write",8]],["result",6]]],[5,"visit","regex_syntax::ast","Executes an implementation of <code>Visitor</code> in constant stack …",null,[[["ast",4],["visitor",8]],["result",4]]],[8,"Visitor","","A trait for visiting an abstract syntax tree (AST) in …",null,null],[16,"Output","","The result of visiting an AST.",3,null],[16,"Err","","An error that visiting an AST might return.",3,null],[10,"finish","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …",3,[[],["result",4]]],[11,"start","","This method is called before beginning traversal of the …",3,[[]]],[11,"visit_pre","","This method is called on an <code>Ast</code> before descending into …",3,[[["ast",4]],["result",4]]],[11,"visit_post","","This method is called on an <code>Ast</code> after descending all of …",3,[[["ast",4]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",3,[[],["result",4]]],[11,"visit_class_set_item_pre","","This method is called on every <code>ClassSetItem</code> before …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_item_post","","This method is called on every <code>ClassSetItem</code> after …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_binary_op_pre","","This method is called on every <code>ClassSetBinaryOp</code> before …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_post","","This method is called on every <code>ClassSetBinaryOp</code> after …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right …",3,[[["classsetbinaryop",3]],["result",4]]],[3,"Error","","An error that occurred while parsing a regular expression …",null,null],[11,"kind","","Return the type of this error.",4,[[],["errorkind",4]]],[11,"pattern","","The original pattern string in which this error occurred.",4,[[]]],[11,"span","","Return the span at which this error occurred.",4,[[],["span",3]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some …",4,[[],[["option",4],["span",3]]]],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",5,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class …",5,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid …",5,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. …",5,null],[13,"ClassUnclosed","","An opening <code>[</code> was found with no corresponding closing <code>]</code>.",5,null],[13,"DecimalEmpty","","Note that this error variant is no longer used. Namely, a …",5,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was …",5,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",5,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode …",5,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",5,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",5,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",5,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., <code>i-</code>.",5,null],[13,"FlagDuplicate","","A flag was used twice, e.g., <code>i-i</code>.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position …",6,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., <code>-i-s</code>.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error …",7,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., <code>(?</code>.",5,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., <code>a</code>.",5,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture …",8,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., <code>(?P<>abc)</code>.",5,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. …",5,null],[13,"GroupNameUnexpectedEof","","A closing <code>></code> could not be found for a capture group name.",5,null],[13,"GroupUnclosed","","An unclosed group, e.g., <code>(ab</code>.",5,null],[13,"GroupUnopened","","An unopened group, e.g., <code>ab)</code>.",5,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the …",5,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is …",5,null],[13,"RepetitionCountDecimalEmpty","","An opening <code>{</code> was not followed by a valid decimal value. …",5,null],[13,"RepetitionCountUnclosed","","An opening <code>{</code> was found with no corresponding closing <code>}</code>.",5,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing …",5,null],[13,"UnicodeClassInvalid","","The Unicode class is not valid. This typically occurs …",5,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced …",5,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE\'s look-around is used, this …",5,null],[3,"Span","","Span represents the position information of a single AST …",null,null],[12,"start","","The start byte offset.",9,null],[12,"end","","The end byte offset.",9,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at <code>0</code> from …",10,null],[12,"line","","The line number, starting at <code>1</code>.",10,null],[12,"column","","The approximate column number, starting at <code>1</code>.",10,null],[11,"new","","Create a new span with the given positions.",9,[[["position",3]],["span",3]]],[11,"splat","","Create a new span using the given position as the start …",9,[[["position",3]],["span",3]]],[11,"with_start","","Create a new span by replacing the starting the position …",9,[[["position",3]],["span",3]]],[11,"with_end","","Create a new span by replacing the ending the position …",9,[[["position",3]],["span",3]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single …",9,[[]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, …",9,[[]]],[11,"new","","Create a new position with the given information.",10,[[],["position",3]]],[3,"WithComments","","An abstract syntax tree for a singular expression along …",null,null],[12,"ast","","The actual ast.",11,null],[12,"comments","","All comments found in the original regular expression.",11,null],[3,"Comment","","A comment from a regular expression with an associated …",null,null],[12,"span","","The span of this comment, including the beginning <code>#</code> and …",12,null],[12,"comment","","The comment text, starting with the first character …",12,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",13,null],[13,"Flags","","A set of flags, e.g., <code>(?is)</code>.",13,null],[13,"Literal","","A single character literal, which includes escape …",13,null],[13,"Dot","","The \\\"any character\\\" class.",13,null],[13,"Assertion","","A single zero-width assertion.",13,null],[13,"Class","","A single character class. This includes all forms of …",13,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular …",13,null],[13,"Group","","A grouped regular expression.",13,null],[13,"Alternation","","An alternation of regular expressions.",13,null],[13,"Concat","","A concatenation of regular expressions.",13,null],[11,"span","","Return the span of this abstract syntax tree.",13,[[],["span",3]]],[11,"is_empty","","Return true if and only if this Ast is empty.",13,[[]]],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",14,null],[12,"asts","","The alternate regular expressions.",14,null],[11,"into_ast","","Return this alternation as an AST.",14,[[],["ast",4]]],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",15,null],[12,"asts","","The concatenation regular expressions.",15,null],[11,"into_ast","","Return this concatenation as an AST.",15,[[],["ast",4]]],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",16,null],[12,"kind","","The kind of this literal.",16,null],[12,"c","","The Unicode scalar value corresponding to this literal.",16,null],[11,"byte","","If this literal was written as a <code>\\\\x</code> hex escape, then this …",16,[[],["option",4]]],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.",17,null],[13,"Punctuation","","The literal is written as an escape because it is …",17,null],[13,"Octal","","The literal is written as an octal escape, e.g., <code>\\\\141</code>.",17,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number …",17,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed …",17,null],[13,"Special","","The literal is written as a specially recognized escape, …",17,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).",18,null],[13,"FormFeed","","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).",18,null],[13,"Tab","","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).",18,null],[13,"LineFeed","","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).",18,null],[13,"CarriageReturn","","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).",18,null],[13,"VerticalTab","","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).",18,null],[13,"Space","","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …",18,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A <code>\\\\x</code> prefix. When used without brackets, this form is …",19,null],[13,"UnicodeShort","","A <code>\\\\u</code> prefix. When used without brackets, this form is …",19,null],[13,"UnicodeLong","","A <code>\\\\U</code> prefix. When used without brackets, this form is …",19,null],[11,"digits","","The number of digits that must be used with this literal …",19,[[]]],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.",20,null],[13,"Perl","","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.",20,null],[13,"Bracketed","","A bracketed character class set, which may contain zero …",20,null],[11,"span","","Return the span of this character class.",20,[[],["span",3]]],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",21,null],[12,"kind","","The kind of Perl class.",21,null],[12,"negated","","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …",21,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",22,null],[13,"Space","","Whitespace.",22,null],[13,"Word","","Word characters.",22,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",23,null],[12,"kind","","The kind of ASCII class.",23,null],[12,"negated","","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …",23,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","<code>[0-9A-Za-z]</code>",24,null],[13,"Alpha","","<code>[A-Za-z]</code>",24,null],[13,"Ascii","","<code>[\\\\x00-\\\\x7F]</code>",24,null],[13,"Blank","","<code>[ \\\\t]</code>",24,null],[13,"Cntrl","","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>",24,null],[13,"Digit","","<code>[0-9]</code>",24,null],[13,"Graph","","<code>[!-~]</code>",24,null],[13,"Lower","","<code>[a-z]</code>",24,null],[13,"Print","","<code>[ -~]</code>",24,null],[13,"Punct","","<code>[!-/:-@\\\\[-</code>{-~]`",24,null],[13,"Space","","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>",24,null],[13,"Upper","","<code>[A-Z]</code>",24,null],[13,"Word","","<code>[0-9A-Za-z_]</code>",24,null],[13,"Xdigit","","<code>[0-9A-Fa-f]</code>",24,null],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the …",24,[[],[["classasciikind",4],["option",4]]]],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",25,null],[12,"negated","","Whether this class is negated or not.",25,null],[12,"kind","","The kind of Unicode class.",25,null],[11,"is_negated","","Returns true if this class has been negated.",25,[[]]],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., <code>\\\\pN</code>.",26,null],[13,"Named","","A binary property, general category or script. The string …",26,null],[13,"NamedValue","","A property name and an associated value.",26,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate <code>name</code> with <code>value</code>.",27,null],[12,"name","","The property name (which may be empty).",27,null],[12,"value","","The property value (which may be empty).",27,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>…",28,null],[13,"Colon","","A property set to a specific value using a colon, e.g., …",28,null],[13,"NotEqual","","A property that isn\'t a particular value, e.g., …",28,null],[11,"is_equal","","Whether the op is an equality op or not.",28,[[]]],[3,"ClassBracketed","","A bracketed character class, e.g., <code>[a-z0-9]</code>.",null,null],[12,"span","","The span of this class.",29,null],[12,"negated","","Whether this class is negated or not. e.g., <code>[a]</code> is not …",29,null],[12,"kind","","The type of this set. A set is either a normal union of …",29,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested …",30,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",30,null],[11,"union","","Build a set from a union.",30,[[["classsetunion",3]],["classset",4]]],[11,"span","","Return the span of this character class set.",30,[[],["span",3]]],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",31,null],[13,"Literal","","A single literal.",31,null],[13,"Range","","A range between two literals.",31,null],[13,"Ascii","","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.",31,null],[13,"Unicode","","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.",31,null],[13,"Perl","","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.",31,null],[13,"Bracketed","","A bracketed character class set, which may contain zero …",31,null],[13,"Union","","A union of items.",31,null],[11,"span","","Return the span of this character class set item.",31,[[],["span",3]]],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",32,null],[12,"start","","The start of this range.",32,null],[12,"end","","The end of this range.",32,null],[11,"is_valid","","Returns true if and only if this character class range is …",32,[[]]],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the <code>a-z0-9</code> …",33,null],[12,"items","","The sequence of items that make up this union.",33,null],[11,"push","","Push a new item in this union.",33,[[["classsetitem",4]]]],[11,"into_item","","Return this union as a character class set item.",33,[[],["classsetitem",4]]],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …",34,null],[12,"kind","","The type of this set operation.",34,null],[12,"lhs","","The left hand side of the operation.",34,null],[12,"rhs","","The right hand side of the operation.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., <code>\\\\pN&&[a-z]</code>.",35,null],[13,"Difference","","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric …",35,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",36,null],[12,"kind","","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.",36,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","<code>^</code>",37,null],[13,"EndLine","","<code>$</code>",37,null],[13,"StartText","","<code>\\\\A</code>",37,null],[13,"EndText","","<code>\\\\z</code>",37,null],[13,"WordBoundary","","<code>\\\\b</code>",37,null],[13,"NotWordBoundary","","<code>\\\\B</code>",37,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",38,null],[12,"op","","The actual operation.",38,null],[12,"greedy","","Whether this operation was applied greedily or not.",38,null],[12,"ast","","The regular expression under repetition.",38,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like <code>+</code>, <code>*?</code>…",39,null],[12,"kind","","The type of operation.",39,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","<code>?</code>",40,null],[13,"ZeroOrMore","","<code>*</code>",40,null],[13,"OneOrMore","","<code>+</code>",40,null],[13,"Range","","<code>{m,n}</code>",40,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","<code>{m}</code>",41,null],[13,"AtLeast","","<code>{m,}</code>",41,null],[13,"Bounded","","<code>{m,n}</code>",41,null],[11,"is_valid","","Returns true if and only if this repetition range is …",41,[[]]],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",42,null],[12,"kind","","The kind of this group.",42,null],[12,"ast","","The regular expression in this group.",42,null],[11,"flags","","If this group is non-capturing, then this returns the …",42,[[],[["option",4],["flags",3]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",42,[[]]],[11,"capture_index","","Returns the capture index of this group, if this is a …",42,[[],["option",4]]],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","<code>(a)</code>",43,null],[13,"CaptureName","","<code>(?P<name>a)</code>",43,null],[13,"NonCapturing","","<code>(?:a)</code> and <code>(?i:a)</code>",43,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",44,null],[12,"name","","The capture name.",44,null],[12,"index","","The capture index.",44,null],[3,"SetFlags","","A group of flags that is not applied to a particular …",null,null],[12,"span","","The span of these flags, including the grouping …",45,null],[12,"flags","","The actual sequence of flags.",45,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",46,null],[12,"items","","A sequence of flag items. Each item is either a flag or a …",46,null],[11,"add_item","","Add the given item to this sequence of flags.",46,[[["flagsitem",3]],["option",4]]],[11,"flag_state","","Returns the state of the given flag in this set.",46,[[["flag",4]],["option",4]]],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",47,null],[12,"kind","","The kind of this item.",47,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in …",48,null],[13,"Flag","","A single flag in a group.",48,null],[11,"is_negation","","Returns true if and only if this item is a negation …",48,[[]]],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","<code>i</code>",49,null],[13,"MultiLine","","<code>m</code>",49,null],[13,"DotMatchesNewLine","","<code>s</code>",49,null],[13,"SwapGreed","","<code>U</code>",49,null],[13,"Unicode","","<code>u</code>",49,null],[13,"IgnoreWhitespace","","<code>x</code>",49,null],[0,"hir","regex_syntax","Defines a high-level intermediate representation for …",null,null],[0,"literal","regex_syntax::hir","Provides routines for extracting literal prefixes and …",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular …",null,null],[3,"Literal","","A single member of a set of literals extracted from a …",null,null],[11,"empty","","Returns a new empty set of literals using default limits.",50,[[],["literals",3]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the …",50,[[["hir",3]],["literals",3]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the …",50,[[["hir",3]],["literals",3]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",50,[[]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",50,[[],["literals",3]]],[11,"limit_class","","Get the character class size limit for this set.",50,[[]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",50,[[],["literals",3]]],[11,"literals","","Returns the set of literals as a slice. Its order is …",50,[[]]],[11,"min_len","","Returns the length of the smallest literal.",50,[[],["option",4]]],[11,"all_complete","","Returns true if all members in this set are complete.",50,[[]]],[11,"any_complete","","Returns true if any member in this set is complete.",50,[[]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",50,[[]]],[11,"is_empty","","Returns true if this set is empty or if all of its …",50,[[]]],[11,"to_empty","","Returns a new empty set of literals using this set\'s …",50,[[],["literals",3]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this …",50,[[]]],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this …",50,[[]]],[11,"trim_suffix","","Returns a new set of literals with the given number of …",50,[[],[["option",4],["literals",3]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals …",50,[[],["literals",3]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals …",50,[[],["literals",3]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",50,[[["hir",3]]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",50,[[["hir",3]]]],[11,"union","","Unions this set with another set.",50,[[["literals",3]]]],[11,"cross_product","","Extends this set with another set.",50,[[["literals",3]]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",50,[[]]],[11,"add","","Adds the given literal to this set.",50,[[["literal",3]]]],[11,"add_char_class","","Extends each literal in this set with the character class …",50,[[["classunicode",3]]]],[11,"add_byte_class","","Extends each literal in this set with the byte class …",50,[[["classbytes",3]]]],[11,"cut","","Cuts every member of this set. When a member is cut, it …",50,[[]]],[11,"reverse","","Reverses all members in place.",50,[[]]],[11,"clear","","Clears this set of all members.",50,[[]]],[11,"new","","Returns a new complete literal with the bytes given.",51,[[["vec",3]],["literal",3]]],[11,"empty","","Returns a new complete empty literal.",51,[[],["literal",3]]],[11,"is_cut","","Returns true if this literal was \\\"cut.\\\"",51,[[]]],[11,"cut","","Cuts this literal.",51,[[]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for <code>Hir</code>.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression\'s high-level …",null,null],[11,"new","","Create a new printer.",52,[[],["printer",3]]],[11,"print","","Print the given <code>Ast</code> to the given writer. The writer must …",52,[[["hir",3],["write",8]],["result",6]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[11,"new","","Create a new translator builder with a default c …",53,[[],["translatorbuilder",3]]],[11,"build","","Build a translator using the current configuration.",53,[[],["translator",3]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of …",53,[[],["translatorbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (<code>i</code>) by …",53,[[],["translatorbuilder",3]]],[11,"multi_line","","Enable or disable the multi-line matching flag (<code>m</code>) by …",53,[[],["translatorbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag (<code>s</code>…",53,[[],["translatorbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag (<code>U</code>) by default.",53,[[],["translatorbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",53,[[],["translatorbuilder",3]]],[3,"Translator","","A translator maps abstract syntax to a high level …",null,null],[11,"new","","Create a new translator using the default configuration.",54,[[],["translator",3]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a …",54,[[["ast",4]],[["result",4],["hir",3],["error",3]]]],[5,"visit","regex_syntax::hir","Executes an implementation of <code>Visitor</code> in constant stack …",null,[[["hir",3],["visitor",8]],["result",4]]],[8,"Visitor","","A trait for visiting the high-level IR (HIR) in depth …",null,null],[16,"Output","","The result of visiting an HIR.",55,null],[16,"Err","","An error that visiting an HIR might return.",55,null],[10,"finish","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …",55,[[],["result",4]]],[11,"start","","This method is called before beginning traversal of the …",55,[[]]],[11,"visit_pre","","This method is called on an <code>Hir</code> before descending into …",55,[[["hir",3]],["result",4]]],[11,"visit_post","","This method is called on an <code>Hir</code> after descending all of …",55,[[["hir",3]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",55,[[],["result",4]]],[3,"CaseFoldError","","An error that occurs when Unicode-aware simple case …",null,null],[3,"Error","","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.",null,null],[11,"kind","","Return the type of this error.",56,[[],["errorkind",4]]],[11,"pattern","","The original pattern string in which this error occurred.",56,[[]]],[11,"span","","Return the span at which this error occurred.",56,[[],["span",3]]],[4,"ErrorKind","","The type of an error that occurred while building an <code>Hir</code>.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when …",57,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could …",57,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name …",57,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value …",57,null],[13,"UnicodePerlClassNotFound","","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>…",57,null],[13,"UnicodeCaseUnavailable","","This occurs when the Unicode simple case mapping tables …",57,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a …",57,null],[3,"Hir","","A high-level intermediate representation (HIR) for a …",null,null],[4,"HirKind","","The kind of an arbitrary <code>Hir</code> expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, …",58,null],[13,"Literal","","A single literal character that matches exactly this …",58,null],[13,"Class","","A single character class that matches any of the …",58,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has …",58,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be …",58,null],[13,"Repetition","","A repetition operation applied to a child expression.",58,null],[13,"Group","","A possibly capturing group, which contains a child …",58,null],[13,"Concat","","A concatenation of expressions. A concatenation always …",58,null],[13,"Alternation","","An alternation of expressions. An alternation always has …",58,null],[11,"kind","","Returns a reference to the underlying HIR kind.",59,[[],["hirkind",4]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its …",59,[[],["hirkind",4]]],[11,"empty","","Returns an empty HIR expression.",59,[[],["hir",3]]],[11,"literal","","Creates a literal HIR expression.",59,[[["literal",4]],["hir",3]]],[11,"class","","Creates a class HIR expression.",59,[[["class",4]],["hir",3]]],[11,"anchor","","Creates an anchor assertion HIR expression.",59,[[["anchor",4]],["hir",3]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",59,[[["wordboundary",4]],["hir",3]]],[11,"repetition","","Creates a repetition HIR expression.",59,[[["repetition",3]],["hir",3]]],[11,"group","","Creates a group HIR expression.",59,[[["group",3]],["hir",3]]],[11,"concat","","Returns the concatenation of the given expressions.",59,[[["hir",3],["vec",3]],["hir",3]]],[11,"alternation","","Returns the alternation of the given expressions.",59,[[["hir",3],["vec",3]],["hir",3]]],[11,"dot","","Build an HIR expression for <code>.</code>.",59,[[],["hir",3]]],[11,"any","","Build an HIR expression for <code>(?s).</code>.",59,[[],["hir",3]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match …",59,[[]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is …",59,[[]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_line_anchored_start","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_line_anchored_end","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any …",59,[[]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any …",59,[[]]],[11,"is_match_empty","","Return true if and only if the empty string is part of …",59,[[]]],[11,"is_literal","","Return true if and only if this HIR is a simple literal. …",59,[[]]],[11,"is_alternation_literal","","Return true if and only if this HIR is either a simple …",59,[[]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular …",58,[[]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including …",58,[[]]],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",60,null],[13,"Byte","","A single character represented by an arbitrary byte.",60,null],[11,"is_unicode","","Returns true if and only if this literal corresponds to a …",60,[[]]],[4,"Class","","The high-level intermediate representation of a character …",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",61,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one …",61,null],[11,"case_fold_simple","","Apply Unicode simple case folding to this character …",61,[[]]],[11,"negate","","Negate this character class in place.",61,[[]]],[11,"is_always_utf8","","Returns true if and only if this character class will …",61,[[]]],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[11,"new","","Create a new class from a sequence of ranges.",62,[[],["classunicode",3]]],[11,"empty","","Create a new class with no ranges.",62,[[],["classunicode",3]]],[11,"push","","Add a new range to this set.",62,[[["classunicoderange",3]]]],[11,"iter","","Return an iterator over all ranges in this class.",62,[[],["classunicodeiter",3]]],[11,"ranges","","Return the underlying ranges as a slice.",62,[[]]],[11,"case_fold_simple","","Expand this character class such that it contains all …",62,[[]]],[11,"try_case_fold_simple","","Expand this character class such that it contains all …",62,[[],[["result",4],["casefolderror",3]]]],[11,"negate","","Negate this character class.",62,[[]]],[11,"union","","Union this character class with the given character …",62,[[["classunicode",3]]]],[11,"intersect","","Intersect this character class with the given character …",62,[[["classunicode",3]]]],[11,"difference","","Subtract the given character class from this character …",62,[[["classunicode",3]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character …",62,[[["classunicode",3]]]],[11,"is_all_ascii","","Returns true if and only if this character class will …",62,[[]]],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode …",null,null],[11,"new","","Create a new Unicode scalar value range for a character …",63,[[],["classunicoderange",3]]],[11,"start","","Return the start of this range.",63,[[]]],[11,"end","","Return the end of this range.",63,[[]]],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where …",null,null],[11,"new","","Create a new class from a sequence of ranges.",64,[[],["classbytes",3]]],[11,"empty","","Create a new class with no ranges.",64,[[],["classbytes",3]]],[11,"push","","Add a new range to this set.",64,[[["classbytesrange",3]]]],[11,"iter","","Return an iterator over all ranges in this class.",64,[[],["classbytesiter",3]]],[11,"ranges","","Return the underlying ranges as a slice.",64,[[]]],[11,"case_fold_simple","","Expand this character class such that it contains all …",64,[[]]],[11,"negate","","Negate this byte class.",64,[[]]],[11,"union","","Union this byte class with the given byte class, in place.",64,[[["classbytes",3]]]],[11,"intersect","","Intersect this byte class with the given byte class, in …",64,[[["classbytes",3]]]],[11,"difference","","Subtract the given byte class from this byte class, in …",64,[[["classbytes",3]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte …",64,[[["classbytes",3]]]],[11,"is_all_ascii","","Returns true if and only if this character class will …",64,[[]]],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary …",null,null],[11,"new","","Create a new byte range for a character class.",65,[[],["classbytesrange",3]]],[11,"start","","Return the start of this range.",65,[[]]],[11,"end","","Return the end of this range.",65,[[]]],[4,"Anchor","","The high-level intermediate representation for an anchor …",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. …",66,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, …",66,null],[13,"StartText","","Match the beginning of text. Specifically, this matches …",66,null],[13,"EndText","","Match the end of text. Specifically, this matches at the …",66,null],[4,"WordBoundary","","The high-level intermediate representation for a …",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this …",67,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",67,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches …",67,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",67,null],[11,"is_negated","","Returns true if and only if this word boundary assertion …",67,[[]]],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then …",68,null],[12,"hir","","The expression inside the capturing group, which may be …",68,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",69,null],[13,"CaptureName","","A named capturing group.",69,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",70,null],[12,"index","","The capture index of the group.",70,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",69,null],[3,"Repetition","","The high-level intermediate representation of a …",null,null],[12,"kind","","The kind of this repetition operator.",71,null],[12,"greedy","","Whether this repetition operator is greedy or not. A …",71,null],[12,"hir","","The expression being repeated.",71,null],[11,"is_match_empty","","Returns true if and only if this repetition operator …",71,[[]]],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",72,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",72,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",72,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",72,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",73,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",73,null],[13,"Bounded","","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …",73,null],[0,"utf8","regex_syntax","Converts ranges of Unicode scalar values to equivalent …",null,null],[4,"Utf8Sequence","regex_syntax::utf8","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",74,null],[13,"Two","","Two successive byte ranges.",74,null],[13,"Three","","Three successive byte ranges.",74,null],[13,"Four","","Four successive byte ranges.",74,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",74,[[]]],[11,"len","","Returns the number of byte ranges in this sequence.",74,[[]]],[11,"reverse","","Reverses the ranges in this sequence.",74,[[]]],[11,"matches","","Returns true if and only if a prefix of <code>bytes</code> matches …",74,[[]]],[3,"Utf8Range","","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",75,null],[12,"end","","End of byte range (inclusive).",75,null],[11,"matches","","Returns true if and only if the given byte is in this …",75,[[]]],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the …",76,[[]]],[4,"Error","regex_syntax","This error type encompasses any error that can be …",null,null],[13,"Parse","","An error that occurred while translating concrete syntax …",77,null],[13,"Translate","","An error that occurred while translating abstract syntax …",77,null],[6,"Result","","A type alias for dealing with errors returned by this …",null,null],[3,"Parser","","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[3,"UnicodeWordError","","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …",null,null],[5,"escape","","Escapes all regular expression meta characters in <code>text</code>.",null,[[],["string",3]]],[5,"escape_into","","Escapes all meta characters in <code>text</code> and writes the result …",null,[[["string",3]]]],[5,"is_meta_character","","Returns true if the give character has significance in a …",null,[[]]],[5,"is_word_character","","Returns true if and only if the given character is a …",null,[[]]],[5,"try_is_word_character","","Returns true if and only if the given character is a …",null,[[],[["unicodeworderror",3],["result",4]]]],[5,"is_word_byte","","Returns true if and only if the given character is an …",null,[[]]],[11,"from","regex_syntax::ast::parse","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","regex_syntax::ast::print","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","regex_syntax::ast","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","regex_syntax","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"to_string","","",77,[[],["string",3]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","regex_syntax::hir::literal","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","regex_syntax::hir::print","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","regex_syntax::hir::translate","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","regex_syntax::hir","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_string","","",78,[[],["string",3]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"to_string","","",59,[[],["string",3]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"into_iter","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","regex_syntax","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_string","","",83,[[],["string",3]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","regex_syntax::utf8","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"drop","regex_syntax::ast","",13,[[]]],[11,"drop","","",30,[[]]],[11,"drop","regex_syntax::hir","",59,[[]]],[11,"as_ref","regex_syntax::hir::literal","",51,[[]]],[11,"from","regex_syntax","",77,[[["error",3]],["error",4]]],[11,"from","","",77,[[["error",3]],["error",4]]],[11,"next","regex_syntax::hir","",79,[[],[["classunicoderange",3],["option",4]]]],[11,"next","","",80,[[],[["option",4],["classbytesrange",3]]]],[11,"next","regex_syntax::utf8","",76,[[],["option",4]]],[11,"clone","regex_syntax::ast::parse","",0,[[],["parserbuilder",3]]],[11,"clone","","",1,[[],["parser",3]]],[11,"clone","regex_syntax::ast","",4,[[],["error",3]]],[11,"clone","","",5,[[],["errorkind",4]]],[11,"clone","","",9,[[],["span",3]]],[11,"clone","","",10,[[],["position",3]]],[11,"clone","","",11,[[],["withcomments",3]]],[11,"clone","","",12,[[],["comment",3]]],[11,"clone","","",13,[[],["ast",4]]],[11,"clone","","",14,[[],["alternation",3]]],[11,"clone","","",15,[[],["concat",3]]],[11,"clone","","",16,[[],["literal",3]]],[11,"clone","","",17,[[],["literalkind",4]]],[11,"clone","","",18,[[],["specialliteralkind",4]]],[11,"clone","","",19,[[],["hexliteralkind",4]]],[11,"clone","","",20,[[],["class",4]]],[11,"clone","","",21,[[],["classperl",3]]],[11,"clone","","",22,[[],["classperlkind",4]]],[11,"clone","","",23,[[],["classascii",3]]],[11,"clone","","",24,[[],["classasciikind",4]]],[11,"clone","","",25,[[],["classunicode",3]]],[11,"clone","","",26,[[],["classunicodekind",4]]],[11,"clone","","",28,[[],["classunicodeopkind",4]]],[11,"clone","","",29,[[],["classbracketed",3]]],[11,"clone","","",30,[[],["classset",4]]],[11,"clone","","",31,[[],["classsetitem",4]]],[11,"clone","","",32,[[],["classsetrange",3]]],[11,"clone","","",33,[[],["classsetunion",3]]],[11,"clone","","",34,[[],["classsetbinaryop",3]]],[11,"clone","","",35,[[],["classsetbinaryopkind",4]]],[11,"clone","","",36,[[],["assertion",3]]],[11,"clone","","",37,[[],["assertionkind",4]]],[11,"clone","","",38,[[],["repetition",3]]],[11,"clone","","",39,[[],["repetitionop",3]]],[11,"clone","","",40,[[],["repetitionkind",4]]],[11,"clone","","",41,[[],["repetitionrange",4]]],[11,"clone","","",42,[[],["group",3]]],[11,"clone","","",43,[[],["groupkind",4]]],[11,"clone","","",44,[[],["capturename",3]]],[11,"clone","","",45,[[],["setflags",3]]],[11,"clone","","",46,[[],["flags",3]]],[11,"clone","","",47,[[],["flagsitem",3]]],[11,"clone","","",48,[[],["flagsitemkind",4]]],[11,"clone","","",49,[[],["flag",4]]],[11,"clone","regex_syntax","",77,[[],["error",4]]],[11,"clone","regex_syntax::hir::literal","",50,[[],["literals",3]]],[11,"clone","","",51,[[],["literal",3]]],[11,"clone","regex_syntax::hir::translate","",53,[[],["translatorbuilder",3]]],[11,"clone","","",54,[[],["translator",3]]],[11,"clone","regex_syntax::hir","",56,[[],["error",3]]],[11,"clone","","",57,[[],["errorkind",4]]],[11,"clone","","",59,[[],["hir",3]]],[11,"clone","","",58,[[],["hirkind",4]]],[11,"clone","","",60,[[],["literal",4]]],[11,"clone","","",61,[[],["class",4]]],[11,"clone","","",62,[[],["classunicode",3]]],[11,"clone","","",63,[[],["classunicoderange",3]]],[11,"clone","","",64,[[],["classbytes",3]]],[11,"clone","","",65,[[],["classbytesrange",3]]],[11,"clone","","",66,[[],["anchor",4]]],[11,"clone","","",67,[[],["wordboundary",4]]],[11,"clone","","",68,[[],["group",3]]],[11,"clone","","",69,[[],["groupkind",4]]],[11,"clone","","",71,[[],["repetition",3]]],[11,"clone","","",72,[[],["repetitionkind",4]]],[11,"clone","","",73,[[],["repetitionrange",4]]],[11,"clone","regex_syntax","",81,[[],["parserbuilder",3]]],[11,"clone","","",82,[[],["parser",3]]],[11,"clone","regex_syntax::utf8","",74,[[],["utf8sequence",4]]],[11,"clone","","",75,[[],["utf8range",3]]],[11,"default","regex_syntax::ast::parse","",0,[[],["parserbuilder",3]]],[11,"default","regex_syntax::hir::translate","",53,[[],["translatorbuilder",3]]],[11,"default","regex_syntax::hir","",63,[[],["classunicoderange",3]]],[11,"default","","",65,[[],["classbytesrange",3]]],[11,"default","regex_syntax","",81,[[],["parserbuilder",3]]],[11,"cmp","regex_syntax::ast","",9,[[["span",3]],["ordering",4]]],[11,"cmp","","",10,[[["position",3]],["ordering",4]]],[11,"cmp","regex_syntax::hir::literal","",51,[[["literal",3]],["ordering",4]]],[11,"cmp","regex_syntax::hir","",63,[[["classunicoderange",3]],["ordering",4]]],[11,"cmp","","",65,[[["classbytesrange",3]],["ordering",4]]],[11,"cmp","regex_syntax::utf8","",74,[[["utf8sequence",4]],["ordering",4]]],[11,"cmp","","",75,[[["utf8range",3]],["ordering",4]]],[11,"eq","regex_syntax::ast","",4,[[["error",3]]]],[11,"ne","","",4,[[["error",3]]]],[11,"eq","","",5,[[["errorkind",4]]]],[11,"ne","","",5,[[["errorkind",4]]]],[11,"eq","","",9,[[["span",3]]]],[11,"ne","","",9,[[["span",3]]]],[11,"eq","","",10,[[["position",3]]]],[11,"ne","","",10,[[["position",3]]]],[11,"eq","","",11,[[["withcomments",3]]]],[11,"ne","","",11,[[["withcomments",3]]]],[11,"eq","","",12,[[["comment",3]]]],[11,"ne","","",12,[[["comment",3]]]],[11,"eq","","",13,[[["ast",4]]]],[11,"ne","","",13,[[["ast",4]]]],[11,"eq","","",14,[[["alternation",3]]]],[11,"ne","","",14,[[["alternation",3]]]],[11,"eq","","",15,[[["concat",3]]]],[11,"ne","","",15,[[["concat",3]]]],[11,"eq","","",16,[[["literal",3]]]],[11,"ne","","",16,[[["literal",3]]]],[11,"eq","","",17,[[["literalkind",4]]]],[11,"ne","","",17,[[["literalkind",4]]]],[11,"eq","","",18,[[["specialliteralkind",4]]]],[11,"eq","","",19,[[["hexliteralkind",4]]]],[11,"eq","","",20,[[["class",4]]]],[11,"ne","","",20,[[["class",4]]]],[11,"eq","","",21,[[["classperl",3]]]],[11,"ne","","",21,[[["classperl",3]]]],[11,"eq","","",22,[[["classperlkind",4]]]],[11,"eq","","",23,[[["classascii",3]]]],[11,"ne","","",23,[[["classascii",3]]]],[11,"eq","","",24,[[["classasciikind",4]]]],[11,"eq","","",25,[[["classunicode",3]]]],[11,"ne","","",25,[[["classunicode",3]]]],[11,"eq","","",26,[[["classunicodekind",4]]]],[11,"ne","","",26,[[["classunicodekind",4]]]],[11,"eq","","",28,[[["classunicodeopkind",4]]]],[11,"eq","","",29,[[["classbracketed",3]]]],[11,"ne","","",29,[[["classbracketed",3]]]],[11,"eq","","",30,[[["classset",4]]]],[11,"ne","","",30,[[["classset",4]]]],[11,"eq","","",31,[[["classsetitem",4]]]],[11,"ne","","",31,[[["classsetitem",4]]]],[11,"eq","","",32,[[["classsetrange",3]]]],[11,"ne","","",32,[[["classsetrange",3]]]],[11,"eq","","",33,[[["classsetunion",3]]]],[11,"ne","","",33,[[["classsetunion",3]]]],[11,"eq","","",34,[[["classsetbinaryop",3]]]],[11,"ne","","",34,[[["classsetbinaryop",3]]]],[11,"eq","","",35,[[["classsetbinaryopkind",4]]]],[11,"eq","","",36,[[["assertion",3]]]],[11,"ne","","",36,[[["assertion",3]]]],[11,"eq","","",37,[[["assertionkind",4]]]],[11,"eq","","",38,[[["repetition",3]]]],[11,"ne","","",38,[[["repetition",3]]]],[11,"eq","","",39,[[["repetitionop",3]]]],[11,"ne","","",39,[[["repetitionop",3]]]],[11,"eq","","",40,[[["repetitionkind",4]]]],[11,"ne","","",40,[[["repetitionkind",4]]]],[11,"eq","","",41,[[["repetitionrange",4]]]],[11,"ne","","",41,[[["repetitionrange",4]]]],[11,"eq","","",42,[[["group",3]]]],[11,"ne","","",42,[[["group",3]]]],[11,"eq","","",43,[[["groupkind",4]]]],[11,"ne","","",43,[[["groupkind",4]]]],[11,"eq","","",44,[[["capturename",3]]]],[11,"ne","","",44,[[["capturename",3]]]],[11,"eq","","",45,[[["setflags",3]]]],[11,"ne","","",45,[[["setflags",3]]]],[11,"eq","","",46,[[["flags",3]]]],[11,"ne","","",46,[[["flags",3]]]],[11,"eq","","",47,[[["flagsitem",3]]]],[11,"ne","","",47,[[["flagsitem",3]]]],[11,"eq","","",48,[[["flagsitemkind",4]]]],[11,"ne","","",48,[[["flagsitemkind",4]]]],[11,"eq","","",49,[[["flag",4]]]],[11,"eq","regex_syntax","",77,[[["error",4]]]],[11,"ne","","",77,[[["error",4]]]],[11,"eq","regex_syntax::hir::literal","",50,[[["literals",3]]]],[11,"ne","","",50,[[["literals",3]]]],[11,"eq","","",51,[[["literal",3]]]],[11,"eq","regex_syntax::hir","",56,[[["error",3]]]],[11,"ne","","",56,[[["error",3]]]],[11,"eq","","",57,[[["errorkind",4]]]],[11,"eq","","",59,[[["hir",3]]]],[11,"ne","","",59,[[["hir",3]]]],[11,"eq","","",58,[[["hirkind",4]]]],[11,"ne","","",58,[[["hirkind",4]]]],[11,"eq","","",60,[[["literal",4]]]],[11,"ne","","",60,[[["literal",4]]]],[11,"eq","","",61,[[["class",4]]]],[11,"ne","","",61,[[["class",4]]]],[11,"eq","","",62,[[["classunicode",3]]]],[11,"ne","","",62,[[["classunicode",3]]]],[11,"eq","","",63,[[["classunicoderange",3]]]],[11,"ne","","",63,[[["classunicoderange",3]]]],[11,"eq","","",64,[[["classbytes",3]]]],[11,"ne","","",64,[[["classbytes",3]]]],[11,"eq","","",65,[[["classbytesrange",3]]]],[11,"ne","","",65,[[["classbytesrange",3]]]],[11,"eq","","",66,[[["anchor",4]]]],[11,"eq","","",67,[[["wordboundary",4]]]],[11,"eq","","",68,[[["group",3]]]],[11,"ne","","",68,[[["group",3]]]],[11,"eq","","",69,[[["groupkind",4]]]],[11,"ne","","",69,[[["groupkind",4]]]],[11,"eq","","",71,[[["repetition",3]]]],[11,"ne","","",71,[[["repetition",3]]]],[11,"eq","","",72,[[["repetitionkind",4]]]],[11,"ne","","",72,[[["repetitionkind",4]]]],[11,"eq","","",73,[[["repetitionrange",4]]]],[11,"ne","","",73,[[["repetitionrange",4]]]],[11,"eq","regex_syntax::utf8","",74,[[["utf8sequence",4]]]],[11,"ne","","",74,[[["utf8sequence",4]]]],[11,"eq","","",75,[[["utf8range",3]]]],[11,"ne","","",75,[[["utf8range",3]]]],[11,"partial_cmp","regex_syntax::ast","",9,[[["span",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[["position",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","regex_syntax::hir::literal","",51,[[["literal",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","regex_syntax::hir","",63,[[["classunicoderange",3]],[["option",4],["ordering",4]]]],[11,"lt","","",63,[[["classunicoderange",3]]]],[11,"le","","",63,[[["classunicoderange",3]]]],[11,"gt","","",63,[[["classunicoderange",3]]]],[11,"ge","","",63,[[["classunicoderange",3]]]],[11,"partial_cmp","","",65,[[["classbytesrange",3]],[["option",4],["ordering",4]]]],[11,"lt","","",65,[[["classbytesrange",3]]]],[11,"le","","",65,[[["classbytesrange",3]]]],[11,"gt","","",65,[[["classbytesrange",3]]]],[11,"ge","","",65,[[["classbytesrange",3]]]],[11,"partial_cmp","regex_syntax::utf8","",74,[[["utf8sequence",4]],[["option",4],["ordering",4]]]],[11,"lt","","",74,[[["utf8sequence",4]]]],[11,"le","","",74,[[["utf8sequence",4]]]],[11,"gt","","",74,[[["utf8sequence",4]]]],[11,"ge","","",74,[[["utf8sequence",4]]]],[11,"partial_cmp","","",75,[[["utf8range",3]],[["option",4],["ordering",4]]]],[11,"lt","","",75,[[["utf8range",3]]]],[11,"le","","",75,[[["utf8range",3]]]],[11,"gt","","",75,[[["utf8range",3]]]],[11,"ge","","",75,[[["utf8range",3]]]],[11,"deref","regex_syntax::hir::literal","",51,[[],["vec",3]]],[11,"deref_mut","","",51,[[],["vec",3]]],[11,"fmt","regex_syntax::ast::parse","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast::print","",2,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",77,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::literal","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::print","",52,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::translate","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",78,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",83,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::utf8","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",77,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",83,[[["formatter",3]],["result",6]]],[11,"description","regex_syntax::ast","",4,[[]]],[11,"description","regex_syntax","",77,[[]]],[11,"description","regex_syntax::hir","",56,[[]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the …",3,[[]]],[11,"visit_pre","","This method is called on an <code>Ast</code> before descending into …",3,[[["ast",4]],["result",4]]],[11,"visit_post","","This method is called on an <code>Ast</code> after descending all of …",3,[[["ast",4]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",3,[[],["result",4]]],[11,"visit_class_set_item_pre","","This method is called on every <code>ClassSetItem</code> before …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_item_post","","This method is called on every <code>ClassSetItem</code> after …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_binary_op_pre","","This method is called on every <code>ClassSetBinaryOp</code> before …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_post","","This method is called on every <code>ClassSetBinaryOp</code> after …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the …",55,[[]]],[11,"visit_pre","","This method is called on an <code>Hir</code> before descending into …",55,[[["hir",3]],["result",4]]],[11,"visit_post","","This method is called on an <code>Hir</code> after descending all of …",55,[[["hir",3]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",55,[[],["result",4]]],[11,"new","regex_syntax","Create a new parser builder with a default configuration.",81,[[],["parserbuilder",3]]],[11,"build","","Build a parser from this configuration with the given …",81,[[],["parser",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",81,[[],["parserbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",81,[[],["parserbuilder",3]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of …",81,[[],["parserbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",81,[[],["parserbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",81,[[],["parserbuilder",3]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",81,[[],["parserbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag by …",81,[[],["parserbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag by default.",81,[[],["parserbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",81,[[],["parserbuilder",3]]],[11,"new","","Create a new parser with a default configuration.",82,[[],["parser",3]]],[11,"parse","","Parse the regular expression into a high level …",82,[[],[["hir",3],["result",6]]]]],"p":[[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[4,"Ast"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[3,"ClassPerl"],[4,"ClassPerlKind"],[3,"ClassAscii"],[4,"ClassAsciiKind"],[3,"ClassUnicode"],[4,"ClassUnicodeKind"],[13,"NamedValue"],[4,"ClassUnicodeOpKind"],[3,"ClassBracketed"],[4,"ClassSet"],[4,"ClassSetItem"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[4,"ClassSetBinaryOpKind"],[3,"Assertion"],[4,"AssertionKind"],[3,"Repetition"],[3,"RepetitionOp"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Group"],[4,"GroupKind"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"FlagsItemKind"],[4,"Flag"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[4,"HirKind"],[3,"Hir"],[4,"Literal"],[4,"Class"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[4,"Anchor"],[4,"WordBoundary"],[3,"Group"],[4,"GroupKind"],[13,"CaptureName"],[3,"Repetition"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"],[4,"Error"],[3,"CaseFoldError"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"]]},\
"ryu":{"doc":"github crates-io docs-rs","i":[[0,"raw","ryu","Unsafe functions that mirror the API of the C …",null,null],[5,"format32","ryu::raw","Print f32 to the given buffer and return number of bytes …",null,[[]]],[5,"format64","","Print f64 to the given buffer and return number of bytes …",null,[[]]],[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",null,null],[8,"Float","","A floating point number, f32 or f64, that can be written …",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[]]],[11,"default","","",0,[[]]],[11,"new","","This is a cheap operation; you don\'t need to worry about …",0,[[]]],[11,"format","","Print a floating point number into this buffer and return …",0,[[["float",8]]]],[11,"format_finite","","Print a floating point number into this buffer and return …",0,[[["float",8]]]]],"p":[[3,"Buffer"]]},\
"serde":{"doc":"SerdeSerde is a framework for <em><strong>ser</strong></em>ializing and <em><strong>de</strong></em>…","i":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[0,"value","serde::de","Building blocks for deserializing basic values using the …",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can …",null,null],[3,"UnitDeserializer","","A deserializer holding a <code>()</code>.",null,null],[3,"BoolDeserializer","","A deserializer holding a <code>bool</code>.",null,null],[3,"I8Deserializer","","A deserializer holding an <code>i8</code>.",null,null],[3,"I16Deserializer","","A deserializer holding an <code>i16</code>.",null,null],[3,"I32Deserializer","","A deserializer holding an <code>i32</code>.",null,null],[3,"I64Deserializer","","A deserializer holding an <code>i64</code>.",null,null],[3,"IsizeDeserializer","","A deserializer holding an <code>isize</code>.",null,null],[3,"U8Deserializer","","A deserializer holding a <code>u8</code>.",null,null],[3,"U16Deserializer","","A deserializer holding a <code>u16</code>.",null,null],[3,"U64Deserializer","","A deserializer holding a <code>u64</code>.",null,null],[3,"UsizeDeserializer","","A deserializer holding a <code>usize</code>.",null,null],[3,"F32Deserializer","","A deserializer holding an <code>f32</code>.",null,null],[3,"F64Deserializer","","A deserializer holding an <code>f64</code>.",null,null],[3,"CharDeserializer","","A deserializer holding a <code>char</code>.",null,null],[3,"I128Deserializer","","A deserializer holding an <code>i128</code>.",null,null],[3,"U128Deserializer","","A deserializer holding a <code>u128</code>.",null,null],[3,"U32Deserializer","","A deserializer holding a <code>u32</code>.",null,null],[3,"StrDeserializer","","A deserializer holding a <code>&str</code>.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a <code>&str</code> with a lifetime tied to …",null,null],[11,"new","","Create a new borrowed deserializer from the given string.",0,[[],["borrowedstrdeserializer",3]]],[3,"StringDeserializer","","A deserializer holding a <code>String</code>.",null,null],[3,"CowStrDeserializer","","A deserializer holding a <code>Cow<str></code>.",null,null],[3,"BytesDeserializer","","A deserializer holding a <code>&[u8]</code>. Always calls […",null,null],[11,"new","","Create a new deserializer from the given bytes.",1,[[]]],[3,"BorrowedBytesDeserializer","","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …",null,null],[11,"new","","Create a new borrowed deserializer from the given …",2,[[]]],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[11,"new","","Construct a new <code>SeqDeserializer<I, E></code>.",3,[[]]],[11,"end","","Check for remaining elements after passing a …",3,[[],["result",4]]],[3,"SeqAccessDeserializer","","A deserializer holding a <code>SeqAccess</code>.",null,null],[11,"new","","Construct a new <code>SeqAccessDeserializer<A></code>.",4,[[]]],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[11,"new","","Construct a new <code>MapDeserializer<I, E></code>.",5,[[]]],[11,"end","","Check for remaining elements after passing a …",5,[[],["result",4]]],[3,"MapAccessDeserializer","","A deserializer holding a <code>MapAccess</code>.",null,null],[11,"new","","Construct a new <code>MapAccessDeserializer<A></code>.",6,[[]]],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[8,"Error","","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …",null,null],[10,"custom","","Raised when there is general error when deserializing a …",7,[[]]],[11,"invalid_type","","Raised when a <code>Deserialize</code> receives a type different from …",7,[[["unexpected",4],["expected",8]]]],[11,"invalid_value","","Raised when a <code>Deserialize</code> receives a value of the right …",7,[[["unexpected",4],["expected",8]]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input …",7,[[["expected",8]]]],[11,"unknown_variant","","Raised when a <code>Deserialize</code> enum type received a variant …",7,[[]]],[11,"unknown_field","","Raised when a <code>Deserialize</code> struct type received a field …",7,[[]]],[11,"missing_field","","Raised when a <code>Deserialize</code> struct type expected to receive …",7,[[]]],[11,"duplicate_field","","Raised when a <code>Deserialize</code> struct type received more than …",7,[[]]],[4,"Unexpected","","<code>Unexpected</code> represents an unexpected invocation of any one …",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",8,null],[13,"Unsigned","","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …",8,null],[13,"Signed","","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …",8,null],[13,"Float","","The input contained a floating point <code>f32</code> or <code>f64</code> that was …",8,null],[13,"Char","","The input contained a <code>char</code> that was not expected.",8,null],[13,"Str","","The input contained a <code>&str</code> or <code>String</code> that was not …",8,null],[13,"Bytes","","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …",8,null],[13,"Unit","","The input contained a unit <code>()</code> that was not expected.",8,null],[13,"Option","","The input contained an <code>Option<T></code> that was not expected.",8,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not …",8,null],[13,"Seq","","The input contained a sequence that was not expected.",8,null],[13,"Map","","The input contained a map that was not expected.",8,null],[13,"Enum","","The input contained an enum that was not expected.",8,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",8,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not …",8,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",8,null],[13,"StructVariant","","The input contained a struct variant that was not …",8,null],[13,"Other","","A message stating what uncategorized thing the input …",8,null],[8,"Expected","","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …",null,null],[10,"fmt","","Format an explanation of what data was being expected. …",9,[[["formatter",3]],["result",6]]],[8,"Deserialize","","A <strong>data structure</strong> that can be deserialized from any data …",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",10,[[],["result",4]]],[8,"DeserializeOwned","","A data structure that can be deserialized without …",null,null],[8,"DeserializeSeed","","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …",null,null],[16,"Value","","The type produced by using this seed.",11,null],[10,"deserialize","","Equivalent to the more common <code>Deserialize::deserialize</code> …",11,[[],["result",4]]],[8,"Deserializer","","A <strong>data format</strong> that can deserialize any data structure …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",12,null],[10,"deserialize_any","","Require the <code>Deserializer</code> to figure out how to drive the …",12,[[],["result",4]]],[10,"deserialize_bool","","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.",12,[[],["result",4]]],[10,"deserialize_i8","","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.",12,[[],["result",4]]],[10,"deserialize_i16","","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.",12,[[],["result",4]]],[10,"deserialize_i32","","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.",12,[[],["result",4]]],[10,"deserialize_i64","","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.",12,[[],["result",4]]],[11,"deserialize_i128","","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.",12,[[],["result",4]]],[10,"deserialize_u8","","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.",12,[[],["result",4]]],[10,"deserialize_u16","","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.",12,[[],["result",4]]],[10,"deserialize_u32","","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.",12,[[],["result",4]]],[10,"deserialize_u64","","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.",12,[[],["result",4]]],[11,"deserialize_u128","","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.",12,[[],["result",4]]],[10,"deserialize_f32","","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.",12,[[],["result",4]]],[10,"deserialize_f64","","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.",12,[[],["result",4]]],[10,"deserialize_char","","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.",12,[[],["result",4]]],[10,"deserialize_str","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_string","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_bytes","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_byte_buf","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_option","","Hint that the <code>Deserialize</code> type is expecting an optional …",12,[[],["result",4]]],[10,"deserialize_unit","","Hint that the <code>Deserialize</code> type is expecting a unit value.",12,[[],["result",4]]],[10,"deserialize_unit_struct","","Hint that the <code>Deserialize</code> type is expecting a unit struct …",12,[[],["result",4]]],[10,"deserialize_newtype_struct","","Hint that the <code>Deserialize</code> type is expecting a newtype …",12,[[],["result",4]]],[10,"deserialize_seq","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple_struct","","Hint that the <code>Deserialize</code> type is expecting a tuple …",12,[[],["result",4]]],[10,"deserialize_map","","Hint that the <code>Deserialize</code> type is expecting a map of …",12,[[],["result",4]]],[10,"deserialize_struct","","Hint that the <code>Deserialize</code> type is expecting a struct with …",12,[[],["result",4]]],[10,"deserialize_enum","","Hint that the <code>Deserialize</code> type is expecting an enum value …",12,[[],["result",4]]],[10,"deserialize_identifier","","Hint that the <code>Deserialize</code> type is expecting the name of a …",12,[[],["result",4]]],[10,"deserialize_ignored_any","","Hint that the <code>Deserialize</code> type needs to deserialize a …",12,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Deserialize</code> implementations should …",12,[[]]],[8,"Visitor","","This trait represents a visitor that walks through a …",null,null],[16,"Value","","The value produced by this visitor.",13,null],[10,"expecting","","Format a message stating what data this Visitor expects …",13,[[["formatter",3]],["result",6]]],[11,"visit_bool","","The input contains a boolean.",13,[[],["result",4]]],[11,"visit_i8","","The input contains an <code>i8</code>.",13,[[],["result",4]]],[11,"visit_i16","","The input contains an <code>i16</code>.",13,[[],["result",4]]],[11,"visit_i32","","The input contains an <code>i32</code>.",13,[[],["result",4]]],[11,"visit_i64","","The input contains an <code>i64</code>.",13,[[],["result",4]]],[11,"visit_i128","","The input contains a <code>i128</code>.",13,[[],["result",4]]],[11,"visit_u8","","The input contains a <code>u8</code>.",13,[[],["result",4]]],[11,"visit_u16","","The input contains a <code>u16</code>.",13,[[],["result",4]]],[11,"visit_u32","","The input contains a <code>u32</code>.",13,[[],["result",4]]],[11,"visit_u64","","The input contains a <code>u64</code>.",13,[[],["result",4]]],[11,"visit_u128","","The input contains a <code>u128</code>.",13,[[],["result",4]]],[11,"visit_f32","","The input contains an <code>f32</code>.",13,[[],["result",4]]],[11,"visit_f64","","The input contains an <code>f64</code>.",13,[[],["result",4]]],[11,"visit_char","","The input contains a <code>char</code>.",13,[[],["result",4]]],[11,"visit_str","","The input contains a string. The lifetime of the string …",13,[[],["result",4]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long …",13,[[],["result",4]]],[11,"visit_string","","The input contains a string and ownership of the string …",13,[[["string",3]],["result",4]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte …",13,[[],["result",4]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as …",13,[[],["result",4]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte …",13,[[["vec",3]],["result",4]]],[11,"visit_none","","The input contains an optional that is absent.",13,[[],["result",4]]],[11,"visit_some","","The input contains an optional that is present.",13,[[],["result",4]]],[11,"visit_unit","","The input contains a unit <code>()</code>.",13,[[],["result",4]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",13,[[],["result",4]]],[11,"visit_seq","","The input contains a sequence of elements.",13,[[],["result",4]]],[11,"visit_map","","The input contains a key-value map.",13,[[],["result",4]]],[11,"visit_enum","","The input contains an enum.",13,[[],["result",4]]],[8,"SeqAccess","","Provides a <code>Visitor</code> access to each element of a sequence …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",14,null],[10,"next_element_seed","","This returns <code>Ok(Some(value))</code> for the next value in the …",14,[[],[["result",4],["option",4]]]],[11,"next_element","","This returns <code>Ok(Some(value))</code> for the next value in the …",14,[[],[["result",4],["option",4]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, …",14,[[],["option",4]]],[8,"MapAccess","","Provides a <code>Visitor</code> access to each entry of a map in the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",15,null],[10,"next_key_seed","","This returns <code>Ok(Some(key))</code> for the next key in the map, …",15,[[],[["option",4],["result",4]]]],[10,"next_value_seed","","This returns a <code>Ok(value)</code> for the next value in the map.",15,[[],["result",4]]],[11,"next_entry_seed","","This returns <code>Ok(Some((key, value)))</code> for the next …",15,[[],[["option",4],["result",4]]]],[11,"next_key","","This returns <code>Ok(Some(key))</code> for the next key in the map, …",15,[[],[["option",4],["result",4]]]],[11,"next_value","","This returns a <code>Ok(value)</code> for the next value in the map.",15,[[],["result",4]]],[11,"next_entry","","This returns <code>Ok(Some((key, value)))</code> for the next …",15,[[],[["option",4],["result",4]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if …",15,[[],["option",4]]],[8,"EnumAccess","","Provides a <code>Visitor</code> access to the data of an enum in the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",16,null],[16,"Variant","","The <code>Visitor</code> that will be used to deserialize the content …",16,null],[10,"variant_seed","","<code>variant</code> is called to identify which variant to …",16,[[],["result",4]]],[11,"variant","","<code>variant</code> is called to identify which variant to …",16,[[],["result",4]]],[8,"VariantAccess","","<code>VariantAccess</code> is a visitor that is created by the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",17,null],[10,"unit_variant","","Called when deserializing a variant with no values.",17,[[],["result",4]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",17,[[],["result",4]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",17,[[],["result",4]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",17,[[],["result",4]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",17,[[],["result",4]]],[8,"IntoDeserializer","","Converts an existing value into a <code>Deserializer</code> from which …",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",18,null],[10,"into_deserializer","","Convert this value into a deserializer.",18,[[]]],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a <code>Serializer</code> that does not …",null,null],[8,"Error","","Trait used by <code>Serialize</code> implementations to generically …",null,null],[10,"custom","","Used when a <code>Serialize</code> implementation encounters any error …",19,[[]]],[8,"Serialize","","A <strong>data structure</strong> that can be serialized into any data …",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",20,[[],["result",4]]],[8,"Serializer","","A <strong>data format</strong> that can serialize any data structure …",null,null],[16,"Ok","","The output type produced by this <code>Serializer</code> during …",21,null],[16,"Error","","The error type when some error occurs during …",21,null],[16,"SerializeSeq","","Type returned from <code>serialize_seq</code> for serializing the …",21,null],[16,"SerializeTuple","","Type returned from <code>serialize_tuple</code> for serializing the …",21,null],[16,"SerializeTupleStruct","","Type returned from <code>serialize_tuple_struct</code> for serializing …",21,null],[16,"SerializeTupleVariant","","Type returned from <code>serialize_tuple_variant</code> for …",21,null],[16,"SerializeMap","","Type returned from <code>serialize_map</code> for serializing the …",21,null],[16,"SerializeStruct","","Type returned from <code>serialize_struct</code> for serializing the …",21,null],[16,"SerializeStructVariant","","Type returned from <code>serialize_struct_variant</code> for …",21,null],[10,"serialize_bool","","Serialize a <code>bool</code> value.",21,[[],["result",4]]],[10,"serialize_i8","","Serialize an <code>i8</code> value.",21,[[],["result",4]]],[10,"serialize_i16","","Serialize an <code>i16</code> value.",21,[[],["result",4]]],[10,"serialize_i32","","Serialize an <code>i32</code> value.",21,[[],["result",4]]],[10,"serialize_i64","","Serialize an <code>i64</code> value.",21,[[],["result",4]]],[11,"serialize_i128","","Serialize an <code>i128</code> value.",21,[[],["result",4]]],[10,"serialize_u8","","Serialize a <code>u8</code> value.",21,[[],["result",4]]],[10,"serialize_u16","","Serialize a <code>u16</code> value.",21,[[],["result",4]]],[10,"serialize_u32","","Serialize a <code>u32</code> value.",21,[[],["result",4]]],[10,"serialize_u64","","Serialize a <code>u64</code> value.",21,[[],["result",4]]],[11,"serialize_u128","","Serialize a <code>u128</code> value.",21,[[],["result",4]]],[10,"serialize_f32","","Serialize an <code>f32</code> value.",21,[[],["result",4]]],[10,"serialize_f64","","Serialize an <code>f64</code> value.",21,[[],["result",4]]],[10,"serialize_char","","Serialize a character.",21,[[],["result",4]]],[10,"serialize_str","","Serialize a <code>&str</code>.",21,[[],["result",4]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",21,[[],["result",4]]],[10,"serialize_none","","Serialize a <code>None</code> value.",21,[[],["result",4]]],[10,"serialize_some","","Serialize a <code>Some(T)</code> value.",21,[[],["result",4]]],[10,"serialize_unit","","Serialize a <code>()</code> value.",21,[[],["result",4]]],[10,"serialize_unit_struct","","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…",21,[[],["result",4]]],[10,"serialize_unit_variant","","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.",21,[[],["result",4]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.",21,[[],["result",4]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.",21,[[],["result",4]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call …",21,[[["option",4]],["result",4]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose …",21,[[],["result",4]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like …",21,[[],["result",4]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like <code>E::T</code> in …",21,[[],["result",4]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by …",21,[[["option",4]],["result",4]]],[10,"serialize_struct","","Begin to serialize a struct like …",21,[[],["result",4]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like <code>E::S</code> in …",21,[[],["result",4]]],[11,"collect_seq","","Collect an iterator as a sequence.",21,[[],["result",4]]],[11,"collect_map","","Collect an iterator as a map.",21,[[],["result",4]]],[11,"collect_str","","Serialize a string produced by an implementation of …",21,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Serialize</code> implementations should …",21,[[]]],[8,"SerializeSeq","","Returned from <code>Serializer::serialize_seq</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",22,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",22,null],[10,"serialize_element","","Serialize a sequence element.",22,[[],["result",4]]],[10,"end","","Finish serializing a sequence.",22,[[],["result",4]]],[8,"SerializeTuple","","Returned from <code>Serializer::serialize_tuple</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",23,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",23,null],[10,"serialize_element","","Serialize a tuple element.",23,[[],["result",4]]],[10,"end","","Finish serializing a tuple.",23,[[],["result",4]]],[8,"SerializeTupleStruct","","Returned from <code>Serializer::serialize_tuple_struct</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",24,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",24,null],[10,"serialize_field","","Serialize a tuple struct field.",24,[[],["result",4]]],[10,"end","","Finish serializing a tuple struct.",24,[[],["result",4]]],[8,"SerializeTupleVariant","","Returned from <code>Serializer::serialize_tuple_variant</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",25,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",25,null],[10,"serialize_field","","Serialize a tuple variant field.",25,[[],["result",4]]],[10,"end","","Finish serializing a tuple variant.",25,[[],["result",4]]],[8,"SerializeMap","","Returned from <code>Serializer::serialize_map</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",26,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",26,null],[10,"serialize_key","","Serialize a map key.",26,[[],["result",4]]],[10,"serialize_value","","Serialize a map value.",26,[[],["result",4]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",26,[[],["result",4]]],[10,"end","","Finish serializing a map.",26,[[],["result",4]]],[8,"SerializeStruct","","Returned from <code>Serializer::serialize_struct</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",27,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",27,null],[10,"serialize_field","","Serialize a struct field.",27,[[],["result",4]]],[11,"skip_field","","Indicate that a struct field has been skipped.",27,[[],["result",4]]],[10,"end","","Finish serializing a struct.",27,[[],["result",4]]],[8,"SerializeStructVariant","","Returned from <code>Serializer::serialize_struct_variant</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",28,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",28,null],[10,"serialize_field","","Serialize a struct variant field.",28,[[],["result",4]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",28,[[],["result",4]]],[10,"end","","Finish serializing a struct variant.",28,[[],["result",4]]],[8,"Deserialize","serde","A <strong>data structure</strong> that can be deserialized from any data …",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",10,[[],["result",4]]],[8,"Deserializer","","A <strong>data format</strong> that can deserialize any data structure …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",12,null],[10,"deserialize_any","","Require the <code>Deserializer</code> to figure out how to drive the …",12,[[],["result",4]]],[10,"deserialize_bool","","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.",12,[[],["result",4]]],[10,"deserialize_i8","","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.",12,[[],["result",4]]],[10,"deserialize_i16","","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.",12,[[],["result",4]]],[10,"deserialize_i32","","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.",12,[[],["result",4]]],[10,"deserialize_i64","","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.",12,[[],["result",4]]],[11,"deserialize_i128","","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.",12,[[],["result",4]]],[10,"deserialize_u8","","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.",12,[[],["result",4]]],[10,"deserialize_u16","","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.",12,[[],["result",4]]],[10,"deserialize_u32","","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.",12,[[],["result",4]]],[10,"deserialize_u64","","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.",12,[[],["result",4]]],[11,"deserialize_u128","","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.",12,[[],["result",4]]],[10,"deserialize_f32","","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.",12,[[],["result",4]]],[10,"deserialize_f64","","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.",12,[[],["result",4]]],[10,"deserialize_char","","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.",12,[[],["result",4]]],[10,"deserialize_str","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_string","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_bytes","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_byte_buf","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_option","","Hint that the <code>Deserialize</code> type is expecting an optional …",12,[[],["result",4]]],[10,"deserialize_unit","","Hint that the <code>Deserialize</code> type is expecting a unit value.",12,[[],["result",4]]],[10,"deserialize_unit_struct","","Hint that the <code>Deserialize</code> type is expecting a unit struct …",12,[[],["result",4]]],[10,"deserialize_newtype_struct","","Hint that the <code>Deserialize</code> type is expecting a newtype …",12,[[],["result",4]]],[10,"deserialize_seq","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple_struct","","Hint that the <code>Deserialize</code> type is expecting a tuple …",12,[[],["result",4]]],[10,"deserialize_map","","Hint that the <code>Deserialize</code> type is expecting a map of …",12,[[],["result",4]]],[10,"deserialize_struct","","Hint that the <code>Deserialize</code> type is expecting a struct with …",12,[[],["result",4]]],[10,"deserialize_enum","","Hint that the <code>Deserialize</code> type is expecting an enum value …",12,[[],["result",4]]],[10,"deserialize_identifier","","Hint that the <code>Deserialize</code> type is expecting the name of a …",12,[[],["result",4]]],[10,"deserialize_ignored_any","","Hint that the <code>Deserialize</code> type needs to deserialize a …",12,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Deserialize</code> implementations should …",12,[[]]],[8,"Serialize","","A <strong>data structure</strong> that can be serialized into any data …",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",20,[[],["result",4]]],[8,"Serializer","","A <strong>data format</strong> that can serialize any data structure …",null,null],[16,"Ok","","The output type produced by this <code>Serializer</code> during …",21,null],[16,"Error","","The error type when some error occurs during …",21,null],[16,"SerializeSeq","","Type returned from <code>serialize_seq</code> for serializing the …",21,null],[16,"SerializeTuple","","Type returned from <code>serialize_tuple</code> for serializing the …",21,null],[16,"SerializeTupleStruct","","Type returned from <code>serialize_tuple_struct</code> for serializing …",21,null],[16,"SerializeTupleVariant","","Type returned from <code>serialize_tuple_variant</code> for …",21,null],[16,"SerializeMap","","Type returned from <code>serialize_map</code> for serializing the …",21,null],[16,"SerializeStruct","","Type returned from <code>serialize_struct</code> for serializing the …",21,null],[16,"SerializeStructVariant","","Type returned from <code>serialize_struct_variant</code> for …",21,null],[10,"serialize_bool","","Serialize a <code>bool</code> value.",21,[[],["result",4]]],[10,"serialize_i8","","Serialize an <code>i8</code> value.",21,[[],["result",4]]],[10,"serialize_i16","","Serialize an <code>i16</code> value.",21,[[],["result",4]]],[10,"serialize_i32","","Serialize an <code>i32</code> value.",21,[[],["result",4]]],[10,"serialize_i64","","Serialize an <code>i64</code> value.",21,[[],["result",4]]],[11,"serialize_i128","","Serialize an <code>i128</code> value.",21,[[],["result",4]]],[10,"serialize_u8","","Serialize a <code>u8</code> value.",21,[[],["result",4]]],[10,"serialize_u16","","Serialize a <code>u16</code> value.",21,[[],["result",4]]],[10,"serialize_u32","","Serialize a <code>u32</code> value.",21,[[],["result",4]]],[10,"serialize_u64","","Serialize a <code>u64</code> value.",21,[[],["result",4]]],[11,"serialize_u128","","Serialize a <code>u128</code> value.",21,[[],["result",4]]],[10,"serialize_f32","","Serialize an <code>f32</code> value.",21,[[],["result",4]]],[10,"serialize_f64","","Serialize an <code>f64</code> value.",21,[[],["result",4]]],[10,"serialize_char","","Serialize a character.",21,[[],["result",4]]],[10,"serialize_str","","Serialize a <code>&str</code>.",21,[[],["result",4]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",21,[[],["result",4]]],[10,"serialize_none","","Serialize a <code>None</code> value.",21,[[],["result",4]]],[10,"serialize_some","","Serialize a <code>Some(T)</code> value.",21,[[],["result",4]]],[10,"serialize_unit","","Serialize a <code>()</code> value.",21,[[],["result",4]]],[10,"serialize_unit_struct","","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…",21,[[],["result",4]]],[10,"serialize_unit_variant","","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.",21,[[],["result",4]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.",21,[[],["result",4]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.",21,[[],["result",4]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call …",21,[[["option",4]],["result",4]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose …",21,[[],["result",4]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like …",21,[[],["result",4]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like <code>E::T</code> in …",21,[[],["result",4]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by …",21,[[["option",4]],["result",4]]],[10,"serialize_struct","","Begin to serialize a struct like …",21,[[],["result",4]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like <code>E::S</code> in …",21,[[],["result",4]]],[11,"collect_seq","","Collect an iterator as a sequence.",21,[[],["result",4]]],[11,"collect_map","","Collect an iterator as a map.",21,[[],["result",4]]],[11,"collect_str","","Serialize a string produced by an implementation of …",21,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Serialize</code> implementations should …",21,[[]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the <code>Deserializer</code> part of a …",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is …",null,null],[11,"from","serde::de::value","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"fmt","serde::de","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","serde::ser","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"deserialize","serde::de","",50,[[],[["ignoredany",3],["result",4]]]],[11,"deserialize_bool","serde::de::value","",30,[[],["result",4]]],[11,"deserialize_i8","","",30,[[],["result",4]]],[11,"deserialize_i16","","",30,[[],["result",4]]],[11,"deserialize_i32","","",30,[[],["result",4]]],[11,"deserialize_i64","","",30,[[],["result",4]]],[11,"deserialize_i128","","",30,[[],["result",4]]],[11,"deserialize_u8","","",30,[[],["result",4]]],[11,"deserialize_u16","","",30,[[],["result",4]]],[11,"deserialize_u32","","",30,[[],["result",4]]],[11,"deserialize_u64","","",30,[[],["result",4]]],[11,"deserialize_u128","","",30,[[],["result",4]]],[11,"deserialize_f32","","",30,[[],["result",4]]],[11,"deserialize_f64","","",30,[[],["result",4]]],[11,"deserialize_char","","",30,[[],["result",4]]],[11,"deserialize_str","","",30,[[],["result",4]]],[11,"deserialize_string","","",30,[[],["result",4]]],[11,"deserialize_bytes","","",30,[[],["result",4]]],[11,"deserialize_byte_buf","","",30,[[],["result",4]]],[11,"deserialize_unit","","",30,[[],["result",4]]],[11,"deserialize_unit_struct","","",30,[[],["result",4]]],[11,"deserialize_newtype_struct","","",30,[[],["result",4]]],[11,"deserialize_seq","","",30,[[],["result",4]]],[11,"deserialize_tuple","","",30,[[],["result",4]]],[11,"deserialize_tuple_struct","","",30,[[],["result",4]]],[11,"deserialize_map","","",30,[[],["result",4]]],[11,"deserialize_struct","","",30,[[],["result",4]]],[11,"deserialize_enum","","",30,[[],["result",4]]],[11,"deserialize_identifier","","",30,[[],["result",4]]],[11,"deserialize_ignored_any","","",30,[[],["result",4]]],[11,"deserialize_any","","",30,[[],["result",4]]],[11,"deserialize_option","","",30,[[],["result",4]]],[11,"deserialize_bool","","",31,[[],["result",4]]],[11,"deserialize_i8","","",31,[[],["result",4]]],[11,"deserialize_i16","","",31,[[],["result",4]]],[11,"deserialize_i32","","",31,[[],["result",4]]],[11,"deserialize_i64","","",31,[[],["result",4]]],[11,"deserialize_i128","","",31,[[],["result",4]]],[11,"deserialize_u8","","",31,[[],["result",4]]],[11,"deserialize_u16","","",31,[[],["result",4]]],[11,"deserialize_u32","","",31,[[],["result",4]]],[11,"deserialize_u64","","",31,[[],["result",4]]],[11,"deserialize_u128","","",31,[[],["result",4]]],[11,"deserialize_f32","","",31,[[],["result",4]]],[11,"deserialize_f64","","",31,[[],["result",4]]],[11,"deserialize_char","","",31,[[],["result",4]]],[11,"deserialize_str","","",31,[[],["result",4]]],[11,"deserialize_string","","",31,[[],["result",4]]],[11,"deserialize_bytes","","",31,[[],["result",4]]],[11,"deserialize_byte_buf","","",31,[[],["result",4]]],[11,"deserialize_option","","",31,[[],["result",4]]],[11,"deserialize_unit","","",31,[[],["result",4]]],[11,"deserialize_unit_struct","","",31,[[],["result",4]]],[11,"deserialize_newtype_struct","","",31,[[],["result",4]]],[11,"deserialize_seq","","",31,[[],["result",4]]],[11,"deserialize_tuple","","",31,[[],["result",4]]],[11,"deserialize_tuple_struct","","",31,[[],["result",4]]],[11,"deserialize_map","","",31,[[],["result",4]]],[11,"deserialize_struct","","",31,[[],["result",4]]],[11,"deserialize_enum","","",31,[[],["result",4]]],[11,"deserialize_identifier","","",31,[[],["result",4]]],[11,"deserialize_ignored_any","","",31,[[],["result",4]]],[11,"deserialize_any","","",31,[[],["result",4]]],[11,"deserialize_bool","","",32,[[],["result",4]]],[11,"deserialize_i8","","",32,[[],["result",4]]],[11,"deserialize_i16","","",32,[[],["result",4]]],[11,"deserialize_i32","","",32,[[],["result",4]]],[11,"deserialize_i64","","",32,[[],["result",4]]],[11,"deserialize_i128","","",32,[[],["result",4]]],[11,"deserialize_u8","","",32,[[],["result",4]]],[11,"deserialize_u16","","",32,[[],["result",4]]],[11,"deserialize_u32","","",32,[[],["result",4]]],[11,"deserialize_u64","","",32,[[],["result",4]]],[11,"deserialize_u128","","",32,[[],["result",4]]],[11,"deserialize_f32","","",32,[[],["result",4]]],[11,"deserialize_f64","","",32,[[],["result",4]]],[11,"deserialize_char","","",32,[[],["result",4]]],[11,"deserialize_str","","",32,[[],["result",4]]],[11,"deserialize_string","","",32,[[],["result",4]]],[11,"deserialize_bytes","","",32,[[],["result",4]]],[11,"deserialize_byte_buf","","",32,[[],["result",4]]],[11,"deserialize_option","","",32,[[],["result",4]]],[11,"deserialize_unit","","",32,[[],["result",4]]],[11,"deserialize_unit_struct","","",32,[[],["result",4]]],[11,"deserialize_newtype_struct","","",32,[[],["result",4]]],[11,"deserialize_seq","","",32,[[],["result",4]]],[11,"deserialize_tuple","","",32,[[],["result",4]]],[11,"deserialize_tuple_struct","","",32,[[],["result",4]]],[11,"deserialize_map","","",32,[[],["result",4]]],[11,"deserialize_struct","","",32,[[],["result",4]]],[11,"deserialize_enum","","",32,[[],["result",4]]],[11,"deserialize_identifier","","",32,[[],["result",4]]],[11,"deserialize_ignored_any","","",32,[[],["result",4]]],[11,"deserialize_any","","",32,[[],["result",4]]],[11,"deserialize_bool","","",33,[[],["result",4]]],[11,"deserialize_i8","","",33,[[],["result",4]]],[11,"deserialize_i16","","",33,[[],["result",4]]],[11,"deserialize_i32","","",33,[[],["result",4]]],[11,"deserialize_i64","","",33,[[],["result",4]]],[11,"deserialize_i128","","",33,[[],["result",4]]],[11,"deserialize_u8","","",33,[[],["result",4]]],[11,"deserialize_u16","","",33,[[],["result",4]]],[11,"deserialize_u32","","",33,[[],["result",4]]],[11,"deserialize_u64","","",33,[[],["result",4]]],[11,"deserialize_u128","","",33,[[],["result",4]]],[11,"deserialize_f32","","",33,[[],["result",4]]],[11,"deserialize_f64","","",33,[[],["result",4]]],[11,"deserialize_char","","",33,[[],["result",4]]],[11,"deserialize_str","","",33,[[],["result",4]]],[11,"deserialize_string","","",33,[[],["result",4]]],[11,"deserialize_bytes","","",33,[[],["result",4]]],[11,"deserialize_byte_buf","","",33,[[],["result",4]]],[11,"deserialize_option","","",33,[[],["result",4]]],[11,"deserialize_unit","","",33,[[],["result",4]]],[11,"deserialize_unit_struct","","",33,[[],["result",4]]],[11,"deserialize_newtype_struct","","",33,[[],["result",4]]],[11,"deserialize_seq","","",33,[[],["result",4]]],[11,"deserialize_tuple","","",33,[[],["result",4]]],[11,"deserialize_tuple_struct","","",33,[[],["result",4]]],[11,"deserialize_map","","",33,[[],["result",4]]],[11,"deserialize_struct","","",33,[[],["result",4]]],[11,"deserialize_enum","","",33,[[],["result",4]]],[11,"deserialize_identifier","","",33,[[],["result",4]]],[11,"deserialize_ignored_any","","",33,[[],["result",4]]],[11,"deserialize_any","","",33,[[],["result",4]]],[11,"deserialize_bool","","",34,[[],["result",4]]],[11,"deserialize_i8","","",34,[[],["result",4]]],[11,"deserialize_i16","","",34,[[],["result",4]]],[11,"deserialize_i32","","",34,[[],["result",4]]],[11,"deserialize_i64","","",34,[[],["result",4]]],[11,"deserialize_i128","","",34,[[],["result",4]]],[11,"deserialize_u8","","",34,[[],["result",4]]],[11,"deserialize_u16","","",34,[[],["result",4]]],[11,"deserialize_u32","","",34,[[],["result",4]]],[11,"deserialize_u64","","",34,[[],["result",4]]],[11,"deserialize_u128","","",34,[[],["result",4]]],[11,"deserialize_f32","","",34,[[],["result",4]]],[11,"deserialize_f64","","",34,[[],["result",4]]],[11,"deserialize_char","","",34,[[],["result",4]]],[11,"deserialize_str","","",34,[[],["result",4]]],[11,"deserialize_string","","",34,[[],["result",4]]],[11,"deserialize_bytes","","",34,[[],["result",4]]],[11,"deserialize_byte_buf","","",34,[[],["result",4]]],[11,"deserialize_option","","",34,[[],["result",4]]],[11,"deserialize_unit","","",34,[[],["result",4]]],[11,"deserialize_unit_struct","","",34,[[],["result",4]]],[11,"deserialize_newtype_struct","","",34,[[],["result",4]]],[11,"deserialize_seq","","",34,[[],["result",4]]],[11,"deserialize_tuple","","",34,[[],["result",4]]],[11,"deserialize_tuple_struct","","",34,[[],["result",4]]],[11,"deserialize_map","","",34,[[],["result",4]]],[11,"deserialize_struct","","",34,[[],["result",4]]],[11,"deserialize_enum","","",34,[[],["result",4]]],[11,"deserialize_identifier","","",34,[[],["result",4]]],[11,"deserialize_ignored_any","","",34,[[],["result",4]]],[11,"deserialize_any","","",34,[[],["result",4]]],[11,"deserialize_bool","","",35,[[],["result",4]]],[11,"deserialize_i8","","",35,[[],["result",4]]],[11,"deserialize_i16","","",35,[[],["result",4]]],[11,"deserialize_i32","","",35,[[],["result",4]]],[11,"deserialize_i64","","",35,[[],["result",4]]],[11,"deserialize_i128","","",35,[[],["result",4]]],[11,"deserialize_u8","","",35,[[],["result",4]]],[11,"deserialize_u16","","",35,[[],["result",4]]],[11,"deserialize_u32","","",35,[[],["result",4]]],[11,"deserialize_u64","","",35,[[],["result",4]]],[11,"deserialize_u128","","",35,[[],["result",4]]],[11,"deserialize_f32","","",35,[[],["result",4]]],[11,"deserialize_f64","","",35,[[],["result",4]]],[11,"deserialize_char","","",35,[[],["result",4]]],[11,"deserialize_str","","",35,[[],["result",4]]],[11,"deserialize_string","","",35,[[],["result",4]]],[11,"deserialize_bytes","","",35,[[],["result",4]]],[11,"deserialize_byte_buf","","",35,[[],["result",4]]],[11,"deserialize_option","","",35,[[],["result",4]]],[11,"deserialize_unit","","",35,[[],["result",4]]],[11,"deserialize_unit_struct","","",35,[[],["result",4]]],[11,"deserialize_newtype_struct","","",35,[[],["result",4]]],[11,"deserialize_seq","","",35,[[],["result",4]]],[11,"deserialize_tuple","","",35,[[],["result",4]]],[11,"deserialize_tuple_struct","","",35,[[],["result",4]]],[11,"deserialize_map","","",35,[[],["result",4]]],[11,"deserialize_struct","","",35,[[],["result",4]]],[11,"deserialize_enum","","",35,[[],["result",4]]],[11,"deserialize_identifier","","",35,[[],["result",4]]],[11,"deserialize_ignored_any","","",35,[[],["result",4]]],[11,"deserialize_any","","",35,[[],["result",4]]],[11,"deserialize_bool","","",36,[[],["result",4]]],[11,"deserialize_i8","","",36,[[],["result",4]]],[11,"deserialize_i16","","",36,[[],["result",4]]],[11,"deserialize_i32","","",36,[[],["result",4]]],[11,"deserialize_i64","","",36,[[],["result",4]]],[11,"deserialize_i128","","",36,[[],["result",4]]],[11,"deserialize_u8","","",36,[[],["result",4]]],[11,"deserialize_u16","","",36,[[],["result",4]]],[11,"deserialize_u32","","",36,[[],["result",4]]],[11,"deserialize_u64","","",36,[[],["result",4]]],[11,"deserialize_u128","","",36,[[],["result",4]]],[11,"deserialize_f32","","",36,[[],["result",4]]],[11,"deserialize_f64","","",36,[[],["result",4]]],[11,"deserialize_char","","",36,[[],["result",4]]],[11,"deserialize_str","","",36,[[],["result",4]]],[11,"deserialize_string","","",36,[[],["result",4]]],[11,"deserialize_bytes","","",36,[[],["result",4]]],[11,"deserialize_byte_buf","","",36,[[],["result",4]]],[11,"deserialize_option","","",36,[[],["result",4]]],[11,"deserialize_unit","","",36,[[],["result",4]]],[11,"deserialize_unit_struct","","",36,[[],["result",4]]],[11,"deserialize_newtype_struct","","",36,[[],["result",4]]],[11,"deserialize_seq","","",36,[[],["result",4]]],[11,"deserialize_tuple","","",36,[[],["result",4]]],[11,"deserialize_tuple_struct","","",36,[[],["result",4]]],[11,"deserialize_map","","",36,[[],["result",4]]],[11,"deserialize_struct","","",36,[[],["result",4]]],[11,"deserialize_enum","","",36,[[],["result",4]]],[11,"deserialize_identifier","","",36,[[],["result",4]]],[11,"deserialize_ignored_any","","",36,[[],["result",4]]],[11,"deserialize_any","","",36,[[],["result",4]]],[11,"deserialize_bool","","",37,[[],["result",4]]],[11,"deserialize_i8","","",37,[[],["result",4]]],[11,"deserialize_i16","","",37,[[],["result",4]]],[11,"deserialize_i32","","",37,[[],["result",4]]],[11,"deserialize_i64","","",37,[[],["result",4]]],[11,"deserialize_i128","","",37,[[],["result",4]]],[11,"deserialize_u8","","",37,[[],["result",4]]],[11,"deserialize_u16","","",37,[[],["result",4]]],[11,"deserialize_u32","","",37,[[],["result",4]]],[11,"deserialize_u64","","",37,[[],["result",4]]],[11,"deserialize_u128","","",37,[[],["result",4]]],[11,"deserialize_f32","","",37,[[],["result",4]]],[11,"deserialize_f64","","",37,[[],["result",4]]],[11,"deserialize_char","","",37,[[],["result",4]]],[11,"deserialize_str","","",37,[[],["result",4]]],[11,"deserialize_string","","",37,[[],["result",4]]],[11,"deserialize_bytes","","",37,[[],["result",4]]],[11,"deserialize_byte_buf","","",37,[[],["result",4]]],[11,"deserialize_option","","",37,[[],["result",4]]],[11,"deserialize_unit","","",37,[[],["result",4]]],[11,"deserialize_unit_struct","","",37,[[],["result",4]]],[11,"deserialize_newtype_struct","","",37,[[],["result",4]]],[11,"deserialize_seq","","",37,[[],["result",4]]],[11,"deserialize_tuple","","",37,[[],["result",4]]],[11,"deserialize_tuple_struct","","",37,[[],["result",4]]],[11,"deserialize_map","","",37,[[],["result",4]]],[11,"deserialize_struct","","",37,[[],["result",4]]],[11,"deserialize_enum","","",37,[[],["result",4]]],[11,"deserialize_identifier","","",37,[[],["result",4]]],[11,"deserialize_ignored_any","","",37,[[],["result",4]]],[11,"deserialize_any","","",37,[[],["result",4]]],[11,"deserialize_bool","","",38,[[],["result",4]]],[11,"deserialize_i8","","",38,[[],["result",4]]],[11,"deserialize_i16","","",38,[[],["result",4]]],[11,"deserialize_i32","","",38,[[],["result",4]]],[11,"deserialize_i64","","",38,[[],["result",4]]],[11,"deserialize_i128","","",38,[[],["result",4]]],[11,"deserialize_u8","","",38,[[],["result",4]]],[11,"deserialize_u16","","",38,[[],["result",4]]],[11,"deserialize_u32","","",38,[[],["result",4]]],[11,"deserialize_u64","","",38,[[],["result",4]]],[11,"deserialize_u128","","",38,[[],["result",4]]],[11,"deserialize_f32","","",38,[[],["result",4]]],[11,"deserialize_f64","","",38,[[],["result",4]]],[11,"deserialize_char","","",38,[[],["result",4]]],[11,"deserialize_str","","",38,[[],["result",4]]],[11,"deserialize_string","","",38,[[],["result",4]]],[11,"deserialize_bytes","","",38,[[],["result",4]]],[11,"deserialize_byte_buf","","",38,[[],["result",4]]],[11,"deserialize_option","","",38,[[],["result",4]]],[11,"deserialize_unit","","",38,[[],["result",4]]],[11,"deserialize_unit_struct","","",38,[[],["result",4]]],[11,"deserialize_newtype_struct","","",38,[[],["result",4]]],[11,"deserialize_seq","","",38,[[],["result",4]]],[11,"deserialize_tuple","","",38,[[],["result",4]]],[11,"deserialize_tuple_struct","","",38,[[],["result",4]]],[11,"deserialize_map","","",38,[[],["result",4]]],[11,"deserialize_struct","","",38,[[],["result",4]]],[11,"deserialize_enum","","",38,[[],["result",4]]],[11,"deserialize_identifier","","",38,[[],["result",4]]],[11,"deserialize_ignored_any","","",38,[[],["result",4]]],[11,"deserialize_any","","",38,[[],["result",4]]],[11,"deserialize_bool","","",39,[[],["result",4]]],[11,"deserialize_i8","","",39,[[],["result",4]]],[11,"deserialize_i16","","",39,[[],["result",4]]],[11,"deserialize_i32","","",39,[[],["result",4]]],[11,"deserialize_i64","","",39,[[],["result",4]]],[11,"deserialize_i128","","",39,[[],["result",4]]],[11,"deserialize_u8","","",39,[[],["result",4]]],[11,"deserialize_u16","","",39,[[],["result",4]]],[11,"deserialize_u32","","",39,[[],["result",4]]],[11,"deserialize_u64","","",39,[[],["result",4]]],[11,"deserialize_u128","","",39,[[],["result",4]]],[11,"deserialize_f32","","",39,[[],["result",4]]],[11,"deserialize_f64","","",39,[[],["result",4]]],[11,"deserialize_char","","",39,[[],["result",4]]],[11,"deserialize_str","","",39,[[],["result",4]]],[11,"deserialize_string","","",39,[[],["result",4]]],[11,"deserialize_bytes","","",39,[[],["result",4]]],[11,"deserialize_byte_buf","","",39,[[],["result",4]]],[11,"deserialize_option","","",39,[[],["result",4]]],[11,"deserialize_unit","","",39,[[],["result",4]]],[11,"deserialize_unit_struct","","",39,[[],["result",4]]],[11,"deserialize_newtype_struct","","",39,[[],["result",4]]],[11,"deserialize_seq","","",39,[[],["result",4]]],[11,"deserialize_tuple","","",39,[[],["result",4]]],[11,"deserialize_tuple_struct","","",39,[[],["result",4]]],[11,"deserialize_map","","",39,[[],["result",4]]],[11,"deserialize_struct","","",39,[[],["result",4]]],[11,"deserialize_enum","","",39,[[],["result",4]]],[11,"deserialize_identifier","","",39,[[],["result",4]]],[11,"deserialize_ignored_any","","",39,[[],["result",4]]],[11,"deserialize_any","","",39,[[],["result",4]]],[11,"deserialize_bool","","",40,[[],["result",4]]],[11,"deserialize_i8","","",40,[[],["result",4]]],[11,"deserialize_i16","","",40,[[],["result",4]]],[11,"deserialize_i32","","",40,[[],["result",4]]],[11,"deserialize_i64","","",40,[[],["result",4]]],[11,"deserialize_i128","","",40,[[],["result",4]]],[11,"deserialize_u8","","",40,[[],["result",4]]],[11,"deserialize_u16","","",40,[[],["result",4]]],[11,"deserialize_u32","","",40,[[],["result",4]]],[11,"deserialize_u64","","",40,[[],["result",4]]],[11,"deserialize_u128","","",40,[[],["result",4]]],[11,"deserialize_f32","","",40,[[],["result",4]]],[11,"deserialize_f64","","",40,[[],["result",4]]],[11,"deserialize_char","","",40,[[],["result",4]]],[11,"deserialize_str","","",40,[[],["result",4]]],[11,"deserialize_string","","",40,[[],["result",4]]],[11,"deserialize_bytes","","",40,[[],["result",4]]],[11,"deserialize_byte_buf","","",40,[[],["result",4]]],[11,"deserialize_option","","",40,[[],["result",4]]],[11,"deserialize_unit","","",40,[[],["result",4]]],[11,"deserialize_unit_struct","","",40,[[],["result",4]]],[11,"deserialize_newtype_struct","","",40,[[],["result",4]]],[11,"deserialize_seq","","",40,[[],["result",4]]],[11,"deserialize_tuple","","",40,[[],["result",4]]],[11,"deserialize_tuple_struct","","",40,[[],["result",4]]],[11,"deserialize_map","","",40,[[],["result",4]]],[11,"deserialize_struct","","",40,[[],["result",4]]],[11,"deserialize_enum","","",40,[[],["result",4]]],[11,"deserialize_identifier","","",40,[[],["result",4]]],[11,"deserialize_ignored_any","","",40,[[],["result",4]]],[11,"deserialize_any","","",40,[[],["result",4]]],[11,"deserialize_bool","","",41,[[],["result",4]]],[11,"deserialize_i8","","",41,[[],["result",4]]],[11,"deserialize_i16","","",41,[[],["result",4]]],[11,"deserialize_i32","","",41,[[],["result",4]]],[11,"deserialize_i64","","",41,[[],["result",4]]],[11,"deserialize_i128","","",41,[[],["result",4]]],[11,"deserialize_u8","","",41,[[],["result",4]]],[11,"deserialize_u16","","",41,[[],["result",4]]],[11,"deserialize_u32","","",41,[[],["result",4]]],[11,"deserialize_u64","","",41,[[],["result",4]]],[11,"deserialize_u128","","",41,[[],["result",4]]],[11,"deserialize_f32","","",41,[[],["result",4]]],[11,"deserialize_f64","","",41,[[],["result",4]]],[11,"deserialize_char","","",41,[[],["result",4]]],[11,"deserialize_str","","",41,[[],["result",4]]],[11,"deserialize_string","","",41,[[],["result",4]]],[11,"deserialize_bytes","","",41,[[],["result",4]]],[11,"deserialize_byte_buf","","",41,[[],["result",4]]],[11,"deserialize_option","","",41,[[],["result",4]]],[11,"deserialize_unit","","",41,[[],["result",4]]],[11,"deserialize_unit_struct","","",41,[[],["result",4]]],[11,"deserialize_newtype_struct","","",41,[[],["result",4]]],[11,"deserialize_seq","","",41,[[],["result",4]]],[11,"deserialize_tuple","","",41,[[],["result",4]]],[11,"deserialize_tuple_struct","","",41,[[],["result",4]]],[11,"deserialize_map","","",41,[[],["result",4]]],[11,"deserialize_struct","","",41,[[],["result",4]]],[11,"deserialize_enum","","",41,[[],["result",4]]],[11,"deserialize_identifier","","",41,[[],["result",4]]],[11,"deserialize_ignored_any","","",41,[[],["result",4]]],[11,"deserialize_any","","",41,[[],["result",4]]],[11,"deserialize_bool","","",42,[[],["result",4]]],[11,"deserialize_i8","","",42,[[],["result",4]]],[11,"deserialize_i16","","",42,[[],["result",4]]],[11,"deserialize_i32","","",42,[[],["result",4]]],[11,"deserialize_i64","","",42,[[],["result",4]]],[11,"deserialize_i128","","",42,[[],["result",4]]],[11,"deserialize_u8","","",42,[[],["result",4]]],[11,"deserialize_u16","","",42,[[],["result",4]]],[11,"deserialize_u32","","",42,[[],["result",4]]],[11,"deserialize_u64","","",42,[[],["result",4]]],[11,"deserialize_u128","","",42,[[],["result",4]]],[11,"deserialize_f32","","",42,[[],["result",4]]],[11,"deserialize_f64","","",42,[[],["result",4]]],[11,"deserialize_char","","",42,[[],["result",4]]],[11,"deserialize_str","","",42,[[],["result",4]]],[11,"deserialize_string","","",42,[[],["result",4]]],[11,"deserialize_bytes","","",42,[[],["result",4]]],[11,"deserialize_byte_buf","","",42,[[],["result",4]]],[11,"deserialize_option","","",42,[[],["result",4]]],[11,"deserialize_unit","","",42,[[],["result",4]]],[11,"deserialize_unit_struct","","",42,[[],["result",4]]],[11,"deserialize_newtype_struct","","",42,[[],["result",4]]],[11,"deserialize_seq","","",42,[[],["result",4]]],[11,"deserialize_tuple","","",42,[[],["result",4]]],[11,"deserialize_tuple_struct","","",42,[[],["result",4]]],[11,"deserialize_map","","",42,[[],["result",4]]],[11,"deserialize_struct","","",42,[[],["result",4]]],[11,"deserialize_enum","","",42,[[],["result",4]]],[11,"deserialize_identifier","","",42,[[],["result",4]]],[11,"deserialize_ignored_any","","",42,[[],["result",4]]],[11,"deserialize_any","","",42,[[],["result",4]]],[11,"deserialize_bool","","",43,[[],["result",4]]],[11,"deserialize_i8","","",43,[[],["result",4]]],[11,"deserialize_i16","","",43,[[],["result",4]]],[11,"deserialize_i32","","",43,[[],["result",4]]],[11,"deserialize_i64","","",43,[[],["result",4]]],[11,"deserialize_i128","","",43,[[],["result",4]]],[11,"deserialize_u8","","",43,[[],["result",4]]],[11,"deserialize_u16","","",43,[[],["result",4]]],[11,"deserialize_u32","","",43,[[],["result",4]]],[11,"deserialize_u64","","",43,[[],["result",4]]],[11,"deserialize_u128","","",43,[[],["result",4]]],[11,"deserialize_f32","","",43,[[],["result",4]]],[11,"deserialize_f64","","",43,[[],["result",4]]],[11,"deserialize_char","","",43,[[],["result",4]]],[11,"deserialize_str","","",43,[[],["result",4]]],[11,"deserialize_string","","",43,[[],["result",4]]],[11,"deserialize_bytes","","",43,[[],["result",4]]],[11,"deserialize_byte_buf","","",43,[[],["result",4]]],[11,"deserialize_option","","",43,[[],["result",4]]],[11,"deserialize_unit","","",43,[[],["result",4]]],[11,"deserialize_unit_struct","","",43,[[],["result",4]]],[11,"deserialize_newtype_struct","","",43,[[],["result",4]]],[11,"deserialize_seq","","",43,[[],["result",4]]],[11,"deserialize_tuple","","",43,[[],["result",4]]],[11,"deserialize_tuple_struct","","",43,[[],["result",4]]],[11,"deserialize_map","","",43,[[],["result",4]]],[11,"deserialize_struct","","",43,[[],["result",4]]],[11,"deserialize_enum","","",43,[[],["result",4]]],[11,"deserialize_identifier","","",43,[[],["result",4]]],[11,"deserialize_ignored_any","","",43,[[],["result",4]]],[11,"deserialize_any","","",43,[[],["result",4]]],[11,"deserialize_bool","","",44,[[],["result",4]]],[11,"deserialize_i8","","",44,[[],["result",4]]],[11,"deserialize_i16","","",44,[[],["result",4]]],[11,"deserialize_i32","","",44,[[],["result",4]]],[11,"deserialize_i64","","",44,[[],["result",4]]],[11,"deserialize_i128","","",44,[[],["result",4]]],[11,"deserialize_u8","","",44,[[],["result",4]]],[11,"deserialize_u16","","",44,[[],["result",4]]],[11,"deserialize_u32","","",44,[[],["result",4]]],[11,"deserialize_u64","","",44,[[],["result",4]]],[11,"deserialize_u128","","",44,[[],["result",4]]],[11,"deserialize_f32","","",44,[[],["result",4]]],[11,"deserialize_f64","","",44,[[],["result",4]]],[11,"deserialize_char","","",44,[[],["result",4]]],[11,"deserialize_str","","",44,[[],["result",4]]],[11,"deserialize_string","","",44,[[],["result",4]]],[11,"deserialize_bytes","","",44,[[],["result",4]]],[11,"deserialize_byte_buf","","",44,[[],["result",4]]],[11,"deserialize_option","","",44,[[],["result",4]]],[11,"deserialize_unit","","",44,[[],["result",4]]],[11,"deserialize_unit_struct","","",44,[[],["result",4]]],[11,"deserialize_newtype_struct","","",44,[[],["result",4]]],[11,"deserialize_seq","","",44,[[],["result",4]]],[11,"deserialize_tuple","","",44,[[],["result",4]]],[11,"deserialize_tuple_struct","","",44,[[],["result",4]]],[11,"deserialize_map","","",44,[[],["result",4]]],[11,"deserialize_struct","","",44,[[],["result",4]]],[11,"deserialize_enum","","",44,[[],["result",4]]],[11,"deserialize_identifier","","",44,[[],["result",4]]],[11,"deserialize_ignored_any","","",44,[[],["result",4]]],[11,"deserialize_any","","",44,[[],["result",4]]],[11,"deserialize_bool","","",45,[[],["result",4]]],[11,"deserialize_i8","","",45,[[],["result",4]]],[11,"deserialize_i16","","",45,[[],["result",4]]],[11,"deserialize_i32","","",45,[[],["result",4]]],[11,"deserialize_i64","","",45,[[],["result",4]]],[11,"deserialize_i128","","",45,[[],["result",4]]],[11,"deserialize_u8","","",45,[[],["result",4]]],[11,"deserialize_u16","","",45,[[],["result",4]]],[11,"deserialize_u32","","",45,[[],["result",4]]],[11,"deserialize_u64","","",45,[[],["result",4]]],[11,"deserialize_u128","","",45,[[],["result",4]]],[11,"deserialize_f32","","",45,[[],["result",4]]],[11,"deserialize_f64","","",45,[[],["result",4]]],[11,"deserialize_char","","",45,[[],["result",4]]],[11,"deserialize_str","","",45,[[],["result",4]]],[11,"deserialize_string","","",45,[[],["result",4]]],[11,"deserialize_bytes","","",45,[[],["result",4]]],[11,"deserialize_byte_buf","","",45,[[],["result",4]]],[11,"deserialize_option","","",45,[[],["result",4]]],[11,"deserialize_unit","","",45,[[],["result",4]]],[11,"deserialize_unit_struct","","",45,[[],["result",4]]],[11,"deserialize_newtype_struct","","",45,[[],["result",4]]],[11,"deserialize_seq","","",45,[[],["result",4]]],[11,"deserialize_tuple","","",45,[[],["result",4]]],[11,"deserialize_tuple_struct","","",45,[[],["result",4]]],[11,"deserialize_map","","",45,[[],["result",4]]],[11,"deserialize_struct","","",45,[[],["result",4]]],[11,"deserialize_enum","","",45,[[],["result",4]]],[11,"deserialize_identifier","","",45,[[],["result",4]]],[11,"deserialize_ignored_any","","",45,[[],["result",4]]],[11,"deserialize_any","","",45,[[],["result",4]]],[11,"deserialize_bool","","",46,[[],["result",4]]],[11,"deserialize_i8","","",46,[[],["result",4]]],[11,"deserialize_i16","","",46,[[],["result",4]]],[11,"deserialize_i32","","",46,[[],["result",4]]],[11,"deserialize_i64","","",46,[[],["result",4]]],[11,"deserialize_i128","","",46,[[],["result",4]]],[11,"deserialize_u8","","",46,[[],["result",4]]],[11,"deserialize_u16","","",46,[[],["result",4]]],[11,"deserialize_u32","","",46,[[],["result",4]]],[11,"deserialize_u64","","",46,[[],["result",4]]],[11,"deserialize_u128","","",46,[[],["result",4]]],[11,"deserialize_f32","","",46,[[],["result",4]]],[11,"deserialize_f64","","",46,[[],["result",4]]],[11,"deserialize_char","","",46,[[],["result",4]]],[11,"deserialize_str","","",46,[[],["result",4]]],[11,"deserialize_string","","",46,[[],["result",4]]],[11,"deserialize_bytes","","",46,[[],["result",4]]],[11,"deserialize_byte_buf","","",46,[[],["result",4]]],[11,"deserialize_option","","",46,[[],["result",4]]],[11,"deserialize_unit","","",46,[[],["result",4]]],[11,"deserialize_unit_struct","","",46,[[],["result",4]]],[11,"deserialize_newtype_struct","","",46,[[],["result",4]]],[11,"deserialize_seq","","",46,[[],["result",4]]],[11,"deserialize_tuple","","",46,[[],["result",4]]],[11,"deserialize_tuple_struct","","",46,[[],["result",4]]],[11,"deserialize_map","","",46,[[],["result",4]]],[11,"deserialize_struct","","",46,[[],["result",4]]],[11,"deserialize_identifier","","",46,[[],["result",4]]],[11,"deserialize_ignored_any","","",46,[[],["result",4]]],[11,"deserialize_any","","",46,[[],["result",4]]],[11,"deserialize_enum","","",46,[[],["result",4]]],[11,"deserialize_any","","",47,[[],["result",4]]],[11,"deserialize_enum","","",47,[[],["result",4]]],[11,"deserialize_bool","","",47,[[],["result",4]]],[11,"deserialize_i8","","",47,[[],["result",4]]],[11,"deserialize_i16","","",47,[[],["result",4]]],[11,"deserialize_i32","","",47,[[],["result",4]]],[11,"deserialize_i64","","",47,[[],["result",4]]],[11,"deserialize_i128","","",47,[[],["result",4]]],[11,"deserialize_u8","","",47,[[],["result",4]]],[11,"deserialize_u16","","",47,[[],["result",4]]],[11,"deserialize_u32","","",47,[[],["result",4]]],[11,"deserialize_u64","","",47,[[],["result",4]]],[11,"deserialize_u128","","",47,[[],["result",4]]],[11,"deserialize_f32","","",47,[[],["result",4]]],[11,"deserialize_f64","","",47,[[],["result",4]]],[11,"deserialize_char","","",47,[[],["result",4]]],[11,"deserialize_str","","",47,[[],["result",4]]],[11,"deserialize_string","","",47,[[],["result",4]]],[11,"deserialize_bytes","","",47,[[],["result",4]]],[11,"deserialize_byte_buf","","",47,[[],["result",4]]],[11,"deserialize_option","","",47,[[],["result",4]]],[11,"deserialize_unit","","",47,[[],["result",4]]],[11,"deserialize_unit_struct","","",47,[[],["result",4]]],[11,"deserialize_newtype_struct","","",47,[[],["result",4]]],[11,"deserialize_seq","","",47,[[],["result",4]]],[11,"deserialize_tuple","","",47,[[],["result",4]]],[11,"deserialize_tuple_struct","","",47,[[],["result",4]]],[11,"deserialize_map","","",47,[[],["result",4]]],[11,"deserialize_struct","","",47,[[],["result",4]]],[11,"deserialize_identifier","","",47,[[],["result",4]]],[11,"deserialize_ignored_any","","",47,[[],["result",4]]],[11,"deserialize_any","","",0,[[],["result",4]]],[11,"deserialize_enum","","",0,[[],["result",4]]],[11,"deserialize_bool","","",0,[[],["result",4]]],[11,"deserialize_i8","","",0,[[],["result",4]]],[11,"deserialize_i16","","",0,[[],["result",4]]],[11,"deserialize_i32","","",0,[[],["result",4]]],[11,"deserialize_i64","","",0,[[],["result",4]]],[11,"deserialize_i128","","",0,[[],["result",4]]],[11,"deserialize_u8","","",0,[[],["result",4]]],[11,"deserialize_u16","","",0,[[],["result",4]]],[11,"deserialize_u32","","",0,[[],["result",4]]],[11,"deserialize_u64","","",0,[[],["result",4]]],[11,"deserialize_u128","","",0,[[],["result",4]]],[11,"deserialize_f32","","",0,[[],["result",4]]],[11,"deserialize_f64","","",0,[[],["result",4]]],[11,"deserialize_char","","",0,[[],["result",4]]],[11,"deserialize_str","","",0,[[],["result",4]]],[11,"deserialize_string","","",0,[[],["result",4]]],[11,"deserialize_bytes","","",0,[[],["result",4]]],[11,"deserialize_byte_buf","","",0,[[],["result",4]]],[11,"deserialize_option","","",0,[[],["result",4]]],[11,"deserialize_unit","","",0,[[],["result",4]]],[11,"deserialize_unit_struct","","",0,[[],["result",4]]],[11,"deserialize_newtype_struct","","",0,[[],["result",4]]],[11,"deserialize_seq","","",0,[[],["result",4]]],[11,"deserialize_tuple","","",0,[[],["result",4]]],[11,"deserialize_tuple_struct","","",0,[[],["result",4]]],[11,"deserialize_map","","",0,[[],["result",4]]],[11,"deserialize_struct","","",0,[[],["result",4]]],[11,"deserialize_identifier","","",0,[[],["result",4]]],[11,"deserialize_ignored_any","","",0,[[],["result",4]]],[11,"deserialize_any","","",48,[[],["result",4]]],[11,"deserialize_enum","","",48,[[],["result",4]]],[11,"deserialize_bool","","",48,[[],["result",4]]],[11,"deserialize_i8","","",48,[[],["result",4]]],[11,"deserialize_i16","","",48,[[],["result",4]]],[11,"deserialize_i32","","",48,[[],["result",4]]],[11,"deserialize_i64","","",48,[[],["result",4]]],[11,"deserialize_i128","","",48,[[],["result",4]]],[11,"deserialize_u8","","",48,[[],["result",4]]],[11,"deserialize_u16","","",48,[[],["result",4]]],[11,"deserialize_u32","","",48,[[],["result",4]]],[11,"deserialize_u64","","",48,[[],["result",4]]],[11,"deserialize_u128","","",48,[[],["result",4]]],[11,"deserialize_f32","","",48,[[],["result",4]]],[11,"deserialize_f64","","",48,[[],["result",4]]],[11,"deserialize_char","","",48,[[],["result",4]]],[11,"deserialize_str","","",48,[[],["result",4]]],[11,"deserialize_string","","",48,[[],["result",4]]],[11,"deserialize_bytes","","",48,[[],["result",4]]],[11,"deserialize_byte_buf","","",48,[[],["result",4]]],[11,"deserialize_option","","",48,[[],["result",4]]],[11,"deserialize_unit","","",48,[[],["result",4]]],[11,"deserialize_unit_struct","","",48,[[],["result",4]]],[11,"deserialize_newtype_struct","","",48,[[],["result",4]]],[11,"deserialize_seq","","",48,[[],["result",4]]],[11,"deserialize_tuple","","",48,[[],["result",4]]],[11,"deserialize_tuple_struct","","",48,[[],["result",4]]],[11,"deserialize_map","","",48,[[],["result",4]]],[11,"deserialize_struct","","",48,[[],["result",4]]],[11,"deserialize_identifier","","",48,[[],["result",4]]],[11,"deserialize_ignored_any","","",48,[[],["result",4]]],[11,"deserialize_any","","",49,[[],["result",4]]],[11,"deserialize_enum","","",49,[[],["result",4]]],[11,"deserialize_bool","","",49,[[],["result",4]]],[11,"deserialize_i8","","",49,[[],["result",4]]],[11,"deserialize_i16","","",49,[[],["result",4]]],[11,"deserialize_i32","","",49,[[],["result",4]]],[11,"deserialize_i64","","",49,[[],["result",4]]],[11,"deserialize_i128","","",49,[[],["result",4]]],[11,"deserialize_u8","","",49,[[],["result",4]]],[11,"deserialize_u16","","",49,[[],["result",4]]],[11,"deserialize_u32","","",49,[[],["result",4]]],[11,"deserialize_u64","","",49,[[],["result",4]]],[11,"deserialize_u128","","",49,[[],["result",4]]],[11,"deserialize_f32","","",49,[[],["result",4]]],[11,"deserialize_f64","","",49,[[],["result",4]]],[11,"deserialize_char","","",49,[[],["result",4]]],[11,"deserialize_str","","",49,[[],["result",4]]],[11,"deserialize_string","","",49,[[],["result",4]]],[11,"deserialize_bytes","","",49,[[],["result",4]]],[11,"deserialize_byte_buf","","",49,[[],["result",4]]],[11,"deserialize_option","","",49,[[],["result",4]]],[11,"deserialize_unit","","",49,[[],["result",4]]],[11,"deserialize_unit_struct","","",49,[[],["result",4]]],[11,"deserialize_newtype_struct","","",49,[[],["result",4]]],[11,"deserialize_seq","","",49,[[],["result",4]]],[11,"deserialize_tuple","","",49,[[],["result",4]]],[11,"deserialize_tuple_struct","","",49,[[],["result",4]]],[11,"deserialize_map","","",49,[[],["result",4]]],[11,"deserialize_struct","","",49,[[],["result",4]]],[11,"deserialize_identifier","","",49,[[],["result",4]]],[11,"deserialize_ignored_any","","",49,[[],["result",4]]],[11,"deserialize_any","","",1,[[],["result",4]]],[11,"deserialize_bool","","",1,[[],["result",4]]],[11,"deserialize_i8","","",1,[[],["result",4]]],[11,"deserialize_i16","","",1,[[],["result",4]]],[11,"deserialize_i32","","",1,[[],["result",4]]],[11,"deserialize_i64","","",1,[[],["result",4]]],[11,"deserialize_i128","","",1,[[],["result",4]]],[11,"deserialize_u8","","",1,[[],["result",4]]],[11,"deserialize_u16","","",1,[[],["result",4]]],[11,"deserialize_u32","","",1,[[],["result",4]]],[11,"deserialize_u64","","",1,[[],["result",4]]],[11,"deserialize_u128","","",1,[[],["result",4]]],[11,"deserialize_f32","","",1,[[],["result",4]]],[11,"deserialize_f64","","",1,[[],["result",4]]],[11,"deserialize_char","","",1,[[],["result",4]]],[11,"deserialize_str","","",1,[[],["result",4]]],[11,"deserialize_string","","",1,[[],["result",4]]],[11,"deserialize_bytes","","",1,[[],["result",4]]],[11,"deserialize_byte_buf","","",1,[[],["result",4]]],[11,"deserialize_option","","",1,[[],["result",4]]],[11,"deserialize_unit","","",1,[[],["result",4]]],[11,"deserialize_unit_struct","","",1,[[],["result",4]]],[11,"deserialize_newtype_struct","","",1,[[],["result",4]]],[11,"deserialize_seq","","",1,[[],["result",4]]],[11,"deserialize_tuple","","",1,[[],["result",4]]],[11,"deserialize_tuple_struct","","",1,[[],["result",4]]],[11,"deserialize_map","","",1,[[],["result",4]]],[11,"deserialize_struct","","",1,[[],["result",4]]],[11,"deserialize_enum","","",1,[[],["result",4]]],[11,"deserialize_identifier","","",1,[[],["result",4]]],[11,"deserialize_ignored_any","","",1,[[],["result",4]]],[11,"deserialize_any","","",2,[[],["result",4]]],[11,"deserialize_bool","","",2,[[],["result",4]]],[11,"deserialize_i8","","",2,[[],["result",4]]],[11,"deserialize_i16","","",2,[[],["result",4]]],[11,"deserialize_i32","","",2,[[],["result",4]]],[11,"deserialize_i64","","",2,[[],["result",4]]],[11,"deserialize_i128","","",2,[[],["result",4]]],[11,"deserialize_u8","","",2,[[],["result",4]]],[11,"deserialize_u16","","",2,[[],["result",4]]],[11,"deserialize_u32","","",2,[[],["result",4]]],[11,"deserialize_u64","","",2,[[],["result",4]]],[11,"deserialize_u128","","",2,[[],["result",4]]],[11,"deserialize_f32","","",2,[[],["result",4]]],[11,"deserialize_f64","","",2,[[],["result",4]]],[11,"deserialize_char","","",2,[[],["result",4]]],[11,"deserialize_str","","",2,[[],["result",4]]],[11,"deserialize_string","","",2,[[],["result",4]]],[11,"deserialize_bytes","","",2,[[],["result",4]]],[11,"deserialize_byte_buf","","",2,[[],["result",4]]],[11,"deserialize_option","","",2,[[],["result",4]]],[11,"deserialize_unit","","",2,[[],["result",4]]],[11,"deserialize_unit_struct","","",2,[[],["result",4]]],[11,"deserialize_newtype_struct","","",2,[[],["result",4]]],[11,"deserialize_seq","","",2,[[],["result",4]]],[11,"deserialize_tuple","","",2,[[],["result",4]]],[11,"deserialize_tuple_struct","","",2,[[],["result",4]]],[11,"deserialize_map","","",2,[[],["result",4]]],[11,"deserialize_struct","","",2,[[],["result",4]]],[11,"deserialize_enum","","",2,[[],["result",4]]],[11,"deserialize_identifier","","",2,[[],["result",4]]],[11,"deserialize_ignored_any","","",2,[[],["result",4]]],[11,"deserialize_any","","",3,[[],["result",4]]],[11,"deserialize_bool","","",3,[[],["result",4]]],[11,"deserialize_i8","","",3,[[],["result",4]]],[11,"deserialize_i16","","",3,[[],["result",4]]],[11,"deserialize_i32","","",3,[[],["result",4]]],[11,"deserialize_i64","","",3,[[],["result",4]]],[11,"deserialize_i128","","",3,[[],["result",4]]],[11,"deserialize_u8","","",3,[[],["result",4]]],[11,"deserialize_u16","","",3,[[],["result",4]]],[11,"deserialize_u32","","",3,[[],["result",4]]],[11,"deserialize_u64","","",3,[[],["result",4]]],[11,"deserialize_u128","","",3,[[],["result",4]]],[11,"deserialize_f32","","",3,[[],["result",4]]],[11,"deserialize_f64","","",3,[[],["result",4]]],[11,"deserialize_char","","",3,[[],["result",4]]],[11,"deserialize_str","","",3,[[],["result",4]]],[11,"deserialize_string","","",3,[[],["result",4]]],[11,"deserialize_bytes","","",3,[[],["result",4]]],[11,"deserialize_byte_buf","","",3,[[],["result",4]]],[11,"deserialize_option","","",3,[[],["result",4]]],[11,"deserialize_unit","","",3,[[],["result",4]]],[11,"deserialize_unit_struct","","",3,[[],["result",4]]],[11,"deserialize_newtype_struct","","",3,[[],["result",4]]],[11,"deserialize_seq","","",3,[[],["result",4]]],[11,"deserialize_tuple","","",3,[[],["result",4]]],[11,"deserialize_tuple_struct","","",3,[[],["result",4]]],[11,"deserialize_map","","",3,[[],["result",4]]],[11,"deserialize_struct","","",3,[[],["result",4]]],[11,"deserialize_enum","","",3,[[],["result",4]]],[11,"deserialize_identifier","","",3,[[],["result",4]]],[11,"deserialize_ignored_any","","",3,[[],["result",4]]],[11,"deserialize_any","","",4,[[],["result",4]]],[11,"deserialize_bool","","",4,[[],["result",4]]],[11,"deserialize_i8","","",4,[[],["result",4]]],[11,"deserialize_i16","","",4,[[],["result",4]]],[11,"deserialize_i32","","",4,[[],["result",4]]],[11,"deserialize_i64","","",4,[[],["result",4]]],[11,"deserialize_i128","","",4,[[],["result",4]]],[11,"deserialize_u8","","",4,[[],["result",4]]],[11,"deserialize_u16","","",4,[[],["result",4]]],[11,"deserialize_u32","","",4,[[],["result",4]]],[11,"deserialize_u64","","",4,[[],["result",4]]],[11,"deserialize_u128","","",4,[[],["result",4]]],[11,"deserialize_f32","","",4,[[],["result",4]]],[11,"deserialize_f64","","",4,[[],["result",4]]],[11,"deserialize_char","","",4,[[],["result",4]]],[11,"deserialize_str","","",4,[[],["result",4]]],[11,"deserialize_string","","",4,[[],["result",4]]],[11,"deserialize_bytes","","",4,[[],["result",4]]],[11,"deserialize_byte_buf","","",4,[[],["result",4]]],[11,"deserialize_option","","",4,[[],["result",4]]],[11,"deserialize_unit","","",4,[[],["result",4]]],[11,"deserialize_unit_struct","","",4,[[],["result",4]]],[11,"deserialize_newtype_struct","","",4,[[],["result",4]]],[11,"deserialize_seq","","",4,[[],["result",4]]],[11,"deserialize_tuple","","",4,[[],["result",4]]],[11,"deserialize_tuple_struct","","",4,[[],["result",4]]],[11,"deserialize_map","","",4,[[],["result",4]]],[11,"deserialize_struct","","",4,[[],["result",4]]],[11,"deserialize_enum","","",4,[[],["result",4]]],[11,"deserialize_identifier","","",4,[[],["result",4]]],[11,"deserialize_ignored_any","","",4,[[],["result",4]]],[11,"deserialize_any","","",5,[[],["result",4]]],[11,"deserialize_seq","","",5,[[],["result",4]]],[11,"deserialize_tuple","","",5,[[],["result",4]]],[11,"deserialize_bool","","",5,[[],["result",4]]],[11,"deserialize_i8","","",5,[[],["result",4]]],[11,"deserialize_i16","","",5,[[],["result",4]]],[11,"deserialize_i32","","",5,[[],["result",4]]],[11,"deserialize_i64","","",5,[[],["result",4]]],[11,"deserialize_i128","","",5,[[],["result",4]]],[11,"deserialize_u8","","",5,[[],["result",4]]],[11,"deserialize_u16","","",5,[[],["result",4]]],[11,"deserialize_u32","","",5,[[],["result",4]]],[11,"deserialize_u64","","",5,[[],["result",4]]],[11,"deserialize_u128","","",5,[[],["result",4]]],[11,"deserialize_f32","","",5,[[],["result",4]]],[11,"deserialize_f64","","",5,[[],["result",4]]],[11,"deserialize_char","","",5,[[],["result",4]]],[11,"deserialize_str","","",5,[[],["result",4]]],[11,"deserialize_string","","",5,[[],["result",4]]],[11,"deserialize_bytes","","",5,[[],["result",4]]],[11,"deserialize_byte_buf","","",5,[[],["result",4]]],[11,"deserialize_option","","",5,[[],["result",4]]],[11,"deserialize_unit","","",5,[[],["result",4]]],[11,"deserialize_unit_struct","","",5,[[],["result",4]]],[11,"deserialize_newtype_struct","","",5,[[],["result",4]]],[11,"deserialize_tuple_struct","","",5,[[],["result",4]]],[11,"deserialize_map","","",5,[[],["result",4]]],[11,"deserialize_struct","","",5,[[],["result",4]]],[11,"deserialize_enum","","",5,[[],["result",4]]],[11,"deserialize_identifier","","",5,[[],["result",4]]],[11,"deserialize_ignored_any","","",5,[[],["result",4]]],[11,"deserialize_any","","",6,[[],["result",4]]],[11,"deserialize_enum","","",6,[[],["result",4]]],[11,"deserialize_bool","","",6,[[],["result",4]]],[11,"deserialize_i8","","",6,[[],["result",4]]],[11,"deserialize_i16","","",6,[[],["result",4]]],[11,"deserialize_i32","","",6,[[],["result",4]]],[11,"deserialize_i64","","",6,[[],["result",4]]],[11,"deserialize_i128","","",6,[[],["result",4]]],[11,"deserialize_u8","","",6,[[],["result",4]]],[11,"deserialize_u16","","",6,[[],["result",4]]],[11,"deserialize_u32","","",6,[[],["result",4]]],[11,"deserialize_u64","","",6,[[],["result",4]]],[11,"deserialize_u128","","",6,[[],["result",4]]],[11,"deserialize_f32","","",6,[[],["result",4]]],[11,"deserialize_f64","","",6,[[],["result",4]]],[11,"deserialize_char","","",6,[[],["result",4]]],[11,"deserialize_str","","",6,[[],["result",4]]],[11,"deserialize_string","","",6,[[],["result",4]]],[11,"deserialize_bytes","","",6,[[],["result",4]]],[11,"deserialize_byte_buf","","",6,[[],["result",4]]],[11,"deserialize_option","","",6,[[],["result",4]]],[11,"deserialize_unit","","",6,[[],["result",4]]],[11,"deserialize_unit_struct","","",6,[[],["result",4]]],[11,"deserialize_newtype_struct","","",6,[[],["result",4]]],[11,"deserialize_seq","","",6,[[],["result",4]]],[11,"deserialize_tuple","","",6,[[],["result",4]]],[11,"deserialize_tuple_struct","","",6,[[],["result",4]]],[11,"deserialize_map","","",6,[[],["result",4]]],[11,"deserialize_struct","","",6,[[],["result",4]]],[11,"deserialize_identifier","","",6,[[],["result",4]]],[11,"deserialize_ignored_any","","",6,[[],["result",4]]],[11,"expecting","serde::de","",50,[[["formatter",3]],["result",6]]],[11,"visit_bool","","",50,[[],["result",4]]],[11,"visit_i64","","",50,[[],["result",4]]],[11,"visit_i128","","",50,[[],["result",4]]],[11,"visit_u64","","",50,[[],["result",4]]],[11,"visit_u128","","",50,[[],["result",4]]],[11,"visit_f64","","",50,[[],["result",4]]],[11,"visit_str","","",50,[[],["result",4]]],[11,"visit_none","","",50,[[],["result",4]]],[11,"visit_some","","",50,[[],["result",4]]],[11,"visit_newtype_struct","","",50,[[],["result",4]]],[11,"visit_unit","","",50,[[],["result",4]]],[11,"visit_seq","","",50,[[],["result",4]]],[11,"visit_map","","",50,[[],["result",4]]],[11,"visit_bytes","","",50,[[],["result",4]]],[11,"visit_enum","","",50,[[],["result",4]]],[11,"next_element_seed","serde::de::value","",3,[[],[["option",4],["result",4]]]],[11,"size_hint","","",3,[[],["option",4]]],[11,"next_element_seed","","",5,[[],[["result",4],["option",4]]]],[11,"size_hint","","",5,[[],["option",4]]],[11,"next_key_seed","","",5,[[],[["option",4],["result",4]]]],[11,"next_value_seed","","",5,[[],["result",4]]],[11,"next_entry_seed","","",5,[[],[["result",4],["option",4]]]],[11,"size_hint","","",5,[[],["option",4]]],[11,"variant_seed","","",46,[[],["result",4]]],[11,"variant_seed","","",47,[[],["result",4]]],[11,"variant_seed","","",0,[[],["result",4]]],[11,"variant_seed","","",48,[[],["result",4]]],[11,"variant_seed","","",49,[[],["result",4]]],[11,"variant_seed","","",6,[[],["result",4]]],[11,"serialize_element","serde::ser","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_element","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_key","","",51,[[],["result",4]]],[11,"serialize_value","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"custom","serde::de::value","",29,[[]]],[11,"custom","","",29,[[]]],[11,"clone","","",29,[[],["error",3]]],[11,"clone","","",30,[[]]],[11,"clone","","",31,[[]]],[11,"clone","","",32,[[]]],[11,"clone","","",33,[[]]],[11,"clone","","",34,[[]]],[11,"clone","","",35,[[]]],[11,"clone","","",36,[[]]],[11,"clone","","",37,[[]]],[11,"clone","","",38,[[]]],[11,"clone","","",39,[[]]],[11,"clone","","",40,[[]]],[11,"clone","","",41,[[]]],[11,"clone","","",42,[[]]],[11,"clone","","",43,[[]]],[11,"clone","","",44,[[]]],[11,"clone","","",45,[[]]],[11,"clone","","",46,[[]]],[11,"clone","","",47,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",48,[[]]],[11,"clone","","",49,[[]]],[11,"clone","","",1,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",3,[[],["seqdeserializer",3]]],[11,"clone","","",4,[[],["seqaccessdeserializer",3]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[],["mapaccessdeserializer",3]]],[11,"clone","serde::de","",50,[[],["ignoredany",3]]],[11,"clone","","",8,[[],["unexpected",4]]],[11,"default","","",50,[[],["ignoredany",3]]],[11,"eq","serde::de::value","",29,[[["error",3]]]],[11,"ne","","",29,[[["error",3]]]],[11,"eq","serde::de","",8,[[["unexpected",4]]]],[11,"ne","","",8,[[["unexpected",4]]]],[11,"fmt","serde::de::value","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","serde::de","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","serde::de::value","",29,[[["formatter",3]],["result",6]]],[11,"fmt","serde::de","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"description","serde::de::value","",29,[[]]]],"p":[[3,"BorrowedStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"IgnoredAny"],[3,"Impossible"]]},\
"serde_json":{"doc":"Serde JSONJSON is a ubiquitous open-standard format that …","i":[[0,"de","serde_json","Deserialize JSON data to a Rust data structure.",null,null],[8,"Read","serde_json::de","Trait used by the deserializer for iterating over input. …",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"IoRead","","JSON input source that reads from a std::io input stream.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[11,"new","","Create a JSON deserializer from one of the possible …",0,[[]]],[11,"from_reader","","Creates a JSON deserializer from an <code>io::Read</code>.",0,[[]]],[11,"from_slice","","Creates a JSON deserializer from a <code>&[u8]</code>.",0,[[]]],[11,"from_str","","Creates a JSON deserializer from a <code>&str</code>.",0,[[]]],[11,"end","","The <code>Deserializer::end</code> method should be called after a …",0,[[],["result",6]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of …",0,[[],["streamdeserializer",3]]],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON …",null,null],[11,"new","","Create a JSON stream deserializer from one of the …",1,[[]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a …",1,[[]]],[5,"from_reader","","Deserialize an instance of type <code>T</code> from an IO stream of …",null,[[],["result",6]]],[5,"from_slice","","Deserialize an instance of type <code>T</code> from bytes of JSON text.",null,[[],["result",6]]],[5,"from_str","","Deserialize an instance of type <code>T</code> from a string of JSON …",null,[[],["result",6]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.",null,null],[11,"line","","One-based line number at which the error was detected.",2,[[]]],[11,"column","","One-based column number at which the error was detected.",2,[[]]],[11,"classify","","Categorizes the cause of this error.",2,[[],["category",4]]],[11,"is_io","","Returns true if this error was caused by a failure to …",2,[[]]],[11,"is_syntax","","Returns true if this error was caused by input that was …",2,[[]]],[11,"is_data","","Returns true if this error was caused by input data that …",2,[[]]],[11,"is_eof","","Returns true if this error was caused by prematurely …",2,[[]]],[4,"Category","","Categorizes the cause of a <code>serde_json::Error</code>.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes …",3,null],[13,"Syntax","","The error was caused by input that was not syntactically …",3,null],[13,"Data","","The error was caused by input data that was semantically …",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of …",3,null],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[11,"new","","Makes a new empty Map.",4,[[]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",4,[[]]],[11,"clear","","Clears the map, removing all values.",4,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",4,[[],[["value",4],["option",4]]]],[11,"contains_key","","Returns true if the map contains a value for the …",4,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",4,[[],[["value",4],["option",4]]]],[11,"insert","","Inserts a key-value pair into the map.",4,[[["string",3],["value",4]],[["value",4],["option",4]]]],[11,"remove","","Removes a key from the map, returning the value at the …",4,[[],[["value",4],["option",4]]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",4,[[],["option",4]]],[11,"append","","Moves all elements from other into Self, leaving other …",4,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",4,[[],["entry",4]]],[11,"len","","Returns the number of elements in the map.",4,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",4,[[]]],[11,"iter","","Gets an iterator over the entries of the map.",4,[[],["iter",3]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",4,[[],["itermut",3]]],[11,"keys","","Gets an iterator over the keys of the map.",4,[[],["keys",3]]],[11,"values","","Gets an iterator over the values of the map.",4,[[],["values",3]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",4,[[],["valuesmut",3]]],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[3,"VacantEntry","","A vacant Entry. It is part of the <code>Entry</code> enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the <code>Entry</code> enum.",null,null],[11,"key","","Returns a reference to this entry\'s key.",5,[[],["string",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",5,[[["value",4]],["value",4]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",5,[[],["value",4]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",5,[[]]],[11,"key","","Gets a reference to the key that would be used when …",6,[[],["string",3]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",6,[[["value",4]],["value",4]]],[11,"key","","Gets a reference to the key in the entry.",7,[[],["string",3]]],[11,"get","","Gets a reference to the value in the entry.",7,[[],["value",4]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",7,[[],["value",4]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",7,[[],["value",4]]],[11,"insert","","Sets the value of the entry with the <code>OccupiedEntry</code>\'s key, …",7,[[["value",4]],["value",4]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",7,[[],["value",4]]],[3,"Iter","","An iterator over a serde_json::Map\'s entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map\'s entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map\'s entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map\'s keys.",null,null],[3,"Values","","An iterator over a serde_json::Map\'s values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map\'s values.",null,null],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[11,"new","","Creates a new JSON serializer.",8,[[]]],[11,"pretty","","Creates a new JSON pretty print serializer.",8,[[]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written …",8,[[]]],[11,"into_inner","","Unwrap the <code>Writer</code> from the <code>Serializer</code>.",8,[[]]],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote <code>\\\"</code>",9,null],[13,"ReverseSolidus","","An escaped reverse solidus <code>\\\\</code>",9,null],[13,"Solidus","","An escaped solidus <code>/</code>",9,null],[13,"Backspace","","An escaped backspace character (usually escaped as <code>\\\\b</code>)",9,null],[13,"FormFeed","","An escaped form feed character (usually escaped as <code>\\\\f</code>)",9,null],[13,"LineFeed","","An escaped line feed character (usually escaped as <code>\\\\n</code>)",9,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as …",9,null],[13,"Tab","","An escaped tab character (usually escaped as <code>\\\\t</code>)",9,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped …",9,null],[8,"Formatter","","This trait abstracts away serializing the JSON control …",null,null],[11,"write_null","","Writes a <code>null</code> value to the specified writer.",10,[[],["result",6]]],[11,"write_bool","","Writes a <code>true</code> or <code>false</code> value to the specified writer.",10,[[],["result",6]]],[11,"write_i8","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_i16","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_i32","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_i64","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u8","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u16","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u32","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u64","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_f32","","Writes a floating point value like <code>-31.26e+12</code> to the …",10,[[],["result",6]]],[11,"write_f64","","Writes a floating point value like <code>-31.26e+12</code> to the …",10,[[],["result",6]]],[11,"write_number_str","","Writes a number that has already been rendered to a …",10,[[],["result",6]]],[11,"begin_string","","Called before each series of <code>write_string_fragment</code> and …",10,[[],["result",6]]],[11,"end_string","","Called after each series of <code>write_string_fragment</code> and …",10,[[],["result",6]]],[11,"write_string_fragment","","Writes a string fragment that doesn\'t need any escaping …",10,[[],["result",6]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",10,[[["charescape",4]],["result",6]]],[11,"begin_array","","Called before every array.  Writes a <code>[</code> to the specified …",10,[[],["result",6]]],[11,"end_array","","Called after every array.  Writes a <code>]</code> to the specified …",10,[[],["result",6]]],[11,"begin_array_value","","Called before every array value.  Writes a <code>,</code> if needed to …",10,[[],["result",6]]],[11,"end_array_value","","Called after every array value.",10,[[],["result",6]]],[11,"begin_object","","Called before every object.  Writes a <code>{</code> to the specified …",10,[[],["result",6]]],[11,"end_object","","Called after every object.  Writes a <code>}</code> to the specified …",10,[[],["result",6]]],[11,"begin_object_key","","Called before every object key.",10,[[],["result",6]]],[11,"end_object_key","","Called after every object key.  A <code>:</code> should be written to …",10,[[],["result",6]]],[11,"begin_object_value","","Called before every object value.  A <code>:</code> should be written …",10,[[],["result",6]]],[11,"end_object_value","","Called after every object value.",10,[[],["result",6]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn\'t need any escaping …",10,[[],["result",6]]],[3,"CompactFormatter","","This structure compacts a JSON value with no extra …",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it …",null,null],[11,"new","","Construct a pretty printer formatter that defaults to …",11,[[]]],[11,"with_indent","","Construct a pretty printer formatter that uses the <code>indent</code> …",11,[[]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO …",null,[[],["result",6]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON …",null,[[],["result",6]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,[[],[["vec",3],["result",6]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["vec",3],["result",6]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,[[],[["string",3],["result",6]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["string",3],["result",6]]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any …",null,null],[8,"Index","serde_json::value","A type that can be used to index into a <code>serde_json::Value</code>.",null,null],[3,"Serializer","","Serializer whose output is a <code>Value</code>.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating …",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",12,null],[13,"Bool","","Represents a JSON boolean.",12,null],[13,"Number","","Represents a JSON number, whether integer or floating …",12,null],[13,"String","","Represents a JSON string.",12,null],[13,"Array","","Represents a JSON array.",12,null],[13,"Object","","Represents a JSON object.",12,null],[11,"get","","Index into a JSON array or map. A string index can be …",12,[[["index",8]],[["value",4],["option",4]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index …",12,[[["index",8]],[["value",4],["option",4]]]],[11,"is_object","","Returns true if the <code>Value</code> is an Object. Returns false …",12,[[]]],[11,"as_object","","If the <code>Value</code> is an Object, returns the associated Map. …",12,[[],[["option",4],["map",3]]]],[11,"as_object_mut","","If the <code>Value</code> is an Object, returns the associated mutable …",12,[[],[["option",4],["map",3]]]],[11,"is_array","","Returns true if the <code>Value</code> is an Array. Returns false …",12,[[]]],[11,"as_array","","If the <code>Value</code> is an Array, returns the associated vector. …",12,[[],[["option",4],["vec",3]]]],[11,"as_array_mut","","If the <code>Value</code> is an Array, returns the associated mutable …",12,[[],[["vec",3],["option",4]]]],[11,"is_string","","Returns true if the <code>Value</code> is a String. Returns false …",12,[[]]],[11,"as_str","","If the <code>Value</code> is a String, returns the associated str. …",12,[[],["option",4]]],[11,"is_number","","Returns true if the <code>Value</code> is a Number. Returns false …",12,[[]]],[11,"is_i64","","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …",12,[[]]],[11,"is_u64","","Returns true if the <code>Value</code> is an integer between zero and …",12,[[]]],[11,"is_f64","","Returns true if the <code>Value</code> is a number that can be …",12,[[]]],[11,"as_i64","","If the <code>Value</code> is an integer, represent it as i64 if …",12,[[],["option",4]]],[11,"as_u64","","If the <code>Value</code> is an integer, represent it as u64 if …",12,[[],["option",4]]],[11,"as_f64","","If the <code>Value</code> is a number, represent it as f64 if …",12,[[],["option",4]]],[11,"is_boolean","","Returns true if the <code>Value</code> is a Boolean. Returns false …",12,[[]]],[11,"as_bool","","If the <code>Value</code> is a Boolean, returns the associated bool. …",12,[[],["option",4]]],[11,"is_null","","Returns true if the <code>Value</code> is a Null. Returns false …",12,[[]]],[11,"as_null","","If the <code>Value</code> is a Null, returns (). Returns None …",12,[[],["option",4]]],[11,"pointer","","Looks up a value by a JSON Pointer.",12,[[],[["value",4],["option",4]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable …",12,[[],[["value",4],["option",4]]]],[11,"take","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …",12,[[],["value",4]]],[5,"to_value","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …",null,[[],[["error",3],["result",4],["value",4]]]],[5,"from_value","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.",null,[[["value",4]],[["result",4],["error",3]]]],[11,"is_i64","","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …",13,[[]]],[11,"is_u64","","Returns true if the <code>Number</code> is an integer between zero and …",13,[[]]],[11,"is_f64","","Returns true if the <code>Number</code> can be represented by f64.",13,[[]]],[11,"as_i64","","If the <code>Number</code> is an integer, represent it as i64 if …",13,[[],["option",4]]],[11,"as_u64","","If the <code>Number</code> is an integer, represent it as u64 if …",13,[[],["option",4]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None …",13,[[],["option",4]]],[11,"from_f64","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …",13,[[],[["option",4],["number",3]]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input …",14,[[]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",15,[[]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",16,[[]]],[5,"from_reader","serde_json","Deserialize an instance of type <code>T</code> from an IO stream of …",null,[[],["result",6]]],[5,"from_slice","","Deserialize an instance of type <code>T</code> from bytes of JSON text.",null,[[],["result",6]]],[5,"from_str","","Deserialize an instance of type <code>T</code> from a string of JSON …",null,[[],["result",6]]],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON …",null,null],[3,"Error","","This type represents all possible errors that can occur …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.",null,null],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,[[],[["string",3],["result",6]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["string",3],["result",6]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,[[],[["vec",3],["result",6]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["vec",3],["result",6]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO …",null,[[],["result",6]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON …",null,[[],["result",6]]],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[5,"from_value","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.",null,[[["value",4]],[["result",4],["error",3]]]],[5,"to_value","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …",null,[[],[["error",3],["result",4],["value",4]]]],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating …",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",12,null],[13,"Bool","","Represents a JSON boolean.",12,null],[13,"Number","","Represents a JSON number, whether integer or floating …",12,null],[13,"String","","Represents a JSON string.",12,null],[13,"Array","","Represents a JSON array.",12,null],[13,"Object","","Represents a JSON object.",12,null],[14,"json","","Construct a <code>serde_json::Value</code> from a JSON literal.",null,null],[11,"from","serde_json::de","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","serde_json","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","serde_json::error","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","serde_json","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","serde_json::map","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","serde_json","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","serde_json::ser","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","serde_json::value","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","serde_json","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"begin_array","serde_json::ser","",11,[[],["result",6]]],[11,"end_array","","",11,[[],["result",6]]],[11,"begin_array_value","","",11,[[],["result",6]]],[11,"end_array_value","","",11,[[],["result",6]]],[11,"begin_object","","",11,[[],["result",6]]],[11,"end_object","","",11,[[],["result",6]]],[11,"begin_object_key","","",11,[[],["result",6]]],[11,"begin_object_value","","",11,[[],["result",6]]],[11,"end_object_value","","",11,[[],["result",6]]],[11,"next","serde_json::de","",14,[[],[["option",4],["result",6]]]],[11,"peek","","",14,[[],[["option",4],["result",6]]]],[11,"discard","","",14,[[]]],[11,"position","","",14,[[],["position",3]]],[11,"peek_position","","",14,[[],["position",3]]],[11,"byte_offset","","",14,[[]]],[11,"parse_str","","",14,[[["vec",3]],[["result",6],["reference",4]]]],[11,"parse_str_raw","","",14,[[["vec",3]],[["reference",4],["result",6]]]],[11,"ignore_str","","",14,[[],["result",6]]],[11,"decode_hex_escape","","",14,[[],["result",6]]],[11,"set_failed","","",14,[[]]],[11,"next","","",15,[[],[["option",4],["result",6]]]],[11,"peek","","",15,[[],[["option",4],["result",6]]]],[11,"discard","","",15,[[]]],[11,"position","","",15,[[],["position",3]]],[11,"peek_position","","",15,[[],["position",3]]],[11,"byte_offset","","",15,[[]]],[11,"parse_str","","",15,[[["vec",3]],[["result",6],["reference",4]]]],[11,"parse_str_raw","","",15,[[["vec",3]],[["result",6],["reference",4]]]],[11,"ignore_str","","",15,[[],["result",6]]],[11,"decode_hex_escape","","",15,[[],["result",6]]],[11,"set_failed","","",15,[[]]],[11,"next","","",16,[[],[["option",4],["result",6]]]],[11,"peek","","",16,[[],[["option",4],["result",6]]]],[11,"discard","","",16,[[]]],[11,"position","","",16,[[],["position",3]]],[11,"peek_position","","",16,[[],["position",3]]],[11,"byte_offset","","",16,[[]]],[11,"parse_str","","",16,[[["vec",3]],[["result",6],["reference",4]]]],[11,"parse_str_raw","","",16,[[["vec",3]],[["result",6],["reference",4]]]],[11,"ignore_str","","",16,[[],["result",6]]],[11,"decode_hex_escape","","",16,[[],["result",6]]],[11,"set_failed","","",16,[[]]],[11,"from","serde_json","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","Convert 32-bit floating point number to <code>Value</code>",12,[[]]],[11,"from","","Convert 64-bit floating point number to <code>Value</code>",12,[[]]],[11,"from","","Convert boolean to <code>Value</code>",12,[[]]],[11,"from","","Convert <code>String</code> to <code>Value</code>",12,[[["string",3]]]],[11,"from","","Convert string slice to <code>Value</code>",12,[[]]],[11,"from","","Convert copy-on-write string to <code>Value</code>",12,[[["cow",4]]]],[11,"from","","Convert <code>Number</code> to <code>Value</code>",12,[[["number",3]]]],[11,"from","","Convert map (with string keys) to <code>Value</code>",12,[[["map",3],["string",3],["value",4]]]],[11,"from","","Convert a <code>Vec</code> to <code>Value</code>",12,[[["vec",3]]]],[11,"from","","Convert a slice to <code>Value</code>",12,[[]]],[11,"from","","Convert <code>()</code> to <code>Value</code>",12,[[]]],[11,"from","serde_json::value","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"next_back","serde_json::map","",17,[[],["option",4]]],[11,"next_back","","",18,[[],["option",4]]],[11,"next_back","","",19,[[],["option",4]]],[11,"next_back","","",20,[[],["option",4]]],[11,"next_back","","",21,[[],["option",4]]],[11,"next_back","","",22,[[],["option",4]]],[11,"len","","",17,[[]]],[11,"len","","",18,[[]]],[11,"len","","",19,[[]]],[11,"len","","",20,[[]]],[11,"len","","",21,[[]]],[11,"len","","",22,[[]]],[11,"extend","serde_json","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"next","","",1,[[],[["result",6],["option",4]]]],[11,"next","serde_json::map","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"next","","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","","",22,[[],["option",4]]],[11,"size_hint","","",22,[[]]],[11,"clone","serde_json::error","",3,[[],["category",4]]],[11,"clone","serde_json","",4,[[]]],[11,"clone","serde_json::ser","",23,[[],["compactformatter",3]]],[11,"clone","","",11,[[],["prettyformatter",3]]],[11,"clone","serde_json","",12,[[],["value",4]]],[11,"clone","serde_json::value","",13,[[],["number",3]]],[11,"default","serde_json","",4,[[]]],[11,"default","serde_json::ser","",11,[[]]],[11,"default","serde_json","",12,[[],["value",4]]],[11,"eq","serde_json::error","",3,[[["category",4]]]],[11,"eq","serde_json","",4,[[]]],[11,"eq","","",12,[[["value",4]]]],[11,"ne","","",12,[[["value",4]]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[["string",3]]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","serde_json::value","",13,[[["number",3]]]],[11,"ne","","",13,[[["number",3]]]],[11,"fmt","serde_json::error","",3,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","serde_json::ser","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json","",12,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json::value","",13,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","Display a JSON value as a string.",12,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json::value","",13,[[["formatter",3]],["result",6]]],[11,"index","serde_json","",4,[[],["value",4]]],[11,"index","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> …",12,[[],["value",4]]],[11,"index_mut","","",4,[[],["value",4]]],[11,"index_mut","","Write into a <code>serde_json::Value</code> using the syntax …",12,[[],["value",4]]],[11,"from_str","serde_json::value","",13,[[],["result",4]]],[11,"from_str","serde_json","",12,[[],[["error",3],["result",4],["value",4]]]],[11,"from_iter","","",4,[[]]],[11,"from_iter","","Convert an iteratable type to a <code>Value</code>",12,[[["intoiterator",8]]]],[11,"from_iter","","Convert an iteratable type to a <code>Value</code>",12,[[["intoiterator",8]]]],[11,"source","","",2,[[],[["option",4],["error",8]]]],[11,"deserialize_any","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_i8","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_i16","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_i32","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_i64","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_u8","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_u16","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_u32","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_u64","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_f32","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_f64","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_i128","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_u128","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_option","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_enum","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_newtype_struct","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_bool","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_char","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_str","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_string","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_bytes","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_byte_buf","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_unit","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_unit_struct","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_seq","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_tuple","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_tuple_struct","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_map","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_struct","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_identifier","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_ignored_any","","",12,[[],[["result",4],["error",3]]]],[11,"deserialize_any","serde_json::value","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_i8","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_i16","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_i32","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_i64","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_u8","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_u16","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_u32","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_u64","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_f32","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_f64","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_i128","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_u128","","",13,[[],[["result",4],["error",3]]]],[11,"deserialize_bool","","",13,[[],["result",4]]],[11,"deserialize_char","","",13,[[],["result",4]]],[11,"deserialize_str","","",13,[[],["result",4]]],[11,"deserialize_string","","",13,[[],["result",4]]],[11,"deserialize_bytes","","",13,[[],["result",4]]],[11,"deserialize_byte_buf","","",13,[[],["result",4]]],[11,"deserialize_option","","",13,[[],["result",4]]],[11,"deserialize_unit","","",13,[[],["result",4]]],[11,"deserialize_unit_struct","","",13,[[],["result",4]]],[11,"deserialize_newtype_struct","","",13,[[],["result",4]]],[11,"deserialize_seq","","",13,[[],["result",4]]],[11,"deserialize_tuple","","",13,[[],["result",4]]],[11,"deserialize_tuple_struct","","",13,[[],["result",4]]],[11,"deserialize_map","","",13,[[],["result",4]]],[11,"deserialize_struct","","",13,[[],["result",4]]],[11,"deserialize_enum","","",13,[[],["result",4]]],[11,"deserialize_identifier","","",13,[[],["result",4]]],[11,"deserialize_ignored_any","","",13,[[],["result",4]]],[11,"into_deserializer","serde_json","",12,[[]]],[11,"custom","","",2,[[["display",8]],["error",3]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","serde_json::value","",13,[[],["result",4]]],[11,"serialize_bool","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_i8","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_i16","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_i32","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_i64","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_u8","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_u16","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_u32","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_u64","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_f32","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_f64","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_char","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_str","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_bytes","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_unit","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_unit_struct","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_unit_variant","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_newtype_struct","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_newtype_variant","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_none","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_some","","",24,[[],[["result",6],["value",4]]]],[11,"serialize_seq","","",24,[[["option",4]],["result",6]]],[11,"serialize_tuple","","",24,[[],["result",6]]],[11,"serialize_tuple_struct","","",24,[[],["result",6]]],[11,"serialize_tuple_variant","","",24,[[],["result",6]]],[11,"serialize_map","","",24,[[["option",4]],["result",6]]],[11,"serialize_struct","","",24,[[],["result",6]]],[11,"serialize_struct_variant","","",24,[[],["result",6]]],[11,"collect_str","","",24,[[],[["result",6],["value",4]]]],[11,"deserialize","serde_json","",4,[[],["result",4]]],[11,"deserialize","","",12,[[],[["value",4],["result",4]]]],[11,"deserialize","serde_json::value","",13,[[],[["result",4],["number",3]]]],[11,"custom","serde_json","",2,[[["display",8]],["error",3]]],[11,"invalid_type","","",2,[[["expected",8],["unexpected",4]]]]],"p":[[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[4,"Category"],[3,"Map"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Serializer"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[4,"Value"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"CompactFormatter"],[3,"Serializer"]]},\
"sharded_slab":{"doc":"A lock-free concurrent slab.","i":[[0,"implementation","sharded_slab","Notes on <code>sharded-slab</code>\'s implementation and design.",null,null],[0,"pool","","A lock-free concurrent object pool.",null,null],[3,"Pool","sharded_slab::pool","A lock-free concurrent object pool.",null,null],[3,"Ref","","A guard that allows access to an object in a pool.",null,null],[3,"RefMut","","A guard that allows exclusive mutable access to an object …",null,null],[3,"OwnedRef","","An owned guard that allows shared immutable access to an …",null,null],[3,"OwnedRefMut","","An owned guard that allows exclusive, mutable access to …",null,null],[11,"new","","Returns a new <code>Pool</code> with the default configuration …",0,[[]]],[11,"new_with_config","","Returns a new <code>Pool</code> with the provided configuration …",0,[[],[["config",8],["pool",3]]]],[18,"USED_BITS","","The number of bits in each index which are used by the …",0,null],[11,"create","","Creates a new object in the pool, returning an <code>RefMut</code> …",0,[[],[["option",4],["refmut",3]]]],[11,"create_owned","","Creates a new object in the pool, returning an <code>OwnedRefMut</code>…",0,[[["arc",3]],[["option",4],["ownedrefmut",3]]]],[11,"create_with","","Creates a new object in the pool with the provided …",0,[[],["option",4]]],[11,"get","","Return a borrowed reference to the value associated with …",0,[[],[["ref",3],["option",4]]]],[11,"get_owned","","Return an owned reference to the value associated with …",0,[[["arc",3]],[["option",4],["ownedref",3]]]],[11,"clear","","Remove the value using the storage associated with the …",0,[[]]],[11,"key","","Returns the key used to access this guard",1,[[]]],[11,"key","","Returns the key used to access the guard.",2,[[]]],[11,"downgrade","","Downgrades the mutable guard to an immutable guard, …",2,[[],["ref",3]]],[11,"key","","Returns the key used to access this guard",3,[[]]],[11,"key","","Returns the key used to access this guard",4,[[]]],[11,"downgrade","","Downgrades the owned mutable guard to an owned immutable …",4,[[],["ownedref",3]]],[8,"Config","sharded_slab","Configuration parameters which can be overridden to tune …",null,null],[18,"MAX_THREADS","","The maximum number of threads which can access the slab.",5,null],[18,"MAX_PAGES","","The maximum number of pages in each shard in the slab.",5,null],[18,"INITIAL_PAGE_SIZE","","The size of the first page in each shard.",5,null],[18,"RESERVED_BITS","","Sets a number of high-order bits in each index which are …",5,null],[3,"DefaultConfig","","Default slab configuration values.",null,null],[8,"Clear","","Trait implemented by types which can be cleared in place, …",null,null],[10,"clear","","Clear all data in <code>self</code>, retaining the allocated capacithy.",6,[[]]],[3,"Pool","","A lock-free concurrent object pool.",null,null],[3,"Slab","","A sharded slab.",null,null],[3,"Entry","","A handle that allows access to an object in a slab.",null,null],[3,"VacantEntry","","A handle to a vacant entry in a <code>Slab</code>.",null,null],[3,"OwnedEntry","","An owned guard that allows access to an object in a <code>S.ab</code>.",null,null],[11,"new","","Returns a new slab with the default configuration …",7,[[]]],[11,"new_with_config","","Returns a new slab with the provided configuration …",7,[[],[["slab",3],["config",8]]]],[18,"USED_BITS","","The number of bits in each index which are used by the …",7,null],[11,"insert","","Inserts a value into the slab, returning a key that can …",7,[[],["option",4]]],[11,"vacant_entry","","Return a handle to a vacant entry allowing for further …",7,[[],[["vacantentry",3],["option",4]]]],[11,"remove","","Remove the value associated with the given key from the …",7,[[]]],[11,"take","","Removes the value associated with the given key from the …",7,[[],["option",4]]],[11,"get","","Return a reference to the value associated with the given …",7,[[],[["option",4],["entry",3]]]],[11,"get_owned","","Return an owned reference to the value associated with …",7,[[["arc",3]],[["option",4],["ownedentry",3]]]],[11,"contains","","Returns <code>true</code> if the slab contains a value for the given …",7,[[]]],[11,"unique_iter","","Returns an iterator over all the items in the slab.",7,[[],["uniqueiter",3]]],[11,"key","","Returns the key used to access the guard.",8,[[]]],[11,"insert","","Insert a value in the entry.",9,[[]]],[11,"key","","Return the key associated with this entry.",9,[[]]],[11,"key","","Returns the key used to access this guard",10,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","sharded_slab::pool","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","sharded_slab","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"drop","sharded_slab::pool","",1,[[]]],[11,"drop","","",2,[[]]],[11,"drop","","",3,[[]]],[11,"drop","","",4,[[]]],[11,"drop","sharded_slab","",8,[[]]],[11,"drop","","",10,[[]]],[11,"clone","","",11,[[],["defaultconfig",3]]],[11,"default","","",0,[[]]],[11,"default","","",7,[[]]],[11,"eq","sharded_slab::pool","",1,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",4,[[]]],[11,"eq","sharded_slab","",8,[[]]],[11,"eq","","",10,[[]]],[11,"deref","sharded_slab::pool","",1,[[]]],[11,"deref","","",2,[[]]],[11,"deref","","",3,[[]]],[11,"deref","","",4,[[]]],[11,"deref","sharded_slab","",8,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","sharded_slab::pool","",2,[[]]],[11,"deref_mut","","",4,[[]]],[11,"fmt","sharded_slab","",0,[[["formatter",3]],["result",6]]],[11,"fmt","sharded_slab::pool","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","sharded_slab","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[18,"MAX_THREADS","","The maximum number of threads which can access the slab.",5,null],[18,"MAX_PAGES","","The maximum number of pages in each shard in the slab.",5,null],[18,"INITIAL_PAGE_SIZE","","The size of the first page in each shard.",5,null],[18,"RESERVED_BITS","","Sets a number of high-order bits in each index which are …",5,null]],"p":[[3,"Pool"],[3,"Ref"],[3,"RefMut"],[3,"OwnedRef"],[3,"OwnedRefMut"],[8,"Config"],[8,"Clear"],[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"OwnedEntry"],[3,"DefaultConfig"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","i":[[4,"CollectionAllocErr","smallvec","Error type for APIs with fallible heap allocation",null,null],[13,"CapacityOverflow","","Overflow <code>usize::MAX</code> or other error during size computation",0,null],[13,"AllocErr","","The allocator return an error",0,null],[12,"layout","smallvec::CollectionAllocErr","The layout that was passed to the allocator",1,null],[3,"Drain","smallvec","An iterator that removes the items from a <code>SmallVec</code> and …",null,null],[3,"SmallVec","","A <code>Vec</code>-like container that can store a small number of …",null,null],[11,"new","","Construct an empty vector",2,[[],["smallvec",3]]],[11,"with_capacity","","Construct an empty vector with enough capacity …",2,[[]]],[11,"from_vec","","Construct a new <code>SmallVec</code> from a <code>Vec<A::Item></code>.",2,[[["vec",3]],["smallvec",3]]],[11,"from_buf","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …",2,[[],["smallvec",3]]],[11,"from_buf_and_len","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …",2,[[],["smallvec",3]]],[11,"from_buf_and_len_unchecked","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …",2,[[["maybeuninit",19]],["smallvec",3]]],[11,"set_len","","Sets the length of a vector.",2,[[]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",2,[[]]],[11,"len","","The number of elements stored in the vector",2,[[]]],[11,"is_empty","","Returns <code>true</code> if the vector is empty",2,[[]]],[11,"capacity","","The number of items the vector can hold without …",2,[[]]],[11,"spilled","","Returns <code>true</code> if the data has spilled into a separate …",2,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",2,[[],["drain",3]]],[11,"push","","Append an item to the vector.",2,[[]]],[11,"pop","","Remove an item from the end of the vector and return it, …",2,[[],["option",4]]],[11,"append","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …",2,[[["smallvec",3]]]],[11,"grow","","Re-allocate to set the capacity to …",2,[[]]],[11,"try_grow","","Re-allocate to set the capacity to …",2,[[],[["collectionallocerr",4],["result",4]]]],[11,"reserve","","Reserve capacity for <code>additional</code> more elements to be …",2,[[]]],[11,"try_reserve","","Reserve capacity for <code>additional</code> more elements to be …",2,[[],[["collectionallocerr",4],["result",4]]]],[11,"reserve_exact","","Reserve the minimum capacity for <code>additional</code> more elements …",2,[[]]],[11,"try_reserve_exact","","Reserve the minimum capacity for <code>additional</code> more elements …",2,[[],[["collectionallocerr",4],["result",4]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",2,[[]]],[11,"truncate","","Shorten the vector, keeping the first <code>len</code> elements and …",2,[[]]],[11,"as_slice","","Extracts a slice containing the entire vector.",2,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",2,[[]]],[11,"swap_remove","","Remove the element at position <code>index</code>, replacing it with …",2,[[]]],[11,"clear","","Remove all elements from the vector.",2,[[]]],[11,"remove","","Remove and return the element at position <code>index</code>, shifting …",2,[[]]],[11,"insert","","Insert an element at position <code>index</code>, shifting all …",2,[[]]],[11,"insert_many","","Insert multiple elements at position <code>index</code>, shifting all …",2,[[["intoiterator",8]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the …",2,[[],["vec",3]]],[11,"into_boxed_slice","","Converts a <code>SmallVec</code> into a <code>Box<[T]></code> without reallocating …",2,[[],["box",3]]],[11,"into_inner","","Convert the SmallVec into an <code>A</code> if possible. Otherwise …",2,[[],["result",4]]],[11,"retain","","Retains only the elements specified by the predicate.",2,[[["fnmut",8]]]],[11,"dedup","","Removes consecutive duplicate elements.",2,[[]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given …",2,[[]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",2,[[]]],[11,"resize_with","","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …",2,[[]]],[11,"from_raw_parts","","Creates a <code>SmallVec</code> directly from the raw components of …",2,[[],["smallvec",3]]],[11,"as_ptr","","Returns a raw pointer to the vector\'s buffer.",2,[[]]],[11,"as_mut_ptr","","Returns a raw mutable pointer to the vector\'s buffer.",2,[[]]],[11,"from_slice","","Copy the elements from a slice into a new <code>SmallVec</code>.",2,[[]]],[11,"insert_from_slice","","Copy elements from a slice into the vector at position …",2,[[]]],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",2,[[]]],[11,"resize","","Resizes the vector so that its length is equal to <code>len</code>.",2,[[]]],[11,"from_elem","","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.",2,[[]]],[3,"IntoIter","","An iterator that consumes a <code>SmallVec</code> and yields its items …",null,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",3,[[]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable …",3,[[]]],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array\'s elements.",4,null],[10,"size","","Returns the number of items the array can hold.",4,[[]]],[8,"ToSmallVec","","Convenience trait for constructing a <code>SmallVec</code>",null,null],[10,"to_smallvec","","Construct a new <code>SmallVec</code> from a slice.",5,[[],["smallvec",3]]],[14,"smallvec","","Creates a [<code>SmallVec</code>] containing the arguments.",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"from","","",0,[[["layouterr",6]]]],[11,"from","","",2,[[],["smallvec",3]]],[11,"from","","",2,[[["vec",3]],["smallvec",3]]],[11,"from","","",2,[[],["smallvec",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",2,[[["smallvec",3]]]],[11,"cmp","","",2,[[["smallvec",3]],["ordering",4]]],[11,"partial_cmp","","",2,[[["smallvec",3]],[["option",4],["ordering",4]]]],[11,"drop","","",6,[[]]],[11,"drop","","",2,[[]]],[11,"drop","","",3,[[]]],[11,"index","","",2,[[]]],[11,"index_mut","","",2,[[]]],[11,"hash","","",2,[[]]],[11,"len","","",6,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"from_iter","","",2,[[["intoiterator",8]],["smallvec",3]]],[11,"as_ref","","",2,[[]]],[11,"as_mut","","",2,[[]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"into_iter","","",2,[[]]],[11,"extend","","",2,[[["intoiterator",8]]]],[11,"clone","","",2,[[],["smallvec",3]]],[11,"clone","","",3,[[],["intoiter",3]]],[11,"default","","",2,[[],["smallvec",3]]]],"p":[[4,"CollectionAllocErr"],[13,"AllocErr"],[3,"SmallVec"],[3,"IntoIter"],[8,"Array"],[8,"ToSmallVec"],[3,"Drain"]]},\
"smol_str":{"doc":"","i":[[3,"SmolStr","smol_str","A <code>SmolStr</code> is a string type that has the following …",null,null],[11,"new_inline_from_ascii","","",0,[[],["smolstr",3]]],[11,"new_inline","","Constructs inline variant of <code>SmolStr</code>.",0,[[],["smolstr",3]]],[11,"new","","",0,[[],["smolstr",3]]],[11,"as_str","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"len","","",0,[[]]],[11,"is_empty","","",0,[[]]],[11,"is_heap_allocated","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"clone","","",0,[[],["smolstr",3]]],[11,"default","","",0,[[],["smolstr",3]]],[11,"cmp","","",0,[[["smolstr",3]],["ordering",4]]],[11,"eq","","",0,[[["smolstr",3]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["string",3]]]],[11,"eq","","",0,[[["string",3]]]],[11,"partial_cmp","","",0,[[["smolstr",3]],[["option",4],["ordering",4]]]],[11,"deref","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"from_iter","","",0,[[["intoiterator",8]],["smolstr",3]]],[11,"from_iter","","",0,[[["intoiterator",8]],["smolstr",3]]],[11,"from_iter","","",0,[[["intoiterator",8]],["smolstr",3]]],[11,"from_iter","","",0,[[["intoiterator",8]],["smolstr",3]]]],"p":[[3,"SmolStr"]]},\
"strsim":{"doc":"This library implements string similarity metrics.","i":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[6,"HammingResult","","",null,null],[5,"generic_hamming","","Calculates the number of positions in the two sequences …",null,[[],["hammingresult",6]]],[5,"hamming","","Calculates the number of positions in the two strings …",null,[[],["hammingresult",6]]],[5,"generic_jaro","","Calculates the Jaro similarity between two sequences. The …",null,[[]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The …",null,[[]]],[5,"generic_jaro_winkler","","Like Jaro but gives a boost to sequences that have a …",null,[[]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common …",null,[[]]],[5,"generic_levenshtein","","Calculates the minimum number of insertions, deletions, …",null,[[]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, …",null,[[]]],[5,"normalized_levenshtein","","Calculates a normalized score of the Levenshtein …",null,[[]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. …",null,[[]]],[5,"generic_damerau_levenshtein","","Like optimal string alignment, but substrings can be …",null,[[]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be …",null,[[]]],[5,"normalized_damerau_levenshtein","","Calculates a normalized score of the …",null,[[]]],[5,"sorensen_dice","","Calculates a Sørensen-Dice similarity distance using …",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"eq","","",0,[[["strsimerror",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]]],"p":[[4,"StrSimError"]]},\
"syn":{"doc":"github crates-io docs-rs","i":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal …",null,null],[0,"token","","Tokens representing Rust punctuation, keywords, and …",null,null],[8,"Token","syn::token","Marker trait for types that represent single tokens.",null,null],[3,"Underscore","","<code>_</code>",null,null],[12,"spans","","",0,null],[3,"Abstract","","<code>abstract</code>",null,null],[12,"span","","",1,null],[3,"As","","<code>as</code>",null,null],[12,"span","","",2,null],[3,"Async","","<code>async</code>",null,null],[12,"span","","",3,null],[3,"Auto","","<code>auto</code>",null,null],[12,"span","","",4,null],[3,"Await","","<code>await</code>",null,null],[12,"span","","",5,null],[3,"Become","","<code>become</code>",null,null],[12,"span","","",6,null],[3,"Box","","<code>box</code>",null,null],[12,"span","","",7,null],[3,"Break","","<code>break</code>",null,null],[12,"span","","",8,null],[3,"Const","","<code>const</code>",null,null],[12,"span","","",9,null],[3,"Continue","","<code>continue</code>",null,null],[12,"span","","",10,null],[3,"Crate","","<code>crate</code>",null,null],[12,"span","","",11,null],[3,"Default","","<code>default</code>",null,null],[12,"span","","",12,null],[3,"Do","","<code>do</code>",null,null],[12,"span","","",13,null],[3,"Dyn","","<code>dyn</code>",null,null],[12,"span","","",14,null],[3,"Else","","<code>else</code>",null,null],[12,"span","","",15,null],[3,"Enum","","<code>enum</code>",null,null],[12,"span","","",16,null],[3,"Extern","","<code>extern</code>",null,null],[12,"span","","",17,null],[3,"Final","","<code>final</code>",null,null],[12,"span","","",18,null],[3,"Fn","","<code>fn</code>",null,null],[12,"span","","",19,null],[3,"For","","<code>for</code>",null,null],[12,"span","","",20,null],[3,"If","","<code>if</code>",null,null],[12,"span","","",21,null],[3,"Impl","","<code>impl</code>",null,null],[12,"span","","",22,null],[3,"In","","<code>in</code>",null,null],[12,"span","","",23,null],[3,"Let","","<code>let</code>",null,null],[12,"span","","",24,null],[3,"Loop","","<code>loop</code>",null,null],[12,"span","","",25,null],[3,"Macro","","<code>macro</code>",null,null],[12,"span","","",26,null],[3,"Match","","<code>match</code>",null,null],[12,"span","","",27,null],[3,"Mod","","<code>mod</code>",null,null],[12,"span","","",28,null],[3,"Move","","<code>move</code>",null,null],[12,"span","","",29,null],[3,"Mut","","<code>mut</code>",null,null],[12,"span","","",30,null],[3,"Override","","<code>override</code>",null,null],[12,"span","","",31,null],[3,"Priv","","<code>priv</code>",null,null],[12,"span","","",32,null],[3,"Pub","","<code>pub</code>",null,null],[12,"span","","",33,null],[3,"Ref","","<code>ref</code>",null,null],[12,"span","","",34,null],[3,"Return","","<code>return</code>",null,null],[12,"span","","",35,null],[3,"SelfType","","<code>Self</code>",null,null],[12,"span","","",36,null],[3,"SelfValue","","<code>self</code>",null,null],[12,"span","","",37,null],[3,"Static","","<code>static</code>",null,null],[12,"span","","",38,null],[3,"Struct","","<code>struct</code>",null,null],[12,"span","","",39,null],[3,"Super","","<code>super</code>",null,null],[12,"span","","",40,null],[3,"Trait","","<code>trait</code>",null,null],[12,"span","","",41,null],[3,"Try","","<code>try</code>",null,null],[12,"span","","",42,null],[3,"Type","","<code>type</code>",null,null],[12,"span","","",43,null],[3,"Typeof","","<code>typeof</code>",null,null],[12,"span","","",44,null],[3,"Union","","<code>union</code>",null,null],[12,"span","","",45,null],[3,"Unsafe","","<code>unsafe</code>",null,null],[12,"span","","",46,null],[3,"Unsized","","<code>unsized</code>",null,null],[12,"span","","",47,null],[3,"Use","","<code>use</code>",null,null],[12,"span","","",48,null],[3,"Virtual","","<code>virtual</code>",null,null],[12,"span","","",49,null],[3,"Where","","<code>where</code>",null,null],[12,"span","","",50,null],[3,"While","","<code>while</code>",null,null],[12,"span","","",51,null],[3,"Yield","","<code>yield</code>",null,null],[12,"span","","",52,null],[3,"Add","","<code>+</code>",null,null],[12,"spans","","",53,null],[3,"AddEq","","<code>+=</code>",null,null],[12,"spans","","",54,null],[3,"And","","<code>&</code>",null,null],[12,"spans","","",55,null],[3,"AndAnd","","<code>&&</code>",null,null],[12,"spans","","",56,null],[3,"AndEq","","<code>&=</code>",null,null],[12,"spans","","",57,null],[3,"At","","<code>@</code>",null,null],[12,"spans","","",58,null],[3,"Bang","","<code>!</code>",null,null],[12,"spans","","",59,null],[3,"Caret","","<code>^</code>",null,null],[12,"spans","","",60,null],[3,"CaretEq","","<code>^=</code>",null,null],[12,"spans","","",61,null],[3,"Colon","","<code>:</code>",null,null],[12,"spans","","",62,null],[3,"Colon2","","<code>::</code>",null,null],[12,"spans","","",63,null],[3,"Comma","","<code>,</code>",null,null],[12,"spans","","",64,null],[3,"Div","","<code>/</code>",null,null],[12,"spans","","",65,null],[3,"DivEq","","<code>/=</code>",null,null],[12,"spans","","",66,null],[3,"Dollar","","<code>$</code>",null,null],[12,"spans","","",67,null],[3,"Dot","","<code>.</code>",null,null],[12,"spans","","",68,null],[3,"Dot2","","<code>..</code>",null,null],[12,"spans","","",69,null],[3,"Dot3","","<code>...</code>",null,null],[12,"spans","","",70,null],[3,"DotDotEq","","<code>..=</code>",null,null],[12,"spans","","",71,null],[3,"Eq","","<code>=</code>",null,null],[12,"spans","","",72,null],[3,"EqEq","","<code>==</code>",null,null],[12,"spans","","",73,null],[3,"Ge","","<code>>=</code>",null,null],[12,"spans","","",74,null],[3,"Gt","","<code>></code>",null,null],[12,"spans","","",75,null],[3,"Le","","<code><=</code>",null,null],[12,"spans","","",76,null],[3,"Lt","","<code><</code>",null,null],[12,"spans","","",77,null],[3,"MulEq","","<code>*=</code>",null,null],[12,"spans","","",78,null],[3,"Ne","","<code>!=</code>",null,null],[12,"spans","","",79,null],[3,"Or","","<code>|</code>",null,null],[12,"spans","","",80,null],[3,"OrEq","","<code>|=</code>",null,null],[12,"spans","","",81,null],[3,"OrOr","","<code>||</code>",null,null],[12,"spans","","",82,null],[3,"Pound","","<code>#</code>",null,null],[12,"spans","","",83,null],[3,"Question","","<code>?</code>",null,null],[12,"spans","","",84,null],[3,"RArrow","","<code>-></code>",null,null],[12,"spans","","",85,null],[3,"LArrow","","<code><-</code>",null,null],[12,"spans","","",86,null],[3,"Rem","","<code>%</code>",null,null],[12,"spans","","",87,null],[3,"RemEq","","<code>%=</code>",null,null],[12,"spans","","",88,null],[3,"FatArrow","","<code>=></code>",null,null],[12,"spans","","",89,null],[3,"Semi","","<code>;</code>",null,null],[12,"spans","","",90,null],[3,"Shl","","<code><<</code>",null,null],[12,"spans","","",91,null],[3,"ShlEq","","<code><<=</code>",null,null],[12,"spans","","",92,null],[3,"Shr","","<code>>></code>",null,null],[12,"spans","","",93,null],[3,"ShrEq","","<code>>>=</code>",null,null],[12,"spans","","",94,null],[3,"Star","","<code>*</code>",null,null],[12,"spans","","",95,null],[3,"Sub","","<code>-</code>",null,null],[12,"spans","","",96,null],[3,"SubEq","","<code>-=</code>",null,null],[12,"spans","","",97,null],[3,"Tilde","","<code>~</code>",null,null],[12,"spans","","",98,null],[3,"Brace","","<code>{...}</code>",null,null],[12,"span","","",99,null],[11,"surround","","",99,[[["tokenstream",3]]]],[3,"Bracket","","<code>[...]</code>",null,null],[12,"span","","",100,null],[11,"surround","","",100,[[["tokenstream",3]]]],[3,"Paren","","<code>(...)</code>",null,null],[12,"span","","",101,null],[11,"surround","","",101,[[["tokenstream",3]]]],[3,"Group","","None-delimited group",null,null],[12,"span","","",102,null],[11,"surround","","",102,[[["tokenstream",3]]]],[0,"buffer","syn","A stably addressed token buffer supporting efficient …",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple …",null,null],[11,"new","","Creates a <code>TokenBuffer</code> containing all the tokens from the …",103,[[["tokenstream",3]],["tokenbuffer",3]]],[11,"new2","","Creates a <code>TokenBuffer</code> containing all the tokens from the …",103,[[["tokenstream",3]],["tokenbuffer",3]]],[11,"begin","","Creates a cursor referencing the first token in the …",103,[[],["cursor",3]]],[3,"Cursor","","A cheaply copyable cursor into a <code>TokenBuffer</code>.",null,null],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",104,[[]]],[11,"eof","","Checks whether the cursor is currently pointing at the …",104,[[]]],[11,"group","","If the cursor is pointing at a <code>Group</code> with the given …",104,[[["delimiter",4]],["option",4]]],[11,"ident","","If the cursor is pointing at a <code>Ident</code>, returns it along …",104,[[],["option",4]]],[11,"punct","","If the cursor is pointing at an <code>Punct</code>, returns it along …",104,[[],["option",4]]],[11,"literal","","If the cursor is pointing at a <code>Literal</code>, return it along …",104,[[],["option",4]]],[11,"lifetime","","If the cursor is pointing at a <code>Lifetime</code>, returns it along …",104,[[],["option",4]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into …",104,[[],["tokenstream",3]]],[11,"token_tree","","If the cursor is pointing at a <code>TokenTree</code>, returns it …",104,[[],["option",4]]],[11,"span","","Returns the <code>Span</code> of the current token, or …",104,[[],["span",3]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign …",null,null],[8,"IdentExt","syn::ext","Additional methods for <code>Ident</code> not provided by proc-macro2 …",null,null],[10,"parse_any","","Parses any identifier including keywords.",105,[[["parsestream",6]],["result",6]]],[18,"peek_any","","Peeks any identifier including keywords. Usage: …",105,null],[10,"unraw","","Strips the raw marker <code>r#</code>, if any, from the beginning of …",105,[[],["ident",3]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by …",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type <code>T</code> …",null,null],[11,"new","","Creates an empty punctuated sequence.",106,[[]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, …",106,[[]]],[11,"len","","Returns the number of syntax tree nodes in this …",106,[[]]],[11,"first","","Borrows the first element in this sequence.",106,[[],["option",4]]],[11,"first_mut","","Mutably borrows the first element in this sequence.",106,[[],["option",4]]],[11,"last","","Borrows the last element in this sequence.",106,[[],["option",4]]],[11,"last_mut","","Mutably borrows the last element in this sequence.",106,[[],["option",4]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of …",106,[[],["iter",3]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree …",106,[[],["itermut",3]]],[11,"pairs","","Returns an iterator over the contents of this sequence as …",106,[[],["pairs",3]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as …",106,[[],["pairsmut",3]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as …",106,[[],["intopairs",3]]],[11,"push_value","","Appends a syntax tree node onto the end of this …",106,[[]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this …",106,[[]]],[11,"pop","","Removes the last punctuated pair from this sequence, or …",106,[[],[["pair",4],["option",4]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a …",106,[[]]],[11,"empty_or_trailing","","Returns true if either this <code>Punctuated</code> is empty, or it …",106,[[]]],[11,"push","","Appends a syntax tree node onto the end of this …",106,[[]]],[11,"insert","","Inserts an element at position <code>index</code>.",106,[[]]],[11,"clear","","Clears the sequence of all values and punctuation, making …",106,[[]]],[11,"parse_terminated","","Parses zero or more occurrences of <code>T</code> separated by …",106,[[["parsestream",6]],["result",6]]],[11,"parse_terminated_with","","Parses zero or more occurrences of <code>T</code> using the given …",106,[[["parsestream",6]],["result",6]]],[11,"parse_separated_nonempty","","Parses one or more occurrences of <code>T</code> separated by …",106,[[["parsestream",6]],["result",6]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of <code>T</code> using the given parse …",106,[[["parsestream",6]],["result",6]]],[3,"Pairs","","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type …",null,null],[3,"IntoPairs","","An iterator over owned pairs of type <code>Pair<T, P></code>.",null,null],[3,"IntoIter","","An iterator over owned values of type <code>T</code>.",null,null],[3,"Iter","","An iterator over borrowed values of type <code>&T</code>.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type <code>&mut T</code>.",null,null],[4,"Pair","","A single syntax tree node of type <code>T</code> followed by its …",null,null],[13,"Punctuated","","",107,null],[13,"End","","",107,null],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, …",107,[[]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",107,[[]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated …",107,[[]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless …",107,[[],["option",4]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and …",107,[[["option",4]]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree …",107,[[]]],[0,"spanned","syn","A trait that can provide the <code>Span</code> of the complete …",null,null],[8,"Spanned","syn::spanned","A trait that can provide the <code>Span</code> of the complete …",null,null],[10,"span","","Returns a <code>Span</code> covering the complete contents of this …",108,[[],["span",3]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax …",null,null],[8,"Visit","syn::visit","Syntax tree traversal to walk a shared borrow of a syntax …",null,null],[11,"visit_abi","","",109,[[["abi",3]]]],[11,"visit_angle_bracketed_generic_arguments","","",109,[[["anglebracketedgenericarguments",3]]]],[11,"visit_arm","","",109,[[["arm",3]]]],[11,"visit_attr_style","","",109,[[["attrstyle",4]]]],[11,"visit_attribute","","",109,[[["attribute",3]]]],[11,"visit_bare_fn_arg","","",109,[[["barefnarg",3]]]],[11,"visit_bin_op","","",109,[[["binop",4]]]],[11,"visit_binding","","",109,[[["binding",3]]]],[11,"visit_block","","",109,[[["block",3]]]],[11,"visit_bound_lifetimes","","",109,[[["boundlifetimes",3]]]],[11,"visit_const_param","","",109,[[["constparam",3]]]],[11,"visit_constraint","","",109,[[["constraint",3]]]],[11,"visit_data","","",109,[[["data",4]]]],[11,"visit_data_enum","","",109,[[["dataenum",3]]]],[11,"visit_data_struct","","",109,[[["datastruct",3]]]],[11,"visit_data_union","","",109,[[["dataunion",3]]]],[11,"visit_derive_input","","",109,[[["deriveinput",3]]]],[11,"visit_expr","","",109,[[["expr",4]]]],[11,"visit_expr_array","","",109,[[["exprarray",3]]]],[11,"visit_expr_assign","","",109,[[["exprassign",3]]]],[11,"visit_expr_assign_op","","",109,[[["exprassignop",3]]]],[11,"visit_expr_async","","",109,[[["exprasync",3]]]],[11,"visit_expr_await","","",109,[[["exprawait",3]]]],[11,"visit_expr_binary","","",109,[[["exprbinary",3]]]],[11,"visit_expr_block","","",109,[[["exprblock",3]]]],[11,"visit_expr_box","","",109,[[["exprbox",3]]]],[11,"visit_expr_break","","",109,[[["exprbreak",3]]]],[11,"visit_expr_call","","",109,[[["exprcall",3]]]],[11,"visit_expr_cast","","",109,[[["exprcast",3]]]],[11,"visit_expr_closure","","",109,[[["exprclosure",3]]]],[11,"visit_expr_continue","","",109,[[["exprcontinue",3]]]],[11,"visit_expr_field","","",109,[[["exprfield",3]]]],[11,"visit_expr_for_loop","","",109,[[["exprforloop",3]]]],[11,"visit_expr_group","","",109,[[["exprgroup",3]]]],[11,"visit_expr_if","","",109,[[["exprif",3]]]],[11,"visit_expr_index","","",109,[[["exprindex",3]]]],[11,"visit_expr_let","","",109,[[["exprlet",3]]]],[11,"visit_expr_lit","","",109,[[["exprlit",3]]]],[11,"visit_expr_loop","","",109,[[["exprloop",3]]]],[11,"visit_expr_macro","","",109,[[["exprmacro",3]]]],[11,"visit_expr_match","","",109,[[["exprmatch",3]]]],[11,"visit_expr_method_call","","",109,[[["exprmethodcall",3]]]],[11,"visit_expr_paren","","",109,[[["exprparen",3]]]],[11,"visit_expr_path","","",109,[[["exprpath",3]]]],[11,"visit_expr_range","","",109,[[["exprrange",3]]]],[11,"visit_expr_reference","","",109,[[["exprreference",3]]]],[11,"visit_expr_repeat","","",109,[[["exprrepeat",3]]]],[11,"visit_expr_return","","",109,[[["exprreturn",3]]]],[11,"visit_expr_struct","","",109,[[["exprstruct",3]]]],[11,"visit_expr_try","","",109,[[["exprtry",3]]]],[11,"visit_expr_try_block","","",109,[[["exprtryblock",3]]]],[11,"visit_expr_tuple","","",109,[[["exprtuple",3]]]],[11,"visit_expr_type","","",109,[[["exprtype",3]]]],[11,"visit_expr_unary","","",109,[[["exprunary",3]]]],[11,"visit_expr_unsafe","","",109,[[["exprunsafe",3]]]],[11,"visit_expr_while","","",109,[[["exprwhile",3]]]],[11,"visit_expr_yield","","",109,[[["expryield",3]]]],[11,"visit_field","","",109,[[["field",3]]]],[11,"visit_field_pat","","",109,[[["fieldpat",3]]]],[11,"visit_field_value","","",109,[[["fieldvalue",3]]]],[11,"visit_fields","","",109,[[["fields",4]]]],[11,"visit_fields_named","","",109,[[["fieldsnamed",3]]]],[11,"visit_fields_unnamed","","",109,[[["fieldsunnamed",3]]]],[11,"visit_file","","",109,[[["file",3]]]],[11,"visit_fn_arg","","",109,[[["fnarg",4]]]],[11,"visit_foreign_item","","",109,[[["foreignitem",4]]]],[11,"visit_foreign_item_fn","","",109,[[["foreignitemfn",3]]]],[11,"visit_foreign_item_macro","","",109,[[["foreignitemmacro",3]]]],[11,"visit_foreign_item_static","","",109,[[["foreignitemstatic",3]]]],[11,"visit_foreign_item_type","","",109,[[["foreignitemtype",3]]]],[11,"visit_generic_argument","","",109,[[["genericargument",4]]]],[11,"visit_generic_method_argument","","",109,[[["genericmethodargument",4]]]],[11,"visit_generic_param","","",109,[[["genericparam",4]]]],[11,"visit_generics","","",109,[[["generics",3]]]],[11,"visit_ident","","",109,[[["ident",3]]]],[11,"visit_impl_item","","",109,[[["implitem",4]]]],[11,"visit_impl_item_const","","",109,[[["implitemconst",3]]]],[11,"visit_impl_item_macro","","",109,[[["implitemmacro",3]]]],[11,"visit_impl_item_method","","",109,[[["implitemmethod",3]]]],[11,"visit_impl_item_type","","",109,[[["implitemtype",3]]]],[11,"visit_index","","",109,[[["index",3]]]],[11,"visit_item","","",109,[[["item",4]]]],[11,"visit_item_const","","",109,[[["itemconst",3]]]],[11,"visit_item_enum","","",109,[[["itemenum",3]]]],[11,"visit_item_extern_crate","","",109,[[["itemexterncrate",3]]]],[11,"visit_item_fn","","",109,[[["itemfn",3]]]],[11,"visit_item_foreign_mod","","",109,[[["itemforeignmod",3]]]],[11,"visit_item_impl","","",109,[[["itemimpl",3]]]],[11,"visit_item_macro","","",109,[[["itemmacro",3]]]],[11,"visit_item_macro2","","",109,[[["itemmacro2",3]]]],[11,"visit_item_mod","","",109,[[["itemmod",3]]]],[11,"visit_item_static","","",109,[[["itemstatic",3]]]],[11,"visit_item_struct","","",109,[[["itemstruct",3]]]],[11,"visit_item_trait","","",109,[[["itemtrait",3]]]],[11,"visit_item_trait_alias","","",109,[[["itemtraitalias",3]]]],[11,"visit_item_type","","",109,[[["itemtype",3]]]],[11,"visit_item_union","","",109,[[["itemunion",3]]]],[11,"visit_item_use","","",109,[[["itemuse",3]]]],[11,"visit_label","","",109,[[["label",3]]]],[11,"visit_lifetime","","",109,[[["lifetime",3]]]],[11,"visit_lifetime_def","","",109,[[["lifetimedef",3]]]],[11,"visit_lit","","",109,[[["lit",4]]]],[11,"visit_lit_bool","","",109,[[["litbool",3]]]],[11,"visit_lit_byte","","",109,[[["litbyte",3]]]],[11,"visit_lit_byte_str","","",109,[[["litbytestr",3]]]],[11,"visit_lit_char","","",109,[[["litchar",3]]]],[11,"visit_lit_float","","",109,[[["litfloat",3]]]],[11,"visit_lit_int","","",109,[[["litint",3]]]],[11,"visit_lit_str","","",109,[[["litstr",3]]]],[11,"visit_local","","",109,[[["local",3]]]],[11,"visit_macro","","",109,[[["macro",3]]]],[11,"visit_macro_delimiter","","",109,[[["macrodelimiter",4]]]],[11,"visit_member","","",109,[[["member",4]]]],[11,"visit_meta","","",109,[[["meta",4]]]],[11,"visit_meta_list","","",109,[[["metalist",3]]]],[11,"visit_meta_name_value","","",109,[[["metanamevalue",3]]]],[11,"visit_method_turbofish","","",109,[[["methodturbofish",3]]]],[11,"visit_nested_meta","","",109,[[["nestedmeta",4]]]],[11,"visit_parenthesized_generic_arguments","","",109,[[["parenthesizedgenericarguments",3]]]],[11,"visit_pat","","",109,[[["pat",4]]]],[11,"visit_pat_box","","",109,[[["patbox",3]]]],[11,"visit_pat_ident","","",109,[[["patident",3]]]],[11,"visit_pat_lit","","",109,[[["patlit",3]]]],[11,"visit_pat_macro","","",109,[[["patmacro",3]]]],[11,"visit_pat_or","","",109,[[["pator",3]]]],[11,"visit_pat_path","","",109,[[["patpath",3]]]],[11,"visit_pat_range","","",109,[[["patrange",3]]]],[11,"visit_pat_reference","","",109,[[["patreference",3]]]],[11,"visit_pat_rest","","",109,[[["patrest",3]]]],[11,"visit_pat_slice","","",109,[[["patslice",3]]]],[11,"visit_pat_struct","","",109,[[["patstruct",3]]]],[11,"visit_pat_tuple","","",109,[[["pattuple",3]]]],[11,"visit_pat_tuple_struct","","",109,[[["pattuplestruct",3]]]],[11,"visit_pat_type","","",109,[[["pattype",3]]]],[11,"visit_pat_wild","","",109,[[["patwild",3]]]],[11,"visit_path","","",109,[[["path",3]]]],[11,"visit_path_arguments","","",109,[[["patharguments",4]]]],[11,"visit_path_segment","","",109,[[["pathsegment",3]]]],[11,"visit_predicate_eq","","",109,[[["predicateeq",3]]]],[11,"visit_predicate_lifetime","","",109,[[["predicatelifetime",3]]]],[11,"visit_predicate_type","","",109,[[["predicatetype",3]]]],[11,"visit_qself","","",109,[[["qself",3]]]],[11,"visit_range_limits","","",109,[[["rangelimits",4]]]],[11,"visit_receiver","","",109,[[["receiver",3]]]],[11,"visit_return_type","","",109,[[["returntype",4]]]],[11,"visit_signature","","",109,[[["signature",3]]]],[11,"visit_span","","",109,[[["span",3]]]],[11,"visit_stmt","","",109,[[["stmt",4]]]],[11,"visit_trait_bound","","",109,[[["traitbound",3]]]],[11,"visit_trait_bound_modifier","","",109,[[["traitboundmodifier",4]]]],[11,"visit_trait_item","","",109,[[["traititem",4]]]],[11,"visit_trait_item_const","","",109,[[["traititemconst",3]]]],[11,"visit_trait_item_macro","","",109,[[["traititemmacro",3]]]],[11,"visit_trait_item_method","","",109,[[["traititemmethod",3]]]],[11,"visit_trait_item_type","","",109,[[["traititemtype",3]]]],[11,"visit_type","","",109,[[["type",4]]]],[11,"visit_type_array","","",109,[[["typearray",3]]]],[11,"visit_type_bare_fn","","",109,[[["typebarefn",3]]]],[11,"visit_type_group","","",109,[[["typegroup",3]]]],[11,"visit_type_impl_trait","","",109,[[["typeimpltrait",3]]]],[11,"visit_type_infer","","",109,[[["typeinfer",3]]]],[11,"visit_type_macro","","",109,[[["typemacro",3]]]],[11,"visit_type_never","","",109,[[["typenever",3]]]],[11,"visit_type_param","","",109,[[["typeparam",3]]]],[11,"visit_type_param_bound","","",109,[[["typeparambound",4]]]],[11,"visit_type_paren","","",109,[[["typeparen",3]]]],[11,"visit_type_path","","",109,[[["typepath",3]]]],[11,"visit_type_ptr","","",109,[[["typeptr",3]]]],[11,"visit_type_reference","","",109,[[["typereference",3]]]],[11,"visit_type_slice","","",109,[[["typeslice",3]]]],[11,"visit_type_trait_object","","",109,[[["typetraitobject",3]]]],[11,"visit_type_tuple","","",109,[[["typetuple",3]]]],[11,"visit_un_op","","",109,[[["unop",4]]]],[11,"visit_use_glob","","",109,[[["useglob",3]]]],[11,"visit_use_group","","",109,[[["usegroup",3]]]],[11,"visit_use_name","","",109,[[["usename",3]]]],[11,"visit_use_path","","",109,[[["usepath",3]]]],[11,"visit_use_rename","","",109,[[["userename",3]]]],[11,"visit_use_tree","","",109,[[["usetree",4]]]],[11,"visit_variadic","","",109,[[["variadic",3]]]],[11,"visit_variant","","",109,[[["variant",3]]]],[11,"visit_vis_crate","","",109,[[["viscrate",3]]]],[11,"visit_vis_public","","",109,[[["vispublic",3]]]],[11,"visit_vis_restricted","","",109,[[["visrestricted",3]]]],[11,"visit_visibility","","",109,[[["visibility",4]]]],[11,"visit_where_clause","","",109,[[["whereclause",3]]]],[11,"visit_where_predicate","","",109,[[["wherepredicate",4]]]],[5,"visit_abi","","",null,[[["abi",3]]]],[5,"visit_angle_bracketed_generic_arguments","","",null,[[["anglebracketedgenericarguments",3]]]],[5,"visit_arm","","",null,[[["arm",3]]]],[5,"visit_attr_style","","",null,[[["attrstyle",4]]]],[5,"visit_attribute","","",null,[[["attribute",3]]]],[5,"visit_bare_fn_arg","","",null,[[["barefnarg",3]]]],[5,"visit_bin_op","","",null,[[["binop",4]]]],[5,"visit_binding","","",null,[[["binding",3]]]],[5,"visit_block","","",null,[[["block",3]]]],[5,"visit_bound_lifetimes","","",null,[[["boundlifetimes",3]]]],[5,"visit_const_param","","",null,[[["constparam",3]]]],[5,"visit_constraint","","",null,[[["constraint",3]]]],[5,"visit_data","","",null,[[["data",4]]]],[5,"visit_data_enum","","",null,[[["dataenum",3]]]],[5,"visit_data_struct","","",null,[[["datastruct",3]]]],[5,"visit_data_union","","",null,[[["dataunion",3]]]],[5,"visit_derive_input","","",null,[[["deriveinput",3]]]],[5,"visit_expr","","",null,[[["expr",4]]]],[5,"visit_expr_array","","",null,[[["exprarray",3]]]],[5,"visit_expr_assign","","",null,[[["exprassign",3]]]],[5,"visit_expr_assign_op","","",null,[[["exprassignop",3]]]],[5,"visit_expr_async","","",null,[[["exprasync",3]]]],[5,"visit_expr_await","","",null,[[["exprawait",3]]]],[5,"visit_expr_binary","","",null,[[["exprbinary",3]]]],[5,"visit_expr_block","","",null,[[["exprblock",3]]]],[5,"visit_expr_box","","",null,[[["exprbox",3]]]],[5,"visit_expr_break","","",null,[[["exprbreak",3]]]],[5,"visit_expr_call","","",null,[[["exprcall",3]]]],[5,"visit_expr_cast","","",null,[[["exprcast",3]]]],[5,"visit_expr_closure","","",null,[[["exprclosure",3]]]],[5,"visit_expr_continue","","",null,[[["exprcontinue",3]]]],[5,"visit_expr_field","","",null,[[["exprfield",3]]]],[5,"visit_expr_for_loop","","",null,[[["exprforloop",3]]]],[5,"visit_expr_group","","",null,[[["exprgroup",3]]]],[5,"visit_expr_if","","",null,[[["exprif",3]]]],[5,"visit_expr_index","","",null,[[["exprindex",3]]]],[5,"visit_expr_let","","",null,[[["exprlet",3]]]],[5,"visit_expr_lit","","",null,[[["exprlit",3]]]],[5,"visit_expr_loop","","",null,[[["exprloop",3]]]],[5,"visit_expr_macro","","",null,[[["exprmacro",3]]]],[5,"visit_expr_match","","",null,[[["exprmatch",3]]]],[5,"visit_expr_method_call","","",null,[[["exprmethodcall",3]]]],[5,"visit_expr_paren","","",null,[[["exprparen",3]]]],[5,"visit_expr_path","","",null,[[["exprpath",3]]]],[5,"visit_expr_range","","",null,[[["exprrange",3]]]],[5,"visit_expr_reference","","",null,[[["exprreference",3]]]],[5,"visit_expr_repeat","","",null,[[["exprrepeat",3]]]],[5,"visit_expr_return","","",null,[[["exprreturn",3]]]],[5,"visit_expr_struct","","",null,[[["exprstruct",3]]]],[5,"visit_expr_try","","",null,[[["exprtry",3]]]],[5,"visit_expr_try_block","","",null,[[["exprtryblock",3]]]],[5,"visit_expr_tuple","","",null,[[["exprtuple",3]]]],[5,"visit_expr_type","","",null,[[["exprtype",3]]]],[5,"visit_expr_unary","","",null,[[["exprunary",3]]]],[5,"visit_expr_unsafe","","",null,[[["exprunsafe",3]]]],[5,"visit_expr_while","","",null,[[["exprwhile",3]]]],[5,"visit_expr_yield","","",null,[[["expryield",3]]]],[5,"visit_field","","",null,[[["field",3]]]],[5,"visit_field_pat","","",null,[[["fieldpat",3]]]],[5,"visit_field_value","","",null,[[["fieldvalue",3]]]],[5,"visit_fields","","",null,[[["fields",4]]]],[5,"visit_fields_named","","",null,[[["fieldsnamed",3]]]],[5,"visit_fields_unnamed","","",null,[[["fieldsunnamed",3]]]],[5,"visit_file","","",null,[[["file",3]]]],[5,"visit_fn_arg","","",null,[[["fnarg",4]]]],[5,"visit_foreign_item","","",null,[[["foreignitem",4]]]],[5,"visit_foreign_item_fn","","",null,[[["foreignitemfn",3]]]],[5,"visit_foreign_item_macro","","",null,[[["foreignitemmacro",3]]]],[5,"visit_foreign_item_static","","",null,[[["foreignitemstatic",3]]]],[5,"visit_foreign_item_type","","",null,[[["foreignitemtype",3]]]],[5,"visit_generic_argument","","",null,[[["genericargument",4]]]],[5,"visit_generic_method_argument","","",null,[[["genericmethodargument",4]]]],[5,"visit_generic_param","","",null,[[["genericparam",4]]]],[5,"visit_generics","","",null,[[["generics",3]]]],[5,"visit_ident","","",null,[[["ident",3]]]],[5,"visit_impl_item","","",null,[[["implitem",4]]]],[5,"visit_impl_item_const","","",null,[[["implitemconst",3]]]],[5,"visit_impl_item_macro","","",null,[[["implitemmacro",3]]]],[5,"visit_impl_item_method","","",null,[[["implitemmethod",3]]]],[5,"visit_impl_item_type","","",null,[[["implitemtype",3]]]],[5,"visit_index","","",null,[[["index",3]]]],[5,"visit_item","","",null,[[["item",4]]]],[5,"visit_item_const","","",null,[[["itemconst",3]]]],[5,"visit_item_enum","","",null,[[["itemenum",3]]]],[5,"visit_item_extern_crate","","",null,[[["itemexterncrate",3]]]],[5,"visit_item_fn","","",null,[[["itemfn",3]]]],[5,"visit_item_foreign_mod","","",null,[[["itemforeignmod",3]]]],[5,"visit_item_impl","","",null,[[["itemimpl",3]]]],[5,"visit_item_macro","","",null,[[["itemmacro",3]]]],[5,"visit_item_macro2","","",null,[[["itemmacro2",3]]]],[5,"visit_item_mod","","",null,[[["itemmod",3]]]],[5,"visit_item_static","","",null,[[["itemstatic",3]]]],[5,"visit_item_struct","","",null,[[["itemstruct",3]]]],[5,"visit_item_trait","","",null,[[["itemtrait",3]]]],[5,"visit_item_trait_alias","","",null,[[["itemtraitalias",3]]]],[5,"visit_item_type","","",null,[[["itemtype",3]]]],[5,"visit_item_union","","",null,[[["itemunion",3]]]],[5,"visit_item_use","","",null,[[["itemuse",3]]]],[5,"visit_label","","",null,[[["label",3]]]],[5,"visit_lifetime","","",null,[[["lifetime",3]]]],[5,"visit_lifetime_def","","",null,[[["lifetimedef",3]]]],[5,"visit_lit","","",null,[[["lit",4]]]],[5,"visit_lit_bool","","",null,[[["litbool",3]]]],[5,"visit_lit_byte","","",null,[[["litbyte",3]]]],[5,"visit_lit_byte_str","","",null,[[["litbytestr",3]]]],[5,"visit_lit_char","","",null,[[["litchar",3]]]],[5,"visit_lit_float","","",null,[[["litfloat",3]]]],[5,"visit_lit_int","","",null,[[["litint",3]]]],[5,"visit_lit_str","","",null,[[["litstr",3]]]],[5,"visit_local","","",null,[[["local",3]]]],[5,"visit_macro","","",null,[[["macro",3]]]],[5,"visit_macro_delimiter","","",null,[[["macrodelimiter",4]]]],[5,"visit_member","","",null,[[["member",4]]]],[5,"visit_meta","","",null,[[["meta",4]]]],[5,"visit_meta_list","","",null,[[["metalist",3]]]],[5,"visit_meta_name_value","","",null,[[["metanamevalue",3]]]],[5,"visit_method_turbofish","","",null,[[["methodturbofish",3]]]],[5,"visit_nested_meta","","",null,[[["nestedmeta",4]]]],[5,"visit_parenthesized_generic_arguments","","",null,[[["parenthesizedgenericarguments",3]]]],[5,"visit_pat","","",null,[[["pat",4]]]],[5,"visit_pat_box","","",null,[[["patbox",3]]]],[5,"visit_pat_ident","","",null,[[["patident",3]]]],[5,"visit_pat_lit","","",null,[[["patlit",3]]]],[5,"visit_pat_macro","","",null,[[["patmacro",3]]]],[5,"visit_pat_or","","",null,[[["pator",3]]]],[5,"visit_pat_path","","",null,[[["patpath",3]]]],[5,"visit_pat_range","","",null,[[["patrange",3]]]],[5,"visit_pat_reference","","",null,[[["patreference",3]]]],[5,"visit_pat_rest","","",null,[[["patrest",3]]]],[5,"visit_pat_slice","","",null,[[["patslice",3]]]],[5,"visit_pat_struct","","",null,[[["patstruct",3]]]],[5,"visit_pat_tuple","","",null,[[["pattuple",3]]]],[5,"visit_pat_tuple_struct","","",null,[[["pattuplestruct",3]]]],[5,"visit_pat_type","","",null,[[["pattype",3]]]],[5,"visit_pat_wild","","",null,[[["patwild",3]]]],[5,"visit_path","","",null,[[["path",3]]]],[5,"visit_path_arguments","","",null,[[["patharguments",4]]]],[5,"visit_path_segment","","",null,[[["pathsegment",3]]]],[5,"visit_predicate_eq","","",null,[[["predicateeq",3]]]],[5,"visit_predicate_lifetime","","",null,[[["predicatelifetime",3]]]],[5,"visit_predicate_type","","",null,[[["predicatetype",3]]]],[5,"visit_qself","","",null,[[["qself",3]]]],[5,"visit_range_limits","","",null,[[["rangelimits",4]]]],[5,"visit_receiver","","",null,[[["receiver",3]]]],[5,"visit_return_type","","",null,[[["returntype",4]]]],[5,"visit_signature","","",null,[[["signature",3]]]],[5,"visit_span","","",null,[[["span",3]]]],[5,"visit_stmt","","",null,[[["stmt",4]]]],[5,"visit_trait_bound","","",null,[[["traitbound",3]]]],[5,"visit_trait_bound_modifier","","",null,[[["traitboundmodifier",4]]]],[5,"visit_trait_item","","",null,[[["traititem",4]]]],[5,"visit_trait_item_const","","",null,[[["traititemconst",3]]]],[5,"visit_trait_item_macro","","",null,[[["traititemmacro",3]]]],[5,"visit_trait_item_method","","",null,[[["traititemmethod",3]]]],[5,"visit_trait_item_type","","",null,[[["traititemtype",3]]]],[5,"visit_type","","",null,[[["type",4]]]],[5,"visit_type_array","","",null,[[["typearray",3]]]],[5,"visit_type_bare_fn","","",null,[[["typebarefn",3]]]],[5,"visit_type_group","","",null,[[["typegroup",3]]]],[5,"visit_type_impl_trait","","",null,[[["typeimpltrait",3]]]],[5,"visit_type_infer","","",null,[[["typeinfer",3]]]],[5,"visit_type_macro","","",null,[[["typemacro",3]]]],[5,"visit_type_never","","",null,[[["typenever",3]]]],[5,"visit_type_param","","",null,[[["typeparam",3]]]],[5,"visit_type_param_bound","","",null,[[["typeparambound",4]]]],[5,"visit_type_paren","","",null,[[["typeparen",3]]]],[5,"visit_type_path","","",null,[[["typepath",3]]]],[5,"visit_type_ptr","","",null,[[["typeptr",3]]]],[5,"visit_type_reference","","",null,[[["typereference",3]]]],[5,"visit_type_slice","","",null,[[["typeslice",3]]]],[5,"visit_type_trait_object","","",null,[[["typetraitobject",3]]]],[5,"visit_type_tuple","","",null,[[["typetuple",3]]]],[5,"visit_un_op","","",null,[[["unop",4]]]],[5,"visit_use_glob","","",null,[[["useglob",3]]]],[5,"visit_use_group","","",null,[[["usegroup",3]]]],[5,"visit_use_name","","",null,[[["usename",3]]]],[5,"visit_use_path","","",null,[[["usepath",3]]]],[5,"visit_use_rename","","",null,[[["userename",3]]]],[5,"visit_use_tree","","",null,[[["usetree",4]]]],[5,"visit_variadic","","",null,[[["variadic",3]]]],[5,"visit_variant","","",null,[[["variant",3]]]],[5,"visit_vis_crate","","",null,[[["viscrate",3]]]],[5,"visit_vis_public","","",null,[[["vispublic",3]]]],[5,"visit_vis_restricted","","",null,[[["visrestricted",3]]]],[5,"visit_visibility","","",null,[[["visibility",4]]]],[5,"visit_where_clause","","",null,[[["whereclause",3]]]],[5,"visit_where_predicate","","",null,[[["wherepredicate",4]]]],[0,"visit_mut","syn","Syntax tree traversal to mutate an exclusive borrow of a …",null,null],[8,"VisitMut","syn::visit_mut","Syntax tree traversal to mutate an exclusive borrow of a …",null,null],[11,"visit_abi_mut","","",110,[[["abi",3]]]],[11,"visit_angle_bracketed_generic_arguments_mut","","",110,[[["anglebracketedgenericarguments",3]]]],[11,"visit_arm_mut","","",110,[[["arm",3]]]],[11,"visit_attr_style_mut","","",110,[[["attrstyle",4]]]],[11,"visit_attribute_mut","","",110,[[["attribute",3]]]],[11,"visit_bare_fn_arg_mut","","",110,[[["barefnarg",3]]]],[11,"visit_bin_op_mut","","",110,[[["binop",4]]]],[11,"visit_binding_mut","","",110,[[["binding",3]]]],[11,"visit_block_mut","","",110,[[["block",3]]]],[11,"visit_bound_lifetimes_mut","","",110,[[["boundlifetimes",3]]]],[11,"visit_const_param_mut","","",110,[[["constparam",3]]]],[11,"visit_constraint_mut","","",110,[[["constraint",3]]]],[11,"visit_data_mut","","",110,[[["data",4]]]],[11,"visit_data_enum_mut","","",110,[[["dataenum",3]]]],[11,"visit_data_struct_mut","","",110,[[["datastruct",3]]]],[11,"visit_data_union_mut","","",110,[[["dataunion",3]]]],[11,"visit_derive_input_mut","","",110,[[["deriveinput",3]]]],[11,"visit_expr_mut","","",110,[[["expr",4]]]],[11,"visit_expr_array_mut","","",110,[[["exprarray",3]]]],[11,"visit_expr_assign_mut","","",110,[[["exprassign",3]]]],[11,"visit_expr_assign_op_mut","","",110,[[["exprassignop",3]]]],[11,"visit_expr_async_mut","","",110,[[["exprasync",3]]]],[11,"visit_expr_await_mut","","",110,[[["exprawait",3]]]],[11,"visit_expr_binary_mut","","",110,[[["exprbinary",3]]]],[11,"visit_expr_block_mut","","",110,[[["exprblock",3]]]],[11,"visit_expr_box_mut","","",110,[[["exprbox",3]]]],[11,"visit_expr_break_mut","","",110,[[["exprbreak",3]]]],[11,"visit_expr_call_mut","","",110,[[["exprcall",3]]]],[11,"visit_expr_cast_mut","","",110,[[["exprcast",3]]]],[11,"visit_expr_closure_mut","","",110,[[["exprclosure",3]]]],[11,"visit_expr_continue_mut","","",110,[[["exprcontinue",3]]]],[11,"visit_expr_field_mut","","",110,[[["exprfield",3]]]],[11,"visit_expr_for_loop_mut","","",110,[[["exprforloop",3]]]],[11,"visit_expr_group_mut","","",110,[[["exprgroup",3]]]],[11,"visit_expr_if_mut","","",110,[[["exprif",3]]]],[11,"visit_expr_index_mut","","",110,[[["exprindex",3]]]],[11,"visit_expr_let_mut","","",110,[[["exprlet",3]]]],[11,"visit_expr_lit_mut","","",110,[[["exprlit",3]]]],[11,"visit_expr_loop_mut","","",110,[[["exprloop",3]]]],[11,"visit_expr_macro_mut","","",110,[[["exprmacro",3]]]],[11,"visit_expr_match_mut","","",110,[[["exprmatch",3]]]],[11,"visit_expr_method_call_mut","","",110,[[["exprmethodcall",3]]]],[11,"visit_expr_paren_mut","","",110,[[["exprparen",3]]]],[11,"visit_expr_path_mut","","",110,[[["exprpath",3]]]],[11,"visit_expr_range_mut","","",110,[[["exprrange",3]]]],[11,"visit_expr_reference_mut","","",110,[[["exprreference",3]]]],[11,"visit_expr_repeat_mut","","",110,[[["exprrepeat",3]]]],[11,"visit_expr_return_mut","","",110,[[["exprreturn",3]]]],[11,"visit_expr_struct_mut","","",110,[[["exprstruct",3]]]],[11,"visit_expr_try_mut","","",110,[[["exprtry",3]]]],[11,"visit_expr_try_block_mut","","",110,[[["exprtryblock",3]]]],[11,"visit_expr_tuple_mut","","",110,[[["exprtuple",3]]]],[11,"visit_expr_type_mut","","",110,[[["exprtype",3]]]],[11,"visit_expr_unary_mut","","",110,[[["exprunary",3]]]],[11,"visit_expr_unsafe_mut","","",110,[[["exprunsafe",3]]]],[11,"visit_expr_while_mut","","",110,[[["exprwhile",3]]]],[11,"visit_expr_yield_mut","","",110,[[["expryield",3]]]],[11,"visit_field_mut","","",110,[[["field",3]]]],[11,"visit_field_pat_mut","","",110,[[["fieldpat",3]]]],[11,"visit_field_value_mut","","",110,[[["fieldvalue",3]]]],[11,"visit_fields_mut","","",110,[[["fields",4]]]],[11,"visit_fields_named_mut","","",110,[[["fieldsnamed",3]]]],[11,"visit_fields_unnamed_mut","","",110,[[["fieldsunnamed",3]]]],[11,"visit_file_mut","","",110,[[["file",3]]]],[11,"visit_fn_arg_mut","","",110,[[["fnarg",4]]]],[11,"visit_foreign_item_mut","","",110,[[["foreignitem",4]]]],[11,"visit_foreign_item_fn_mut","","",110,[[["foreignitemfn",3]]]],[11,"visit_foreign_item_macro_mut","","",110,[[["foreignitemmacro",3]]]],[11,"visit_foreign_item_static_mut","","",110,[[["foreignitemstatic",3]]]],[11,"visit_foreign_item_type_mut","","",110,[[["foreignitemtype",3]]]],[11,"visit_generic_argument_mut","","",110,[[["genericargument",4]]]],[11,"visit_generic_method_argument_mut","","",110,[[["genericmethodargument",4]]]],[11,"visit_generic_param_mut","","",110,[[["genericparam",4]]]],[11,"visit_generics_mut","","",110,[[["generics",3]]]],[11,"visit_ident_mut","","",110,[[["ident",3]]]],[11,"visit_impl_item_mut","","",110,[[["implitem",4]]]],[11,"visit_impl_item_const_mut","","",110,[[["implitemconst",3]]]],[11,"visit_impl_item_macro_mut","","",110,[[["implitemmacro",3]]]],[11,"visit_impl_item_method_mut","","",110,[[["implitemmethod",3]]]],[11,"visit_impl_item_type_mut","","",110,[[["implitemtype",3]]]],[11,"visit_index_mut","","",110,[[["index",3]]]],[11,"visit_item_mut","","",110,[[["item",4]]]],[11,"visit_item_const_mut","","",110,[[["itemconst",3]]]],[11,"visit_item_enum_mut","","",110,[[["itemenum",3]]]],[11,"visit_item_extern_crate_mut","","",110,[[["itemexterncrate",3]]]],[11,"visit_item_fn_mut","","",110,[[["itemfn",3]]]],[11,"visit_item_foreign_mod_mut","","",110,[[["itemforeignmod",3]]]],[11,"visit_item_impl_mut","","",110,[[["itemimpl",3]]]],[11,"visit_item_macro_mut","","",110,[[["itemmacro",3]]]],[11,"visit_item_macro2_mut","","",110,[[["itemmacro2",3]]]],[11,"visit_item_mod_mut","","",110,[[["itemmod",3]]]],[11,"visit_item_static_mut","","",110,[[["itemstatic",3]]]],[11,"visit_item_struct_mut","","",110,[[["itemstruct",3]]]],[11,"visit_item_trait_mut","","",110,[[["itemtrait",3]]]],[11,"visit_item_trait_alias_mut","","",110,[[["itemtraitalias",3]]]],[11,"visit_item_type_mut","","",110,[[["itemtype",3]]]],[11,"visit_item_union_mut","","",110,[[["itemunion",3]]]],[11,"visit_item_use_mut","","",110,[[["itemuse",3]]]],[11,"visit_label_mut","","",110,[[["label",3]]]],[11,"visit_lifetime_mut","","",110,[[["lifetime",3]]]],[11,"visit_lifetime_def_mut","","",110,[[["lifetimedef",3]]]],[11,"visit_lit_mut","","",110,[[["lit",4]]]],[11,"visit_lit_bool_mut","","",110,[[["litbool",3]]]],[11,"visit_lit_byte_mut","","",110,[[["litbyte",3]]]],[11,"visit_lit_byte_str_mut","","",110,[[["litbytestr",3]]]],[11,"visit_lit_char_mut","","",110,[[["litchar",3]]]],[11,"visit_lit_float_mut","","",110,[[["litfloat",3]]]],[11,"visit_lit_int_mut","","",110,[[["litint",3]]]],[11,"visit_lit_str_mut","","",110,[[["litstr",3]]]],[11,"visit_local_mut","","",110,[[["local",3]]]],[11,"visit_macro_mut","","",110,[[["macro",3]]]],[11,"visit_macro_delimiter_mut","","",110,[[["macrodelimiter",4]]]],[11,"visit_member_mut","","",110,[[["member",4]]]],[11,"visit_meta_mut","","",110,[[["meta",4]]]],[11,"visit_meta_list_mut","","",110,[[["metalist",3]]]],[11,"visit_meta_name_value_mut","","",110,[[["metanamevalue",3]]]],[11,"visit_method_turbofish_mut","","",110,[[["methodturbofish",3]]]],[11,"visit_nested_meta_mut","","",110,[[["nestedmeta",4]]]],[11,"visit_parenthesized_generic_arguments_mut","","",110,[[["parenthesizedgenericarguments",3]]]],[11,"visit_pat_mut","","",110,[[["pat",4]]]],[11,"visit_pat_box_mut","","",110,[[["patbox",3]]]],[11,"visit_pat_ident_mut","","",110,[[["patident",3]]]],[11,"visit_pat_lit_mut","","",110,[[["patlit",3]]]],[11,"visit_pat_macro_mut","","",110,[[["patmacro",3]]]],[11,"visit_pat_or_mut","","",110,[[["pator",3]]]],[11,"visit_pat_path_mut","","",110,[[["patpath",3]]]],[11,"visit_pat_range_mut","","",110,[[["patrange",3]]]],[11,"visit_pat_reference_mut","","",110,[[["patreference",3]]]],[11,"visit_pat_rest_mut","","",110,[[["patrest",3]]]],[11,"visit_pat_slice_mut","","",110,[[["patslice",3]]]],[11,"visit_pat_struct_mut","","",110,[[["patstruct",3]]]],[11,"visit_pat_tuple_mut","","",110,[[["pattuple",3]]]],[11,"visit_pat_tuple_struct_mut","","",110,[[["pattuplestruct",3]]]],[11,"visit_pat_type_mut","","",110,[[["pattype",3]]]],[11,"visit_pat_wild_mut","","",110,[[["patwild",3]]]],[11,"visit_path_mut","","",110,[[["path",3]]]],[11,"visit_path_arguments_mut","","",110,[[["patharguments",4]]]],[11,"visit_path_segment_mut","","",110,[[["pathsegment",3]]]],[11,"visit_predicate_eq_mut","","",110,[[["predicateeq",3]]]],[11,"visit_predicate_lifetime_mut","","",110,[[["predicatelifetime",3]]]],[11,"visit_predicate_type_mut","","",110,[[["predicatetype",3]]]],[11,"visit_qself_mut","","",110,[[["qself",3]]]],[11,"visit_range_limits_mut","","",110,[[["rangelimits",4]]]],[11,"visit_receiver_mut","","",110,[[["receiver",3]]]],[11,"visit_return_type_mut","","",110,[[["returntype",4]]]],[11,"visit_signature_mut","","",110,[[["signature",3]]]],[11,"visit_span_mut","","",110,[[["span",3]]]],[11,"visit_stmt_mut","","",110,[[["stmt",4]]]],[11,"visit_trait_bound_mut","","",110,[[["traitbound",3]]]],[11,"visit_trait_bound_modifier_mut","","",110,[[["traitboundmodifier",4]]]],[11,"visit_trait_item_mut","","",110,[[["traititem",4]]]],[11,"visit_trait_item_const_mut","","",110,[[["traititemconst",3]]]],[11,"visit_trait_item_macro_mut","","",110,[[["traititemmacro",3]]]],[11,"visit_trait_item_method_mut","","",110,[[["traititemmethod",3]]]],[11,"visit_trait_item_type_mut","","",110,[[["traititemtype",3]]]],[11,"visit_type_mut","","",110,[[["type",4]]]],[11,"visit_type_array_mut","","",110,[[["typearray",3]]]],[11,"visit_type_bare_fn_mut","","",110,[[["typebarefn",3]]]],[11,"visit_type_group_mut","","",110,[[["typegroup",3]]]],[11,"visit_type_impl_trait_mut","","",110,[[["typeimpltrait",3]]]],[11,"visit_type_infer_mut","","",110,[[["typeinfer",3]]]],[11,"visit_type_macro_mut","","",110,[[["typemacro",3]]]],[11,"visit_type_never_mut","","",110,[[["typenever",3]]]],[11,"visit_type_param_mut","","",110,[[["typeparam",3]]]],[11,"visit_type_param_bound_mut","","",110,[[["typeparambound",4]]]],[11,"visit_type_paren_mut","","",110,[[["typeparen",3]]]],[11,"visit_type_path_mut","","",110,[[["typepath",3]]]],[11,"visit_type_ptr_mut","","",110,[[["typeptr",3]]]],[11,"visit_type_reference_mut","","",110,[[["typereference",3]]]],[11,"visit_type_slice_mut","","",110,[[["typeslice",3]]]],[11,"visit_type_trait_object_mut","","",110,[[["typetraitobject",3]]]],[11,"visit_type_tuple_mut","","",110,[[["typetuple",3]]]],[11,"visit_un_op_mut","","",110,[[["unop",4]]]],[11,"visit_use_glob_mut","","",110,[[["useglob",3]]]],[11,"visit_use_group_mut","","",110,[[["usegroup",3]]]],[11,"visit_use_name_mut","","",110,[[["usename",3]]]],[11,"visit_use_path_mut","","",110,[[["usepath",3]]]],[11,"visit_use_rename_mut","","",110,[[["userename",3]]]],[11,"visit_use_tree_mut","","",110,[[["usetree",4]]]],[11,"visit_variadic_mut","","",110,[[["variadic",3]]]],[11,"visit_variant_mut","","",110,[[["variant",3]]]],[11,"visit_vis_crate_mut","","",110,[[["viscrate",3]]]],[11,"visit_vis_public_mut","","",110,[[["vispublic",3]]]],[11,"visit_vis_restricted_mut","","",110,[[["visrestricted",3]]]],[11,"visit_visibility_mut","","",110,[[["visibility",4]]]],[11,"visit_where_clause_mut","","",110,[[["whereclause",3]]]],[11,"visit_where_predicate_mut","","",110,[[["wherepredicate",4]]]],[5,"visit_abi_mut","","",null,[[["abi",3]]]],[5,"visit_angle_bracketed_generic_arguments_mut","","",null,[[["anglebracketedgenericarguments",3]]]],[5,"visit_arm_mut","","",null,[[["arm",3]]]],[5,"visit_attr_style_mut","","",null,[[["attrstyle",4]]]],[5,"visit_attribute_mut","","",null,[[["attribute",3]]]],[5,"visit_bare_fn_arg_mut","","",null,[[["barefnarg",3]]]],[5,"visit_bin_op_mut","","",null,[[["binop",4]]]],[5,"visit_binding_mut","","",null,[[["binding",3]]]],[5,"visit_block_mut","","",null,[[["block",3]]]],[5,"visit_bound_lifetimes_mut","","",null,[[["boundlifetimes",3]]]],[5,"visit_const_param_mut","","",null,[[["constparam",3]]]],[5,"visit_constraint_mut","","",null,[[["constraint",3]]]],[5,"visit_data_mut","","",null,[[["data",4]]]],[5,"visit_data_enum_mut","","",null,[[["dataenum",3]]]],[5,"visit_data_struct_mut","","",null,[[["datastruct",3]]]],[5,"visit_data_union_mut","","",null,[[["dataunion",3]]]],[5,"visit_derive_input_mut","","",null,[[["deriveinput",3]]]],[5,"visit_expr_mut","","",null,[[["expr",4]]]],[5,"visit_expr_array_mut","","",null,[[["exprarray",3]]]],[5,"visit_expr_assign_mut","","",null,[[["exprassign",3]]]],[5,"visit_expr_assign_op_mut","","",null,[[["exprassignop",3]]]],[5,"visit_expr_async_mut","","",null,[[["exprasync",3]]]],[5,"visit_expr_await_mut","","",null,[[["exprawait",3]]]],[5,"visit_expr_binary_mut","","",null,[[["exprbinary",3]]]],[5,"visit_expr_block_mut","","",null,[[["exprblock",3]]]],[5,"visit_expr_box_mut","","",null,[[["exprbox",3]]]],[5,"visit_expr_break_mut","","",null,[[["exprbreak",3]]]],[5,"visit_expr_call_mut","","",null,[[["exprcall",3]]]],[5,"visit_expr_cast_mut","","",null,[[["exprcast",3]]]],[5,"visit_expr_closure_mut","","",null,[[["exprclosure",3]]]],[5,"visit_expr_continue_mut","","",null,[[["exprcontinue",3]]]],[5,"visit_expr_field_mut","","",null,[[["exprfield",3]]]],[5,"visit_expr_for_loop_mut","","",null,[[["exprforloop",3]]]],[5,"visit_expr_group_mut","","",null,[[["exprgroup",3]]]],[5,"visit_expr_if_mut","","",null,[[["exprif",3]]]],[5,"visit_expr_index_mut","","",null,[[["exprindex",3]]]],[5,"visit_expr_let_mut","","",null,[[["exprlet",3]]]],[5,"visit_expr_lit_mut","","",null,[[["exprlit",3]]]],[5,"visit_expr_loop_mut","","",null,[[["exprloop",3]]]],[5,"visit_expr_macro_mut","","",null,[[["exprmacro",3]]]],[5,"visit_expr_match_mut","","",null,[[["exprmatch",3]]]],[5,"visit_expr_method_call_mut","","",null,[[["exprmethodcall",3]]]],[5,"visit_expr_paren_mut","","",null,[[["exprparen",3]]]],[5,"visit_expr_path_mut","","",null,[[["exprpath",3]]]],[5,"visit_expr_range_mut","","",null,[[["exprrange",3]]]],[5,"visit_expr_reference_mut","","",null,[[["exprreference",3]]]],[5,"visit_expr_repeat_mut","","",null,[[["exprrepeat",3]]]],[5,"visit_expr_return_mut","","",null,[[["exprreturn",3]]]],[5,"visit_expr_struct_mut","","",null,[[["exprstruct",3]]]],[5,"visit_expr_try_mut","","",null,[[["exprtry",3]]]],[5,"visit_expr_try_block_mut","","",null,[[["exprtryblock",3]]]],[5,"visit_expr_tuple_mut","","",null,[[["exprtuple",3]]]],[5,"visit_expr_type_mut","","",null,[[["exprtype",3]]]],[5,"visit_expr_unary_mut","","",null,[[["exprunary",3]]]],[5,"visit_expr_unsafe_mut","","",null,[[["exprunsafe",3]]]],[5,"visit_expr_while_mut","","",null,[[["exprwhile",3]]]],[5,"visit_expr_yield_mut","","",null,[[["expryield",3]]]],[5,"visit_field_mut","","",null,[[["field",3]]]],[5,"visit_field_pat_mut","","",null,[[["fieldpat",3]]]],[5,"visit_field_value_mut","","",null,[[["fieldvalue",3]]]],[5,"visit_fields_mut","","",null,[[["fields",4]]]],[5,"visit_fields_named_mut","","",null,[[["fieldsnamed",3]]]],[5,"visit_fields_unnamed_mut","","",null,[[["fieldsunnamed",3]]]],[5,"visit_file_mut","","",null,[[["file",3]]]],[5,"visit_fn_arg_mut","","",null,[[["fnarg",4]]]],[5,"visit_foreign_item_mut","","",null,[[["foreignitem",4]]]],[5,"visit_foreign_item_fn_mut","","",null,[[["foreignitemfn",3]]]],[5,"visit_foreign_item_macro_mut","","",null,[[["foreignitemmacro",3]]]],[5,"visit_foreign_item_static_mut","","",null,[[["foreignitemstatic",3]]]],[5,"visit_foreign_item_type_mut","","",null,[[["foreignitemtype",3]]]],[5,"visit_generic_argument_mut","","",null,[[["genericargument",4]]]],[5,"visit_generic_method_argument_mut","","",null,[[["genericmethodargument",4]]]],[5,"visit_generic_param_mut","","",null,[[["genericparam",4]]]],[5,"visit_generics_mut","","",null,[[["generics",3]]]],[5,"visit_ident_mut","","",null,[[["ident",3]]]],[5,"visit_impl_item_mut","","",null,[[["implitem",4]]]],[5,"visit_impl_item_const_mut","","",null,[[["implitemconst",3]]]],[5,"visit_impl_item_macro_mut","","",null,[[["implitemmacro",3]]]],[5,"visit_impl_item_method_mut","","",null,[[["implitemmethod",3]]]],[5,"visit_impl_item_type_mut","","",null,[[["implitemtype",3]]]],[5,"visit_index_mut","","",null,[[["index",3]]]],[5,"visit_item_mut","","",null,[[["item",4]]]],[5,"visit_item_const_mut","","",null,[[["itemconst",3]]]],[5,"visit_item_enum_mut","","",null,[[["itemenum",3]]]],[5,"visit_item_extern_crate_mut","","",null,[[["itemexterncrate",3]]]],[5,"visit_item_fn_mut","","",null,[[["itemfn",3]]]],[5,"visit_item_foreign_mod_mut","","",null,[[["itemforeignmod",3]]]],[5,"visit_item_impl_mut","","",null,[[["itemimpl",3]]]],[5,"visit_item_macro_mut","","",null,[[["itemmacro",3]]]],[5,"visit_item_macro2_mut","","",null,[[["itemmacro2",3]]]],[5,"visit_item_mod_mut","","",null,[[["itemmod",3]]]],[5,"visit_item_static_mut","","",null,[[["itemstatic",3]]]],[5,"visit_item_struct_mut","","",null,[[["itemstruct",3]]]],[5,"visit_item_trait_mut","","",null,[[["itemtrait",3]]]],[5,"visit_item_trait_alias_mut","","",null,[[["itemtraitalias",3]]]],[5,"visit_item_type_mut","","",null,[[["itemtype",3]]]],[5,"visit_item_union_mut","","",null,[[["itemunion",3]]]],[5,"visit_item_use_mut","","",null,[[["itemuse",3]]]],[5,"visit_label_mut","","",null,[[["label",3]]]],[5,"visit_lifetime_mut","","",null,[[["lifetime",3]]]],[5,"visit_lifetime_def_mut","","",null,[[["lifetimedef",3]]]],[5,"visit_lit_mut","","",null,[[["lit",4]]]],[5,"visit_lit_bool_mut","","",null,[[["litbool",3]]]],[5,"visit_lit_byte_mut","","",null,[[["litbyte",3]]]],[5,"visit_lit_byte_str_mut","","",null,[[["litbytestr",3]]]],[5,"visit_lit_char_mut","","",null,[[["litchar",3]]]],[5,"visit_lit_float_mut","","",null,[[["litfloat",3]]]],[5,"visit_lit_int_mut","","",null,[[["litint",3]]]],[5,"visit_lit_str_mut","","",null,[[["litstr",3]]]],[5,"visit_local_mut","","",null,[[["local",3]]]],[5,"visit_macro_mut","","",null,[[["macro",3]]]],[5,"visit_macro_delimiter_mut","","",null,[[["macrodelimiter",4]]]],[5,"visit_member_mut","","",null,[[["member",4]]]],[5,"visit_meta_mut","","",null,[[["meta",4]]]],[5,"visit_meta_list_mut","","",null,[[["metalist",3]]]],[5,"visit_meta_name_value_mut","","",null,[[["metanamevalue",3]]]],[5,"visit_method_turbofish_mut","","",null,[[["methodturbofish",3]]]],[5,"visit_nested_meta_mut","","",null,[[["nestedmeta",4]]]],[5,"visit_parenthesized_generic_arguments_mut","","",null,[[["parenthesizedgenericarguments",3]]]],[5,"visit_pat_mut","","",null,[[["pat",4]]]],[5,"visit_pat_box_mut","","",null,[[["patbox",3]]]],[5,"visit_pat_ident_mut","","",null,[[["patident",3]]]],[5,"visit_pat_lit_mut","","",null,[[["patlit",3]]]],[5,"visit_pat_macro_mut","","",null,[[["patmacro",3]]]],[5,"visit_pat_or_mut","","",null,[[["pator",3]]]],[5,"visit_pat_path_mut","","",null,[[["patpath",3]]]],[5,"visit_pat_range_mut","","",null,[[["patrange",3]]]],[5,"visit_pat_reference_mut","","",null,[[["patreference",3]]]],[5,"visit_pat_rest_mut","","",null,[[["patrest",3]]]],[5,"visit_pat_slice_mut","","",null,[[["patslice",3]]]],[5,"visit_pat_struct_mut","","",null,[[["patstruct",3]]]],[5,"visit_pat_tuple_mut","","",null,[[["pattuple",3]]]],[5,"visit_pat_tuple_struct_mut","","",null,[[["pattuplestruct",3]]]],[5,"visit_pat_type_mut","","",null,[[["pattype",3]]]],[5,"visit_pat_wild_mut","","",null,[[["patwild",3]]]],[5,"visit_path_mut","","",null,[[["path",3]]]],[5,"visit_path_arguments_mut","","",null,[[["patharguments",4]]]],[5,"visit_path_segment_mut","","",null,[[["pathsegment",3]]]],[5,"visit_predicate_eq_mut","","",null,[[["predicateeq",3]]]],[5,"visit_predicate_lifetime_mut","","",null,[[["predicatelifetime",3]]]],[5,"visit_predicate_type_mut","","",null,[[["predicatetype",3]]]],[5,"visit_qself_mut","","",null,[[["qself",3]]]],[5,"visit_range_limits_mut","","",null,[[["rangelimits",4]]]],[5,"visit_receiver_mut","","",null,[[["receiver",3]]]],[5,"visit_return_type_mut","","",null,[[["returntype",4]]]],[5,"visit_signature_mut","","",null,[[["signature",3]]]],[5,"visit_span_mut","","",null,[[["span",3]]]],[5,"visit_stmt_mut","","",null,[[["stmt",4]]]],[5,"visit_trait_bound_mut","","",null,[[["traitbound",3]]]],[5,"visit_trait_bound_modifier_mut","","",null,[[["traitboundmodifier",4]]]],[5,"visit_trait_item_mut","","",null,[[["traititem",4]]]],[5,"visit_trait_item_const_mut","","",null,[[["traititemconst",3]]]],[5,"visit_trait_item_macro_mut","","",null,[[["traititemmacro",3]]]],[5,"visit_trait_item_method_mut","","",null,[[["traititemmethod",3]]]],[5,"visit_trait_item_type_mut","","",null,[[["traititemtype",3]]]],[5,"visit_type_mut","","",null,[[["type",4]]]],[5,"visit_type_array_mut","","",null,[[["typearray",3]]]],[5,"visit_type_bare_fn_mut","","",null,[[["typebarefn",3]]]],[5,"visit_type_group_mut","","",null,[[["typegroup",3]]]],[5,"visit_type_impl_trait_mut","","",null,[[["typeimpltrait",3]]]],[5,"visit_type_infer_mut","","",null,[[["typeinfer",3]]]],[5,"visit_type_macro_mut","","",null,[[["typemacro",3]]]],[5,"visit_type_never_mut","","",null,[[["typenever",3]]]],[5,"visit_type_param_mut","","",null,[[["typeparam",3]]]],[5,"visit_type_param_bound_mut","","",null,[[["typeparambound",4]]]],[5,"visit_type_paren_mut","","",null,[[["typeparen",3]]]],[5,"visit_type_path_mut","","",null,[[["typepath",3]]]],[5,"visit_type_ptr_mut","","",null,[[["typeptr",3]]]],[5,"visit_type_reference_mut","","",null,[[["typereference",3]]]],[5,"visit_type_slice_mut","","",null,[[["typeslice",3]]]],[5,"visit_type_trait_object_mut","","",null,[[["typetraitobject",3]]]],[5,"visit_type_tuple_mut","","",null,[[["typetuple",3]]]],[5,"visit_un_op_mut","","",null,[[["unop",4]]]],[5,"visit_use_glob_mut","","",null,[[["useglob",3]]]],[5,"visit_use_group_mut","","",null,[[["usegroup",3]]]],[5,"visit_use_name_mut","","",null,[[["usename",3]]]],[5,"visit_use_path_mut","","",null,[[["usepath",3]]]],[5,"visit_use_rename_mut","","",null,[[["userename",3]]]],[5,"visit_use_tree_mut","","",null,[[["usetree",4]]]],[5,"visit_variadic_mut","","",null,[[["variadic",3]]]],[5,"visit_variant_mut","","",null,[[["variant",3]]]],[5,"visit_vis_crate_mut","","",null,[[["viscrate",3]]]],[5,"visit_vis_public_mut","","",null,[[["vispublic",3]]]],[5,"visit_vis_restricted_mut","","",null,[[["visrestricted",3]]]],[5,"visit_visibility_mut","","",null,[[["visibility",4]]]],[5,"visit_where_clause_mut","","",null,[[["whereclause",3]]]],[5,"visit_where_predicate_mut","","",null,[[["wherepredicate",4]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a …",null,null],[0,"discouraged","syn::parse","Extensions to the parsing API with niche applicability.",null,null],[8,"Speculative","syn::parse::discouraged","Extensions to the <code>ParseStream</code> API to support speculative …",null,null],[10,"advance_to","","Advance this parse stream to the position of a forked …",111,[[]]],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input …",null,null],[6,"Result","","The result of a Syn parser.",null,null],[3,"Lookahead1","","Support for checking the next token in a stream to decide …",null,null],[8,"Peek","","Types that can be parsed by looking at just one token.",null,null],[8,"Parse","","Parsing interface implemented by all types that can be …",null,null],[10,"parse","","",112,[[["parsestream",6]],["result",6]]],[6,"ParseStream","","Input to a Syn parser function.",null,null],[3,"ParseBuffer","","Cursor position within a buffered token stream.",null,null],[3,"StepCursor","","Cursor state associated with speculative parsing.",null,null],[11,"error","","Triggers an error at the current position of the parse …",113,[[["display",8]],["error",3]]],[11,"parse","","Parses a syntax tree node of type <code>T</code>, advancing the …",114,[[],[["parse",8],["result",6]]]],[11,"call","","Calls the given parser function to parse a syntax tree …",114,[[],["result",6]]],[11,"peek","","Looks at the next token in the parse stream to determine …",114,[[["peek",8]]]],[11,"peek2","","Looks at the second-next token in the parse stream.",114,[[["peek",8]]]],[11,"peek3","","Looks at the third-next token in the parse stream.",114,[[["peek",8]]]],[11,"parse_terminated","","Parses zero or more occurrences of <code>T</code> separated by …",114,[[],[["punctuated",3],["result",6]]]],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",114,[[]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this …",114,[[],["lookahead1",3]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either …",114,[[]]],[11,"error","","Triggers an error at the current position of the parse …",114,[[["display",8]],["error",3]]],[11,"step","","Speculatively parses tokens from this parse stream, …",114,[[],["result",6]]],[11,"span","","Returns the <code>Span</code> of the next token in the parse stream, or…",114,[[],["span",3]]],[11,"cursor","","Provides low-level access to the token representation …",114,[[],["cursor",3]]],[8,"Parser","","Parser that can parse Rust tokens into a particular …",null,null],[16,"Output","","",115,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax …",115,[[["tokenstream",3]],["result",6]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree …",115,[[["tokenstream",3]],["result",6]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree …",115,[[],["result",6]]],[3,"Nothing","","An empty syntax tree node that consumes no tokens when …",null,null],[11,"new","","Usually the <code>ParseStream::error</code> method will be used …",116,[[["span",3],["display",8]]]],[11,"new_spanned","","Creates an error with the specified message spanning the …",116,[[["totokens",8],["display",8]]]],[11,"span","","The source location of the error.",116,[[],["span",3]]],[11,"to_compile_error","","Render the error as an invocation of <code>compile_error!</code>.",116,[[],["tokenstream",3]]],[11,"into_compile_error","","Render the error as an invocation of <code>compile_error!</code>.",116,[[],["tokenstream",3]]],[11,"combine","","Add another error message to self such that when …",116,[[["error",3]]]],[4,"AttrStyle","syn","Distinguishes between attributes that decorate an item …",null,null],[13,"Outer","","",117,null],[13,"Inner","","",117,null],[3,"Attribute","","An attribute like <code>#[repr(transparent)]</code>.",null,null],[12,"pound_token","","",118,null],[12,"style","","",118,null],[12,"bracket_token","","",118,null],[12,"path","","",118,null],[12,"tokens","","",118,null],[6,"AttributeArgs","","Conventional argument type associated with an invocation …",null,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Path","","",119,null],[13,"List","","A structured list within an attribute, like …",119,null],[13,"NameValue","","A name-value pair within an attribute, like …",119,null],[3,"MetaList","","A structured list within an attribute, like …",null,null],[12,"path","","",120,null],[12,"paren_token","","",120,null],[12,"nested","","",120,null],[3,"MetaNameValue","","A name-value pair within an attribute, like …",null,null],[12,"path","","",121,null],[12,"eq_token","","",121,null],[12,"lit","","",121,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …",122,null],[13,"Lit","","A Rust literal, like the <code>\\\"new_name\\\"</code> in …",122,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",123,null],[12,"vis","","Visibility of the field.",123,null],[12,"ident","","Name of the field, if any.",123,null],[12,"colon_token","","",123,null],[12,"ty","","Type of the field.",123,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as …",124,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as …",124,null],[13,"Unit","","Unit struct or unit variant such as <code>None</code>.",124,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as …",null,null],[12,"brace_token","","",125,null],[12,"named","","",125,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as …",null,null],[12,"paren_token","","",126,null],[12,"unnamed","","",126,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",127,null],[12,"ident","","Name of the variant.",127,null],[12,"fields","","Content stored in the variant.",127,null],[12,"discriminant","","Explicit discriminant: <code>Variant = 1</code>",127,null],[3,"VisCrate","","A crate-level visibility: <code>crate</code>.",null,null],[12,"crate_token","","",128,null],[3,"VisPublic","","A public visibility level: <code>pub</code>.",null,null],[12,"pub_token","","",129,null],[3,"VisRestricted","","A visibility level restricted to some path: <code>pub(self)</code> or …",null,null],[12,"pub_token","","",130,null],[12,"paren_token","","",130,null],[12,"in_token","","",130,null],[12,"path","","",130,null],[4,"Visibility","","The visibility level of an item: inherited or <code>pub</code> or …",null,null],[13,"Public","","A public visibility level: <code>pub</code>.",131,null],[13,"Crate","","A crate-level visibility: <code>crate</code>.",131,null],[13,"Restricted","","A visibility level restricted to some path: <code>pub(self)</code> or …",131,null],[13,"Inherited","","An inherited visibility, which usually means private.",131,null],[3,"Arm","","One arm of a <code>match</code> expression: <code>0...10 => { return true; }</code>.",null,null],[12,"attrs","","",132,null],[12,"pat","","",132,null],[12,"guard","","",132,null],[12,"fat_arrow_token","","",132,null],[12,"body","","",132,null],[12,"comma","","",132,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",133,null],[12,"member","","Name or index of the field.",133,null],[12,"colon_token","","The colon in <code>Struct { x: x }</code>. If written in shorthand like…",133,null],[12,"expr","","Value of the field.",133,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like <code>T</code>.",null,null],[13,"Type","","A type argument.",134,null],[13,"Const","","A const expression. Must be inside of a block.",134,null],[3,"Label","","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.",null,null],[12,"name","","",135,null],[12,"colon_token","","",135,null],[3,"MethodTurbofish","","The <code>::<></code> explicit type parameters passed to a method call:…",null,null],[12,"colon2_token","","",136,null],[12,"lt_token","","",136,null],[12,"args","","",136,null],[12,"gt_token","","",136,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",137,null],[13,"Closed","","Inclusive at the beginning and end.",137,null],[4,"Expr","","A Rust expression.",null,null],[13,"Array","","A slice literal expression: <code>[a, b, c, d]</code>.",138,null],[13,"Assign","","An assignment expression: <code>a = compute()</code>.",138,null],[13,"AssignOp","","A compound assignment expression: <code>counter += 1</code>.",138,null],[13,"Async","","An async block: <code>async { ... }</code>.",138,null],[13,"Await","","An await expression: <code>fut.await</code>.",138,null],[13,"Binary","","A binary operation: <code>a + b</code>, <code>a * b</code>.",138,null],[13,"Block","","A blocked scope: <code>{ ... }</code>.",138,null],[13,"Box","","A box expression: <code>box f</code>.",138,null],[13,"Break","","A <code>break</code>, with an optional label to break and an optional …",138,null],[13,"Call","","A function call expression: <code>invoke(a, b)</code>.",138,null],[13,"Cast","","A cast expression: <code>foo as f64</code>.",138,null],[13,"Closure","","A closure expression: <code>|a, b| a + b</code>.",138,null],[13,"Continue","","A <code>continue</code>, with an optional label.",138,null],[13,"Field","","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …",138,null],[13,"ForLoop","","A for loop: <code>for pat in expr { ... }</code>.",138,null],[13,"Group","","An expression contained within invisible delimiters.",138,null],[13,"If","","An <code>if</code> expression with an optional <code>else</code> block: …",138,null],[13,"Index","","A square bracketed indexing expression: <code>vector[2]</code>.",138,null],[13,"Let","","A <code>let</code> guard: <code>let Some(x) = opt</code>.",138,null],[13,"Lit","","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.",138,null],[13,"Loop","","Conditionless loop: <code>loop { ... }</code>.",138,null],[13,"Macro","","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.",138,null],[13,"Match","","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.",138,null],[13,"MethodCall","","A method call expression: <code>x.foo::<T>(a, b)</code>.",138,null],[13,"Paren","","A parenthesized expression: <code>(a + b)</code>.",138,null],[13,"Path","","A path like <code>std::mem::replace</code> possibly containing generic …",138,null],[13,"Range","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.",138,null],[13,"Reference","","A referencing operation: <code>&a</code> or <code>&mut a</code>.",138,null],[13,"Repeat","","An array literal constructed from one repeated element: …",138,null],[13,"Return","","A <code>return</code>, with an optional value to be returned.",138,null],[13,"Struct","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.",138,null],[13,"Try","","A try-expression: <code>expr?</code>.",138,null],[13,"TryBlock","","A try block: <code>try { ... }</code>.",138,null],[13,"Tuple","","A tuple expression: <code>(a, b, c, d)</code>.",138,null],[13,"Type","","A type ascription expression: <code>foo: f64</code>.",138,null],[13,"Unary","","A unary operation: <code>!x</code>, <code>*x</code>.",138,null],[13,"Unsafe","","An unsafe block: <code>unsafe { ... }</code>.",138,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",138,null],[13,"While","","A while loop: <code>while expr { ... }</code>.",138,null],[13,"Yield","","A yield expression: <code>yield expr</code>.",138,null],[3,"ExprArray","","A slice literal expression: <code>[a, b, c, d]</code>.",null,null],[12,"attrs","","",139,null],[12,"bracket_token","","",139,null],[12,"elems","","",139,null],[3,"ExprAssign","","An assignment expression: <code>a = compute()</code>.",null,null],[12,"attrs","","",140,null],[12,"left","","",140,null],[12,"eq_token","","",140,null],[12,"right","","",140,null],[3,"ExprAssignOp","","A compound assignment expression: <code>counter += 1</code>.",null,null],[12,"attrs","","",141,null],[12,"left","","",141,null],[12,"op","","",141,null],[12,"right","","",141,null],[3,"ExprAsync","","An async block: <code>async { ... }</code>.",null,null],[12,"attrs","","",142,null],[12,"async_token","","",142,null],[12,"capture","","",142,null],[12,"block","","",142,null],[3,"ExprAwait","","An await expression: <code>fut.await</code>.",null,null],[12,"attrs","","",143,null],[12,"base","","",143,null],[12,"dot_token","","",143,null],[12,"await_token","","",143,null],[3,"ExprBinary","","A binary operation: <code>a + b</code>, <code>a * b</code>.",null,null],[12,"attrs","","",144,null],[12,"left","","",144,null],[12,"op","","",144,null],[12,"right","","",144,null],[3,"ExprBlock","","A blocked scope: <code>{ ... }</code>.",null,null],[12,"attrs","","",145,null],[12,"label","","",145,null],[12,"block","","",145,null],[3,"ExprBox","","A box expression: <code>box f</code>.",null,null],[12,"attrs","","",146,null],[12,"box_token","","",146,null],[12,"expr","","",146,null],[3,"ExprBreak","","A <code>break</code>, with an optional label to break and an optional …",null,null],[12,"attrs","","",147,null],[12,"break_token","","",147,null],[12,"label","","",147,null],[12,"expr","","",147,null],[3,"ExprCall","","A function call expression: <code>invoke(a, b)</code>.",null,null],[12,"attrs","","",148,null],[12,"func","","",148,null],[12,"paren_token","","",148,null],[12,"args","","",148,null],[3,"ExprCast","","A cast expression: <code>foo as f64</code>.",null,null],[12,"attrs","","",149,null],[12,"expr","","",149,null],[12,"as_token","","",149,null],[12,"ty","","",149,null],[3,"ExprClosure","","A closure expression: <code>|a, b| a + b</code>.",null,null],[12,"attrs","","",150,null],[12,"asyncness","","",150,null],[12,"movability","","",150,null],[12,"capture","","",150,null],[12,"or1_token","","",150,null],[12,"inputs","","",150,null],[12,"or2_token","","",150,null],[12,"output","","",150,null],[12,"body","","",150,null],[3,"ExprContinue","","A <code>continue</code>, with an optional label.",null,null],[12,"attrs","","",151,null],[12,"continue_token","","",151,null],[12,"label","","",151,null],[3,"ExprField","","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …",null,null],[12,"attrs","","",152,null],[12,"base","","",152,null],[12,"dot_token","","",152,null],[12,"member","","",152,null],[3,"ExprForLoop","","A for loop: <code>for pat in expr { ... }</code>.",null,null],[12,"attrs","","",153,null],[12,"label","","",153,null],[12,"for_token","","",153,null],[12,"pat","","",153,null],[12,"in_token","","",153,null],[12,"expr","","",153,null],[12,"body","","",153,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",154,null],[12,"group_token","","",154,null],[12,"expr","","",154,null],[3,"ExprIf","","An <code>if</code> expression with an optional <code>else</code> block: …",null,null],[12,"attrs","","",155,null],[12,"if_token","","",155,null],[12,"cond","","",155,null],[12,"then_branch","","",155,null],[12,"else_branch","","",155,null],[3,"ExprIndex","","A square bracketed indexing expression: <code>vector[2]</code>.",null,null],[12,"attrs","","",156,null],[12,"expr","","",156,null],[12,"bracket_token","","",156,null],[12,"index","","",156,null],[3,"ExprLet","","A <code>let</code> guard: <code>let Some(x) = opt</code>.",null,null],[12,"attrs","","",157,null],[12,"let_token","","",157,null],[12,"pat","","",157,null],[12,"eq_token","","",157,null],[12,"expr","","",157,null],[3,"ExprLit","","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.",null,null],[12,"attrs","","",158,null],[12,"lit","","",158,null],[3,"ExprLoop","","Conditionless loop: <code>loop { ... }</code>.",null,null],[12,"attrs","","",159,null],[12,"label","","",159,null],[12,"loop_token","","",159,null],[12,"body","","",159,null],[3,"ExprMacro","","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.",null,null],[12,"attrs","","",160,null],[12,"mac","","",160,null],[3,"ExprMatch","","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.",null,null],[12,"attrs","","",161,null],[12,"match_token","","",161,null],[12,"expr","","",161,null],[12,"brace_token","","",161,null],[12,"arms","","",161,null],[3,"ExprMethodCall","","A method call expression: <code>x.foo::<T>(a, b)</code>.",null,null],[12,"attrs","","",162,null],[12,"receiver","","",162,null],[12,"dot_token","","",162,null],[12,"method","","",162,null],[12,"turbofish","","",162,null],[12,"paren_token","","",162,null],[12,"args","","",162,null],[3,"ExprParen","","A parenthesized expression: <code>(a + b)</code>.",null,null],[12,"attrs","","",163,null],[12,"paren_token","","",163,null],[12,"expr","","",163,null],[3,"ExprPath","","A path like <code>std::mem::replace</code> possibly containing generic …",null,null],[12,"attrs","","",164,null],[12,"qself","","",164,null],[12,"path","","",164,null],[3,"ExprRange","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.",null,null],[12,"attrs","","",165,null],[12,"from","","",165,null],[12,"limits","","",165,null],[12,"to","","",165,null],[3,"ExprReference","","A referencing operation: <code>&a</code> or <code>&mut a</code>.",null,null],[12,"attrs","","",166,null],[12,"and_token","","",166,null],[12,"raw","","",166,null],[12,"mutability","","",166,null],[12,"expr","","",166,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: …",null,null],[12,"attrs","","",167,null],[12,"bracket_token","","",167,null],[12,"expr","","",167,null],[12,"semi_token","","",167,null],[12,"len","","",167,null],[3,"ExprReturn","","A <code>return</code>, with an optional value to be returned.",null,null],[12,"attrs","","",168,null],[12,"return_token","","",168,null],[12,"expr","","",168,null],[3,"ExprStruct","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.",null,null],[12,"attrs","","",169,null],[12,"path","","",169,null],[12,"brace_token","","",169,null],[12,"fields","","",169,null],[12,"dot2_token","","",169,null],[12,"rest","","",169,null],[3,"ExprTry","","A try-expression: <code>expr?</code>.",null,null],[12,"attrs","","",170,null],[12,"expr","","",170,null],[12,"question_token","","",170,null],[3,"ExprTryBlock","","A try block: <code>try { ... }</code>.",null,null],[12,"attrs","","",171,null],[12,"try_token","","",171,null],[12,"block","","",171,null],[3,"ExprTuple","","A tuple expression: <code>(a, b, c, d)</code>.",null,null],[12,"attrs","","",172,null],[12,"paren_token","","",172,null],[12,"elems","","",172,null],[3,"ExprType","","A type ascription expression: <code>foo: f64</code>.",null,null],[12,"attrs","","",173,null],[12,"expr","","",173,null],[12,"colon_token","","",173,null],[12,"ty","","",173,null],[3,"ExprUnary","","A unary operation: <code>!x</code>, <code>*x</code>.",null,null],[12,"attrs","","",174,null],[12,"op","","",174,null],[12,"expr","","",174,null],[3,"ExprUnsafe","","An unsafe block: <code>unsafe { ... }</code>.",null,null],[12,"attrs","","",175,null],[12,"unsafe_token","","",175,null],[12,"block","","",175,null],[3,"ExprWhile","","A while loop: <code>while expr { ... }</code>.",null,null],[12,"attrs","","",176,null],[12,"label","","",176,null],[12,"while_token","","",176,null],[12,"cond","","",176,null],[12,"body","","",176,null],[3,"ExprYield","","A yield expression: <code>yield expr</code>.",null,null],[12,"attrs","","",177,null],[12,"yield_token","","",177,null],[12,"expr","","",177,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",178,null],[12,"span","","",178,null],[4,"Member","","A struct or tuple struct field accessed in a struct …",null,null],[13,"Named","","A named field like <code>self.x</code>.",179,null],[13,"Unnamed","","An unnamed field like <code>self.0</code>.",179,null],[3,"BoundLifetimes","","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.",null,null],[12,"for_token","","",180,null],[12,"lt_token","","",180,null],[12,"lifetimes","","",180,null],[12,"gt_token","","",180,null],[3,"ConstParam","","A const generic parameter: <code>const LENGTH: usize</code>.",null,null],[12,"attrs","","",181,null],[12,"const_token","","",181,null],[12,"ident","","",181,null],[12,"colon_token","","",181,null],[12,"ty","","",181,null],[12,"eq_token","","",181,null],[12,"default","","",181,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: …",null,null],[13,"Type","","A generic type parameter: <code>T: Into<String></code>.",182,null],[13,"Lifetime","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.",182,null],[13,"Const","","A const generic parameter: <code>const LENGTH: usize</code>.",182,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration …",null,null],[12,"lt_token","","",183,null],[12,"params","","",183,null],[12,"gt_token","","",183,null],[12,"where_clause","","",183,null],[3,"LifetimeDef","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.",null,null],[12,"attrs","","",184,null],[12,"lifetime","","",184,null],[12,"colon_token","","",184,null],[12,"bounds","","",184,null],[3,"PredicateEq","","An equality predicate in a <code>where</code> clause (unsupported).",null,null],[12,"lhs_ty","","",185,null],[12,"eq_token","","",185,null],[12,"rhs_ty","","",185,null],[3,"PredicateLifetime","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.",null,null],[12,"lifetime","","",186,null],[12,"colon_token","","",186,null],[12,"bounds","","",186,null],[3,"PredicateType","","A type predicate in a <code>where</code> clause: …",null,null],[12,"lifetimes","","Any lifetimes from a <code>for</code> binding",187,null],[12,"bounded_ty","","The type being bounded",187,null],[12,"colon_token","","",187,null],[12,"bounds","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)",187,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",188,null],[12,"modifier","","",188,null],[12,"lifetimes","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>",188,null],[12,"path","","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>",188,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the <code>?</code>…",null,null],[13,"None","","",189,null],[13,"Maybe","","",189,null],[3,"TypeParam","","A generic type parameter: <code>T: Into<String></code>.",null,null],[12,"attrs","","",190,null],[12,"ident","","",190,null],[12,"colon_token","","",190,null],[12,"bounds","","",190,null],[12,"eq_token","","",190,null],[12,"default","","",190,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",191,null],[13,"Lifetime","","",191,null],[3,"WhereClause","","A <code>where</code> clause in a definition: …",null,null],[12,"where_token","","",192,null],[12,"predicates","","",192,null],[4,"WherePredicate","","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.",null,null],[13,"Type","","A type predicate in a <code>where</code> clause: …",193,null],[13,"Lifetime","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.",193,null],[13,"Eq","","An equality predicate in a <code>where</code> clause (unsupported).",193,null],[3,"ImplGenerics","","Returned by <code>Generics::split_for_impl</code>.",null,null],[3,"Turbofish","","Returned by <code>TypeGenerics::as_turbofish</code>.",null,null],[3,"TypeGenerics","","Returned by <code>Generics::split_for_impl</code>.",null,null],[4,"FnArg","","An argument in a function signature: the <code>n: usize</code> in …",null,null],[13,"Receiver","","The <code>self</code> argument of an associated method, whether taken …",194,null],[13,"Typed","","A function argument accepted by pattern and type.",194,null],[4,"ForeignItem","","An item within an <code>extern</code> block.",null,null],[13,"Fn","","A foreign function in an <code>extern</code> block.",195,null],[13,"Static","","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.",195,null],[13,"Type","","A foreign type in an <code>extern</code> block: <code>type void</code>.",195,null],[13,"Macro","","A macro invocation within an extern block.",195,null],[13,"Verbatim","","Tokens in an <code>extern</code> block not interpreted by Syn.",195,null],[3,"ForeignItemFn","","A foreign function in an <code>extern</code> block.",null,null],[12,"attrs","","",196,null],[12,"vis","","",196,null],[12,"sig","","",196,null],[12,"semi_token","","",196,null],[3,"ForeignItemMacro","","A macro invocation within an extern block.",null,null],[12,"attrs","","",197,null],[12,"mac","","",197,null],[12,"semi_token","","",197,null],[3,"ForeignItemStatic","","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.",null,null],[12,"attrs","","",198,null],[12,"vis","","",198,null],[12,"static_token","","",198,null],[12,"mutability","","",198,null],[12,"ident","","",198,null],[12,"colon_token","","",198,null],[12,"ty","","",198,null],[12,"semi_token","","",198,null],[3,"ForeignItemType","","A foreign type in an <code>extern</code> block: <code>type void</code>.",null,null],[12,"attrs","","",199,null],[12,"vis","","",199,null],[12,"type_token","","",199,null],[12,"ident","","",199,null],[12,"semi_token","","",199,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",200,null],[13,"Method","","A method within an impl block.",200,null],[13,"Type","","An associated type within an impl block.",200,null],[13,"Macro","","A macro invocation within an impl block.",200,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",200,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",201,null],[12,"vis","","",201,null],[12,"defaultness","","",201,null],[12,"const_token","","",201,null],[12,"ident","","",201,null],[12,"colon_token","","",201,null],[12,"ty","","",201,null],[12,"eq_token","","",201,null],[12,"expr","","",201,null],[12,"semi_token","","",201,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",202,null],[12,"mac","","",202,null],[12,"semi_token","","",202,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",203,null],[12,"vis","","",203,null],[12,"defaultness","","",203,null],[12,"sig","","",203,null],[12,"block","","",203,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",204,null],[12,"vis","","",204,null],[12,"defaultness","","",204,null],[12,"type_token","","",204,null],[12,"ident","","",204,null],[12,"generics","","",204,null],[12,"eq_token","","",204,null],[12,"ty","","",204,null],[12,"semi_token","","",204,null],[4,"Item","","Things that can appear directly inside of a module or …",null,null],[13,"Const","","A constant item: <code>const MAX: u16 = 65535</code>.",205,null],[13,"Enum","","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.",205,null],[13,"ExternCrate","","An <code>extern crate</code> item: <code>extern crate serde</code>.",205,null],[13,"Fn","","A free-standing function: …",205,null],[13,"ForeignMod","","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.",205,null],[13,"Impl","","An impl block providing trait or associated items: …",205,null],[13,"Macro","","A macro invocation, which includes <code>macro_rules!</code> …",205,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the <code>macro</code> …",205,null],[13,"Mod","","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.",205,null],[13,"Static","","A static item: <code>static BIKE: Shed = Shed(42)</code>.",205,null],[13,"Struct","","A struct definition: <code>struct Foo<A> { x: A }</code>.",205,null],[13,"Trait","","A trait definition: <code>pub trait Iterator { ... }</code>.",205,null],[13,"TraitAlias","","A trait alias: …",205,null],[13,"Type","","A type alias: …",205,null],[13,"Union","","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.",205,null],[13,"Use","","A use declaration: <code>use std::collections::HashMap</code>.",205,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",205,null],[3,"ItemConst","","A constant item: <code>const MAX: u16 = 65535</code>.",null,null],[12,"attrs","","",206,null],[12,"vis","","",206,null],[12,"const_token","","",206,null],[12,"ident","","",206,null],[12,"colon_token","","",206,null],[12,"ty","","",206,null],[12,"eq_token","","",206,null],[12,"expr","","",206,null],[12,"semi_token","","",206,null],[3,"ItemEnum","","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.",null,null],[12,"attrs","","",207,null],[12,"vis","","",207,null],[12,"enum_token","","",207,null],[12,"ident","","",207,null],[12,"generics","","",207,null],[12,"brace_token","","",207,null],[12,"variants","","",207,null],[3,"ItemExternCrate","","An <code>extern crate</code> item: <code>extern crate serde</code>.",null,null],[12,"attrs","","",208,null],[12,"vis","","",208,null],[12,"extern_token","","",208,null],[12,"crate_token","","",208,null],[12,"ident","","",208,null],[12,"rename","","",208,null],[12,"semi_token","","",208,null],[3,"ItemFn","","A free-standing function: …",null,null],[12,"attrs","","",209,null],[12,"vis","","",209,null],[12,"sig","","",209,null],[12,"block","","",209,null],[3,"ItemForeignMod","","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.",null,null],[12,"attrs","","",210,null],[12,"abi","","",210,null],[12,"brace_token","","",210,null],[12,"items","","",210,null],[3,"ItemImpl","","An impl block providing trait or associated items: …",null,null],[12,"attrs","","",211,null],[12,"defaultness","","",211,null],[12,"unsafety","","",211,null],[12,"impl_token","","",211,null],[12,"generics","","",211,null],[12,"trait_","","Trait this impl implements.",211,null],[12,"self_ty","","The Self type of the impl.",211,null],[12,"brace_token","","",211,null],[12,"items","","",211,null],[3,"ItemMacro","","A macro invocation, which includes <code>macro_rules!</code> …",null,null],[12,"attrs","","",212,null],[12,"ident","","The <code>example</code> in <code>macro_rules! example { ... }</code>.",212,null],[12,"mac","","",212,null],[12,"semi_token","","",212,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the <code>macro</code> …",null,null],[12,"attrs","","",213,null],[12,"vis","","",213,null],[12,"macro_token","","",213,null],[12,"ident","","",213,null],[12,"rules","","",213,null],[3,"ItemMod","","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.",null,null],[12,"attrs","","",214,null],[12,"vis","","",214,null],[12,"mod_token","","",214,null],[12,"ident","","",214,null],[12,"content","","",214,null],[12,"semi","","",214,null],[3,"ItemStatic","","A static item: <code>static BIKE: Shed = Shed(42)</code>.",null,null],[12,"attrs","","",215,null],[12,"vis","","",215,null],[12,"static_token","","",215,null],[12,"mutability","","",215,null],[12,"ident","","",215,null],[12,"colon_token","","",215,null],[12,"ty","","",215,null],[12,"eq_token","","",215,null],[12,"expr","","",215,null],[12,"semi_token","","",215,null],[3,"ItemStruct","","A struct definition: <code>struct Foo<A> { x: A }</code>.",null,null],[12,"attrs","","",216,null],[12,"vis","","",216,null],[12,"struct_token","","",216,null],[12,"ident","","",216,null],[12,"generics","","",216,null],[12,"fields","","",216,null],[12,"semi_token","","",216,null],[3,"ItemTrait","","A trait definition: <code>pub trait Iterator { ... }</code>.",null,null],[12,"attrs","","",217,null],[12,"vis","","",217,null],[12,"unsafety","","",217,null],[12,"auto_token","","",217,null],[12,"trait_token","","",217,null],[12,"ident","","",217,null],[12,"generics","","",217,null],[12,"colon_token","","",217,null],[12,"supertraits","","",217,null],[12,"brace_token","","",217,null],[12,"items","","",217,null],[3,"ItemTraitAlias","","A trait alias: …",null,null],[12,"attrs","","",218,null],[12,"vis","","",218,null],[12,"trait_token","","",218,null],[12,"ident","","",218,null],[12,"generics","","",218,null],[12,"eq_token","","",218,null],[12,"bounds","","",218,null],[12,"semi_token","","",218,null],[3,"ItemType","","A type alias: …",null,null],[12,"attrs","","",219,null],[12,"vis","","",219,null],[12,"type_token","","",219,null],[12,"ident","","",219,null],[12,"generics","","",219,null],[12,"eq_token","","",219,null],[12,"ty","","",219,null],[12,"semi_token","","",219,null],[3,"ItemUnion","","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.",null,null],[12,"attrs","","",220,null],[12,"vis","","",220,null],[12,"union_token","","",220,null],[12,"ident","","",220,null],[12,"generics","","",220,null],[12,"fields","","",220,null],[3,"ItemUse","","A use declaration: <code>use std::collections::HashMap</code>.",null,null],[12,"attrs","","",221,null],[12,"vis","","",221,null],[12,"use_token","","",221,null],[12,"leading_colon","","",221,null],[12,"tree","","",221,null],[12,"semi_token","","",221,null],[3,"Receiver","","The <code>self</code> argument of an associated method, whether taken …",null,null],[12,"attrs","","",222,null],[12,"reference","","",222,null],[12,"mutability","","",222,null],[12,"self_token","","",222,null],[3,"Signature","","A function signature in a trait or implementation: …",null,null],[12,"constness","","",223,null],[12,"asyncness","","",223,null],[12,"unsafety","","",223,null],[12,"abi","","",223,null],[12,"fn_token","","",223,null],[12,"ident","","",223,null],[12,"generics","","",223,null],[12,"paren_token","","",223,null],[12,"inputs","","",223,null],[12,"variadic","","",223,null],[12,"output","","",223,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",224,null],[13,"Method","","A trait method within the definition of a trait.",224,null],[13,"Type","","An associated type within the definition of a trait.",224,null],[13,"Macro","","A macro invocation within the definition of a trait.",224,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted …",224,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",225,null],[12,"const_token","","",225,null],[12,"ident","","",225,null],[12,"colon_token","","",225,null],[12,"ty","","",225,null],[12,"default","","",225,null],[12,"semi_token","","",225,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",226,null],[12,"mac","","",226,null],[12,"semi_token","","",226,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",227,null],[12,"sig","","",227,null],[12,"default","","",227,null],[12,"semi_token","","",227,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",228,null],[12,"type_token","","",228,null],[12,"ident","","",228,null],[12,"generics","","",228,null],[12,"colon_token","","",228,null],[12,"bounds","","",228,null],[12,"default","","",228,null],[12,"semi_token","","",228,null],[3,"UseGlob","","A glob import in a <code>use</code> item: <code>*</code>.",null,null],[12,"star_token","","",229,null],[3,"UseGroup","","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.",null,null],[12,"brace_token","","",230,null],[12,"items","","",230,null],[3,"UseName","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.",null,null],[12,"ident","","",231,null],[3,"UsePath","","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.",null,null],[12,"ident","","",232,null],[12,"colon2_token","","",232,null],[12,"tree","","",232,null],[3,"UseRename","","An renamed identifier imported by a <code>use</code> item: …",null,null],[12,"ident","","",233,null],[12,"as_token","","",233,null],[12,"rename","","",233,null],[4,"UseTree","","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …",null,null],[13,"Path","","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.",234,null],[13,"Name","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.",234,null],[13,"Rename","","An renamed identifier imported by a <code>use</code> item: …",234,null],[13,"Glob","","A glob import in a <code>use</code> item: <code>*</code>.",234,null],[13,"Group","","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.",234,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",235,null],[12,"attrs","","",235,null],[12,"items","","",235,null],[3,"Lifetime","","A Rust lifetime: <code>\'a</code>.",null,null],[12,"apostrophe","","",236,null],[12,"ident","","",236,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: <code>\\\"foo\\\"</code>.",237,null],[13,"ByteStr","","A byte string literal: <code>b\\\"foo\\\"</code>.",237,null],[13,"Byte","","A byte literal: <code>b\'f\'</code>.",237,null],[13,"Char","","A character literal: <code>\'a\'</code>.",237,null],[13,"Int","","An integer literal: <code>1</code> or <code>1u16</code>.",237,null],[13,"Float","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.",237,null],[13,"Bool","","A boolean literal: <code>true</code> or <code>false</code>.",237,null],[13,"Verbatim","","A raw token literal not interpreted by Syn.",237,null],[3,"LitBool","","A boolean literal: <code>true</code> or <code>false</code>.",null,null],[12,"value","","",238,null],[12,"span","","",238,null],[3,"LitByte","","A byte literal: <code>b\'f\'</code>.",null,null],[3,"LitByteStr","","A byte string literal: <code>b\\\"foo\\\"</code>.",null,null],[3,"LitChar","","A character literal: <code>\'a\'</code>.",null,null],[3,"LitFloat","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.",null,null],[3,"LitInt","","An integer literal: <code>1</code> or <code>1u16</code>.",null,null],[3,"LitStr","","A UTF-8 string literal: <code>\\\"foo\\\"</code>.",null,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a …",null,null],[13,"Cooked","","An ordinary string like <code>\\\"data\\\"</code>.",239,null],[13,"Raw","","A raw string like <code>r##\\\"data\\\"##</code>.",239,null],[3,"Macro","","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.",null,null],[12,"path","","",240,null],[12,"bang_token","","",240,null],[12,"delimiter","","",240,null],[12,"tokens","","",240,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: <code>m!(...)</code> or …",null,null],[13,"Paren","","",241,null],[13,"Brace","","",241,null],[13,"Bracket","","",241,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a <code>proc_macro_derive</code> macro.",242,null],[13,"Enum","","An enum input to a <code>proc_macro_derive</code> macro.",242,null],[13,"Union","","An untagged union input to a <code>proc_macro_derive</code> macro.",242,null],[3,"DataEnum","","An enum input to a <code>proc_macro_derive</code> macro.",null,null],[12,"enum_token","","",243,null],[12,"brace_token","","",243,null],[12,"variants","","",243,null],[3,"DataStruct","","A struct input to a <code>proc_macro_derive</code> macro.",null,null],[12,"struct_token","","",244,null],[12,"fields","","",244,null],[12,"semi_token","","",244,null],[3,"DataUnion","","An untagged union input to a <code>proc_macro_derive</code> macro.",null,null],[12,"union_token","","",245,null],[12,"fields","","",245,null],[3,"DeriveInput","","Data structure sent to a <code>proc_macro_derive</code> macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",246,null],[12,"vis","","Visibility of the struct or enum.",246,null],[12,"ident","","Name of the struct or enum.",246,null],[12,"generics","","Generics required to complete the definition.",246,null],[12,"data","","Data within the struct or enum.",246,null],[4,"BinOp","","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.",null,null],[13,"Add","","The <code>+</code> operator (addition)",247,null],[13,"Sub","","The <code>-</code> operator (subtraction)",247,null],[13,"Mul","","The <code>*</code> operator (multiplication)",247,null],[13,"Div","","The <code>/</code> operator (division)",247,null],[13,"Rem","","The <code>%</code> operator (modulus)",247,null],[13,"And","","The <code>&&</code> operator (logical and)",247,null],[13,"Or","","The <code>||</code> operator (logical or)",247,null],[13,"BitXor","","The <code>^</code> operator (bitwise xor)",247,null],[13,"BitAnd","","The <code>&</code> operator (bitwise and)",247,null],[13,"BitOr","","The <code>|</code> operator (bitwise or)",247,null],[13,"Shl","","The <code><<</code> operator (shift left)",247,null],[13,"Shr","","The <code>>></code> operator (shift right)",247,null],[13,"Eq","","The <code>==</code> operator (equality)",247,null],[13,"Lt","","The <code><</code> operator (less than)",247,null],[13,"Le","","The <code><=</code> operator (less than or equal to)",247,null],[13,"Ne","","The <code>!=</code> operator (not equal to)",247,null],[13,"Ge","","The <code>>=</code> operator (greater than or equal to)",247,null],[13,"Gt","","The <code>></code> operator (greater than)",247,null],[13,"AddEq","","The <code>+=</code> operator",247,null],[13,"SubEq","","The <code>-=</code> operator",247,null],[13,"MulEq","","The <code>*=</code> operator",247,null],[13,"DivEq","","The <code>/=</code> operator",247,null],[13,"RemEq","","The <code>%=</code> operator",247,null],[13,"BitXorEq","","The <code>^=</code> operator",247,null],[13,"BitAndEq","","The <code>&=</code> operator",247,null],[13,"BitOrEq","","The <code>|=</code> operator",247,null],[13,"ShlEq","","The <code><<=</code> operator",247,null],[13,"ShrEq","","The <code>>>=</code> operator",247,null],[4,"UnOp","","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.",null,null],[13,"Deref","","The <code>*</code> operator for dereferencing",248,null],[13,"Not","","The <code>!</code> operator for logical inversion",248,null],[13,"Neg","","The <code>-</code> operator for negation",248,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",249,null],[12,"stmts","","Statements in a block",249,null],[3,"Local","","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.",null,null],[12,"attrs","","",250,null],[12,"let_token","","",250,null],[12,"pat","","",250,null],[12,"init","","",250,null],[12,"semi_token","","",250,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",251,null],[13,"Item","","An item definition.",251,null],[13,"Expr","","Expr without trailing semicolon.",251,null],[13,"Semi","","Expression with trailing semicolon.",251,null],[3,"Abi","","The binary interface of a function: <code>extern \\\"C\\\"</code>.",null,null],[12,"extern_token","","",252,null],[12,"name","","",252,null],[3,"BareFnArg","","An argument in a function type: the <code>usize</code> in …",null,null],[12,"attrs","","",253,null],[12,"name","","",253,null],[12,"ty","","",253,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",254,null],[13,"Type","","A particular type is returned.",254,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Array","","A fixed size array type: <code>[T; n]</code>.",255,null],[13,"BareFn","","A bare function type: <code>fn(usize) -> bool</code>.",255,null],[13,"Group","","A type contained within invisible delimiters.",255,null],[13,"ImplTrait","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …",255,null],[13,"Infer","","Indication that a type should be inferred by the …",255,null],[13,"Macro","","A macro in the type position.",255,null],[13,"Never","","The never type: <code>!</code>.",255,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",255,null],[13,"Path","","A path like <code>std::slice::Iter</code>, optionally qualified with a …",255,null],[13,"Ptr","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.",255,null],[13,"Reference","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.",255,null],[13,"Slice","","A dynamically sized slice type: <code>[T]</code>.",255,null],[13,"TraitObject","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …",255,null],[13,"Tuple","","A tuple type: <code>(A, B, C, String)</code>.",255,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",255,null],[3,"TypeArray","","A fixed size array type: <code>[T; n]</code>.",null,null],[12,"bracket_token","","",256,null],[12,"elem","","",256,null],[12,"semi_token","","",256,null],[12,"len","","",256,null],[3,"TypeBareFn","","A bare function type: <code>fn(usize) -> bool</code>.",null,null],[12,"lifetimes","","",257,null],[12,"unsafety","","",257,null],[12,"abi","","",257,null],[12,"fn_token","","",257,null],[12,"paren_token","","",257,null],[12,"inputs","","",257,null],[12,"variadic","","",257,null],[12,"output","","",257,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",258,null],[12,"elem","","",258,null],[3,"TypeImplTrait","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …",null,null],[12,"impl_token","","",259,null],[12,"bounds","","",259,null],[3,"TypeInfer","","Indication that a type should be inferred by the …",null,null],[12,"underscore_token","","",260,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",261,null],[3,"TypeNever","","The never type: <code>!</code>.",null,null],[12,"bang_token","","",262,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",263,null],[12,"elem","","",263,null],[3,"TypePath","","A path like <code>std::slice::Iter</code>, optionally qualified with a …",null,null],[12,"qself","","",264,null],[12,"path","","",264,null],[3,"TypePtr","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.",null,null],[12,"star_token","","",265,null],[12,"const_token","","",265,null],[12,"mutability","","",265,null],[12,"elem","","",265,null],[3,"TypeReference","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.",null,null],[12,"and_token","","",266,null],[12,"lifetime","","",266,null],[12,"mutability","","",266,null],[12,"elem","","",266,null],[3,"TypeSlice","","A dynamically sized slice type: <code>[T]</code>.",null,null],[12,"bracket_token","","",267,null],[12,"elem","","",267,null],[3,"TypeTraitObject","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …",null,null],[12,"dyn_token","","",268,null],[12,"bounds","","",268,null],[3,"TypeTuple","","A tuple type: <code>(A, B, C, String)</code>.",null,null],[12,"paren_token","","",269,null],[12,"elems","","",269,null],[3,"Variadic","","The variadic argument of a foreign function.",null,null],[12,"attrs","","",270,null],[12,"dots","","",270,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",271,null],[12,"member","","",271,null],[12,"colon_token","","",271,null],[12,"pat","","",271,null],[4,"Pat","","A pattern in a local binding, function signature, match …",null,null],[13,"Box","","A box pattern: <code>box v</code>.",272,null],[13,"Ident","","A pattern that binds a new variable: …",272,null],[13,"Lit","","A literal pattern: <code>0</code>.",272,null],[13,"Macro","","A macro in pattern position.",272,null],[13,"Or","","A pattern that matches any one of a set of cases.",272,null],[13,"Path","","A path pattern like <code>Color::Red</code>, optionally qualified with …",272,null],[13,"Range","","A range pattern: <code>1..=2</code>.",272,null],[13,"Reference","","A reference pattern: <code>&mut var</code>.",272,null],[13,"Rest","","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>",272,null],[13,"Slice","","A dynamically sized slice pattern: …",272,null],[13,"Struct","","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.",272,null],[13,"Tuple","","A tuple pattern: <code>(a, b)</code>.",272,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: …",272,null],[13,"Type","","A type ascription pattern: <code>foo: f64</code>.",272,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",272,null],[13,"Wild","","A pattern that matches any value: <code>_</code>.",272,null],[3,"PatBox","","A box pattern: <code>box v</code>.",null,null],[12,"attrs","","",273,null],[12,"box_token","","",273,null],[12,"pat","","",273,null],[3,"PatIdent","","A pattern that binds a new variable: …",null,null],[12,"attrs","","",274,null],[12,"by_ref","","",274,null],[12,"mutability","","",274,null],[12,"ident","","",274,null],[12,"subpat","","",274,null],[3,"PatLit","","A literal pattern: <code>0</code>.",null,null],[12,"attrs","","",275,null],[12,"expr","","",275,null],[3,"PatMacro","","A macro in pattern position.",null,null],[12,"attrs","","",276,null],[12,"mac","","",276,null],[3,"PatOr","","A pattern that matches any one of a set of cases.",null,null],[12,"attrs","","",277,null],[12,"leading_vert","","",277,null],[12,"cases","","",277,null],[3,"PatPath","","A path pattern like <code>Color::Red</code>, optionally qualified with …",null,null],[12,"attrs","","",278,null],[12,"qself","","",278,null],[12,"path","","",278,null],[3,"PatRange","","A range pattern: <code>1..=2</code>.",null,null],[12,"attrs","","",279,null],[12,"lo","","",279,null],[12,"limits","","",279,null],[12,"hi","","",279,null],[3,"PatReference","","A reference pattern: <code>&mut var</code>.",null,null],[12,"attrs","","",280,null],[12,"and_token","","",280,null],[12,"mutability","","",280,null],[12,"pat","","",280,null],[3,"PatRest","","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>",null,null],[12,"attrs","","",281,null],[12,"dot2_token","","",281,null],[3,"PatSlice","","A dynamically sized slice pattern: …",null,null],[12,"attrs","","",282,null],[12,"bracket_token","","",282,null],[12,"elems","","",282,null],[3,"PatStruct","","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.",null,null],[12,"attrs","","",283,null],[12,"path","","",283,null],[12,"brace_token","","",283,null],[12,"fields","","",283,null],[12,"dot2_token","","",283,null],[3,"PatTuple","","A tuple pattern: <code>(a, b)</code>.",null,null],[12,"attrs","","",284,null],[12,"paren_token","","",284,null],[12,"elems","","",284,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: …",null,null],[12,"attrs","","",285,null],[12,"path","","",285,null],[12,"pat","","",285,null],[3,"PatType","","A type ascription pattern: <code>foo: f64</code>.",null,null],[12,"attrs","","",286,null],[12,"pat","","",286,null],[12,"colon_token","","",286,null],[12,"ty","","",286,null],[3,"PatWild","","A pattern that matches any value: <code>_</code>.",null,null],[12,"attrs","","",287,null],[12,"underscore_token","","",287,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the <code><K, V></code> …",null,null],[12,"colon2_token","","",288,null],[12,"lt_token","","",288,null],[12,"args","","",288,null],[12,"gt_token","","",288,null],[3,"Binding","","A binding (equality constraint) on an associated type: …",null,null],[12,"ident","","",289,null],[12,"eq_token","","",289,null],[12,"ty","","",289,null],[3,"Constraint","","An associated type bound: <code>Iterator<Item: Display></code>.",null,null],[12,"ident","","",290,null],[12,"colon_token","","",290,null],[12,"bounds","","",290,null],[4,"GenericArgument","","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.",null,null],[13,"Lifetime","","A lifetime argument.",291,null],[13,"Type","","A type argument.",291,null],[13,"Binding","","A binding (equality constraint) on an associated type: …",291,null],[13,"Constraint","","An associated type bound: <code>Iterator<Item: Display></code>.",291,null],[13,"Const","","A const expression. Must be inside of a block.",291,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the <code>(A, B) -> C</code> in …",null,null],[12,"paren_token","","",292,null],[12,"inputs","","<code>(A, B)</code>",292,null],[12,"output","","<code>C</code>",292,null],[3,"Path","","A path at which a named item is exported (e.g. …",null,null],[12,"leading_colon","","",293,null],[12,"segments","","",293,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path …",null,null],[13,"None","","",294,null],[13,"AngleBracketed","","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.",294,null],[13,"Parenthesized","","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.",294,null],[3,"PathSegment","","A segment of a path together with any path arguments on …",null,null],[12,"ident","","",295,null],[12,"arguments","","",295,null],[3,"QSelf","","The explicit Self type in a qualified path: the <code>T</code> in …",null,null],[12,"lt_token","","",296,null],[12,"ty","","",296,null],[12,"position","","",296,null],[12,"as_token","","",296,null],[12,"gt_token","","",296,null],[3,"Error","","Error returned when a Syn parser cannot parse the input …",null,null],[6,"Result","","The result of a Syn parser.",null,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree …",null,[[["tokenstream",3]],[["parse",8],["result",6]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax …",null,[[["tokenstream",3]],[["parse",8],["result",6]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree …",null,[[],[["parse",8],["result",6]]]],[5,"parse_file","","Parse the content of a file of Rust code.",null,[[],[["result",6],["file",3]]]],[14,"parenthesized","","Parse a set of parentheses and expose their content to …",null,null],[14,"braced","","Parse a set of curly braces and expose their content to …",null,null],[14,"bracketed","","Parse a set of square brackets and expose their content …",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type …",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the <code>quote!</code> …",null,null],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a …",null,null],[14,"custom_keyword","","Define a type that supports parsing and printing a given …",null,null],[14,"custom_punctuation","","Define a type that supports parsing and printing a …",null,null],[11,"span","","",297,[[],["span",3]]],[11,"from","","",297,[[]]],[11,"into","","",297,[[]]],[11,"to_owned","","",297,[[]]],[11,"clone_into","","",297,[[]]],[11,"to_string","","",297,[[],["string",3]]],[11,"borrow","","",297,[[]]],[11,"borrow_mut","","",297,[[]]],[11,"try_from","","",297,[[],["result",4]]],[11,"try_into","","",297,[[],["result",4]]],[11,"type_id","","",297,[[],["typeid",3]]],[11,"span","syn::token","",0,[[],["span",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"span","","",1,[[],["span",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"span","","",2,[[],["span",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"span","","",3,[[],["span",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"span","","",4,[[],["span",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"span","","",5,[[],["span",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"span","","",6,[[],["span",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"span","","",7,[[],["span",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"span","","",8,[[],["span",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"span","","",9,[[],["span",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"span","","",10,[[],["span",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"span","","",11,[[],["span",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"span","","",12,[[],["span",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"span","","",13,[[],["span",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"span","","",14,[[],["span",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"span","","",15,[[],["span",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"span","","",16,[[],["span",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"span","","",17,[[],["span",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"span","","",18,[[],["span",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"span","","",19,[[],["span",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"span","","",20,[[],["span",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"span","","",21,[[],["span",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"span","","",22,[[],["span",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"span","","",23,[[],["span",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"span","","",24,[[],["span",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"span","","",25,[[],["span",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"span","","",26,[[],["span",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"span","","",27,[[],["span",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"span","","",28,[[],["span",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"span","","",29,[[],["span",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"span","","",30,[[],["span",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"span","","",31,[[],["span",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"span","","",32,[[],["span",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"span","","",33,[[],["span",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"span","","",34,[[],["span",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"span","","",35,[[],["span",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"span","","",36,[[],["span",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"span","","",37,[[],["span",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"span","","",38,[[],["span",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"span","","",39,[[],["span",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"span","","",40,[[],["span",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"span","","",41,[[],["span",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"span","","",42,[[],["span",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"span","","",43,[[],["span",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"span","","",44,[[],["span",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"span","","",45,[[],["span",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"span","","",46,[[],["span",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"span","","",47,[[],["span",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"span","","",48,[[],["span",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"span","","",49,[[],["span",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"span","","",50,[[],["span",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"span","","",51,[[],["span",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"span","","",52,[[],["span",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"span","","",53,[[],["span",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"span","","",54,[[],["span",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"span","","",55,[[],["span",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"span","","",56,[[],["span",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"span","","",57,[[],["span",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"span","","",58,[[],["span",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"span","","",59,[[],["span",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"span","","",60,[[],["span",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"span","","",61,[[],["span",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"span","","",62,[[],["span",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"span","","",63,[[],["span",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"span","","",64,[[],["span",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"span","","",65,[[],["span",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"span","","",66,[[],["span",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"span","","",67,[[],["span",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"span","","",68,[[],["span",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"span","","",69,[[],["span",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"span","","",70,[[],["span",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"span","","",71,[[],["span",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"span","","",72,[[],["span",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"span","","",73,[[],["span",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"span","","",74,[[],["span",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"span","","",75,[[],["span",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"span","","",76,[[],["span",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"span","","",77,[[],["span",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"span","","",78,[[],["span",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"span","","",79,[[],["span",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"span","","",80,[[],["span",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"span","","",81,[[],["span",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"span","","",82,[[],["span",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"span","","",83,[[],["span",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"span","","",84,[[],["span",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"span","","",85,[[],["span",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"span","","",86,[[],["span",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"span","","",87,[[],["span",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"span","","",88,[[],["span",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"span","","",89,[[],["span",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"span","","",90,[[],["span",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"span","","",91,[[],["span",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"span","","",92,[[],["span",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"span","","",93,[[],["span",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"span","","",94,[[],["span",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"span","","",95,[[],["span",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"span","","",96,[[],["span",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"span","","",97,[[],["span",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"span","","",98,[[],["span",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"span","syn","",118,[[],["span",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"span","","",119,[[],["span",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"span","","",120,[[],["span",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"span","","",121,[[],["span",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"span","","",122,[[],["span",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"span","","",127,[[],["span",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"span","","",124,[[],["span",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"span","","",125,[[],["span",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"span","","",126,[[],["span",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"span","","",123,[[],["span",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"span","","",131,[[],["span",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"span","","",129,[[],["span",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"span","","",128,[[],["span",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"span","","",130,[[],["span",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"span","","",138,[[],["span",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"span","","",139,[[],["span",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"span","","",140,[[],["span",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"span","","",141,[[],["span",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"span","","",142,[[],["span",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"span","","",143,[[],["span",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"span","","",144,[[],["span",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"span","","",145,[[],["span",3]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"span","","",146,[[],["span",3]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"span","","",147,[[],["span",3]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"span","","",148,[[],["span",3]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"span","","",149,[[],["span",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"span","","",150,[[],["span",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"span","","",151,[[],["span",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"span","","",152,[[],["span",3]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"span","","",153,[[],["span",3]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"span","","",154,[[],["span",3]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"span","","",155,[[],["span",3]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"to_owned","","",155,[[]]],[11,"clone_into","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"span","","",156,[[],["span",3]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"to_owned","","",156,[[]]],[11,"clone_into","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"span","","",157,[[],["span",3]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"span","","",158,[[],["span",3]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"to_owned","","",158,[[]]],[11,"clone_into","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"span","","",159,[[],["span",3]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"span","","",160,[[],["span",3]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"span","","",161,[[],["span",3]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"span","","",162,[[],["span",3]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"to_owned","","",162,[[]]],[11,"clone_into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"span","","",163,[[],["span",3]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"to_owned","","",163,[[]]],[11,"clone_into","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"span","","",164,[[],["span",3]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"to_owned","","",164,[[]]],[11,"clone_into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"span","","",165,[[],["span",3]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"to_owned","","",165,[[]]],[11,"clone_into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"span","","",166,[[],["span",3]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"span","","",167,[[],["span",3]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"to_owned","","",167,[[]]],[11,"clone_into","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"span","","",168,[[],["span",3]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"to_owned","","",168,[[]]],[11,"clone_into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"span","","",169,[[],["span",3]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"to_owned","","",169,[[]]],[11,"clone_into","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"span","","",170,[[],["span",3]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"span","","",171,[[],["span",3]]],[11,"from","","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"span","","",172,[[],["span",3]]],[11,"from","","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"span","","",173,[[],["span",3]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"span","","",174,[[],["span",3]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"to_owned","","",174,[[]]],[11,"clone_into","","",174,[[]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"span","","",175,[[],["span",3]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"span","","",176,[[],["span",3]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"to_owned","","",176,[[]]],[11,"clone_into","","",176,[[]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"span","","",177,[[],["span",3]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"to_owned","","",177,[[]]],[11,"clone_into","","",177,[[]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"span","","",179,[[],["span",3]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"to_owned","","",179,[[]]],[11,"clone_into","","",179,[[]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"span","","",178,[[],["span",3]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"to_owned","","",178,[[]]],[11,"clone_into","","",178,[[]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"span","","",136,[[],["span",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"span","","",134,[[],["span",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"span","","",133,[[],["span",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"span","","",135,[[],["span",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"span","","",132,[[],["span",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"span","","",183,[[],["span",3]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"to_owned","","",183,[[]]],[11,"clone_into","","",183,[[]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"span","","",182,[[],["span",3]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"to_owned","","",182,[[]]],[11,"clone_into","","",182,[[]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"span","","",190,[[],["span",3]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"to_owned","","",190,[[]]],[11,"clone_into","","",190,[[]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"span","","",184,[[],["span",3]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"to_owned","","",184,[[]]],[11,"clone_into","","",184,[[]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"span","","",181,[[],["span",3]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"to_owned","","",181,[[]]],[11,"clone_into","","",181,[[]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"span","","",298,[[],["span",3]]],[11,"from","","",298,[[]]],[11,"into","","",298,[[]]],[11,"to_owned","","",298,[[]]],[11,"clone_into","","",298,[[]]],[11,"borrow","","",298,[[]]],[11,"borrow_mut","","",298,[[]]],[11,"try_from","","",298,[[],["result",4]]],[11,"try_into","","",298,[[],["result",4]]],[11,"type_id","","",298,[[],["typeid",3]]],[11,"span","","",299,[[],["span",3]]],[11,"from","","",299,[[]]],[11,"into","","",299,[[]]],[11,"to_owned","","",299,[[]]],[11,"clone_into","","",299,[[]]],[11,"borrow","","",299,[[]]],[11,"borrow_mut","","",299,[[]]],[11,"try_from","","",299,[[],["result",4]]],[11,"try_into","","",299,[[],["result",4]]],[11,"type_id","","",299,[[],["typeid",3]]],[11,"span","","",300,[[],["span",3]]],[11,"from","","",300,[[]]],[11,"into","","",300,[[]]],[11,"to_owned","","",300,[[]]],[11,"clone_into","","",300,[[]]],[11,"borrow","","",300,[[]]],[11,"borrow_mut","","",300,[[]]],[11,"try_from","","",300,[[],["result",4]]],[11,"try_into","","",300,[[],["result",4]]],[11,"type_id","","",300,[[],["typeid",3]]],[11,"span","","",180,[[],["span",3]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"to_owned","","",180,[[]]],[11,"clone_into","","",180,[[]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"span","","",191,[[],["span",3]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"to_owned","","",191,[[]]],[11,"clone_into","","",191,[[]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"span","","",188,[[],["span",3]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"to_owned","","",188,[[]]],[11,"clone_into","","",188,[[]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"span","","",189,[[],["span",3]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"to_owned","","",189,[[]]],[11,"clone_into","","",189,[[]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"span","","",192,[[],["span",3]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"to_owned","","",192,[[]]],[11,"clone_into","","",192,[[]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"span","","",193,[[],["span",3]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"to_owned","","",193,[[]]],[11,"clone_into","","",193,[[]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"span","","",187,[[],["span",3]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"to_owned","","",187,[[]]],[11,"clone_into","","",187,[[]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"span","","",186,[[],["span",3]]],[11,"from","","",186,[[]]],[11,"into","","",186,[[]]],[11,"to_owned","","",186,[[]]],[11,"clone_into","","",186,[[]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"span","","",185,[[],["span",3]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"to_owned","","",185,[[]]],[11,"clone_into","","",185,[[]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"span","","",205,[[],["span",3]]],[11,"from","","",205,[[]]],[11,"into","","",205,[[]]],[11,"to_owned","","",205,[[]]],[11,"clone_into","","",205,[[]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"try_into","","",205,[[],["result",4]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"span","","",206,[[],["span",3]]],[11,"from","","",206,[[]]],[11,"into","","",206,[[]]],[11,"to_owned","","",206,[[]]],[11,"clone_into","","",206,[[]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"try_into","","",206,[[],["result",4]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"span","","",207,[[],["span",3]]],[11,"from","","",207,[[]]],[11,"into","","",207,[[]]],[11,"to_owned","","",207,[[]]],[11,"clone_into","","",207,[[]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"try_from","","",207,[[],["result",4]]],[11,"try_into","","",207,[[],["result",4]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"span","","",208,[[],["span",3]]],[11,"from","","",208,[[]]],[11,"into","","",208,[[]]],[11,"to_owned","","",208,[[]]],[11,"clone_into","","",208,[[]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"try_from","","",208,[[],["result",4]]],[11,"try_into","","",208,[[],["result",4]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"span","","",209,[[],["span",3]]],[11,"from","","",209,[[]]],[11,"into","","",209,[[]]],[11,"to_owned","","",209,[[]]],[11,"clone_into","","",209,[[]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"try_from","","",209,[[],["result",4]]],[11,"try_into","","",209,[[],["result",4]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"span","","",210,[[],["span",3]]],[11,"from","","",210,[[]]],[11,"into","","",210,[[]]],[11,"to_owned","","",210,[[]]],[11,"clone_into","","",210,[[]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"try_from","","",210,[[],["result",4]]],[11,"try_into","","",210,[[],["result",4]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"span","","",211,[[],["span",3]]],[11,"from","","",211,[[]]],[11,"into","","",211,[[]]],[11,"to_owned","","",211,[[]]],[11,"clone_into","","",211,[[]]],[11,"borrow","","",211,[[]]],[11,"borrow_mut","","",211,[[]]],[11,"try_from","","",211,[[],["result",4]]],[11,"try_into","","",211,[[],["result",4]]],[11,"type_id","","",211,[[],["typeid",3]]],[11,"span","","",212,[[],["span",3]]],[11,"from","","",212,[[]]],[11,"into","","",212,[[]]],[11,"to_owned","","",212,[[]]],[11,"clone_into","","",212,[[]]],[11,"borrow","","",212,[[]]],[11,"borrow_mut","","",212,[[]]],[11,"try_from","","",212,[[],["result",4]]],[11,"try_into","","",212,[[],["result",4]]],[11,"type_id","","",212,[[],["typeid",3]]],[11,"span","","",213,[[],["span",3]]],[11,"from","","",213,[[]]],[11,"into","","",213,[[]]],[11,"to_owned","","",213,[[]]],[11,"clone_into","","",213,[[]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"try_from","","",213,[[],["result",4]]],[11,"try_into","","",213,[[],["result",4]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"span","","",214,[[],["span",3]]],[11,"from","","",214,[[]]],[11,"into","","",214,[[]]],[11,"to_owned","","",214,[[]]],[11,"clone_into","","",214,[[]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"try_from","","",214,[[],["result",4]]],[11,"try_into","","",214,[[],["result",4]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"span","","",215,[[],["span",3]]],[11,"from","","",215,[[]]],[11,"into","","",215,[[]]],[11,"to_owned","","",215,[[]]],[11,"clone_into","","",215,[[]]],[11,"borrow","","",215,[[]]],[11,"borrow_mut","","",215,[[]]],[11,"try_from","","",215,[[],["result",4]]],[11,"try_into","","",215,[[],["result",4]]],[11,"type_id","","",215,[[],["typeid",3]]],[11,"span","","",216,[[],["span",3]]],[11,"from","","",216,[[]]],[11,"into","","",216,[[]]],[11,"to_owned","","",216,[[]]],[11,"clone_into","","",216,[[]]],[11,"borrow","","",216,[[]]],[11,"borrow_mut","","",216,[[]]],[11,"try_from","","",216,[[],["result",4]]],[11,"try_into","","",216,[[],["result",4]]],[11,"type_id","","",216,[[],["typeid",3]]],[11,"span","","",217,[[],["span",3]]],[11,"from","","",217,[[]]],[11,"into","","",217,[[]]],[11,"to_owned","","",217,[[]]],[11,"clone_into","","",217,[[]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"try_from","","",217,[[],["result",4]]],[11,"try_into","","",217,[[],["result",4]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"span","","",218,[[],["span",3]]],[11,"from","","",218,[[]]],[11,"into","","",218,[[]]],[11,"to_owned","","",218,[[]]],[11,"clone_into","","",218,[[]]],[11,"borrow","","",218,[[]]],[11,"borrow_mut","","",218,[[]]],[11,"try_from","","",218,[[],["result",4]]],[11,"try_into","","",218,[[],["result",4]]],[11,"type_id","","",218,[[],["typeid",3]]],[11,"span","","",219,[[],["span",3]]],[11,"from","","",219,[[]]],[11,"into","","",219,[[]]],[11,"to_owned","","",219,[[]]],[11,"clone_into","","",219,[[]]],[11,"borrow","","",219,[[]]],[11,"borrow_mut","","",219,[[]]],[11,"try_from","","",219,[[],["result",4]]],[11,"try_into","","",219,[[],["result",4]]],[11,"type_id","","",219,[[],["typeid",3]]],[11,"span","","",220,[[],["span",3]]],[11,"from","","",220,[[]]],[11,"into","","",220,[[]]],[11,"to_owned","","",220,[[]]],[11,"clone_into","","",220,[[]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"try_from","","",220,[[],["result",4]]],[11,"try_into","","",220,[[],["result",4]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"span","","",221,[[],["span",3]]],[11,"from","","",221,[[]]],[11,"into","","",221,[[]]],[11,"to_owned","","",221,[[]]],[11,"clone_into","","",221,[[]]],[11,"borrow","","",221,[[]]],[11,"borrow_mut","","",221,[[]]],[11,"try_from","","",221,[[],["result",4]]],[11,"try_into","","",221,[[],["result",4]]],[11,"type_id","","",221,[[],["typeid",3]]],[11,"span","","",234,[[],["span",3]]],[11,"from","","",234,[[]]],[11,"into","","",234,[[]]],[11,"to_owned","","",234,[[]]],[11,"clone_into","","",234,[[]]],[11,"borrow","","",234,[[]]],[11,"borrow_mut","","",234,[[]]],[11,"try_from","","",234,[[],["result",4]]],[11,"try_into","","",234,[[],["result",4]]],[11,"type_id","","",234,[[],["typeid",3]]],[11,"span","","",232,[[],["span",3]]],[11,"from","","",232,[[]]],[11,"into","","",232,[[]]],[11,"to_owned","","",232,[[]]],[11,"clone_into","","",232,[[]]],[11,"borrow","","",232,[[]]],[11,"borrow_mut","","",232,[[]]],[11,"try_from","","",232,[[],["result",4]]],[11,"try_into","","",232,[[],["result",4]]],[11,"type_id","","",232,[[],["typeid",3]]],[11,"span","","",231,[[],["span",3]]],[11,"from","","",231,[[]]],[11,"into","","",231,[[]]],[11,"to_owned","","",231,[[]]],[11,"clone_into","","",231,[[]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"try_from","","",231,[[],["result",4]]],[11,"try_into","","",231,[[],["result",4]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"span","","",233,[[],["span",3]]],[11,"from","","",233,[[]]],[11,"into","","",233,[[]]],[11,"to_owned","","",233,[[]]],[11,"clone_into","","",233,[[]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"try_from","","",233,[[],["result",4]]],[11,"try_into","","",233,[[],["result",4]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"span","","",229,[[],["span",3]]],[11,"from","","",229,[[]]],[11,"into","","",229,[[]]],[11,"to_owned","","",229,[[]]],[11,"clone_into","","",229,[[]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"try_from","","",229,[[],["result",4]]],[11,"try_into","","",229,[[],["result",4]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"span","","",230,[[],["span",3]]],[11,"from","","",230,[[]]],[11,"into","","",230,[[]]],[11,"to_owned","","",230,[[]]],[11,"clone_into","","",230,[[]]],[11,"borrow","","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"try_from","","",230,[[],["result",4]]],[11,"try_into","","",230,[[],["result",4]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"span","","",195,[[],["span",3]]],[11,"from","","",195,[[]]],[11,"into","","",195,[[]]],[11,"to_owned","","",195,[[]]],[11,"clone_into","","",195,[[]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"span","","",196,[[],["span",3]]],[11,"from","","",196,[[]]],[11,"into","","",196,[[]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"span","","",198,[[],["span",3]]],[11,"from","","",198,[[]]],[11,"into","","",198,[[]]],[11,"to_owned","","",198,[[]]],[11,"clone_into","","",198,[[]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"try_from","","",198,[[],["result",4]]],[11,"try_into","","",198,[[],["result",4]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"span","","",199,[[],["span",3]]],[11,"from","","",199,[[]]],[11,"into","","",199,[[]]],[11,"to_owned","","",199,[[]]],[11,"clone_into","","",199,[[]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"try_from","","",199,[[],["result",4]]],[11,"try_into","","",199,[[],["result",4]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"span","","",197,[[],["span",3]]],[11,"from","","",197,[[]]],[11,"into","","",197,[[]]],[11,"to_owned","","",197,[[]]],[11,"clone_into","","",197,[[]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"try_into","","",197,[[],["result",4]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"span","","",224,[[],["span",3]]],[11,"from","","",224,[[]]],[11,"into","","",224,[[]]],[11,"to_owned","","",224,[[]]],[11,"clone_into","","",224,[[]]],[11,"borrow","","",224,[[]]],[11,"borrow_mut","","",224,[[]]],[11,"try_from","","",224,[[],["result",4]]],[11,"try_into","","",224,[[],["result",4]]],[11,"type_id","","",224,[[],["typeid",3]]],[11,"span","","",225,[[],["span",3]]],[11,"from","","",225,[[]]],[11,"into","","",225,[[]]],[11,"to_owned","","",225,[[]]],[11,"clone_into","","",225,[[]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"try_from","","",225,[[],["result",4]]],[11,"try_into","","",225,[[],["result",4]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"span","","",227,[[],["span",3]]],[11,"from","","",227,[[]]],[11,"into","","",227,[[]]],[11,"to_owned","","",227,[[]]],[11,"clone_into","","",227,[[]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"try_from","","",227,[[],["result",4]]],[11,"try_into","","",227,[[],["result",4]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"span","","",228,[[],["span",3]]],[11,"from","","",228,[[]]],[11,"into","","",228,[[]]],[11,"to_owned","","",228,[[]]],[11,"clone_into","","",228,[[]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"try_from","","",228,[[],["result",4]]],[11,"try_into","","",228,[[],["result",4]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"span","","",226,[[],["span",3]]],[11,"from","","",226,[[]]],[11,"into","","",226,[[]]],[11,"to_owned","","",226,[[]]],[11,"clone_into","","",226,[[]]],[11,"borrow","","",226,[[]]],[11,"borrow_mut","","",226,[[]]],[11,"try_from","","",226,[[],["result",4]]],[11,"try_into","","",226,[[],["result",4]]],[11,"type_id","","",226,[[],["typeid",3]]],[11,"span","","",200,[[],["span",3]]],[11,"from","","",200,[[]]],[11,"into","","",200,[[]]],[11,"to_owned","","",200,[[]]],[11,"clone_into","","",200,[[]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"try_from","","",200,[[],["result",4]]],[11,"try_into","","",200,[[],["result",4]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"span","","",201,[[],["span",3]]],[11,"from","","",201,[[]]],[11,"into","","",201,[[]]],[11,"to_owned","","",201,[[]]],[11,"clone_into","","",201,[[]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"try_from","","",201,[[],["result",4]]],[11,"try_into","","",201,[[],["result",4]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"span","","",203,[[],["span",3]]],[11,"from","","",203,[[]]],[11,"into","","",203,[[]]],[11,"to_owned","","",203,[[]]],[11,"clone_into","","",203,[[]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"try_from","","",203,[[],["result",4]]],[11,"try_into","","",203,[[],["result",4]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"span","","",204,[[],["span",3]]],[11,"from","","",204,[[]]],[11,"into","","",204,[[]]],[11,"to_owned","","",204,[[]]],[11,"clone_into","","",204,[[]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"try_from","","",204,[[],["result",4]]],[11,"try_into","","",204,[[],["result",4]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"span","","",202,[[],["span",3]]],[11,"from","","",202,[[]]],[11,"into","","",202,[[]]],[11,"to_owned","","",202,[[]]],[11,"clone_into","","",202,[[]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"try_from","","",202,[[],["result",4]]],[11,"try_into","","",202,[[],["result",4]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"span","","",223,[[],["span",3]]],[11,"from","","",223,[[]]],[11,"into","","",223,[[]]],[11,"to_owned","","",223,[[]]],[11,"clone_into","","",223,[[]]],[11,"borrow","","",223,[[]]],[11,"borrow_mut","","",223,[[]]],[11,"try_from","","",223,[[],["result",4]]],[11,"try_into","","",223,[[],["result",4]]],[11,"type_id","","",223,[[],["typeid",3]]],[11,"span","","",194,[[],["span",3]]],[11,"from","","",194,[[]]],[11,"into","","",194,[[]]],[11,"to_owned","","",194,[[]]],[11,"clone_into","","",194,[[]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"try_into","","",194,[[],["result",4]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"span","","",222,[[],["span",3]]],[11,"from","","",222,[[]]],[11,"into","","",222,[[]]],[11,"to_owned","","",222,[[]]],[11,"clone_into","","",222,[[]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"try_from","","",222,[[],["result",4]]],[11,"try_into","","",222,[[],["result",4]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"span","","",235,[[],["span",3]]],[11,"from","","",235,[[]]],[11,"into","","",235,[[]]],[11,"to_owned","","",235,[[]]],[11,"clone_into","","",235,[[]]],[11,"borrow","","",235,[[]]],[11,"borrow_mut","","",235,[[]]],[11,"try_from","","",235,[[],["result",4]]],[11,"try_into","","",235,[[],["result",4]]],[11,"type_id","","",235,[[],["typeid",3]]],[11,"span","","",236,[[],["span",3]]],[11,"from","","",236,[[]]],[11,"into","","",236,[[]]],[11,"to_owned","","",236,[[]]],[11,"clone_into","","",236,[[]]],[11,"to_string","","",236,[[],["string",3]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"try_from","","",236,[[],["result",4]]],[11,"try_into","","",236,[[],["result",4]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"span","","",237,[[],["span",3]]],[11,"from","","",237,[[]]],[11,"into","","",237,[[]]],[11,"to_owned","","",237,[[]]],[11,"clone_into","","",237,[[]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"try_from","","",237,[[],["result",4]]],[11,"try_into","","",237,[[],["result",4]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"span","","",301,[[],["span",3]]],[11,"from","","",301,[[]]],[11,"into","","",301,[[]]],[11,"to_owned","","",301,[[]]],[11,"clone_into","","",301,[[]]],[11,"borrow","","",301,[[]]],[11,"borrow_mut","","",301,[[]]],[11,"try_from","","",301,[[],["result",4]]],[11,"try_into","","",301,[[],["result",4]]],[11,"type_id","","",301,[[],["typeid",3]]],[11,"span","","",302,[[],["span",3]]],[11,"from","","",302,[[]]],[11,"into","","",302,[[]]],[11,"to_owned","","",302,[[]]],[11,"clone_into","","",302,[[]]],[11,"borrow","","",302,[[]]],[11,"borrow_mut","","",302,[[]]],[11,"try_from","","",302,[[],["result",4]]],[11,"try_into","","",302,[[],["result",4]]],[11,"type_id","","",302,[[],["typeid",3]]],[11,"span","","",303,[[],["span",3]]],[11,"from","","",303,[[]]],[11,"into","","",303,[[]]],[11,"to_owned","","",303,[[]]],[11,"clone_into","","",303,[[]]],[11,"borrow","","",303,[[]]],[11,"borrow_mut","","",303,[[]]],[11,"try_from","","",303,[[],["result",4]]],[11,"try_into","","",303,[[],["result",4]]],[11,"type_id","","",303,[[],["typeid",3]]],[11,"span","","",304,[[],["span",3]]],[11,"from","","",304,[[]]],[11,"into","","",304,[[]]],[11,"to_owned","","",304,[[]]],[11,"clone_into","","",304,[[]]],[11,"borrow","","",304,[[]]],[11,"borrow_mut","","",304,[[]]],[11,"try_from","","",304,[[],["result",4]]],[11,"try_into","","",304,[[],["result",4]]],[11,"type_id","","",304,[[],["typeid",3]]],[11,"span","","",305,[[],["span",3]]],[11,"from","","",305,[[]]],[11,"into","","",305,[[]]],[11,"to_owned","","",305,[[]]],[11,"clone_into","","",305,[[]]],[11,"to_string","","",305,[[],["string",3]]],[11,"borrow","","",305,[[]]],[11,"borrow_mut","","",305,[[]]],[11,"try_from","","",305,[[],["result",4]]],[11,"try_into","","",305,[[],["result",4]]],[11,"type_id","","",305,[[],["typeid",3]]],[11,"span","","",306,[[],["span",3]]],[11,"from","","",306,[[]]],[11,"into","","",306,[[]]],[11,"to_owned","","",306,[[]]],[11,"clone_into","","",306,[[]]],[11,"to_string","","",306,[[],["string",3]]],[11,"borrow","","",306,[[]]],[11,"borrow_mut","","",306,[[]]],[11,"try_from","","",306,[[],["result",4]]],[11,"try_into","","",306,[[],["result",4]]],[11,"type_id","","",306,[[],["typeid",3]]],[11,"span","","",238,[[],["span",3]]],[11,"from","","",238,[[]]],[11,"into","","",238,[[]]],[11,"to_owned","","",238,[[]]],[11,"clone_into","","",238,[[]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"try_from","","",238,[[],["result",4]]],[11,"try_into","","",238,[[],["result",4]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"from","","",239,[[]]],[11,"into","","",239,[[]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"try_from","","",239,[[],["result",4]]],[11,"try_into","","",239,[[],["result",4]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"span","","",240,[[],["span",3]]],[11,"from","","",240,[[]]],[11,"into","","",240,[[]]],[11,"to_owned","","",240,[[]]],[11,"clone_into","","",240,[[]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"try_from","","",240,[[],["result",4]]],[11,"try_into","","",240,[[],["result",4]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"from","","",241,[[]]],[11,"into","","",241,[[]]],[11,"to_owned","","",241,[[]]],[11,"clone_into","","",241,[[]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"try_from","","",241,[[],["result",4]]],[11,"try_into","","",241,[[],["result",4]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"span","","",246,[[],["span",3]]],[11,"from","","",246,[[]]],[11,"into","","",246,[[]]],[11,"to_owned","","",246,[[]]],[11,"clone_into","","",246,[[]]],[11,"borrow","","",246,[[]]],[11,"borrow_mut","","",246,[[]]],[11,"try_from","","",246,[[],["result",4]]],[11,"try_into","","",246,[[],["result",4]]],[11,"type_id","","",246,[[],["typeid",3]]],[11,"from","","",242,[[]]],[11,"into","","",242,[[]]],[11,"to_owned","","",242,[[]]],[11,"clone_into","","",242,[[]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"try_from","","",242,[[],["result",4]]],[11,"try_into","","",242,[[],["result",4]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"from","","",244,[[]]],[11,"into","","",244,[[]]],[11,"to_owned","","",244,[[]]],[11,"clone_into","","",244,[[]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"try_from","","",244,[[],["result",4]]],[11,"try_into","","",244,[[],["result",4]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"from","","",243,[[]]],[11,"into","","",243,[[]]],[11,"to_owned","","",243,[[]]],[11,"clone_into","","",243,[[]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"try_from","","",243,[[],["result",4]]],[11,"try_into","","",243,[[],["result",4]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"from","","",245,[[]]],[11,"into","","",245,[[]]],[11,"to_owned","","",245,[[]]],[11,"clone_into","","",245,[[]]],[11,"borrow","","",245,[[]]],[11,"borrow_mut","","",245,[[]]],[11,"try_from","","",245,[[],["result",4]]],[11,"try_into","","",245,[[],["result",4]]],[11,"type_id","","",245,[[],["typeid",3]]],[11,"span","","",247,[[],["span",3]]],[11,"from","","",247,[[]]],[11,"into","","",247,[[]]],[11,"to_owned","","",247,[[]]],[11,"clone_into","","",247,[[]]],[11,"borrow","","",247,[[]]],[11,"borrow_mut","","",247,[[]]],[11,"try_from","","",247,[[],["result",4]]],[11,"try_into","","",247,[[],["result",4]]],[11,"type_id","","",247,[[],["typeid",3]]],[11,"span","","",248,[[],["span",3]]],[11,"from","","",248,[[]]],[11,"into","","",248,[[]]],[11,"to_owned","","",248,[[]]],[11,"clone_into","","",248,[[]]],[11,"borrow","","",248,[[]]],[11,"borrow_mut","","",248,[[]]],[11,"try_from","","",248,[[],["result",4]]],[11,"try_into","","",248,[[],["result",4]]],[11,"type_id","","",248,[[],["typeid",3]]],[11,"span","","",249,[[],["span",3]]],[11,"from","","",249,[[]]],[11,"into","","",249,[[]]],[11,"to_owned","","",249,[[]]],[11,"clone_into","","",249,[[]]],[11,"borrow","","",249,[[]]],[11,"borrow_mut","","",249,[[]]],[11,"try_from","","",249,[[],["result",4]]],[11,"try_into","","",249,[[],["result",4]]],[11,"type_id","","",249,[[],["typeid",3]]],[11,"span","","",251,[[],["span",3]]],[11,"from","","",251,[[]]],[11,"into","","",251,[[]]],[11,"to_owned","","",251,[[]]],[11,"clone_into","","",251,[[]]],[11,"borrow","","",251,[[]]],[11,"borrow_mut","","",251,[[]]],[11,"try_from","","",251,[[],["result",4]]],[11,"try_into","","",251,[[],["result",4]]],[11,"type_id","","",251,[[],["typeid",3]]],[11,"span","","",250,[[],["span",3]]],[11,"from","","",250,[[]]],[11,"into","","",250,[[]]],[11,"to_owned","","",250,[[]]],[11,"clone_into","","",250,[[]]],[11,"borrow","","",250,[[]]],[11,"borrow_mut","","",250,[[]]],[11,"try_from","","",250,[[],["result",4]]],[11,"try_into","","",250,[[],["result",4]]],[11,"type_id","","",250,[[],["typeid",3]]],[11,"span","","",255,[[],["span",3]]],[11,"from","","",255,[[]]],[11,"into","","",255,[[]]],[11,"to_owned","","",255,[[]]],[11,"clone_into","","",255,[[]]],[11,"borrow","","",255,[[]]],[11,"borrow_mut","","",255,[[]]],[11,"try_from","","",255,[[],["result",4]]],[11,"try_into","","",255,[[],["result",4]]],[11,"type_id","","",255,[[],["typeid",3]]],[11,"span","","",256,[[],["span",3]]],[11,"from","","",256,[[]]],[11,"into","","",256,[[]]],[11,"to_owned","","",256,[[]]],[11,"clone_into","","",256,[[]]],[11,"borrow","","",256,[[]]],[11,"borrow_mut","","",256,[[]]],[11,"try_from","","",256,[[],["result",4]]],[11,"try_into","","",256,[[],["result",4]]],[11,"type_id","","",256,[[],["typeid",3]]],[11,"span","","",257,[[],["span",3]]],[11,"from","","",257,[[]]],[11,"into","","",257,[[]]],[11,"to_owned","","",257,[[]]],[11,"clone_into","","",257,[[]]],[11,"borrow","","",257,[[]]],[11,"borrow_mut","","",257,[[]]],[11,"try_from","","",257,[[],["result",4]]],[11,"try_into","","",257,[[],["result",4]]],[11,"type_id","","",257,[[],["typeid",3]]],[11,"span","","",258,[[],["span",3]]],[11,"from","","",258,[[]]],[11,"into","","",258,[[]]],[11,"to_owned","","",258,[[]]],[11,"clone_into","","",258,[[]]],[11,"borrow","","",258,[[]]],[11,"borrow_mut","","",258,[[]]],[11,"try_from","","",258,[[],["result",4]]],[11,"try_into","","",258,[[],["result",4]]],[11,"type_id","","",258,[[],["typeid",3]]],[11,"span","","",259,[[],["span",3]]],[11,"from","","",259,[[]]],[11,"into","","",259,[[]]],[11,"to_owned","","",259,[[]]],[11,"clone_into","","",259,[[]]],[11,"borrow","","",259,[[]]],[11,"borrow_mut","","",259,[[]]],[11,"try_from","","",259,[[],["result",4]]],[11,"try_into","","",259,[[],["result",4]]],[11,"type_id","","",259,[[],["typeid",3]]],[11,"span","","",260,[[],["span",3]]],[11,"from","","",260,[[]]],[11,"into","","",260,[[]]],[11,"to_owned","","",260,[[]]],[11,"clone_into","","",260,[[]]],[11,"borrow","","",260,[[]]],[11,"borrow_mut","","",260,[[]]],[11,"try_from","","",260,[[],["result",4]]],[11,"try_into","","",260,[[],["result",4]]],[11,"type_id","","",260,[[],["typeid",3]]],[11,"span","","",261,[[],["span",3]]],[11,"from","","",261,[[]]],[11,"into","","",261,[[]]],[11,"to_owned","","",261,[[]]],[11,"clone_into","","",261,[[]]],[11,"borrow","","",261,[[]]],[11,"borrow_mut","","",261,[[]]],[11,"try_from","","",261,[[],["result",4]]],[11,"try_into","","",261,[[],["result",4]]],[11,"type_id","","",261,[[],["typeid",3]]],[11,"span","","",262,[[],["span",3]]],[11,"from","","",262,[[]]],[11,"into","","",262,[[]]],[11,"to_owned","","",262,[[]]],[11,"clone_into","","",262,[[]]],[11,"borrow","","",262,[[]]],[11,"borrow_mut","","",262,[[]]],[11,"try_from","","",262,[[],["result",4]]],[11,"try_into","","",262,[[],["result",4]]],[11,"type_id","","",262,[[],["typeid",3]]],[11,"span","","",263,[[],["span",3]]],[11,"from","","",263,[[]]],[11,"into","","",263,[[]]],[11,"to_owned","","",263,[[]]],[11,"clone_into","","",263,[[]]],[11,"borrow","","",263,[[]]],[11,"borrow_mut","","",263,[[]]],[11,"try_from","","",263,[[],["result",4]]],[11,"try_into","","",263,[[],["result",4]]],[11,"type_id","","",263,[[],["typeid",3]]],[11,"span","","",264,[[],["span",3]]],[11,"from","","",264,[[]]],[11,"into","","",264,[[]]],[11,"to_owned","","",264,[[]]],[11,"clone_into","","",264,[[]]],[11,"borrow","","",264,[[]]],[11,"borrow_mut","","",264,[[]]],[11,"try_from","","",264,[[],["result",4]]],[11,"try_into","","",264,[[],["result",4]]],[11,"type_id","","",264,[[],["typeid",3]]],[11,"span","","",265,[[],["span",3]]],[11,"from","","",265,[[]]],[11,"into","","",265,[[]]],[11,"to_owned","","",265,[[]]],[11,"clone_into","","",265,[[]]],[11,"borrow","","",265,[[]]],[11,"borrow_mut","","",265,[[]]],[11,"try_from","","",265,[[],["result",4]]],[11,"try_into","","",265,[[],["result",4]]],[11,"type_id","","",265,[[],["typeid",3]]],[11,"span","","",266,[[],["span",3]]],[11,"from","","",266,[[]]],[11,"into","","",266,[[]]],[11,"to_owned","","",266,[[]]],[11,"clone_into","","",266,[[]]],[11,"borrow","","",266,[[]]],[11,"borrow_mut","","",266,[[]]],[11,"try_from","","",266,[[],["result",4]]],[11,"try_into","","",266,[[],["result",4]]],[11,"type_id","","",266,[[],["typeid",3]]],[11,"span","","",267,[[],["span",3]]],[11,"from","","",267,[[]]],[11,"into","","",267,[[]]],[11,"to_owned","","",267,[[]]],[11,"clone_into","","",267,[[]]],[11,"borrow","","",267,[[]]],[11,"borrow_mut","","",267,[[]]],[11,"try_from","","",267,[[],["result",4]]],[11,"try_into","","",267,[[],["result",4]]],[11,"type_id","","",267,[[],["typeid",3]]],[11,"span","","",268,[[],["span",3]]],[11,"from","","",268,[[]]],[11,"into","","",268,[[]]],[11,"to_owned","","",268,[[]]],[11,"clone_into","","",268,[[]]],[11,"borrow","","",268,[[]]],[11,"borrow_mut","","",268,[[]]],[11,"try_from","","",268,[[],["result",4]]],[11,"try_into","","",268,[[],["result",4]]],[11,"type_id","","",268,[[],["typeid",3]]],[11,"span","","",269,[[],["span",3]]],[11,"from","","",269,[[]]],[11,"into","","",269,[[]]],[11,"to_owned","","",269,[[]]],[11,"clone_into","","",269,[[]]],[11,"borrow","","",269,[[]]],[11,"borrow_mut","","",269,[[]]],[11,"try_from","","",269,[[],["result",4]]],[11,"try_into","","",269,[[],["result",4]]],[11,"type_id","","",269,[[],["typeid",3]]],[11,"span","","",252,[[],["span",3]]],[11,"from","","",252,[[]]],[11,"into","","",252,[[]]],[11,"to_owned","","",252,[[]]],[11,"clone_into","","",252,[[]]],[11,"borrow","","",252,[[]]],[11,"borrow_mut","","",252,[[]]],[11,"try_from","","",252,[[],["result",4]]],[11,"try_into","","",252,[[],["result",4]]],[11,"type_id","","",252,[[],["typeid",3]]],[11,"span","","",253,[[],["span",3]]],[11,"from","","",253,[[]]],[11,"into","","",253,[[]]],[11,"to_owned","","",253,[[]]],[11,"clone_into","","",253,[[]]],[11,"borrow","","",253,[[]]],[11,"borrow_mut","","",253,[[]]],[11,"try_from","","",253,[[],["result",4]]],[11,"try_into","","",253,[[],["result",4]]],[11,"type_id","","",253,[[],["typeid",3]]],[11,"span","","",270,[[],["span",3]]],[11,"from","","",270,[[]]],[11,"into","","",270,[[]]],[11,"to_owned","","",270,[[]]],[11,"clone_into","","",270,[[]]],[11,"borrow","","",270,[[]]],[11,"borrow_mut","","",270,[[]]],[11,"try_from","","",270,[[],["result",4]]],[11,"try_into","","",270,[[],["result",4]]],[11,"type_id","","",270,[[],["typeid",3]]],[11,"span","","",254,[[],["span",3]]],[11,"from","","",254,[[]]],[11,"into","","",254,[[]]],[11,"to_owned","","",254,[[]]],[11,"clone_into","","",254,[[]]],[11,"borrow","","",254,[[]]],[11,"borrow_mut","","",254,[[]]],[11,"try_from","","",254,[[],["result",4]]],[11,"try_into","","",254,[[],["result",4]]],[11,"type_id","","",254,[[],["typeid",3]]],[11,"span","","",272,[[],["span",3]]],[11,"from","","",272,[[]]],[11,"into","","",272,[[]]],[11,"to_owned","","",272,[[]]],[11,"clone_into","","",272,[[]]],[11,"borrow","","",272,[[]]],[11,"borrow_mut","","",272,[[]]],[11,"try_from","","",272,[[],["result",4]]],[11,"try_into","","",272,[[],["result",4]]],[11,"type_id","","",272,[[],["typeid",3]]],[11,"span","","",273,[[],["span",3]]],[11,"from","","",273,[[]]],[11,"into","","",273,[[]]],[11,"to_owned","","",273,[[]]],[11,"clone_into","","",273,[[]]],[11,"borrow","","",273,[[]]],[11,"borrow_mut","","",273,[[]]],[11,"try_from","","",273,[[],["result",4]]],[11,"try_into","","",273,[[],["result",4]]],[11,"type_id","","",273,[[],["typeid",3]]],[11,"span","","",274,[[],["span",3]]],[11,"from","","",274,[[]]],[11,"into","","",274,[[]]],[11,"to_owned","","",274,[[]]],[11,"clone_into","","",274,[[]]],[11,"borrow","","",274,[[]]],[11,"borrow_mut","","",274,[[]]],[11,"try_from","","",274,[[],["result",4]]],[11,"try_into","","",274,[[],["result",4]]],[11,"type_id","","",274,[[],["typeid",3]]],[11,"span","","",275,[[],["span",3]]],[11,"from","","",275,[[]]],[11,"into","","",275,[[]]],[11,"to_owned","","",275,[[]]],[11,"clone_into","","",275,[[]]],[11,"borrow","","",275,[[]]],[11,"borrow_mut","","",275,[[]]],[11,"try_from","","",275,[[],["result",4]]],[11,"try_into","","",275,[[],["result",4]]],[11,"type_id","","",275,[[],["typeid",3]]],[11,"span","","",276,[[],["span",3]]],[11,"from","","",276,[[]]],[11,"into","","",276,[[]]],[11,"to_owned","","",276,[[]]],[11,"clone_into","","",276,[[]]],[11,"borrow","","",276,[[]]],[11,"borrow_mut","","",276,[[]]],[11,"try_from","","",276,[[],["result",4]]],[11,"try_into","","",276,[[],["result",4]]],[11,"type_id","","",276,[[],["typeid",3]]],[11,"span","","",277,[[],["span",3]]],[11,"from","","",277,[[]]],[11,"into","","",277,[[]]],[11,"to_owned","","",277,[[]]],[11,"clone_into","","",277,[[]]],[11,"borrow","","",277,[[]]],[11,"borrow_mut","","",277,[[]]],[11,"try_from","","",277,[[],["result",4]]],[11,"try_into","","",277,[[],["result",4]]],[11,"type_id","","",277,[[],["typeid",3]]],[11,"span","","",278,[[],["span",3]]],[11,"from","","",278,[[]]],[11,"into","","",278,[[]]],[11,"to_owned","","",278,[[]]],[11,"clone_into","","",278,[[]]],[11,"borrow","","",278,[[]]],[11,"borrow_mut","","",278,[[]]],[11,"try_from","","",278,[[],["result",4]]],[11,"try_into","","",278,[[],["result",4]]],[11,"type_id","","",278,[[],["typeid",3]]],[11,"span","","",279,[[],["span",3]]],[11,"from","","",279,[[]]],[11,"into","","",279,[[]]],[11,"to_owned","","",279,[[]]],[11,"clone_into","","",279,[[]]],[11,"borrow","","",279,[[]]],[11,"borrow_mut","","",279,[[]]],[11,"try_from","","",279,[[],["result",4]]],[11,"try_into","","",279,[[],["result",4]]],[11,"type_id","","",279,[[],["typeid",3]]],[11,"span","","",280,[[],["span",3]]],[11,"from","","",280,[[]]],[11,"into","","",280,[[]]],[11,"to_owned","","",280,[[]]],[11,"clone_into","","",280,[[]]],[11,"borrow","","",280,[[]]],[11,"borrow_mut","","",280,[[]]],[11,"try_from","","",280,[[],["result",4]]],[11,"try_into","","",280,[[],["result",4]]],[11,"type_id","","",280,[[],["typeid",3]]],[11,"span","","",281,[[],["span",3]]],[11,"from","","",281,[[]]],[11,"into","","",281,[[]]],[11,"to_owned","","",281,[[]]],[11,"clone_into","","",281,[[]]],[11,"borrow","","",281,[[]]],[11,"borrow_mut","","",281,[[]]],[11,"try_from","","",281,[[],["result",4]]],[11,"try_into","","",281,[[],["result",4]]],[11,"type_id","","",281,[[],["typeid",3]]],[11,"span","","",282,[[],["span",3]]],[11,"from","","",282,[[]]],[11,"into","","",282,[[]]],[11,"to_owned","","",282,[[]]],[11,"clone_into","","",282,[[]]],[11,"borrow","","",282,[[]]],[11,"borrow_mut","","",282,[[]]],[11,"try_from","","",282,[[],["result",4]]],[11,"try_into","","",282,[[],["result",4]]],[11,"type_id","","",282,[[],["typeid",3]]],[11,"span","","",283,[[],["span",3]]],[11,"from","","",283,[[]]],[11,"into","","",283,[[]]],[11,"to_owned","","",283,[[]]],[11,"clone_into","","",283,[[]]],[11,"borrow","","",283,[[]]],[11,"borrow_mut","","",283,[[]]],[11,"try_from","","",283,[[],["result",4]]],[11,"try_into","","",283,[[],["result",4]]],[11,"type_id","","",283,[[],["typeid",3]]],[11,"span","","",284,[[],["span",3]]],[11,"from","","",284,[[]]],[11,"into","","",284,[[]]],[11,"to_owned","","",284,[[]]],[11,"clone_into","","",284,[[]]],[11,"borrow","","",284,[[]]],[11,"borrow_mut","","",284,[[]]],[11,"try_from","","",284,[[],["result",4]]],[11,"try_into","","",284,[[],["result",4]]],[11,"type_id","","",284,[[],["typeid",3]]],[11,"span","","",285,[[],["span",3]]],[11,"from","","",285,[[]]],[11,"into","","",285,[[]]],[11,"to_owned","","",285,[[]]],[11,"clone_into","","",285,[[]]],[11,"borrow","","",285,[[]]],[11,"borrow_mut","","",285,[[]]],[11,"try_from","","",285,[[],["result",4]]],[11,"try_into","","",285,[[],["result",4]]],[11,"type_id","","",285,[[],["typeid",3]]],[11,"span","","",286,[[],["span",3]]],[11,"from","","",286,[[]]],[11,"into","","",286,[[]]],[11,"to_owned","","",286,[[]]],[11,"clone_into","","",286,[[]]],[11,"borrow","","",286,[[]]],[11,"borrow_mut","","",286,[[]]],[11,"try_from","","",286,[[],["result",4]]],[11,"try_into","","",286,[[],["result",4]]],[11,"type_id","","",286,[[],["typeid",3]]],[11,"span","","",287,[[],["span",3]]],[11,"from","","",287,[[]]],[11,"into","","",287,[[]]],[11,"to_owned","","",287,[[]]],[11,"clone_into","","",287,[[]]],[11,"borrow","","",287,[[]]],[11,"borrow_mut","","",287,[[]]],[11,"try_from","","",287,[[],["result",4]]],[11,"try_into","","",287,[[],["result",4]]],[11,"type_id","","",287,[[],["typeid",3]]],[11,"span","","",271,[[],["span",3]]],[11,"from","","",271,[[]]],[11,"into","","",271,[[]]],[11,"to_owned","","",271,[[]]],[11,"clone_into","","",271,[[]]],[11,"borrow","","",271,[[]]],[11,"borrow_mut","","",271,[[]]],[11,"try_from","","",271,[[],["result",4]]],[11,"try_into","","",271,[[],["result",4]]],[11,"type_id","","",271,[[],["typeid",3]]],[11,"span","","",293,[[],["span",3]]],[11,"from","","",293,[[]]],[11,"into","","",293,[[]]],[11,"to_owned","","",293,[[]]],[11,"clone_into","","",293,[[]]],[11,"borrow","","",293,[[]]],[11,"borrow_mut","","",293,[[]]],[11,"try_from","","",293,[[],["result",4]]],[11,"try_into","","",293,[[],["result",4]]],[11,"type_id","","",293,[[],["typeid",3]]],[11,"span","","",295,[[],["span",3]]],[11,"from","","",295,[[]]],[11,"into","","",295,[[]]],[11,"to_owned","","",295,[[]]],[11,"clone_into","","",295,[[]]],[11,"borrow","","",295,[[]]],[11,"borrow_mut","","",295,[[]]],[11,"try_from","","",295,[[],["result",4]]],[11,"try_into","","",295,[[],["result",4]]],[11,"type_id","","",295,[[],["typeid",3]]],[11,"span","","",294,[[],["span",3]]],[11,"from","","",294,[[]]],[11,"into","","",294,[[]]],[11,"to_owned","","",294,[[]]],[11,"clone_into","","",294,[[]]],[11,"borrow","","",294,[[]]],[11,"borrow_mut","","",294,[[]]],[11,"try_from","","",294,[[],["result",4]]],[11,"try_into","","",294,[[],["result",4]]],[11,"type_id","","",294,[[],["typeid",3]]],[11,"span","","",291,[[],["span",3]]],[11,"from","","",291,[[]]],[11,"into","","",291,[[]]],[11,"to_owned","","",291,[[]]],[11,"clone_into","","",291,[[]]],[11,"borrow","","",291,[[]]],[11,"borrow_mut","","",291,[[]]],[11,"try_from","","",291,[[],["result",4]]],[11,"try_into","","",291,[[],["result",4]]],[11,"type_id","","",291,[[],["typeid",3]]],[11,"span","","",288,[[],["span",3]]],[11,"from","","",288,[[]]],[11,"into","","",288,[[]]],[11,"to_owned","","",288,[[]]],[11,"clone_into","","",288,[[]]],[11,"borrow","","",288,[[]]],[11,"borrow_mut","","",288,[[]]],[11,"try_from","","",288,[[],["result",4]]],[11,"try_into","","",288,[[],["result",4]]],[11,"type_id","","",288,[[],["typeid",3]]],[11,"span","","",289,[[],["span",3]]],[11,"from","","",289,[[]]],[11,"into","","",289,[[]]],[11,"to_owned","","",289,[[]]],[11,"clone_into","","",289,[[]]],[11,"borrow","","",289,[[]]],[11,"borrow_mut","","",289,[[]]],[11,"try_from","","",289,[[],["result",4]]],[11,"try_into","","",289,[[],["result",4]]],[11,"type_id","","",289,[[],["typeid",3]]],[11,"span","","",290,[[],["span",3]]],[11,"from","","",290,[[]]],[11,"into","","",290,[[]]],[11,"to_owned","","",290,[[]]],[11,"clone_into","","",290,[[]]],[11,"borrow","","",290,[[]]],[11,"borrow_mut","","",290,[[]]],[11,"try_from","","",290,[[],["result",4]]],[11,"try_into","","",290,[[],["result",4]]],[11,"type_id","","",290,[[],["typeid",3]]],[11,"span","","",292,[[],["span",3]]],[11,"from","","",292,[[]]],[11,"into","","",292,[[]]],[11,"to_owned","","",292,[[]]],[11,"clone_into","","",292,[[]]],[11,"borrow","","",292,[[]]],[11,"borrow_mut","","",292,[[]]],[11,"try_from","","",292,[[],["result",4]]],[11,"try_into","","",292,[[],["result",4]]],[11,"type_id","","",292,[[],["typeid",3]]],[11,"from","","",296,[[]]],[11,"into","","",296,[[]]],[11,"to_owned","","",296,[[]]],[11,"clone_into","","",296,[[]]],[11,"borrow","","",296,[[]]],[11,"borrow_mut","","",296,[[]]],[11,"try_from","","",296,[[],["result",4]]],[11,"try_into","","",296,[[],["result",4]]],[11,"type_id","","",296,[[],["typeid",3]]],[11,"from","syn::buffer","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"span","syn::punctuated","",106,[[],["span",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",307,[[]]],[11,"into","","",307,[[]]],[11,"into_iter","","",307,[[]]],[11,"to_owned","","",307,[[]]],[11,"clone_into","","",307,[[]]],[11,"borrow","","",307,[[]]],[11,"borrow_mut","","",307,[[]]],[11,"try_from","","",307,[[],["result",4]]],[11,"try_into","","",307,[[],["result",4]]],[11,"type_id","","",307,[[],["typeid",3]]],[11,"from","","",308,[[]]],[11,"into","","",308,[[]]],[11,"into_iter","","",308,[[]]],[11,"borrow","","",308,[[]]],[11,"borrow_mut","","",308,[[]]],[11,"try_from","","",308,[[],["result",4]]],[11,"try_into","","",308,[[],["result",4]]],[11,"type_id","","",308,[[],["typeid",3]]],[11,"from","","",309,[[]]],[11,"into","","",309,[[]]],[11,"into_iter","","",309,[[]]],[11,"to_owned","","",309,[[]]],[11,"clone_into","","",309,[[]]],[11,"borrow","","",309,[[]]],[11,"borrow_mut","","",309,[[]]],[11,"try_from","","",309,[[],["result",4]]],[11,"try_into","","",309,[[],["result",4]]],[11,"type_id","","",309,[[],["typeid",3]]],[11,"from","","",310,[[]]],[11,"into","","",310,[[]]],[11,"into_iter","","",310,[[]]],[11,"to_owned","","",310,[[]]],[11,"clone_into","","",310,[[]]],[11,"borrow","","",310,[[]]],[11,"borrow_mut","","",310,[[]]],[11,"try_from","","",310,[[],["result",4]]],[11,"try_into","","",310,[[],["result",4]]],[11,"type_id","","",310,[[],["typeid",3]]],[11,"from","","",311,[[]]],[11,"into","","",311,[[]]],[11,"into_iter","","",311,[[]]],[11,"to_owned","","",311,[[]]],[11,"clone_into","","",311,[[]]],[11,"borrow","","",311,[[]]],[11,"borrow_mut","","",311,[[]]],[11,"try_from","","",311,[[],["result",4]]],[11,"try_into","","",311,[[],["result",4]]],[11,"type_id","","",311,[[],["typeid",3]]],[11,"from","","",312,[[]]],[11,"into","","",312,[[]]],[11,"into_iter","","",312,[[]]],[11,"borrow","","",312,[[]]],[11,"borrow_mut","","",312,[[]]],[11,"try_from","","",312,[[],["result",4]]],[11,"try_into","","",312,[[],["result",4]]],[11,"type_id","","",312,[[],["typeid",3]]],[11,"span","","",107,[[],["span",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","syn::parse","",313,[[]]],[11,"into","","",313,[[]]],[11,"borrow","","",313,[[]]],[11,"borrow_mut","","",313,[[]]],[11,"try_from","","",313,[[],["result",4]]],[11,"try_into","","",313,[[],["result",4]]],[11,"type_id","","",313,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"to_string","","",116,[[],["string",3]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_string","","",114,[[],["string",3]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",314,[[]]],[11,"into","","",314,[[]]],[11,"borrow","","",314,[[]]],[11,"borrow_mut","","",314,[[]]],[11,"try_from","","",314,[[],["result",4]]],[11,"try_into","","",314,[[],["result",4]]],[11,"type_id","","",314,[[],["typeid",3]]],[11,"fmt","syn","",297,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",297,[[["ident",3]],[["ordering",4],["option",4]]]],[11,"hash","","",297,[[]]],[11,"clone","","",297,[[],["ident",3]]],[11,"cmp","","",297,[[["ident",3]],["ordering",4]]],[11,"eq","","",297,[[]]],[11,"eq","","",297,[[["ident",3]]]],[11,"fmt","","",297,[[["formatter",3]],[["result",4],["error",3]]]],[11,"span","","",297,[[],[["option",4],["span",3]]]],[11,"fmt","","",297,[[["formatter",3]],[["result",4],["error",3]]]],[11,"to_tokens","","",297,[[["tokenstream",3]]]],[11,"peek","","",236,[[["cursor",3]]]],[11,"display","","",236,[[]]],[11,"peek","","",237,[[["cursor",3]]]],[11,"display","","",237,[[]]],[11,"peek","","",301,[[["cursor",3]]]],[11,"display","","",301,[[]]],[11,"peek","","",302,[[["cursor",3]]]],[11,"display","","",302,[[]]],[11,"peek","","",303,[[["cursor",3]]]],[11,"display","","",303,[[]]],[11,"peek","","",304,[[["cursor",3]]]],[11,"display","","",304,[[]]],[11,"peek","","",305,[[["cursor",3]]]],[11,"display","","",305,[[]]],[11,"peek","","",306,[[["cursor",3]]]],[11,"display","","",306,[[]]],[11,"peek","","",238,[[["cursor",3]]]],[11,"display","","",238,[[]]],[11,"peek","syn::token","",0,[[["cursor",3]]]],[11,"display","","",0,[[]]],[11,"peek","","",101,[[["cursor",3]]]],[11,"display","","",101,[[]]],[11,"peek","","",99,[[["cursor",3]]]],[11,"display","","",99,[[]]],[11,"peek","","",100,[[["cursor",3]]]],[11,"display","","",100,[[]]],[11,"peek","","",102,[[["cursor",3]]]],[11,"display","","",102,[[]]],[11,"peek","","",1,[[["cursor",3]]]],[11,"display","","",1,[[]]],[11,"peek","","",2,[[["cursor",3]]]],[11,"display","","",2,[[]]],[11,"peek","","",3,[[["cursor",3]]]],[11,"display","","",3,[[]]],[11,"peek","","",4,[[["cursor",3]]]],[11,"display","","",4,[[]]],[11,"peek","","",5,[[["cursor",3]]]],[11,"display","","",5,[[]]],[11,"peek","","",6,[[["cursor",3]]]],[11,"display","","",6,[[]]],[11,"peek","","",7,[[["cursor",3]]]],[11,"display","","",7,[[]]],[11,"peek","","",8,[[["cursor",3]]]],[11,"display","","",8,[[]]],[11,"peek","","",9,[[["cursor",3]]]],[11,"display","","",9,[[]]],[11,"peek","","",10,[[["cursor",3]]]],[11,"display","","",10,[[]]],[11,"peek","","",11,[[["cursor",3]]]],[11,"display","","",11,[[]]],[11,"peek","","",12,[[["cursor",3]]]],[11,"display","","",12,[[]]],[11,"peek","","",13,[[["cursor",3]]]],[11,"display","","",13,[[]]],[11,"peek","","",14,[[["cursor",3]]]],[11,"display","","",14,[[]]],[11,"peek","","",15,[[["cursor",3]]]],[11,"display","","",15,[[]]],[11,"peek","","",16,[[["cursor",3]]]],[11,"display","","",16,[[]]],[11,"peek","","",17,[[["cursor",3]]]],[11,"display","","",17,[[]]],[11,"peek","","",18,[[["cursor",3]]]],[11,"display","","",18,[[]]],[11,"peek","","",19,[[["cursor",3]]]],[11,"display","","",19,[[]]],[11,"peek","","",20,[[["cursor",3]]]],[11,"display","","",20,[[]]],[11,"peek","","",21,[[["cursor",3]]]],[11,"display","","",21,[[]]],[11,"peek","","",22,[[["cursor",3]]]],[11,"display","","",22,[[]]],[11,"peek","","",23,[[["cursor",3]]]],[11,"display","","",23,[[]]],[11,"peek","","",24,[[["cursor",3]]]],[11,"display","","",24,[[]]],[11,"peek","","",25,[[["cursor",3]]]],[11,"display","","",25,[[]]],[11,"peek","","",26,[[["cursor",3]]]],[11,"display","","",26,[[]]],[11,"peek","","",27,[[["cursor",3]]]],[11,"display","","",27,[[]]],[11,"peek","","",28,[[["cursor",3]]]],[11,"display","","",28,[[]]],[11,"peek","","",29,[[["cursor",3]]]],[11,"display","","",29,[[]]],[11,"peek","","",30,[[["cursor",3]]]],[11,"display","","",30,[[]]],[11,"peek","","",31,[[["cursor",3]]]],[11,"display","","",31,[[]]],[11,"peek","","",32,[[["cursor",3]]]],[11,"display","","",32,[[]]],[11,"peek","","",33,[[["cursor",3]]]],[11,"display","","",33,[[]]],[11,"peek","","",34,[[["cursor",3]]]],[11,"display","","",34,[[]]],[11,"peek","","",35,[[["cursor",3]]]],[11,"display","","",35,[[]]],[11,"peek","","",36,[[["cursor",3]]]],[11,"display","","",36,[[]]],[11,"peek","","",37,[[["cursor",3]]]],[11,"display","","",37,[[]]],[11,"peek","","",38,[[["cursor",3]]]],[11,"display","","",38,[[]]],[11,"peek","","",39,[[["cursor",3]]]],[11,"display","","",39,[[]]],[11,"peek","","",40,[[["cursor",3]]]],[11,"display","","",40,[[]]],[11,"peek","","",41,[[["cursor",3]]]],[11,"display","","",41,[[]]],[11,"peek","","",42,[[["cursor",3]]]],[11,"display","","",42,[[]]],[11,"peek","","",43,[[["cursor",3]]]],[11,"display","","",43,[[]]],[11,"peek","","",44,[[["cursor",3]]]],[11,"display","","",44,[[]]],[11,"peek","","",45,[[["cursor",3]]]],[11,"display","","",45,[[]]],[11,"peek","","",46,[[["cursor",3]]]],[11,"display","","",46,[[]]],[11,"peek","","",47,[[["cursor",3]]]],[11,"display","","",47,[[]]],[11,"peek","","",48,[[["cursor",3]]]],[11,"display","","",48,[[]]],[11,"peek","","",49,[[["cursor",3]]]],[11,"display","","",49,[[]]],[11,"peek","","",50,[[["cursor",3]]]],[11,"display","","",50,[[]]],[11,"peek","","",51,[[["cursor",3]]]],[11,"display","","",51,[[]]],[11,"peek","","",52,[[["cursor",3]]]],[11,"display","","",52,[[]]],[11,"peek","","",53,[[["cursor",3]]]],[11,"display","","",53,[[]]],[11,"peek","","",54,[[["cursor",3]]]],[11,"display","","",54,[[]]],[11,"peek","","",55,[[["cursor",3]]]],[11,"display","","",55,[[]]],[11,"peek","","",56,[[["cursor",3]]]],[11,"display","","",56,[[]]],[11,"peek","","",57,[[["cursor",3]]]],[11,"display","","",57,[[]]],[11,"peek","","",58,[[["cursor",3]]]],[11,"display","","",58,[[]]],[11,"peek","","",59,[[["cursor",3]]]],[11,"display","","",59,[[]]],[11,"peek","","",60,[[["cursor",3]]]],[11,"display","","",60,[[]]],[11,"peek","","",61,[[["cursor",3]]]],[11,"display","","",61,[[]]],[11,"peek","","",62,[[["cursor",3]]]],[11,"display","","",62,[[]]],[11,"peek","","",63,[[["cursor",3]]]],[11,"display","","",63,[[]]],[11,"peek","","",64,[[["cursor",3]]]],[11,"display","","",64,[[]]],[11,"peek","","",65,[[["cursor",3]]]],[11,"display","","",65,[[]]],[11,"peek","","",66,[[["cursor",3]]]],[11,"display","","",66,[[]]],[11,"peek","","",67,[[["cursor",3]]]],[11,"display","","",67,[[]]],[11,"peek","","",68,[[["cursor",3]]]],[11,"display","","",68,[[]]],[11,"peek","","",69,[[["cursor",3]]]],[11,"display","","",69,[[]]],[11,"peek","","",70,[[["cursor",3]]]],[11,"display","","",70,[[]]],[11,"peek","","",71,[[["cursor",3]]]],[11,"display","","",71,[[]]],[11,"peek","","",72,[[["cursor",3]]]],[11,"display","","",72,[[]]],[11,"peek","","",73,[[["cursor",3]]]],[11,"display","","",73,[[]]],[11,"peek","","",74,[[["cursor",3]]]],[11,"display","","",74,[[]]],[11,"peek","","",75,[[["cursor",3]]]],[11,"display","","",75,[[]]],[11,"peek","","",76,[[["cursor",3]]]],[11,"display","","",76,[[]]],[11,"peek","","",77,[[["cursor",3]]]],[11,"display","","",77,[[]]],[11,"peek","","",78,[[["cursor",3]]]],[11,"display","","",78,[[]]],[11,"peek","","",79,[[["cursor",3]]]],[11,"display","","",79,[[]]],[11,"peek","","",80,[[["cursor",3]]]],[11,"display","","",80,[[]]],[11,"peek","","",81,[[["cursor",3]]]],[11,"display","","",81,[[]]],[11,"peek","","",82,[[["cursor",3]]]],[11,"display","","",82,[[]]],[11,"peek","","",83,[[["cursor",3]]]],[11,"display","","",83,[[]]],[11,"peek","","",84,[[["cursor",3]]]],[11,"display","","",84,[[]]],[11,"peek","","",85,[[["cursor",3]]]],[11,"display","","",85,[[]]],[11,"peek","","",86,[[["cursor",3]]]],[11,"display","","",86,[[]]],[11,"peek","","",87,[[["cursor",3]]]],[11,"display","","",87,[[]]],[11,"peek","","",88,[[["cursor",3]]]],[11,"display","","",88,[[]]],[11,"peek","","",89,[[["cursor",3]]]],[11,"display","","",89,[[]]],[11,"peek","","",90,[[["cursor",3]]]],[11,"display","","",90,[[]]],[11,"peek","","",91,[[["cursor",3]]]],[11,"display","","",91,[[]]],[11,"peek","","",92,[[["cursor",3]]]],[11,"display","","",92,[[]]],[11,"peek","","",93,[[["cursor",3]]]],[11,"display","","",93,[[]]],[11,"peek","","",94,[[["cursor",3]]]],[11,"display","","",94,[[]]],[11,"peek","","",95,[[["cursor",3]]]],[11,"display","","",95,[[]]],[11,"peek","","",96,[[["cursor",3]]]],[11,"display","","",96,[[]]],[11,"peek","","",97,[[["cursor",3]]]],[11,"display","","",97,[[]]],[11,"peek","","",98,[[["cursor",3]]]],[11,"display","","",98,[[]]],[11,"peek","syn","",297,[[["cursor",3]]]],[11,"display","","",297,[[]]],[11,"parse_any","","",297,[[["parsestream",6]],["result",6]]],[11,"unraw","","",297,[[],["ident",3]]],[11,"advance_to","syn::parse","",114,[[]]],[11,"parse","syn::token","",0,[[["parsestream",6]],["result",6]]],[11,"parse","","",1,[[["parsestream",6]],["result",6]]],[11,"parse","","",2,[[["parsestream",6]],["result",6]]],[11,"parse","","",3,[[["parsestream",6]],["result",6]]],[11,"parse","","",4,[[["parsestream",6]],["result",6]]],[11,"parse","","",5,[[["parsestream",6]],["result",6]]],[11,"parse","","",6,[[["parsestream",6]],["result",6]]],[11,"parse","","",7,[[["parsestream",6]],["result",6]]],[11,"parse","","",8,[[["parsestream",6]],["result",6]]],[11,"parse","","",9,[[["parsestream",6]],["result",6]]],[11,"parse","","",10,[[["parsestream",6]],["result",6]]],[11,"parse","","",11,[[["parsestream",6]],["result",6]]],[11,"parse","","",12,[[["parsestream",6]],["result",6]]],[11,"parse","","",13,[[["parsestream",6]],["result",6]]],[11,"parse","","",14,[[["parsestream",6]],["result",6]]],[11,"parse","","",15,[[["parsestream",6]],["result",6]]],[11,"parse","","",16,[[["parsestream",6]],["result",6]]],[11,"parse","","",17,[[["parsestream",6]],["result",6]]],[11,"parse","","",18,[[["parsestream",6]],["result",6]]],[11,"parse","","",19,[[["parsestream",6]],["result",6]]],[11,"parse","","",20,[[["parsestream",6]],["result",6]]],[11,"parse","","",21,[[["parsestream",6]],["result",6]]],[11,"parse","","",22,[[["parsestream",6]],["result",6]]],[11,"parse","","",23,[[["parsestream",6]],["result",6]]],[11,"parse","","",24,[[["parsestream",6]],["result",6]]],[11,"parse","","",25,[[["parsestream",6]],["result",6]]],[11,"parse","","",26,[[["parsestream",6]],["result",6]]],[11,"parse","","",27,[[["parsestream",6]],["result",6]]],[11,"parse","","",28,[[["parsestream",6]],["result",6]]],[11,"parse","","",29,[[["parsestream",6]],["result",6]]],[11,"parse","","",30,[[["parsestream",6]],["result",6]]],[11,"parse","","",31,[[["parsestream",6]],["result",6]]],[11,"parse","","",32,[[["parsestream",6]],["result",6]]],[11,"parse","","",33,[[["parsestream",6]],["result",6]]],[11,"parse","","",34,[[["parsestream",6]],["result",6]]],[11,"parse","","",35,[[["parsestream",6]],["result",6]]],[11,"parse","","",36,[[["parsestream",6]],["result",6]]],[11,"parse","","",37,[[["parsestream",6]],["result",6]]],[11,"parse","","",38,[[["parsestream",6]],["result",6]]],[11,"parse","","",39,[[["parsestream",6]],["result",6]]],[11,"parse","","",40,[[["parsestream",6]],["result",6]]],[11,"parse","","",41,[[["parsestream",6]],["result",6]]],[11,"parse","","",42,[[["parsestream",6]],["result",6]]],[11,"parse","","",43,[[["parsestream",6]],["result",6]]],[11,"parse","","",44,[[["parsestream",6]],["result",6]]],[11,"parse","","",45,[[["parsestream",6]],["result",6]]],[11,"parse","","",46,[[["parsestream",6]],["result",6]]],[11,"parse","","",47,[[["parsestream",6]],["result",6]]],[11,"parse","","",48,[[["parsestream",6]],["result",6]]],[11,"parse","","",49,[[["parsestream",6]],["result",6]]],[11,"parse","","",50,[[["parsestream",6]],["result",6]]],[11,"parse","","",51,[[["parsestream",6]],["result",6]]],[11,"parse","","",52,[[["parsestream",6]],["result",6]]],[11,"parse","","",53,[[["parsestream",6]],["result",6]]],[11,"parse","","",54,[[["parsestream",6]],["result",6]]],[11,"parse","","",55,[[["parsestream",6]],["result",6]]],[11,"parse","","",56,[[["parsestream",6]],["result",6]]],[11,"parse","","",57,[[["parsestream",6]],["result",6]]],[11,"parse","","",58,[[["parsestream",6]],["result",6]]],[11,"parse","","",59,[[["parsestream",6]],["result",6]]],[11,"parse","","",60,[[["parsestream",6]],["result",6]]],[11,"parse","","",61,[[["parsestream",6]],["result",6]]],[11,"parse","","",62,[[["parsestream",6]],["result",6]]],[11,"parse","","",63,[[["parsestream",6]],["result",6]]],[11,"parse","","",64,[[["parsestream",6]],["result",6]]],[11,"parse","","",65,[[["parsestream",6]],["result",6]]],[11,"parse","","",66,[[["parsestream",6]],["result",6]]],[11,"parse","","",67,[[["parsestream",6]],["result",6]]],[11,"parse","","",68,[[["parsestream",6]],["result",6]]],[11,"parse","","",69,[[["parsestream",6]],["result",6]]],[11,"parse","","",70,[[["parsestream",6]],["result",6]]],[11,"parse","","",71,[[["parsestream",6]],["result",6]]],[11,"parse","","",72,[[["parsestream",6]],["result",6]]],[11,"parse","","",73,[[["parsestream",6]],["result",6]]],[11,"parse","","",74,[[["parsestream",6]],["result",6]]],[11,"parse","","",75,[[["parsestream",6]],["result",6]]],[11,"parse","","",76,[[["parsestream",6]],["result",6]]],[11,"parse","","",77,[[["parsestream",6]],["result",6]]],[11,"parse","","",78,[[["parsestream",6]],["result",6]]],[11,"parse","","",79,[[["parsestream",6]],["result",6]]],[11,"parse","","",80,[[["parsestream",6]],["result",6]]],[11,"parse","","",81,[[["parsestream",6]],["result",6]]],[11,"parse","","",82,[[["parsestream",6]],["result",6]]],[11,"parse","","",83,[[["parsestream",6]],["result",6]]],[11,"parse","","",84,[[["parsestream",6]],["result",6]]],[11,"parse","","",85,[[["parsestream",6]],["result",6]]],[11,"parse","","",86,[[["parsestream",6]],["result",6]]],[11,"parse","","",87,[[["parsestream",6]],["result",6]]],[11,"parse","","",88,[[["parsestream",6]],["result",6]]],[11,"parse","","",89,[[["parsestream",6]],["result",6]]],[11,"parse","","",90,[[["parsestream",6]],["result",6]]],[11,"parse","","",91,[[["parsestream",6]],["result",6]]],[11,"parse","","",92,[[["parsestream",6]],["result",6]]],[11,"parse","","",93,[[["parsestream",6]],["result",6]]],[11,"parse","","",94,[[["parsestream",6]],["result",6]]],[11,"parse","","",95,[[["parsestream",6]],["result",6]]],[11,"parse","","",96,[[["parsestream",6]],["result",6]]],[11,"parse","","",97,[[["parsestream",6]],["result",6]]],[11,"parse","","",98,[[["parsestream",6]],["result",6]]],[11,"parse","syn","",297,[[["parsestream",6]],["result",6]]],[11,"parse","","",119,[[["parsestream",6]],["result",6]]],[11,"parse","","",120,[[["parsestream",6]],["result",6]]],[11,"parse","","",121,[[["parsestream",6]],["result",6]]],[11,"parse","","",122,[[["parsestream",6]],["result",6]]],[11,"parse","","",127,[[["parsestream",6]],["result",6]]],[11,"parse","","",125,[[["parsestream",6]],["result",6]]],[11,"parse","","",126,[[["parsestream",6]],["result",6]]],[11,"parse","","",131,[[["parsestream",6]],["result",6]]],[11,"parse","","",138,[[["parsestream",6]],["result",6]]],[11,"parse","","",158,[[["parsestream",6]],["result",6]]],[11,"parse","","",155,[[["parsestream",6]],["result",6]]],[11,"parse","","",153,[[["parsestream",6]],["result",6]]],[11,"parse","","",159,[[["parsestream",6]],["result",6]]],[11,"parse","","",161,[[["parsestream",6]],["result",6]]],[11,"parse","","",146,[[["parsestream",6]],["result",6]]],[11,"parse","","",139,[[["parsestream",6]],["result",6]]],[11,"parse","","",148,[[["parsestream",6]],["result",6]]],[11,"parse","","",162,[[["parsestream",6]],["result",6]]],[11,"parse","","",172,[[["parsestream",6]],["result",6]]],[11,"parse","","",144,[[["parsestream",6]],["result",6]]],[11,"parse","","",174,[[["parsestream",6]],["result",6]]],[11,"parse","","",149,[[["parsestream",6]],["result",6]]],[11,"parse","","",173,[[["parsestream",6]],["result",6]]],[11,"parse","","",157,[[["parsestream",6]],["result",6]]],[11,"parse","","",150,[[["parsestream",6]],["result",6]]],[11,"parse","","",175,[[["parsestream",6]],["result",6]]],[11,"parse","","",145,[[["parsestream",6]],["result",6]]],[11,"parse","","",140,[[["parsestream",6]],["result",6]]],[11,"parse","","",141,[[["parsestream",6]],["result",6]]],[11,"parse","","",152,[[["parsestream",6]],["result",6]]],[11,"parse","","",156,[[["parsestream",6]],["result",6]]],[11,"parse","","",165,[[["parsestream",6]],["result",6]]],[11,"parse","","",166,[[["parsestream",6]],["result",6]]],[11,"parse","","",147,[[["parsestream",6]],["result",6]]],[11,"parse","","",151,[[["parsestream",6]],["result",6]]],[11,"parse","","",168,[[["parsestream",6]],["result",6]]],[11,"parse","","",160,[[["parsestream",6]],["result",6]]],[11,"parse","","",169,[[["parsestream",6]],["result",6]]],[11,"parse","","",167,[[["parsestream",6]],["result",6]]],[11,"parse","","",163,[[["parsestream",6]],["result",6]]],[11,"parse","","",170,[[["parsestream",6]],["result",6]]],[11,"parse","","",142,[[["parsestream",6]],["result",6]]],[11,"parse","","",171,[[["parsestream",6]],["result",6]]],[11,"parse","","",177,[[["parsestream",6]],["result",6]]],[11,"parse","","",176,[[["parsestream",6]],["result",6]]],[11,"parse","","",135,[[["parsestream",6]],["result",6]]],[11,"parse","","",133,[[["parsestream",6]],["result",6]]],[11,"parse","","",137,[[["parsestream",6]],["result",6]]],[11,"parse","","",164,[[["parsestream",6]],["result",6]]],[11,"parse","","",179,[[["parsestream",6]],["result",6]]],[11,"parse","","",132,[[["parsestream",6]],[["result",6],["arm",3]]]],[11,"parse","","",178,[[["parsestream",6]],["result",6]]],[11,"parse","","",183,[[["parsestream",6]],["result",6]]],[11,"parse","","",182,[[["parsestream",6]],["result",6]]],[11,"parse","","",184,[[["parsestream",6]],["result",6]]],[11,"parse","","",180,[[["parsestream",6]],["result",6]]],[11,"parse","","",190,[[["parsestream",6]],["result",6]]],[11,"parse","","",191,[[["parsestream",6]],["result",6]]],[11,"parse","","",188,[[["parsestream",6]],["result",6]]],[11,"parse","","",189,[[["parsestream",6]],["result",6]]],[11,"parse","","",181,[[["parsestream",6]],["result",6]]],[11,"parse","","",192,[[["parsestream",6]],["result",6]]],[11,"parse","","",193,[[["parsestream",6]],["result",6]]],[11,"parse","","",205,[[["parsestream",6]],["result",6]]],[11,"parse","","",212,[[["parsestream",6]],["result",6]]],[11,"parse","","",213,[[["parsestream",6]],["result",6]]],[11,"parse","","",208,[[["parsestream",6]],["result",6]]],[11,"parse","","",221,[[["parsestream",6]],["result",6]]],[11,"parse","","",234,[[["parsestream",6]],[["result",6],["usetree",4]]]],[11,"parse","","",215,[[["parsestream",6]],["result",6]]],[11,"parse","","",206,[[["parsestream",6]],["result",6]]],[11,"parse","","",223,[[["parsestream",6]],["result",6]]],[11,"parse","","",209,[[["parsestream",6]],["result",6]]],[11,"parse","","",194,[[["parsestream",6]],["result",6]]],[11,"parse","","",222,[[["parsestream",6]],["result",6]]],[11,"parse","","",214,[[["parsestream",6]],["result",6]]],[11,"parse","","",210,[[["parsestream",6]],["result",6]]],[11,"parse","","",195,[[["parsestream",6]],["result",6]]],[11,"parse","","",196,[[["parsestream",6]],["result",6]]],[11,"parse","","",198,[[["parsestream",6]],["result",6]]],[11,"parse","","",199,[[["parsestream",6]],["result",6]]],[11,"parse","","",197,[[["parsestream",6]],["result",6]]],[11,"parse","","",219,[[["parsestream",6]],["result",6]]],[11,"parse","","",216,[[["parsestream",6]],["result",6]]],[11,"parse","","",207,[[["parsestream",6]],["result",6]]],[11,"parse","","",220,[[["parsestream",6]],["result",6]]],[11,"parse","","",217,[[["parsestream",6]],["result",6]]],[11,"parse","","",218,[[["parsestream",6]],["result",6]]],[11,"parse","","",224,[[["parsestream",6]],["result",6]]],[11,"parse","","",225,[[["parsestream",6]],["result",6]]],[11,"parse","","",227,[[["parsestream",6]],["result",6]]],[11,"parse","","",228,[[["parsestream",6]],["result",6]]],[11,"parse","","",226,[[["parsestream",6]],["result",6]]],[11,"parse","","",211,[[["parsestream",6]],["result",6]]],[11,"parse","","",200,[[["parsestream",6]],["result",6]]],[11,"parse","","",201,[[["parsestream",6]],["result",6]]],[11,"parse","","",203,[[["parsestream",6]],["result",6]]],[11,"parse","","",204,[[["parsestream",6]],["result",6]]],[11,"parse","","",202,[[["parsestream",6]],["result",6]]],[11,"parse","","",235,[[["parsestream",6]],["result",6]]],[11,"parse","","",236,[[["parsestream",6]],["result",6]]],[11,"parse","","",237,[[["parsestream",6]],["result",6]]],[11,"parse","","",301,[[["parsestream",6]],["result",6]]],[11,"parse","","",302,[[["parsestream",6]],["result",6]]],[11,"parse","","",303,[[["parsestream",6]],["result",6]]],[11,"parse","","",304,[[["parsestream",6]],["result",6]]],[11,"parse","","",305,[[["parsestream",6]],["result",6]]],[11,"parse","","",306,[[["parsestream",6]],["result",6]]],[11,"parse","","",238,[[["parsestream",6]],["result",6]]],[11,"parse","","",240,[[["parsestream",6]],["result",6]]],[11,"parse","","",246,[[["parsestream",6]],["result",6]]],[11,"parse","","",247,[[["parsestream",6]],["result",6]]],[11,"parse","","",248,[[["parsestream",6]],["result",6]]],[11,"parse","","",249,[[["parsestream",6]],["result",6]]],[11,"parse","","",251,[[["parsestream",6]],["result",6]]],[11,"parse","","",255,[[["parsestream",6]],["result",6]]],[11,"parse","","",267,[[["parsestream",6]],["result",6]]],[11,"parse","","",256,[[["parsestream",6]],["result",6]]],[11,"parse","","",265,[[["parsestream",6]],["result",6]]],[11,"parse","","",266,[[["parsestream",6]],["result",6]]],[11,"parse","","",257,[[["parsestream",6]],["result",6]]],[11,"parse","","",262,[[["parsestream",6]],["result",6]]],[11,"parse","","",260,[[["parsestream",6]],["result",6]]],[11,"parse","","",269,[[["parsestream",6]],["result",6]]],[11,"parse","","",261,[[["parsestream",6]],["result",6]]],[11,"parse","","",264,[[["parsestream",6]],["result",6]]],[11,"parse","","",254,[[["parsestream",6]],["result",6]]],[11,"parse","","",268,[[["parsestream",6]],["result",6]]],[11,"parse","","",259,[[["parsestream",6]],["result",6]]],[11,"parse","","",258,[[["parsestream",6]],["result",6]]],[11,"parse","","",263,[[["parsestream",6]],["result",6]]],[11,"parse","","",253,[[["parsestream",6]],["result",6]]],[11,"parse","","",252,[[["parsestream",6]],["result",6]]],[11,"parse","","",272,[[["parsestream",6]],["result",6]]],[11,"parse","","",293,[[["parsestream",6]],["result",6]]],[11,"parse","","",291,[[["parsestream",6]],["result",6]]],[11,"parse","","",288,[[["parsestream",6]],["result",6]]],[11,"parse","","",292,[[["parsestream",6]],["result",6]]],[11,"parse","","",295,[[["parsestream",6]],["result",6]]],[11,"parse","","",289,[[["parsestream",6]],["result",6]]],[11,"parse","","",290,[[["parsestream",6]],["result",6]]],[11,"parse","syn::parse","",314,[[["parsestream",6]],["result",6]]],[11,"drop","","",114,[[]]],[11,"from","syn","",297,[[["selfvalue",3]],["ident",3]]],[11,"from","","",297,[[["selftype",3]],["ident",3]]],[11,"from","","",297,[[["super",3]],["ident",3]]],[11,"from","","",297,[[["crate",3]],["ident",3]]],[11,"from","","",297,[[["extern",3]],["ident",3]]],[11,"from","","",297,[[["underscore",3]],["ident",3]]],[11,"from","","",119,[[["path",3]],["meta",4]]],[11,"from","","",119,[[["metalist",3]],["meta",4]]],[11,"from","","",119,[[["metanamevalue",3]],["meta",4]]],[11,"from","","",122,[[["meta",4]],["nestedmeta",4]]],[11,"from","","",122,[[["lit",4]],["nestedmeta",4]]],[11,"from","","",124,[[["fieldsnamed",3]],["fields",4]]],[11,"from","","",124,[[["fieldsunnamed",3]],["fields",4]]],[11,"from","","",131,[[["vispublic",3]],["visibility",4]]],[11,"from","","",131,[[["viscrate",3]],["visibility",4]]],[11,"from","","",131,[[["visrestricted",3]],["visibility",4]]],[11,"from","","",138,[[["exprarray",3]],["expr",4]]],[11,"from","","",138,[[["exprassign",3]],["expr",4]]],[11,"from","","",138,[[["exprassignop",3]],["expr",4]]],[11,"from","","",138,[[["exprasync",3]],["expr",4]]],[11,"from","","",138,[[["exprawait",3]],["expr",4]]],[11,"from","","",138,[[["exprbinary",3]],["expr",4]]],[11,"from","","",138,[[["exprblock",3]],["expr",4]]],[11,"from","","",138,[[["exprbox",3]],["expr",4]]],[11,"from","","",138,[[["exprbreak",3]],["expr",4]]],[11,"from","","",138,[[["exprcall",3]],["expr",4]]],[11,"from","","",138,[[["exprcast",3]],["expr",4]]],[11,"from","","",138,[[["exprclosure",3]],["expr",4]]],[11,"from","","",138,[[["exprcontinue",3]],["expr",4]]],[11,"from","","",138,[[["exprfield",3]],["expr",4]]],[11,"from","","",138,[[["exprforloop",3]],["expr",4]]],[11,"from","","",138,[[["exprgroup",3]],["expr",4]]],[11,"from","","",138,[[["exprif",3]],["expr",4]]],[11,"from","","",138,[[["exprindex",3]],["expr",4]]],[11,"from","","",138,[[["exprlet",3]],["expr",4]]],[11,"from","","",138,[[["exprlit",3]],["expr",4]]],[11,"from","","",138,[[["exprloop",3]],["expr",4]]],[11,"from","","",138,[[["exprmacro",3]],["expr",4]]],[11,"from","","",138,[[["exprmatch",3]],["expr",4]]],[11,"from","","",138,[[["exprmethodcall",3]],["expr",4]]],[11,"from","","",138,[[["exprparen",3]],["expr",4]]],[11,"from","","",138,[[["exprpath",3]],["expr",4]]],[11,"from","","",138,[[["exprrange",3]],["expr",4]]],[11,"from","","",138,[[["exprreference",3]],["expr",4]]],[11,"from","","",138,[[["exprrepeat",3]],["expr",4]]],[11,"from","","",138,[[["exprreturn",3]],["expr",4]]],[11,"from","","",138,[[["exprstruct",3]],["expr",4]]],[11,"from","","",138,[[["exprtry",3]],["expr",4]]],[11,"from","","",138,[[["exprtryblock",3]],["expr",4]]],[11,"from","","",138,[[["exprtuple",3]],["expr",4]]],[11,"from","","",138,[[["exprtype",3]],["expr",4]]],[11,"from","","",138,[[["exprunary",3]],["expr",4]]],[11,"from","","",138,[[["exprunsafe",3]],["expr",4]]],[11,"from","","",138,[[["exprwhile",3]],["expr",4]]],[11,"from","","",138,[[["expryield",3]],["expr",4]]],[11,"from","","",178,[[],["index",3]]],[11,"from","","",182,[[["typeparam",3]],["genericparam",4]]],[11,"from","","",182,[[["lifetimedef",3]],["genericparam",4]]],[11,"from","","",182,[[["constparam",3]],["genericparam",4]]],[11,"from","","",190,[[["ident",3]]]],[11,"from","","",191,[[["traitbound",3]],["typeparambound",4]]],[11,"from","","",191,[[["lifetime",3]],["typeparambound",4]]],[11,"from","","",193,[[["predicatetype",3]],["wherepredicate",4]]],[11,"from","","",193,[[["predicatelifetime",3]],["wherepredicate",4]]],[11,"from","","",193,[[["predicateeq",3]],["wherepredicate",4]]],[11,"from","","",205,[[["itemconst",3]],["item",4]]],[11,"from","","",205,[[["itemenum",3]],["item",4]]],[11,"from","","",205,[[["itemexterncrate",3]],["item",4]]],[11,"from","","",205,[[["itemfn",3]],["item",4]]],[11,"from","","",205,[[["itemforeignmod",3]],["item",4]]],[11,"from","","",205,[[["itemimpl",3]],["item",4]]],[11,"from","","",205,[[["itemmacro",3]],["item",4]]],[11,"from","","",205,[[["itemmacro2",3]],["item",4]]],[11,"from","","",205,[[["itemmod",3]],["item",4]]],[11,"from","","",205,[[["itemstatic",3]],["item",4]]],[11,"from","","",205,[[["itemstruct",3]],["item",4]]],[11,"from","","",205,[[["itemtrait",3]],["item",4]]],[11,"from","","",205,[[["itemtraitalias",3]],["item",4]]],[11,"from","","",205,[[["itemtype",3]],["item",4]]],[11,"from","","",205,[[["itemunion",3]],["item",4]]],[11,"from","","",205,[[["itemuse",3]],["item",4]]],[11,"from","","",205,[[["deriveinput",3]],["item",4]]],[11,"from","","",246,[[["itemstruct",3]],["deriveinput",3]]],[11,"from","","",246,[[["itemenum",3]],["deriveinput",3]]],[11,"from","","",246,[[["itemunion",3]],["deriveinput",3]]],[11,"from","","",234,[[["usepath",3]],["usetree",4]]],[11,"from","","",234,[[["usename",3]],["usetree",4]]],[11,"from","","",234,[[["userename",3]],["usetree",4]]],[11,"from","","",234,[[["useglob",3]],["usetree",4]]],[11,"from","","",234,[[["usegroup",3]],["usetree",4]]],[11,"from","","",195,[[["foreignitemfn",3]],["foreignitem",4]]],[11,"from","","",195,[[["foreignitemstatic",3]],["foreignitem",4]]],[11,"from","","",195,[[["foreignitemtype",3]],["foreignitem",4]]],[11,"from","","",195,[[["foreignitemmacro",3]],["foreignitem",4]]],[11,"from","","",224,[[["traititemconst",3]],["traititem",4]]],[11,"from","","",224,[[["traititemmethod",3]],["traititem",4]]],[11,"from","","",224,[[["traititemtype",3]],["traititem",4]]],[11,"from","","",224,[[["traititemmacro",3]],["traititem",4]]],[11,"from","","",200,[[["implitemconst",3]],["implitem",4]]],[11,"from","","",200,[[["implitemmethod",3]],["implitem",4]]],[11,"from","","",200,[[["implitemtype",3]],["implitem",4]]],[11,"from","","",200,[[["implitemmacro",3]],["implitem",4]]],[11,"from","","",194,[[["receiver",3]],["fnarg",4]]],[11,"from","","",194,[[["pattype",3]],["fnarg",4]]],[11,"from","","",237,[[["litstr",3]],["lit",4]]],[11,"from","","",237,[[["litbytestr",3]],["lit",4]]],[11,"from","","",237,[[["litbyte",3]],["lit",4]]],[11,"from","","",237,[[["litchar",3]],["lit",4]]],[11,"from","","",237,[[["litint",3]],["lit",4]]],[11,"from","","",237,[[["litfloat",3]],["lit",4]]],[11,"from","","",237,[[["litbool",3]],["lit",4]]],[11,"from","","",305,[[["literal",3]]]],[11,"from","","",306,[[["literal",3]]]],[11,"from","","",242,[[["datastruct",3]],["data",4]]],[11,"from","","",242,[[["dataenum",3]],["data",4]]],[11,"from","","",242,[[["dataunion",3]],["data",4]]],[11,"from","","",255,[[["typearray",3]],["type",4]]],[11,"from","","",255,[[["typebarefn",3]],["type",4]]],[11,"from","","",255,[[["typegroup",3]],["type",4]]],[11,"from","","",255,[[["typeimpltrait",3]],["type",4]]],[11,"from","","",255,[[["typeinfer",3]],["type",4]]],[11,"from","","",255,[[["typemacro",3]],["type",4]]],[11,"from","","",255,[[["typenever",3]],["type",4]]],[11,"from","","",255,[[["typeparen",3]],["type",4]]],[11,"from","","",255,[[["typepath",3]],["type",4]]],[11,"from","","",255,[[["typeptr",3]],["type",4]]],[11,"from","","",255,[[["typereference",3]],["type",4]]],[11,"from","","",255,[[["typeslice",3]],["type",4]]],[11,"from","","",255,[[["typetraitobject",3]],["type",4]]],[11,"from","","",255,[[["typetuple",3]],["type",4]]],[11,"from","","",272,[[["patbox",3]],["pat",4]]],[11,"from","","",272,[[["patident",3]],["pat",4]]],[11,"from","","",272,[[["patlit",3]],["pat",4]]],[11,"from","","",272,[[["patmacro",3]],["pat",4]]],[11,"from","","",272,[[["pator",3]],["pat",4]]],[11,"from","","",272,[[["patpath",3]],["pat",4]]],[11,"from","","",272,[[["patrange",3]],["pat",4]]],[11,"from","","",272,[[["patreference",3]],["pat",4]]],[11,"from","","",272,[[["patrest",3]],["pat",4]]],[11,"from","","",272,[[["patslice",3]],["pat",4]]],[11,"from","","",272,[[["patstruct",3]],["pat",4]]],[11,"from","","",272,[[["pattuple",3]],["pat",4]]],[11,"from","","",272,[[["pattuplestruct",3]],["pat",4]]],[11,"from","","",272,[[["pattype",3]],["pat",4]]],[11,"from","","",272,[[["patwild",3]],["pat",4]]],[11,"from","","",293,[[]]],[11,"from","","",295,[[]]],[11,"from","syn::parse","",116,[[["lexerror",3]]]],[11,"next_back","syn::punctuated","",307,[[],["option",4]]],[11,"next_back","","",308,[[],["option",4]]],[11,"next_back","","",309,[[],["option",4]]],[11,"next_back","","",310,[[],["option",4]]],[11,"next_back","","",311,[[],["option",4]]],[11,"next_back","","",312,[[],["option",4]]],[11,"len","","",307,[[]]],[11,"len","","",308,[[]]],[11,"len","","",309,[[]]],[11,"len","","",310,[[]]],[11,"len","","",311,[[]]],[11,"len","","",312,[[]]],[11,"extend","","",106,[[["intoiterator",8]]]],[11,"extend","","",106,[[["intoiterator",8]]]],[11,"extend","syn::parse","",116,[[["intoiterator",8]]]],[11,"into_iter","syn","",124,[[]]],[11,"into_iter","syn::punctuated","",106,[[]]],[11,"into_iter","syn::parse","",116,[[]]],[11,"next","syn::punctuated","",307,[[],["option",4]]],[11,"size_hint","","",307,[[]]],[11,"next","","",308,[[],["option",4]]],[11,"size_hint","","",308,[[]]],[11,"next","","",309,[[],["option",4]]],[11,"size_hint","","",309,[[]]],[11,"next","","",310,[[],["option",4]]],[11,"size_hint","","",310,[[]]],[11,"next","","",311,[[],["option",4]]],[11,"size_hint","","",311,[[]]],[11,"next","","",312,[[],["option",4]]],[11,"size_hint","","",312,[[]]],[11,"clone","syn::token","",0,[[]]],[11,"clone","","",1,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",3,[[]]],[11,"clone","","",4,[[]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[]]],[11,"clone","","",7,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",9,[[]]],[11,"clone","","",10,[[]]],[11,"clone","","",11,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",13,[[]]],[11,"clone","","",14,[[]]],[11,"clone","","",15,[[]]],[11,"clone","","",16,[[]]],[11,"clone","","",17,[[]]],[11,"clone","","",18,[[]]],[11,"clone","","",19,[[]]],[11,"clone","","",20,[[]]],[11,"clone","","",21,[[]]],[11,"clone","","",22,[[]]],[11,"clone","","",23,[[]]],[11,"clone","","",24,[[]]],[11,"clone","","",25,[[]]],[11,"clone","","",26,[[]]],[11,"clone","","",27,[[]]],[11,"clone","","",28,[[]]],[11,"clone","","",29,[[]]],[11,"clone","","",30,[[]]],[11,"clone","","",31,[[]]],[11,"clone","","",32,[[]]],[11,"clone","","",33,[[]]],[11,"clone","","",34,[[]]],[11,"clone","","",35,[[]]],[11,"clone","","",36,[[]]],[11,"clone","","",37,[[]]],[11,"clone","","",38,[[]]],[11,"clone","","",39,[[]]],[11,"clone","","",40,[[]]],[11,"clone","","",41,[[]]],[11,"clone","","",42,[[]]],[11,"clone","","",43,[[]]],[11,"clone","","",44,[[]]],[11,"clone","","",45,[[]]],[11,"clone","","",46,[[]]],[11,"clone","","",47,[[]]],[11,"clone","","",48,[[]]],[11,"clone","","",49,[[]]],[11,"clone","","",50,[[]]],[11,"clone","","",51,[[]]],[11,"clone","","",52,[[]]],[11,"clone","","",53,[[]]],[11,"clone","","",54,[[]]],[11,"clone","","",55,[[]]],[11,"clone","","",56,[[]]],[11,"clone","","",57,[[]]],[11,"clone","","",58,[[]]],[11,"clone","","",59,[[]]],[11,"clone","","",60,[[]]],[11,"clone","","",61,[[]]],[11,"clone","","",62,[[]]],[11,"clone","","",63,[[]]],[11,"clone","","",64,[[]]],[11,"clone","","",65,[[]]],[11,"clone","","",66,[[]]],[11,"clone","","",67,[[]]],[11,"clone","","",68,[[]]],[11,"clone","","",69,[[]]],[11,"clone","","",70,[[]]],[11,"clone","","",71,[[]]],[11,"clone","","",72,[[]]],[11,"clone","","",73,[[]]],[11,"clone","","",74,[[]]],[11,"clone","","",75,[[]]],[11,"clone","","",76,[[]]],[11,"clone","","",77,[[]]],[11,"clone","","",78,[[]]],[11,"clone","","",79,[[]]],[11,"clone","","",80,[[]]],[11,"clone","","",81,[[]]],[11,"clone","","",82,[[]]],[11,"clone","","",83,[[]]],[11,"clone","","",84,[[]]],[11,"clone","","",85,[[]]],[11,"clone","","",86,[[]]],[11,"clone","","",87,[[]]],[11,"clone","","",88,[[]]],[11,"clone","","",89,[[]]],[11,"clone","","",90,[[]]],[11,"clone","","",91,[[]]],[11,"clone","","",92,[[]]],[11,"clone","","",93,[[]]],[11,"clone","","",94,[[]]],[11,"clone","","",95,[[]]],[11,"clone","","",96,[[]]],[11,"clone","","",97,[[]]],[11,"clone","","",98,[[]]],[11,"clone","","",99,[[]]],[11,"clone","","",100,[[]]],[11,"clone","","",101,[[]]],[11,"clone","","",102,[[]]],[11,"clone","syn","",298,[[]]],[11,"clone","","",299,[[]]],[11,"clone","","",300,[[]]],[11,"clone","","",236,[[]]],[11,"clone","","",301,[[]]],[11,"clone","","",302,[[]]],[11,"clone","","",303,[[]]],[11,"clone","","",304,[[]]],[11,"clone","","",305,[[]]],[11,"clone","","",306,[[]]],[11,"clone","syn::buffer","",104,[[]]],[11,"clone","syn::punctuated","",106,[[]]],[11,"clone","","",307,[[]]],[11,"clone","","",309,[[]]],[11,"clone","","",310,[[]]],[11,"clone","","",311,[[]]],[11,"clone","","",107,[[]]],[11,"clone","syn","",252,[[]]],[11,"clone","","",288,[[]]],[11,"clone","","",132,[[]]],[11,"clone","","",117,[[]]],[11,"clone","","",118,[[]]],[11,"clone","","",253,[[]]],[11,"clone","","",247,[[]]],[11,"clone","","",289,[[]]],[11,"clone","","",249,[[]]],[11,"clone","","",180,[[]]],[11,"clone","","",181,[[]]],[11,"clone","","",290,[[]]],[11,"clone","","",242,[[]]],[11,"clone","","",243,[[]]],[11,"clone","","",244,[[]]],[11,"clone","","",245,[[]]],[11,"clone","","",246,[[]]],[11,"clone","","",138,[[]]],[11,"clone","","",139,[[]]],[11,"clone","","",140,[[]]],[11,"clone","","",141,[[]]],[11,"clone","","",142,[[]]],[11,"clone","","",143,[[]]],[11,"clone","","",144,[[]]],[11,"clone","","",145,[[]]],[11,"clone","","",146,[[]]],[11,"clone","","",147,[[]]],[11,"clone","","",148,[[]]],[11,"clone","","",149,[[]]],[11,"clone","","",150,[[]]],[11,"clone","","",151,[[]]],[11,"clone","","",152,[[]]],[11,"clone","","",153,[[]]],[11,"clone","","",154,[[]]],[11,"clone","","",155,[[]]],[11,"clone","","",156,[[]]],[11,"clone","","",157,[[]]],[11,"clone","","",158,[[]]],[11,"clone","","",159,[[]]],[11,"clone","","",160,[[]]],[11,"clone","","",161,[[]]],[11,"clone","","",162,[[]]],[11,"clone","","",163,[[]]],[11,"clone","","",164,[[]]],[11,"clone","","",165,[[]]],[11,"clone","","",166,[[]]],[11,"clone","","",167,[[]]],[11,"clone","","",168,[[]]],[11,"clone","","",169,[[]]],[11,"clone","","",170,[[]]],[11,"clone","","",171,[[]]],[11,"clone","","",172,[[]]],[11,"clone","","",173,[[]]],[11,"clone","","",174,[[]]],[11,"clone","","",175,[[]]],[11,"clone","","",176,[[]]],[11,"clone","","",177,[[]]],[11,"clone","","",123,[[]]],[11,"clone","","",271,[[]]],[11,"clone","","",133,[[]]],[11,"clone","","",124,[[]]],[11,"clone","","",125,[[]]],[11,"clone","","",126,[[]]],[11,"clone","","",235,[[]]],[11,"clone","","",194,[[]]],[11,"clone","","",195,[[]]],[11,"clone","","",196,[[]]],[11,"clone","","",197,[[]]],[11,"clone","","",198,[[]]],[11,"clone","","",199,[[]]],[11,"clone","","",291,[[]]],[11,"clone","","",134,[[]]],[11,"clone","","",182,[[]]],[11,"clone","","",183,[[]]],[11,"clone","","",200,[[]]],[11,"clone","","",201,[[]]],[11,"clone","","",202,[[]]],[11,"clone","","",203,[[]]],[11,"clone","","",204,[[]]],[11,"clone","","",178,[[]]],[11,"clone","","",205,[[]]],[11,"clone","","",206,[[]]],[11,"clone","","",207,[[]]],[11,"clone","","",208,[[]]],[11,"clone","","",209,[[]]],[11,"clone","","",210,[[]]],[11,"clone","","",211,[[]]],[11,"clone","","",212,[[]]],[11,"clone","","",213,[[]]],[11,"clone","","",214,[[]]],[11,"clone","","",215,[[]]],[11,"clone","","",216,[[]]],[11,"clone","","",217,[[]]],[11,"clone","","",218,[[]]],[11,"clone","","",219,[[]]],[11,"clone","","",220,[[]]],[11,"clone","","",221,[[]]],[11,"clone","","",135,[[]]],[11,"clone","","",184,[[]]],[11,"clone","","",237,[[]]],[11,"clone","","",238,[[]]],[11,"clone","","",250,[[]]],[11,"clone","","",240,[[]]],[11,"clone","","",241,[[]]],[11,"clone","","",179,[[]]],[11,"clone","","",119,[[]]],[11,"clone","","",120,[[]]],[11,"clone","","",121,[[]]],[11,"clone","","",136,[[]]],[11,"clone","","",122,[[]]],[11,"clone","","",292,[[]]],[11,"clone","","",272,[[]]],[11,"clone","","",273,[[]]],[11,"clone","","",274,[[]]],[11,"clone","","",275,[[]]],[11,"clone","","",276,[[]]],[11,"clone","","",277,[[]]],[11,"clone","","",278,[[]]],[11,"clone","","",279,[[]]],[11,"clone","","",280,[[]]],[11,"clone","","",281,[[]]],[11,"clone","","",282,[[]]],[11,"clone","","",283,[[]]],[11,"clone","","",284,[[]]],[11,"clone","","",285,[[]]],[11,"clone","","",286,[[]]],[11,"clone","","",287,[[]]],[11,"clone","","",293,[[]]],[11,"clone","","",294,[[]]],[11,"clone","","",295,[[]]],[11,"clone","","",185,[[]]],[11,"clone","","",186,[[]]],[11,"clone","","",187,[[]]],[11,"clone","","",296,[[]]],[11,"clone","","",137,[[]]],[11,"clone","","",222,[[]]],[11,"clone","","",254,[[]]],[11,"clone","","",223,[[]]],[11,"clone","","",251,[[]]],[11,"clone","","",188,[[]]],[11,"clone","","",189,[[]]],[11,"clone","","",224,[[]]],[11,"clone","","",225,[[]]],[11,"clone","","",226,[[]]],[11,"clone","","",227,[[]]],[11,"clone","","",228,[[]]],[11,"clone","","",255,[[]]],[11,"clone","","",256,[[]]],[11,"clone","","",257,[[]]],[11,"clone","","",258,[[]]],[11,"clone","","",259,[[]]],[11,"clone","","",260,[[]]],[11,"clone","","",261,[[]]],[11,"clone","","",262,[[]]],[11,"clone","","",190,[[]]],[11,"clone","","",191,[[]]],[11,"clone","","",263,[[]]],[11,"clone","","",264,[[]]],[11,"clone","","",265,[[]]],[11,"clone","","",266,[[]]],[11,"clone","","",267,[[]]],[11,"clone","","",268,[[]]],[11,"clone","","",269,[[]]],[11,"clone","","",248,[[]]],[11,"clone","","",229,[[]]],[11,"clone","","",230,[[]]],[11,"clone","","",231,[[]]],[11,"clone","","",232,[[]]],[11,"clone","","",233,[[]]],[11,"clone","","",234,[[]]],[11,"clone","","",270,[[]]],[11,"clone","","",127,[[]]],[11,"clone","","",128,[[]]],[11,"clone","","",129,[[]]],[11,"clone","","",130,[[]]],[11,"clone","","",131,[[]]],[11,"clone","","",192,[[]]],[11,"clone","","",193,[[]]],[11,"clone","syn::parse","",113,[[]]],[11,"clone","","",116,[[]]],[11,"default","syn::token","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","","",9,[[]]],[11,"default","","",10,[[]]],[11,"default","","",11,[[]]],[11,"default","","",12,[[]]],[11,"default","","",13,[[]]],[11,"default","","",14,[[]]],[11,"default","","",15,[[]]],[11,"default","","",16,[[]]],[11,"default","","",17,[[]]],[11,"default","","",18,[[]]],[11,"default","","",19,[[]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[]]],[11,"default","","",22,[[]]],[11,"default","","",23,[[]]],[11,"default","","",24,[[]]],[11,"default","","",25,[[]]],[11,"default","","",26,[[]]],[11,"default","","",27,[[]]],[11,"default","","",28,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"default","","",31,[[]]],[11,"default","","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","","",35,[[]]],[11,"default","","",36,[[]]],[11,"default","","",37,[[]]],[11,"default","","",38,[[]]],[11,"default","","",39,[[]]],[11,"default","","",40,[[]]],[11,"default","","",41,[[]]],[11,"default","","",42,[[]]],[11,"default","","",43,[[]]],[11,"default","","",44,[[]]],[11,"default","","",45,[[]]],[11,"default","","",46,[[]]],[11,"default","","",47,[[]]],[11,"default","","",48,[[]]],[11,"default","","",49,[[]]],[11,"default","","",50,[[]]],[11,"default","","",51,[[]]],[11,"default","","",52,[[]]],[11,"default","","",53,[[]]],[11,"default","","",54,[[]]],[11,"default","","",55,[[]]],[11,"default","","",56,[[]]],[11,"default","","",57,[[]]],[11,"default","","",58,[[]]],[11,"default","","",59,[[]]],[11,"default","","",60,[[]]],[11,"default","","",61,[[]]],[11,"default","","",62,[[]]],[11,"default","","",63,[[]]],[11,"default","","",64,[[]]],[11,"default","","",65,[[]]],[11,"default","","",66,[[]]],[11,"default","","",67,[[]]],[11,"default","","",68,[[]]],[11,"default","","",69,[[]]],[11,"default","","",70,[[]]],[11,"default","","",71,[[]]],[11,"default","","",72,[[]]],[11,"default","","",73,[[]]],[11,"default","","",74,[[]]],[11,"default","","",75,[[]]],[11,"default","","",76,[[]]],[11,"default","","",77,[[]]],[11,"default","","",78,[[]]],[11,"default","","",79,[[]]],[11,"default","","",80,[[]]],[11,"default","","",81,[[]]],[11,"default","","",82,[[]]],[11,"default","","",83,[[]]],[11,"default","","",84,[[]]],[11,"default","","",85,[[]]],[11,"default","","",86,[[]]],[11,"default","","",87,[[]]],[11,"default","","",88,[[]]],[11,"default","","",89,[[]]],[11,"default","","",90,[[]]],[11,"default","","",91,[[]]],[11,"default","","",92,[[]]],[11,"default","","",93,[[]]],[11,"default","","",94,[[]]],[11,"default","","",95,[[]]],[11,"default","","",96,[[]]],[11,"default","","",97,[[]]],[11,"default","","",98,[[]]],[11,"default","","",99,[[]]],[11,"default","","",100,[[]]],[11,"default","","",101,[[]]],[11,"default","","",102,[[]]],[11,"default","syn","",183,[[]]],[11,"default","","",180,[[]]],[11,"default","","",294,[[]]],[11,"default","syn::punctuated","",106,[[]]],[11,"cmp","syn","",236,[[["lifetime",3]],["ordering",4]]],[11,"eq","syn::token","",0,[[["underscore",3]]]],[11,"eq","","",1,[[["abstract",3]]]],[11,"eq","","",2,[[["as",3]]]],[11,"eq","","",3,[[["async",3]]]],[11,"eq","","",4,[[["auto",3]]]],[11,"eq","","",5,[[["await",3]]]],[11,"eq","","",6,[[["become",3]]]],[11,"eq","","",7,[[["box",3]]]],[11,"eq","","",8,[[["break",3]]]],[11,"eq","","",9,[[["const",3]]]],[11,"eq","","",10,[[["continue",3]]]],[11,"eq","","",11,[[["crate",3]]]],[11,"eq","","",12,[[["default",3]]]],[11,"eq","","",13,[[["do",3]]]],[11,"eq","","",14,[[["dyn",3]]]],[11,"eq","","",15,[[["else",3]]]],[11,"eq","","",16,[[["enum",3]]]],[11,"eq","","",17,[[["extern",3]]]],[11,"eq","","",18,[[["final",3]]]],[11,"eq","","",19,[[["fn",3]]]],[11,"eq","","",20,[[["for",3]]]],[11,"eq","","",21,[[["if",3]]]],[11,"eq","","",22,[[["impl",3]]]],[11,"eq","","",23,[[["in",3]]]],[11,"eq","","",24,[[["let",3]]]],[11,"eq","","",25,[[["loop",3]]]],[11,"eq","","",26,[[["macro",3]]]],[11,"eq","","",27,[[["match",3]]]],[11,"eq","","",28,[[["mod",3]]]],[11,"eq","","",29,[[["move",3]]]],[11,"eq","","",30,[[["mut",3]]]],[11,"eq","","",31,[[["override",3]]]],[11,"eq","","",32,[[["priv",3]]]],[11,"eq","","",33,[[["pub",3]]]],[11,"eq","","",34,[[["ref",3]]]],[11,"eq","","",35,[[["return",3]]]],[11,"eq","","",36,[[["selftype",3]]]],[11,"eq","","",37,[[["selfvalue",3]]]],[11,"eq","","",38,[[["static",3]]]],[11,"eq","","",39,[[["struct",3]]]],[11,"eq","","",40,[[["super",3]]]],[11,"eq","","",41,[[["trait",3]]]],[11,"eq","","",42,[[["try",3]]]],[11,"eq","","",43,[[["type",3]]]],[11,"eq","","",44,[[["typeof",3]]]],[11,"eq","","",45,[[["union",3]]]],[11,"eq","","",46,[[["unsafe",3]]]],[11,"eq","","",47,[[["unsized",3]]]],[11,"eq","","",48,[[["use",3]]]],[11,"eq","","",49,[[["virtual",3]]]],[11,"eq","","",50,[[["where",3]]]],[11,"eq","","",51,[[["while",3]]]],[11,"eq","","",52,[[["yield",3]]]],[11,"eq","","",53,[[["add",3]]]],[11,"eq","","",54,[[["addeq",3]]]],[11,"eq","","",55,[[["and",3]]]],[11,"eq","","",56,[[["andand",3]]]],[11,"eq","","",57,[[["andeq",3]]]],[11,"eq","","",58,[[["at",3]]]],[11,"eq","","",59,[[["bang",3]]]],[11,"eq","","",60,[[["caret",3]]]],[11,"eq","","",61,[[["careteq",3]]]],[11,"eq","","",62,[[["colon",3]]]],[11,"eq","","",63,[[["colon2",3]]]],[11,"eq","","",64,[[["comma",3]]]],[11,"eq","","",65,[[["div",3]]]],[11,"eq","","",66,[[["diveq",3]]]],[11,"eq","","",67,[[["dollar",3]]]],[11,"eq","","",68,[[["dot",3]]]],[11,"eq","","",69,[[["dot2",3]]]],[11,"eq","","",70,[[["dot3",3]]]],[11,"eq","","",71,[[["dotdoteq",3]]]],[11,"eq","","",72,[[["eq",3]]]],[11,"eq","","",73,[[["eqeq",3]]]],[11,"eq","","",74,[[["ge",3]]]],[11,"eq","","",75,[[["gt",3]]]],[11,"eq","","",76,[[["le",3]]]],[11,"eq","","",77,[[["lt",3]]]],[11,"eq","","",78,[[["muleq",3]]]],[11,"eq","","",79,[[["ne",3]]]],[11,"eq","","",80,[[["or",3]]]],[11,"eq","","",81,[[["oreq",3]]]],[11,"eq","","",82,[[["oror",3]]]],[11,"eq","","",83,[[["pound",3]]]],[11,"eq","","",84,[[["question",3]]]],[11,"eq","","",85,[[["rarrow",3]]]],[11,"eq","","",86,[[["larrow",3]]]],[11,"eq","","",87,[[["rem",3]]]],[11,"eq","","",88,[[["remeq",3]]]],[11,"eq","","",89,[[["fatarrow",3]]]],[11,"eq","","",90,[[["semi",3]]]],[11,"eq","","",91,[[["shl",3]]]],[11,"eq","","",92,[[["shleq",3]]]],[11,"eq","","",93,[[["shr",3]]]],[11,"eq","","",94,[[["shreq",3]]]],[11,"eq","","",95,[[["star",3]]]],[11,"eq","","",96,[[["sub",3]]]],[11,"eq","","",97,[[["subeq",3]]]],[11,"eq","","",98,[[["tilde",3]]]],[11,"eq","","",99,[[["brace",3]]]],[11,"eq","","",100,[[["bracket",3]]]],[11,"eq","","",101,[[["paren",3]]]],[11,"eq","","",102,[[["group",3]]]],[11,"eq","syn","",179,[[]]],[11,"eq","","",178,[[]]],[11,"eq","","",298,[[]]],[11,"eq","","",299,[[]]],[11,"eq","","",300,[[]]],[11,"eq","","",236,[[["lifetime",3]]]],[11,"eq","","",301,[[]]],[11,"eq","","",302,[[]]],[11,"eq","","",303,[[]]],[11,"eq","","",304,[[]]],[11,"eq","","",305,[[]]],[11,"eq","","",306,[[]]],[11,"eq","syn::buffer","",104,[[]]],[11,"eq","syn::punctuated","",106,[[]]],[11,"eq","syn","",252,[[]]],[11,"eq","","",288,[[]]],[11,"eq","","",132,[[]]],[11,"eq","","",117,[[]]],[11,"eq","","",118,[[]]],[11,"eq","","",253,[[]]],[11,"eq","","",247,[[]]],[11,"eq","","",289,[[]]],[11,"eq","","",249,[[]]],[11,"eq","","",180,[[]]],[11,"eq","","",181,[[]]],[11,"eq","","",290,[[]]],[11,"eq","","",242,[[]]],[11,"eq","","",243,[[]]],[11,"eq","","",244,[[]]],[11,"eq","","",245,[[]]],[11,"eq","","",246,[[]]],[11,"eq","","",138,[[]]],[11,"eq","","",139,[[]]],[11,"eq","","",140,[[]]],[11,"eq","","",141,[[]]],[11,"eq","","",142,[[]]],[11,"eq","","",143,[[]]],[11,"eq","","",144,[[]]],[11,"eq","","",145,[[]]],[11,"eq","","",146,[[]]],[11,"eq","","",147,[[]]],[11,"eq","","",148,[[]]],[11,"eq","","",149,[[]]],[11,"eq","","",150,[[]]],[11,"eq","","",151,[[]]],[11,"eq","","",152,[[]]],[11,"eq","","",153,[[]]],[11,"eq","","",154,[[]]],[11,"eq","","",155,[[]]],[11,"eq","","",156,[[]]],[11,"eq","","",157,[[]]],[11,"eq","","",158,[[]]],[11,"eq","","",159,[[]]],[11,"eq","","",160,[[]]],[11,"eq","","",161,[[]]],[11,"eq","","",162,[[]]],[11,"eq","","",163,[[]]],[11,"eq","","",164,[[]]],[11,"eq","","",165,[[]]],[11,"eq","","",166,[[]]],[11,"eq","","",167,[[]]],[11,"eq","","",168,[[]]],[11,"eq","","",169,[[]]],[11,"eq","","",170,[[]]],[11,"eq","","",171,[[]]],[11,"eq","","",172,[[]]],[11,"eq","","",173,[[]]],[11,"eq","","",174,[[]]],[11,"eq","","",175,[[]]],[11,"eq","","",176,[[]]],[11,"eq","","",177,[[]]],[11,"eq","","",123,[[]]],[11,"eq","","",271,[[]]],[11,"eq","","",133,[[]]],[11,"eq","","",124,[[]]],[11,"eq","","",125,[[]]],[11,"eq","","",126,[[]]],[11,"eq","","",235,[[]]],[11,"eq","","",194,[[]]],[11,"eq","","",195,[[]]],[11,"eq","","",196,[[]]],[11,"eq","","",197,[[]]],[11,"eq","","",198,[[]]],[11,"eq","","",199,[[]]],[11,"eq","","",291,[[]]],[11,"eq","","",134,[[]]],[11,"eq","","",182,[[]]],[11,"eq","","",183,[[]]],[11,"eq","","",200,[[]]],[11,"eq","","",201,[[]]],[11,"eq","","",202,[[]]],[11,"eq","","",203,[[]]],[11,"eq","","",204,[[]]],[11,"eq","","",205,[[]]],[11,"eq","","",206,[[]]],[11,"eq","","",207,[[]]],[11,"eq","","",208,[[]]],[11,"eq","","",209,[[]]],[11,"eq","","",210,[[]]],[11,"eq","","",211,[[]]],[11,"eq","","",212,[[]]],[11,"eq","","",213,[[]]],[11,"eq","","",214,[[]]],[11,"eq","","",215,[[]]],[11,"eq","","",216,[[]]],[11,"eq","","",217,[[]]],[11,"eq","","",218,[[]]],[11,"eq","","",219,[[]]],[11,"eq","","",220,[[]]],[11,"eq","","",221,[[]]],[11,"eq","","",135,[[]]],[11,"eq","","",184,[[]]],[11,"eq","","",237,[[]]],[11,"eq","","",238,[[]]],[11,"eq","","",250,[[]]],[11,"eq","","",240,[[]]],[11,"eq","","",241,[[]]],[11,"eq","","",119,[[]]],[11,"eq","","",120,[[]]],[11,"eq","","",121,[[]]],[11,"eq","","",136,[[]]],[11,"eq","","",122,[[]]],[11,"eq","","",292,[[]]],[11,"eq","","",272,[[]]],[11,"eq","","",273,[[]]],[11,"eq","","",274,[[]]],[11,"eq","","",275,[[]]],[11,"eq","","",276,[[]]],[11,"eq","","",277,[[]]],[11,"eq","","",278,[[]]],[11,"eq","","",279,[[]]],[11,"eq","","",280,[[]]],[11,"eq","","",281,[[]]],[11,"eq","","",282,[[]]],[11,"eq","","",283,[[]]],[11,"eq","","",284,[[]]],[11,"eq","","",285,[[]]],[11,"eq","","",286,[[]]],[11,"eq","","",287,[[]]],[11,"eq","","",293,[[]]],[11,"eq","","",294,[[]]],[11,"eq","","",295,[[]]],[11,"eq","","",185,[[]]],[11,"eq","","",186,[[]]],[11,"eq","","",187,[[]]],[11,"eq","","",296,[[]]],[11,"eq","","",137,[[]]],[11,"eq","","",222,[[]]],[11,"eq","","",254,[[]]],[11,"eq","","",223,[[]]],[11,"eq","","",251,[[]]],[11,"eq","","",188,[[]]],[11,"eq","","",189,[[]]],[11,"eq","","",224,[[]]],[11,"eq","","",225,[[]]],[11,"eq","","",226,[[]]],[11,"eq","","",227,[[]]],[11,"eq","","",228,[[]]],[11,"eq","","",255,[[]]],[11,"eq","","",256,[[]]],[11,"eq","","",257,[[]]],[11,"eq","","",258,[[]]],[11,"eq","","",259,[[]]],[11,"eq","","",260,[[]]],[11,"eq","","",261,[[]]],[11,"eq","","",262,[[]]],[11,"eq","","",190,[[]]],[11,"eq","","",191,[[]]],[11,"eq","","",263,[[]]],[11,"eq","","",264,[[]]],[11,"eq","","",265,[[]]],[11,"eq","","",266,[[]]],[11,"eq","","",267,[[]]],[11,"eq","","",268,[[]]],[11,"eq","","",269,[[]]],[11,"eq","","",248,[[]]],[11,"eq","","",229,[[]]],[11,"eq","","",230,[[]]],[11,"eq","","",231,[[]]],[11,"eq","","",232,[[]]],[11,"eq","","",233,[[]]],[11,"eq","","",234,[[]]],[11,"eq","","",270,[[]]],[11,"eq","","",127,[[]]],[11,"eq","","",128,[[]]],[11,"eq","","",129,[[]]],[11,"eq","","",130,[[]]],[11,"eq","","",131,[[]]],[11,"eq","","",192,[[]]],[11,"eq","","",193,[[]]],[11,"partial_cmp","","",236,[[["lifetime",3]],[["option",4],["ordering",4]]]],[11,"deref","syn::token","",0,[[]]],[11,"deref","","",53,[[]]],[11,"deref","","",55,[[]]],[11,"deref","","",58,[[]]],[11,"deref","","",59,[[]]],[11,"deref","","",60,[[]]],[11,"deref","","",62,[[]]],[11,"deref","","",64,[[]]],[11,"deref","","",65,[[]]],[11,"deref","","",67,[[]]],[11,"deref","","",68,[[]]],[11,"deref","","",72,[[]]],[11,"deref","","",75,[[]]],[11,"deref","","",77,[[]]],[11,"deref","","",80,[[]]],[11,"deref","","",83,[[]]],[11,"deref","","",84,[[]]],[11,"deref","","",87,[[]]],[11,"deref","","",90,[[]]],[11,"deref","","",95,[[]]],[11,"deref","","",96,[[]]],[11,"deref","","",98,[[]]],[11,"deref","syn::parse","",113,[[]]],[11,"deref_mut","syn::token","",0,[[]]],[11,"deref_mut","","",53,[[]]],[11,"deref_mut","","",55,[[]]],[11,"deref_mut","","",58,[[]]],[11,"deref_mut","","",59,[[]]],[11,"deref_mut","","",60,[[]]],[11,"deref_mut","","",62,[[]]],[11,"deref_mut","","",64,[[]]],[11,"deref_mut","","",65,[[]]],[11,"deref_mut","","",67,[[]]],[11,"deref_mut","","",68,[[]]],[11,"deref_mut","","",72,[[]]],[11,"deref_mut","","",75,[[]]],[11,"deref_mut","","",77,[[]]],[11,"deref_mut","","",80,[[]]],[11,"deref_mut","","",83,[[]]],[11,"deref_mut","","",84,[[]]],[11,"deref_mut","","",87,[[]]],[11,"deref_mut","","",90,[[]]],[11,"deref_mut","","",95,[[]]],[11,"deref_mut","","",96,[[]]],[11,"deref_mut","","",98,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",298,[[["formatter",3]],["result",6]]],[11,"fmt","","",299,[[["formatter",3]],["result",6]]],[11,"fmt","","",300,[[["formatter",3]],["result",6]]],[11,"fmt","","",301,[[["formatter",3]],["result",6]]],[11,"fmt","","",302,[[["formatter",3]],["result",6]]],[11,"fmt","","",303,[[["formatter",3]],["result",6]]],[11,"fmt","","",304,[[["formatter",3]],["result",6]]],[11,"fmt","","",305,[[["formatter",3]],["result",6]]],[11,"fmt","","",306,[[["formatter",3]],["result",6]]],[11,"fmt","","",238,[[["formatter",3]],["result",6]]],[11,"fmt","syn::punctuated","",106,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",252,[[["formatter",3]],["result",6]]],[11,"fmt","","",288,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",253,[[["formatter",3]],["result",6]]],[11,"fmt","","",247,[[["formatter",3]],["result",6]]],[11,"fmt","","",289,[[["formatter",3]],["result",6]]],[11,"fmt","","",249,[[["formatter",3]],["result",6]]],[11,"fmt","","",180,[[["formatter",3]],["result",6]]],[11,"fmt","","",181,[[["formatter",3]],["result",6]]],[11,"fmt","","",290,[[["formatter",3]],["result",6]]],[11,"fmt","","",242,[[["formatter",3]],["result",6]]],[11,"fmt","","",243,[[["formatter",3]],["result",6]]],[11,"fmt","","",244,[[["formatter",3]],["result",6]]],[11,"fmt","","",245,[[["formatter",3]],["result",6]]],[11,"fmt","","",246,[[["formatter",3]],["result",6]]],[11,"fmt","","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",162,[[["formatter",3]],["result",6]]],[11,"fmt","","",163,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","","",165,[[["formatter",3]],["result",6]]],[11,"fmt","","",166,[[["formatter",3]],["result",6]]],[11,"fmt","","",167,[[["formatter",3]],["result",6]]],[11,"fmt","","",168,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",171,[[["formatter",3]],["result",6]]],[11,"fmt","","",172,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","","",177,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",271,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",235,[[["formatter",3]],["result",6]]],[11,"fmt","","",194,[[["formatter",3]],["result",6]]],[11,"fmt","","",195,[[["formatter",3]],["result",6]]],[11,"fmt","","",196,[[["formatter",3]],["result",6]]],[11,"fmt","","",197,[[["formatter",3]],["result",6]]],[11,"fmt","","",198,[[["formatter",3]],["result",6]]],[11,"fmt","","",199,[[["formatter",3]],["result",6]]],[11,"fmt","","",291,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",182,[[["formatter",3]],["result",6]]],[11,"fmt","","",183,[[["formatter",3]],["result",6]]],[11,"fmt","","",200,[[["formatter",3]],["result",6]]],[11,"fmt","","",201,[[["formatter",3]],["result",6]]],[11,"fmt","","",202,[[["formatter",3]],["result",6]]],[11,"fmt","","",203,[[["formatter",3]],["result",6]]],[11,"fmt","","",204,[[["formatter",3]],["result",6]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"fmt","","",205,[[["formatter",3]],["result",6]]],[11,"fmt","","",206,[[["formatter",3]],["result",6]]],[11,"fmt","","",207,[[["formatter",3]],["result",6]]],[11,"fmt","","",208,[[["formatter",3]],["result",6]]],[11,"fmt","","",209,[[["formatter",3]],["result",6]]],[11,"fmt","","",210,[[["formatter",3]],["result",6]]],[11,"fmt","","",211,[[["formatter",3]],["result",6]]],[11,"fmt","","",212,[[["formatter",3]],["result",6]]],[11,"fmt","","",213,[[["formatter",3]],["result",6]]],[11,"fmt","","",214,[[["formatter",3]],["result",6]]],[11,"fmt","","",215,[[["formatter",3]],["result",6]]],[11,"fmt","","",216,[[["formatter",3]],["result",6]]],[11,"fmt","","",217,[[["formatter",3]],["result",6]]],[11,"fmt","","",218,[[["formatter",3]],["result",6]]],[11,"fmt","","",219,[[["formatter",3]],["result",6]]],[11,"fmt","","",220,[[["formatter",3]],["result",6]]],[11,"fmt","","",221,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",236,[[["formatter",3]],["result",6]]],[11,"fmt","","",184,[[["formatter",3]],["result",6]]],[11,"fmt","","",237,[[["formatter",3]],["result",6]]],[11,"fmt","","",250,[[["formatter",3]],["result",6]]],[11,"fmt","","",240,[[["formatter",3]],["result",6]]],[11,"fmt","","",241,[[["formatter",3]],["result",6]]],[11,"fmt","","",179,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",292,[[["formatter",3]],["result",6]]],[11,"fmt","","",272,[[["formatter",3]],["result",6]]],[11,"fmt","","",273,[[["formatter",3]],["result",6]]],[11,"fmt","","",274,[[["formatter",3]],["result",6]]],[11,"fmt","","",275,[[["formatter",3]],["result",6]]],[11,"fmt","","",276,[[["formatter",3]],["result",6]]],[11,"fmt","","",277,[[["formatter",3]],["result",6]]],[11,"fmt","","",278,[[["formatter",3]],["result",6]]],[11,"fmt","","",279,[[["formatter",3]],["result",6]]],[11,"fmt","","",280,[[["formatter",3]],["result",6]]],[11,"fmt","","",281,[[["formatter",3]],["result",6]]],[11,"fmt","","",282,[[["formatter",3]],["result",6]]],[11,"fmt","","",283,[[["formatter",3]],["result",6]]],[11,"fmt","","",284,[[["formatter",3]],["result",6]]],[11,"fmt","","",285,[[["formatter",3]],["result",6]]],[11,"fmt","","",286,[[["formatter",3]],["result",6]]],[11,"fmt","","",287,[[["formatter",3]],["result",6]]],[11,"fmt","","",293,[[["formatter",3]],["result",6]]],[11,"fmt","","",294,[[["formatter",3]],["result",6]]],[11,"fmt","","",295,[[["formatter",3]],["result",6]]],[11,"fmt","","",185,[[["formatter",3]],["result",6]]],[11,"fmt","","",186,[[["formatter",3]],["result",6]]],[11,"fmt","","",187,[[["formatter",3]],["result",6]]],[11,"fmt","","",296,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",222,[[["formatter",3]],["result",6]]],[11,"fmt","","",254,[[["formatter",3]],["result",6]]],[11,"fmt","","",223,[[["formatter",3]],["result",6]]],[11,"fmt","","",251,[[["formatter",3]],["result",6]]],[11,"fmt","","",188,[[["formatter",3]],["result",6]]],[11,"fmt","","",189,[[["formatter",3]],["result",6]]],[11,"fmt","","",224,[[["formatter",3]],["result",6]]],[11,"fmt","","",225,[[["formatter",3]],["result",6]]],[11,"fmt","","",226,[[["formatter",3]],["result",6]]],[11,"fmt","","",227,[[["formatter",3]],["result",6]]],[11,"fmt","","",228,[[["formatter",3]],["result",6]]],[11,"fmt","","",255,[[["formatter",3]],["result",6]]],[11,"fmt","","",256,[[["formatter",3]],["result",6]]],[11,"fmt","","",257,[[["formatter",3]],["result",6]]],[11,"fmt","","",258,[[["formatter",3]],["result",6]]],[11,"fmt","","",259,[[["formatter",3]],["result",6]]],[11,"fmt","","",260,[[["formatter",3]],["result",6]]],[11,"fmt","","",261,[[["formatter",3]],["result",6]]],[11,"fmt","","",262,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","","",191,[[["formatter",3]],["result",6]]],[11,"fmt","","",263,[[["formatter",3]],["result",6]]],[11,"fmt","","",264,[[["formatter",3]],["result",6]]],[11,"fmt","","",265,[[["formatter",3]],["result",6]]],[11,"fmt","","",266,[[["formatter",3]],["result",6]]],[11,"fmt","","",267,[[["formatter",3]],["result",6]]],[11,"fmt","","",268,[[["formatter",3]],["result",6]]],[11,"fmt","","",269,[[["formatter",3]],["result",6]]],[11,"fmt","","",248,[[["formatter",3]],["result",6]]],[11,"fmt","","",229,[[["formatter",3]],["result",6]]],[11,"fmt","","",230,[[["formatter",3]],["result",6]]],[11,"fmt","","",231,[[["formatter",3]],["result",6]]],[11,"fmt","","",232,[[["formatter",3]],["result",6]]],[11,"fmt","","",233,[[["formatter",3]],["result",6]]],[11,"fmt","","",234,[[["formatter",3]],["result",6]]],[11,"fmt","","",270,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",192,[[["formatter",3]],["result",6]]],[11,"fmt","","",193,[[["formatter",3]],["result",6]]],[11,"fmt","syn::parse","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",236,[[["formatter",3]],["result",6]]],[11,"fmt","","",305,[[["formatter",3]],["result",6]]],[11,"fmt","","",306,[[["formatter",3]],["result",6]]],[11,"fmt","syn::parse","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"index","syn::punctuated","",106,[[]]],[11,"index_mut","","",106,[[]]],[11,"hash","syn::token","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",34,[[]]],[11,"hash","","",35,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","","",39,[[]]],[11,"hash","","",40,[[]]],[11,"hash","","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",55,[[]]],[11,"hash","","",56,[[]]],[11,"hash","","",57,[[]]],[11,"hash","","",58,[[]]],[11,"hash","","",59,[[]]],[11,"hash","","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",63,[[]]],[11,"hash","","",64,[[]]],[11,"hash","","",65,[[]]],[11,"hash","","",66,[[]]],[11,"hash","","",67,[[]]],[11,"hash","","",68,[[]]],[11,"hash","","",69,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",71,[[]]],[11,"hash","","",72,[[]]],[11,"hash","","",73,[[]]],[11,"hash","","",74,[[]]],[11,"hash","","",75,[[]]],[11,"hash","","",76,[[]]],[11,"hash","","",77,[[]]],[11,"hash","","",78,[[]]],[11,"hash","","",79,[[]]],[11,"hash","","",80,[[]]],[11,"hash","","",81,[[]]],[11,"hash","","",82,[[]]],[11,"hash","","",83,[[]]],[11,"hash","","",84,[[]]],[11,"hash","","",85,[[]]],[11,"hash","","",86,[[]]],[11,"hash","","",87,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","","",91,[[]]],[11,"hash","","",92,[[]]],[11,"hash","","",93,[[]]],[11,"hash","","",94,[[]]],[11,"hash","","",95,[[]]],[11,"hash","","",96,[[]]],[11,"hash","","",97,[[]]],[11,"hash","","",98,[[]]],[11,"hash","","",99,[[]]],[11,"hash","","",100,[[]]],[11,"hash","","",101,[[]]],[11,"hash","","",102,[[]]],[11,"hash","syn","",179,[[]]],[11,"hash","","",178,[[]]],[11,"hash","","",298,[[]]],[11,"hash","","",299,[[]]],[11,"hash","","",300,[[]]],[11,"hash","","",236,[[]]],[11,"hash","","",301,[[]]],[11,"hash","","",302,[[]]],[11,"hash","","",303,[[]]],[11,"hash","","",304,[[]]],[11,"hash","","",305,[[]]],[11,"hash","","",306,[[]]],[11,"hash","syn::punctuated","",106,[[]]],[11,"hash","syn","",252,[[]]],[11,"hash","","",288,[[]]],[11,"hash","","",132,[[]]],[11,"hash","","",117,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",253,[[]]],[11,"hash","","",247,[[]]],[11,"hash","","",289,[[]]],[11,"hash","","",249,[[]]],[11,"hash","","",180,[[]]],[11,"hash","","",181,[[]]],[11,"hash","","",290,[[]]],[11,"hash","","",242,[[]]],[11,"hash","","",243,[[]]],[11,"hash","","",244,[[]]],[11,"hash","","",245,[[]]],[11,"hash","","",246,[[]]],[11,"hash","","",138,[[]]],[11,"hash","","",139,[[]]],[11,"hash","","",140,[[]]],[11,"hash","","",141,[[]]],[11,"hash","","",142,[[]]],[11,"hash","","",143,[[]]],[11,"hash","","",144,[[]]],[11,"hash","","",145,[[]]],[11,"hash","","",146,[[]]],[11,"hash","","",147,[[]]],[11,"hash","","",148,[[]]],[11,"hash","","",149,[[]]],[11,"hash","","",150,[[]]],[11,"hash","","",151,[[]]],[11,"hash","","",152,[[]]],[11,"hash","","",153,[[]]],[11,"hash","","",154,[[]]],[11,"hash","","",155,[[]]],[11,"hash","","",156,[[]]],[11,"hash","","",157,[[]]],[11,"hash","","",158,[[]]],[11,"hash","","",159,[[]]],[11,"hash","","",160,[[]]],[11,"hash","","",161,[[]]],[11,"hash","","",162,[[]]],[11,"hash","","",163,[[]]],[11,"hash","","",164,[[]]],[11,"hash","","",165,[[]]],[11,"hash","","",166,[[]]],[11,"hash","","",167,[[]]],[11,"hash","","",168,[[]]],[11,"hash","","",169,[[]]],[11,"hash","","",170,[[]]],[11,"hash","","",171,[[]]],[11,"hash","","",172,[[]]],[11,"hash","","",173,[[]]],[11,"hash","","",174,[[]]],[11,"hash","","",175,[[]]],[11,"hash","","",176,[[]]],[11,"hash","","",177,[[]]],[11,"hash","","",123,[[]]],[11,"hash","","",271,[[]]],[11,"hash","","",133,[[]]],[11,"hash","","",124,[[]]],[11,"hash","","",125,[[]]],[11,"hash","","",126,[[]]],[11,"hash","","",235,[[]]],[11,"hash","","",194,[[]]],[11,"hash","","",195,[[]]],[11,"hash","","",196,[[]]],[11,"hash","","",197,[[]]],[11,"hash","","",198,[[]]],[11,"hash","","",199,[[]]],[11,"hash","","",291,[[]]],[11,"hash","","",134,[[]]],[11,"hash","","",182,[[]]],[11,"hash","","",183,[[]]],[11,"hash","","",200,[[]]],[11,"hash","","",201,[[]]],[11,"hash","","",202,[[]]],[11,"hash","","",203,[[]]],[11,"hash","","",204,[[]]],[11,"hash","","",205,[[]]],[11,"hash","","",206,[[]]],[11,"hash","","",207,[[]]],[11,"hash","","",208,[[]]],[11,"hash","","",209,[[]]],[11,"hash","","",210,[[]]],[11,"hash","","",211,[[]]],[11,"hash","","",212,[[]]],[11,"hash","","",213,[[]]],[11,"hash","","",214,[[]]],[11,"hash","","",215,[[]]],[11,"hash","","",216,[[]]],[11,"hash","","",217,[[]]],[11,"hash","","",218,[[]]],[11,"hash","","",219,[[]]],[11,"hash","","",220,[[]]],[11,"hash","","",221,[[]]],[11,"hash","","",135,[[]]],[11,"hash","","",184,[[]]],[11,"hash","","",237,[[]]],[11,"hash","","",238,[[]]],[11,"hash","","",250,[[]]],[11,"hash","","",240,[[]]],[11,"hash","","",241,[[]]],[11,"hash","","",119,[[]]],[11,"hash","","",120,[[]]],[11,"hash","","",121,[[]]],[11,"hash","","",136,[[]]],[11,"hash","","",122,[[]]],[11,"hash","","",292,[[]]],[11,"hash","","",272,[[]]],[11,"hash","","",273,[[]]],[11,"hash","","",274,[[]]],[11,"hash","","",275,[[]]],[11,"hash","","",276,[[]]],[11,"hash","","",277,[[]]],[11,"hash","","",278,[[]]],[11,"hash","","",279,[[]]],[11,"hash","","",280,[[]]],[11,"hash","","",281,[[]]],[11,"hash","","",282,[[]]],[11,"hash","","",283,[[]]],[11,"hash","","",284,[[]]],[11,"hash","","",285,[[]]],[11,"hash","","",286,[[]]],[11,"hash","","",287,[[]]],[11,"hash","","",293,[[]]],[11,"hash","","",294,[[]]],[11,"hash","","",295,[[]]],[11,"hash","","",185,[[]]],[11,"hash","","",186,[[]]],[11,"hash","","",187,[[]]],[11,"hash","","",296,[[]]],[11,"hash","","",137,[[]]],[11,"hash","","",222,[[]]],[11,"hash","","",254,[[]]],[11,"hash","","",223,[[]]],[11,"hash","","",251,[[]]],[11,"hash","","",188,[[]]],[11,"hash","","",189,[[]]],[11,"hash","","",224,[[]]],[11,"hash","","",225,[[]]],[11,"hash","","",226,[[]]],[11,"hash","","",227,[[]]],[11,"hash","","",228,[[]]],[11,"hash","","",255,[[]]],[11,"hash","","",256,[[]]],[11,"hash","","",257,[[]]],[11,"hash","","",258,[[]]],[11,"hash","","",259,[[]]],[11,"hash","","",260,[[]]],[11,"hash","","",261,[[]]],[11,"hash","","",262,[[]]],[11,"hash","","",190,[[]]],[11,"hash","","",191,[[]]],[11,"hash","","",263,[[]]],[11,"hash","","",264,[[]]],[11,"hash","","",265,[[]]],[11,"hash","","",266,[[]]],[11,"hash","","",267,[[]]],[11,"hash","","",268,[[]]],[11,"hash","","",269,[[]]],[11,"hash","","",248,[[]]],[11,"hash","","",229,[[]]],[11,"hash","","",230,[[]]],[11,"hash","","",231,[[]]],[11,"hash","","",232,[[]]],[11,"hash","","",233,[[]]],[11,"hash","","",234,[[]]],[11,"hash","","",270,[[]]],[11,"hash","","",127,[[]]],[11,"hash","","",128,[[]]],[11,"hash","","",129,[[]]],[11,"hash","","",130,[[]]],[11,"hash","","",131,[[]]],[11,"hash","","",192,[[]]],[11,"hash","","",193,[[]]],[11,"from_iter","syn::punctuated","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"to_tokens","syn::token","",0,[[["tokenstream",3]]]],[11,"to_tokens","","",1,[[["tokenstream",3]]]],[11,"to_tokens","","",2,[[["tokenstream",3]]]],[11,"to_tokens","","",3,[[["tokenstream",3]]]],[11,"to_tokens","","",4,[[["tokenstream",3]]]],[11,"to_tokens","","",5,[[["tokenstream",3]]]],[11,"to_tokens","","",6,[[["tokenstream",3]]]],[11,"to_tokens","","",7,[[["tokenstream",3]]]],[11,"to_tokens","","",8,[[["tokenstream",3]]]],[11,"to_tokens","","",9,[[["tokenstream",3]]]],[11,"to_tokens","","",10,[[["tokenstream",3]]]],[11,"to_tokens","","",11,[[["tokenstream",3]]]],[11,"to_tokens","","",12,[[["tokenstream",3]]]],[11,"to_tokens","","",13,[[["tokenstream",3]]]],[11,"to_tokens","","",14,[[["tokenstream",3]]]],[11,"to_tokens","","",15,[[["tokenstream",3]]]],[11,"to_tokens","","",16,[[["tokenstream",3]]]],[11,"to_tokens","","",17,[[["tokenstream",3]]]],[11,"to_tokens","","",18,[[["tokenstream",3]]]],[11,"to_tokens","","",19,[[["tokenstream",3]]]],[11,"to_tokens","","",20,[[["tokenstream",3]]]],[11,"to_tokens","","",21,[[["tokenstream",3]]]],[11,"to_tokens","","",22,[[["tokenstream",3]]]],[11,"to_tokens","","",23,[[["tokenstream",3]]]],[11,"to_tokens","","",24,[[["tokenstream",3]]]],[11,"to_tokens","","",25,[[["tokenstream",3]]]],[11,"to_tokens","","",26,[[["tokenstream",3]]]],[11,"to_tokens","","",27,[[["tokenstream",3]]]],[11,"to_tokens","","",28,[[["tokenstream",3]]]],[11,"to_tokens","","",29,[[["tokenstream",3]]]],[11,"to_tokens","","",30,[[["tokenstream",3]]]],[11,"to_tokens","","",31,[[["tokenstream",3]]]],[11,"to_tokens","","",32,[[["tokenstream",3]]]],[11,"to_tokens","","",33,[[["tokenstream",3]]]],[11,"to_tokens","","",34,[[["tokenstream",3]]]],[11,"to_tokens","","",35,[[["tokenstream",3]]]],[11,"to_tokens","","",36,[[["tokenstream",3]]]],[11,"to_tokens","","",37,[[["tokenstream",3]]]],[11,"to_tokens","","",38,[[["tokenstream",3]]]],[11,"to_tokens","","",39,[[["tokenstream",3]]]],[11,"to_tokens","","",40,[[["tokenstream",3]]]],[11,"to_tokens","","",41,[[["tokenstream",3]]]],[11,"to_tokens","","",42,[[["tokenstream",3]]]],[11,"to_tokens","","",43,[[["tokenstream",3]]]],[11,"to_tokens","","",44,[[["tokenstream",3]]]],[11,"to_tokens","","",45,[[["tokenstream",3]]]],[11,"to_tokens","","",46,[[["tokenstream",3]]]],[11,"to_tokens","","",47,[[["tokenstream",3]]]],[11,"to_tokens","","",48,[[["tokenstream",3]]]],[11,"to_tokens","","",49,[[["tokenstream",3]]]],[11,"to_tokens","","",50,[[["tokenstream",3]]]],[11,"to_tokens","","",51,[[["tokenstream",3]]]],[11,"to_tokens","","",52,[[["tokenstream",3]]]],[11,"to_tokens","","",53,[[["tokenstream",3]]]],[11,"to_tokens","","",54,[[["tokenstream",3]]]],[11,"to_tokens","","",55,[[["tokenstream",3]]]],[11,"to_tokens","","",56,[[["tokenstream",3]]]],[11,"to_tokens","","",57,[[["tokenstream",3]]]],[11,"to_tokens","","",58,[[["tokenstream",3]]]],[11,"to_tokens","","",59,[[["tokenstream",3]]]],[11,"to_tokens","","",60,[[["tokenstream",3]]]],[11,"to_tokens","","",61,[[["tokenstream",3]]]],[11,"to_tokens","","",62,[[["tokenstream",3]]]],[11,"to_tokens","","",63,[[["tokenstream",3]]]],[11,"to_tokens","","",64,[[["tokenstream",3]]]],[11,"to_tokens","","",65,[[["tokenstream",3]]]],[11,"to_tokens","","",66,[[["tokenstream",3]]]],[11,"to_tokens","","",67,[[["tokenstream",3]]]],[11,"to_tokens","","",68,[[["tokenstream",3]]]],[11,"to_tokens","","",69,[[["tokenstream",3]]]],[11,"to_tokens","","",70,[[["tokenstream",3]]]],[11,"to_tokens","","",71,[[["tokenstream",3]]]],[11,"to_tokens","","",72,[[["tokenstream",3]]]],[11,"to_tokens","","",73,[[["tokenstream",3]]]],[11,"to_tokens","","",74,[[["tokenstream",3]]]],[11,"to_tokens","","",75,[[["tokenstream",3]]]],[11,"to_tokens","","",76,[[["tokenstream",3]]]],[11,"to_tokens","","",77,[[["tokenstream",3]]]],[11,"to_tokens","","",78,[[["tokenstream",3]]]],[11,"to_tokens","","",79,[[["tokenstream",3]]]],[11,"to_tokens","","",80,[[["tokenstream",3]]]],[11,"to_tokens","","",81,[[["tokenstream",3]]]],[11,"to_tokens","","",82,[[["tokenstream",3]]]],[11,"to_tokens","","",83,[[["tokenstream",3]]]],[11,"to_tokens","","",84,[[["tokenstream",3]]]],[11,"to_tokens","","",85,[[["tokenstream",3]]]],[11,"to_tokens","","",86,[[["tokenstream",3]]]],[11,"to_tokens","","",87,[[["tokenstream",3]]]],[11,"to_tokens","","",88,[[["tokenstream",3]]]],[11,"to_tokens","","",89,[[["tokenstream",3]]]],[11,"to_tokens","","",90,[[["tokenstream",3]]]],[11,"to_tokens","","",91,[[["tokenstream",3]]]],[11,"to_tokens","","",92,[[["tokenstream",3]]]],[11,"to_tokens","","",93,[[["tokenstream",3]]]],[11,"to_tokens","","",94,[[["tokenstream",3]]]],[11,"to_tokens","","",95,[[["tokenstream",3]]]],[11,"to_tokens","","",96,[[["tokenstream",3]]]],[11,"to_tokens","","",97,[[["tokenstream",3]]]],[11,"to_tokens","","",98,[[["tokenstream",3]]]],[11,"to_tokens","syn","",119,[[["tokenstream",3]]]],[11,"to_tokens","","",122,[[["tokenstream",3]]]],[11,"to_tokens","","",118,[[["tokenstream",3]]]],[11,"to_tokens","","",120,[[["tokenstream",3]]]],[11,"to_tokens","","",121,[[["tokenstream",3]]]],[11,"to_tokens","","",124,[[["tokenstream",3]]]],[11,"to_tokens","","",131,[[["tokenstream",3]]]],[11,"to_tokens","","",127,[[["tokenstream",3]]]],[11,"to_tokens","","",125,[[["tokenstream",3]]]],[11,"to_tokens","","",126,[[["tokenstream",3]]]],[11,"to_tokens","","",123,[[["tokenstream",3]]]],[11,"to_tokens","","",129,[[["tokenstream",3]]]],[11,"to_tokens","","",128,[[["tokenstream",3]]]],[11,"to_tokens","","",130,[[["tokenstream",3]]]],[11,"to_tokens","","",138,[[["tokenstream",3]]]],[11,"to_tokens","","",146,[[["tokenstream",3]]]],[11,"to_tokens","","",139,[[["tokenstream",3]]]],[11,"to_tokens","","",148,[[["tokenstream",3]]]],[11,"to_tokens","","",162,[[["tokenstream",3]]]],[11,"to_tokens","","",136,[[["tokenstream",3]]]],[11,"to_tokens","","",134,[[["tokenstream",3]]]],[11,"to_tokens","","",172,[[["tokenstream",3]]]],[11,"to_tokens","","",144,[[["tokenstream",3]]]],[11,"to_tokens","","",174,[[["tokenstream",3]]]],[11,"to_tokens","","",158,[[["tokenstream",3]]]],[11,"to_tokens","","",149,[[["tokenstream",3]]]],[11,"to_tokens","","",173,[[["tokenstream",3]]]],[11,"to_tokens","","",157,[[["tokenstream",3]]]],[11,"to_tokens","","",155,[[["tokenstream",3]]]],[11,"to_tokens","","",176,[[["tokenstream",3]]]],[11,"to_tokens","","",153,[[["tokenstream",3]]]],[11,"to_tokens","","",159,[[["tokenstream",3]]]],[11,"to_tokens","","",161,[[["tokenstream",3]]]],[11,"to_tokens","","",142,[[["tokenstream",3]]]],[11,"to_tokens","","",143,[[["tokenstream",3]]]],[11,"to_tokens","","",171,[[["tokenstream",3]]]],[11,"to_tokens","","",177,[[["tokenstream",3]]]],[11,"to_tokens","","",150,[[["tokenstream",3]]]],[11,"to_tokens","","",175,[[["tokenstream",3]]]],[11,"to_tokens","","",145,[[["tokenstream",3]]]],[11,"to_tokens","","",140,[[["tokenstream",3]]]],[11,"to_tokens","","",141,[[["tokenstream",3]]]],[11,"to_tokens","","",152,[[["tokenstream",3]]]],[11,"to_tokens","","",179,[[["tokenstream",3]]]],[11,"to_tokens","","",178,[[["tokenstream",3]]]],[11,"to_tokens","","",156,[[["tokenstream",3]]]],[11,"to_tokens","","",165,[[["tokenstream",3]]]],[11,"to_tokens","","",164,[[["tokenstream",3]]]],[11,"to_tokens","","",166,[[["tokenstream",3]]]],[11,"to_tokens","","",147,[[["tokenstream",3]]]],[11,"to_tokens","","",151,[[["tokenstream",3]]]],[11,"to_tokens","","",168,[[["tokenstream",3]]]],[11,"to_tokens","","",160,[[["tokenstream",3]]]],[11,"to_tokens","","",169,[[["tokenstream",3]]]],[11,"to_tokens","","",167,[[["tokenstream",3]]]],[11,"to_tokens","","",154,[[["tokenstream",3]]]],[11,"to_tokens","","",163,[[["tokenstream",3]]]],[11,"to_tokens","","",170,[[["tokenstream",3]]]],[11,"to_tokens","","",135,[[["tokenstream",3]]]],[11,"to_tokens","","",133,[[["tokenstream",3]]]],[11,"to_tokens","","",132,[[["tokenstream",3]]]],[11,"to_tokens","","",182,[[["tokenstream",3]]]],[11,"to_tokens","","",191,[[["tokenstream",3]]]],[11,"to_tokens","","",193,[[["tokenstream",3]]]],[11,"to_tokens","","",183,[[["tokenstream",3]]]],[11,"to_tokens","","",298,[[["tokenstream",3]]]],[11,"to_tokens","","",299,[[["tokenstream",3]]]],[11,"to_tokens","","",300,[[["tokenstream",3]]]],[11,"to_tokens","","",180,[[["tokenstream",3]]]],[11,"to_tokens","","",184,[[["tokenstream",3]]]],[11,"to_tokens","","",190,[[["tokenstream",3]]]],[11,"to_tokens","","",188,[[["tokenstream",3]]]],[11,"to_tokens","","",189,[[["tokenstream",3]]]],[11,"to_tokens","","",181,[[["tokenstream",3]]]],[11,"to_tokens","","",192,[[["tokenstream",3]]]],[11,"to_tokens","","",187,[[["tokenstream",3]]]],[11,"to_tokens","","",186,[[["tokenstream",3]]]],[11,"to_tokens","","",185,[[["tokenstream",3]]]],[11,"to_tokens","","",205,[[["tokenstream",3]]]],[11,"to_tokens","","",234,[[["tokenstream",3]]]],[11,"to_tokens","","",195,[[["tokenstream",3]]]],[11,"to_tokens","","",224,[[["tokenstream",3]]]],[11,"to_tokens","","",200,[[["tokenstream",3]]]],[11,"to_tokens","","",194,[[["tokenstream",3]]]],[11,"to_tokens","","",208,[[["tokenstream",3]]]],[11,"to_tokens","","",221,[[["tokenstream",3]]]],[11,"to_tokens","","",215,[[["tokenstream",3]]]],[11,"to_tokens","","",206,[[["tokenstream",3]]]],[11,"to_tokens","","",209,[[["tokenstream",3]]]],[11,"to_tokens","","",214,[[["tokenstream",3]]]],[11,"to_tokens","","",210,[[["tokenstream",3]]]],[11,"to_tokens","","",219,[[["tokenstream",3]]]],[11,"to_tokens","","",207,[[["tokenstream",3]]]],[11,"to_tokens","","",216,[[["tokenstream",3]]]],[11,"to_tokens","","",220,[[["tokenstream",3]]]],[11,"to_tokens","","",217,[[["tokenstream",3]]]],[11,"to_tokens","","",218,[[["tokenstream",3]]]],[11,"to_tokens","","",211,[[["tokenstream",3]]]],[11,"to_tokens","","",212,[[["tokenstream",3]]]],[11,"to_tokens","","",213,[[["tokenstream",3]]]],[11,"to_tokens","","",232,[[["tokenstream",3]]]],[11,"to_tokens","","",231,[[["tokenstream",3]]]],[11,"to_tokens","","",233,[[["tokenstream",3]]]],[11,"to_tokens","","",229,[[["tokenstream",3]]]],[11,"to_tokens","","",230,[[["tokenstream",3]]]],[11,"to_tokens","","",225,[[["tokenstream",3]]]],[11,"to_tokens","","",227,[[["tokenstream",3]]]],[11,"to_tokens","","",228,[[["tokenstream",3]]]],[11,"to_tokens","","",226,[[["tokenstream",3]]]],[11,"to_tokens","","",201,[[["tokenstream",3]]]],[11,"to_tokens","","",203,[[["tokenstream",3]]]],[11,"to_tokens","","",204,[[["tokenstream",3]]]],[11,"to_tokens","","",202,[[["tokenstream",3]]]],[11,"to_tokens","","",196,[[["tokenstream",3]]]],[11,"to_tokens","","",198,[[["tokenstream",3]]]],[11,"to_tokens","","",199,[[["tokenstream",3]]]],[11,"to_tokens","","",197,[[["tokenstream",3]]]],[11,"to_tokens","","",223,[[["tokenstream",3]]]],[11,"to_tokens","","",222,[[["tokenstream",3]]]],[11,"to_tokens","","",235,[[["tokenstream",3]]]],[11,"to_tokens","","",236,[[["tokenstream",3]]]],[11,"to_tokens","","",237,[[["tokenstream",3]]]],[11,"to_tokens","","",301,[[["tokenstream",3]]]],[11,"to_tokens","","",302,[[["tokenstream",3]]]],[11,"to_tokens","","",303,[[["tokenstream",3]]]],[11,"to_tokens","","",304,[[["tokenstream",3]]]],[11,"to_tokens","","",305,[[["tokenstream",3]]]],[11,"to_tokens","","",306,[[["tokenstream",3]]]],[11,"to_tokens","","",238,[[["tokenstream",3]]]],[11,"to_tokens","","",240,[[["tokenstream",3]]]],[11,"to_tokens","","",246,[[["tokenstream",3]]]],[11,"to_tokens","","",247,[[["tokenstream",3]]]],[11,"to_tokens","","",248,[[["tokenstream",3]]]],[11,"to_tokens","","",249,[[["tokenstream",3]]]],[11,"to_tokens","","",251,[[["tokenstream",3]]]],[11,"to_tokens","","",250,[[["tokenstream",3]]]],[11,"to_tokens","","",255,[[["tokenstream",3]]]],[11,"to_tokens","","",267,[[["tokenstream",3]]]],[11,"to_tokens","","",256,[[["tokenstream",3]]]],[11,"to_tokens","","",265,[[["tokenstream",3]]]],[11,"to_tokens","","",266,[[["tokenstream",3]]]],[11,"to_tokens","","",257,[[["tokenstream",3]]]],[11,"to_tokens","","",262,[[["tokenstream",3]]]],[11,"to_tokens","","",269,[[["tokenstream",3]]]],[11,"to_tokens","","",264,[[["tokenstream",3]]]],[11,"to_tokens","","",268,[[["tokenstream",3]]]],[11,"to_tokens","","",259,[[["tokenstream",3]]]],[11,"to_tokens","","",258,[[["tokenstream",3]]]],[11,"to_tokens","","",263,[[["tokenstream",3]]]],[11,"to_tokens","","",260,[[["tokenstream",3]]]],[11,"to_tokens","","",261,[[["tokenstream",3]]]],[11,"to_tokens","","",254,[[["tokenstream",3]]]],[11,"to_tokens","","",253,[[["tokenstream",3]]]],[11,"to_tokens","","",270,[[["tokenstream",3]]]],[11,"to_tokens","","",252,[[["tokenstream",3]]]],[11,"to_tokens","","",272,[[["tokenstream",3]]]],[11,"to_tokens","","",287,[[["tokenstream",3]]]],[11,"to_tokens","","",274,[[["tokenstream",3]]]],[11,"to_tokens","","",283,[[["tokenstream",3]]]],[11,"to_tokens","","",285,[[["tokenstream",3]]]],[11,"to_tokens","","",286,[[["tokenstream",3]]]],[11,"to_tokens","","",278,[[["tokenstream",3]]]],[11,"to_tokens","","",284,[[["tokenstream",3]]]],[11,"to_tokens","","",273,[[["tokenstream",3]]]],[11,"to_tokens","","",280,[[["tokenstream",3]]]],[11,"to_tokens","","",281,[[["tokenstream",3]]]],[11,"to_tokens","","",275,[[["tokenstream",3]]]],[11,"to_tokens","","",279,[[["tokenstream",3]]]],[11,"to_tokens","","",282,[[["tokenstream",3]]]],[11,"to_tokens","","",276,[[["tokenstream",3]]]],[11,"to_tokens","","",277,[[["tokenstream",3]]]],[11,"to_tokens","","",271,[[["tokenstream",3]]]],[11,"to_tokens","","",293,[[["tokenstream",3]]]],[11,"to_tokens","","",295,[[["tokenstream",3]]]],[11,"to_tokens","","",294,[[["tokenstream",3]]]],[11,"to_tokens","","",291,[[["tokenstream",3]]]],[11,"to_tokens","","",288,[[["tokenstream",3]]]],[11,"to_tokens","","",289,[[["tokenstream",3]]]],[11,"to_tokens","","",290,[[["tokenstream",3]]]],[11,"to_tokens","","",292,[[["tokenstream",3]]]],[11,"to_tokens","syn::punctuated","",106,[[["tokenstream",3]]]],[11,"to_tokens","","",107,[[["tokenstream",3]]]],[11,"fmt","syn","",179,[[["formatter",3]],["result",6]]],[11,"span","","",179,[[],[["option",4],["span",3]]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"span","","",178,[[],[["option",4],["span",3]]]],[11,"new","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …",297,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this <code>Ident</code>.",297,[[],["span",3]]],[11,"set_span","","Configures the span of this <code>Ident</code>, possibly changing its …",297,[[["span",3]]]],[11,"parse_meta","","Parses the content of the attribute, consisting of the …",118,[[],[["result",6],["meta",4]]]],[11,"parse_args","","Parse the arguments to the attribute as a syntax tree.",118,[[],[["parse",8],["result",6]]]],[11,"parse_args_with","","Parse the arguments to the attribute using the given …",118,[[["parser",8]],["result",6]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",118,[[["parsestream",6]],[["result",6],["vec",3]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",118,[[["parsestream",6]],[["result",6],["vec",3]]]],[11,"path","","Returns the identifier that begins this structured meta …",119,[[],["path",3]]],[11,"parse_named","","Parses a named (braced struct) field.",123,[[["parsestream",6]],["result",6]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",123,[[["parsestream",6]],["result",6]]],[11,"iter","","Get an iterator over the borrowed [<code>Field</code>] items in this …",124,[[],[["iter",3],["field",3]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [<code>Field</code>] items …",124,[[],[["field",3],["itermut",3]]]],[11,"len","","Returns the number of fields.",124,[[]]],[11,"is_empty","","Returns <code>true</code> if there are zero fields.",124,[[]]],[11,"parse_without_eager_brace","","An alternative to the primary <code>Expr::parse</code> parser (from the…",138,[[["parsestream",6]],[["expr",4],["result",6]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type …",183,[[],["typeparams",3]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type …",183,[[],["typeparamsmut",3]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the …",183,[[],["lifetimes",3]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the …",183,[[],["lifetimesmut",3]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant …",183,[[],["constparams",3]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the …",183,[[],["constparamsmut",3]]],[11,"make_where_clause","","Initializes an empty <code>where</code>-clause if there is not one …",183,[[],["whereclause",3]]],[11,"split_for_impl","","Split a type\'s generics into the pieces required for …",183,[[]]],[11,"as_turbofish","","Turn a type\'s generics like <code><X, Y></code> into a turbofish like …",299,[[],["turbofish",3]]],[11,"new","","",184,[[["lifetime",3]]]],[11,"receiver","","A method\'s <code>self</code> receiver, such as <code>&self</code> or <code>self: Box<Self></code>…",223,[[],[["option",4],["fnarg",4]]]],[11,"lifetime","","",222,[[],[["option",4],["lifetime",3]]]],[11,"new","","PanicsPanics if the lifetime does not conform to the …",236,[[["span",3]]]],[11,"span","","",236,[[],["span",3]]],[11,"set_span","","",236,[[["span",3]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",237,[[["literal",3]]]],[11,"suffix","","",237,[[]]],[11,"span","","",237,[[],["span",3]]],[11,"set_span","","",237,[[["span",3]]]],[11,"new","","",301,[[["span",3]]]],[11,"value","","",301,[[],["string",3]]],[11,"parse","","Parse a syntax tree node from the content of this string …",301,[[],[["parse",8],["result",6]]]],[11,"parse_with","","Invoke parser on the content of this string literal.",301,[[["parser",8]],["result",6]]],[11,"span","","",301,[[],["span",3]]],[11,"set_span","","",301,[[["span",3]]]],[11,"suffix","","",301,[[]]],[11,"new","","",302,[[["span",3]]]],[11,"value","","",302,[[],["vec",3]]],[11,"span","","",302,[[],["span",3]]],[11,"set_span","","",302,[[["span",3]]]],[11,"suffix","","",302,[[]]],[11,"new","","",303,[[["span",3]]]],[11,"value","","",303,[[]]],[11,"span","","",303,[[],["span",3]]],[11,"set_span","","",303,[[["span",3]]]],[11,"suffix","","",303,[[]]],[11,"new","","",304,[[["span",3]]]],[11,"value","","",304,[[]]],[11,"span","","",304,[[],["span",3]]],[11,"set_span","","",304,[[["span",3]]]],[11,"suffix","","",304,[[]]],[11,"new","","",305,[[["span",3]]]],[11,"base10_digits","","",305,[[]]],[11,"base10_parse","","Parses the literal into a selected number type.",305,[[],["result",6]]],[11,"suffix","","",305,[[]]],[11,"span","","",305,[[],["span",3]]],[11,"set_span","","",305,[[["span",3]]]],[11,"new","","",306,[[["span",3]]]],[11,"base10_digits","","",306,[[]]],[11,"base10_parse","","",306,[[],["result",6]]],[11,"suffix","","",306,[[]]],[11,"span","","",306,[[],["span",3]]],[11,"set_span","","",306,[[["span",3]]]],[11,"new","","",238,[[["span",3]]]],[11,"value","","",238,[[]]],[11,"span","","",238,[[],["span",3]]],[11,"set_span","","",238,[[["span",3]]]],[11,"parse_body","","Parse the tokens within the macro invocation\'s delimiters …",240,[[],[["parse",8],["result",6]]]],[11,"parse_body_with","","Parse the tokens within the macro invocation\'s delimiters …",240,[[["parser",8]],["result",6]]],[11,"parse_within","","Parse the body of a block as zero or more statements, …",249,[[["parsestream",6]],[["result",6],["vec",3]]]],[11,"without_plus","","In some positions, types may not contain the <code>+</code> character, …",255,[[["parsestream",6]],["result",6]]],[11,"without_plus","","",254,[[["parsestream",6]],["result",6]]],[11,"without_plus","","",268,[[["parsestream",6]],["result",6]]],[11,"parse_mod_style","","Parse a <code>Path</code> containing no path arguments on any of its …",293,[[["parsestream",6]],["result",6]]],[11,"is_ident","","Determines whether this is a path of length 1 equal to …",293,[[]]],[11,"get_ident","","If this path consists of a single ident, returns the …",293,[[],[["ident",3],["option",4]]]],[11,"is_empty","","",294,[[]]],[11,"visit_abi","syn::visit","",109,[[["abi",3]]]],[11,"visit_angle_bracketed_generic_arguments","","",109,[[["anglebracketedgenericarguments",3]]]],[11,"visit_arm","","",109,[[["arm",3]]]],[11,"visit_attr_style","","",109,[[["attrstyle",4]]]],[11,"visit_attribute","","",109,[[["attribute",3]]]],[11,"visit_bare_fn_arg","","",109,[[["barefnarg",3]]]],[11,"visit_bin_op","","",109,[[["binop",4]]]],[11,"visit_binding","","",109,[[["binding",3]]]],[11,"visit_block","","",109,[[["block",3]]]],[11,"visit_bound_lifetimes","","",109,[[["boundlifetimes",3]]]],[11,"visit_const_param","","",109,[[["constparam",3]]]],[11,"visit_constraint","","",109,[[["constraint",3]]]],[11,"visit_data","","",109,[[["data",4]]]],[11,"visit_data_enum","","",109,[[["dataenum",3]]]],[11,"visit_data_struct","","",109,[[["datastruct",3]]]],[11,"visit_data_union","","",109,[[["dataunion",3]]]],[11,"visit_derive_input","","",109,[[["deriveinput",3]]]],[11,"visit_expr","","",109,[[["expr",4]]]],[11,"visit_expr_array","","",109,[[["exprarray",3]]]],[11,"visit_expr_assign","","",109,[[["exprassign",3]]]],[11,"visit_expr_assign_op","","",109,[[["exprassignop",3]]]],[11,"visit_expr_async","","",109,[[["exprasync",3]]]],[11,"visit_expr_await","","",109,[[["exprawait",3]]]],[11,"visit_expr_binary","","",109,[[["exprbinary",3]]]],[11,"visit_expr_block","","",109,[[["exprblock",3]]]],[11,"visit_expr_box","","",109,[[["exprbox",3]]]],[11,"visit_expr_break","","",109,[[["exprbreak",3]]]],[11,"visit_expr_call","","",109,[[["exprcall",3]]]],[11,"visit_expr_cast","","",109,[[["exprcast",3]]]],[11,"visit_expr_closure","","",109,[[["exprclosure",3]]]],[11,"visit_expr_continue","","",109,[[["exprcontinue",3]]]],[11,"visit_expr_field","","",109,[[["exprfield",3]]]],[11,"visit_expr_for_loop","","",109,[[["exprforloop",3]]]],[11,"visit_expr_group","","",109,[[["exprgroup",3]]]],[11,"visit_expr_if","","",109,[[["exprif",3]]]],[11,"visit_expr_index","","",109,[[["exprindex",3]]]],[11,"visit_expr_let","","",109,[[["exprlet",3]]]],[11,"visit_expr_lit","","",109,[[["exprlit",3]]]],[11,"visit_expr_loop","","",109,[[["exprloop",3]]]],[11,"visit_expr_macro","","",109,[[["exprmacro",3]]]],[11,"visit_expr_match","","",109,[[["exprmatch",3]]]],[11,"visit_expr_method_call","","",109,[[["exprmethodcall",3]]]],[11,"visit_expr_paren","","",109,[[["exprparen",3]]]],[11,"visit_expr_path","","",109,[[["exprpath",3]]]],[11,"visit_expr_range","","",109,[[["exprrange",3]]]],[11,"visit_expr_reference","","",109,[[["exprreference",3]]]],[11,"visit_expr_repeat","","",109,[[["exprrepeat",3]]]],[11,"visit_expr_return","","",109,[[["exprreturn",3]]]],[11,"visit_expr_struct","","",109,[[["exprstruct",3]]]],[11,"visit_expr_try","","",109,[[["exprtry",3]]]],[11,"visit_expr_try_block","","",109,[[["exprtryblock",3]]]],[11,"visit_expr_tuple","","",109,[[["exprtuple",3]]]],[11,"visit_expr_type","","",109,[[["exprtype",3]]]],[11,"visit_expr_unary","","",109,[[["exprunary",3]]]],[11,"visit_expr_unsafe","","",109,[[["exprunsafe",3]]]],[11,"visit_expr_while","","",109,[[["exprwhile",3]]]],[11,"visit_expr_yield","","",109,[[["expryield",3]]]],[11,"visit_field","","",109,[[["field",3]]]],[11,"visit_field_pat","","",109,[[["fieldpat",3]]]],[11,"visit_field_value","","",109,[[["fieldvalue",3]]]],[11,"visit_fields","","",109,[[["fields",4]]]],[11,"visit_fields_named","","",109,[[["fieldsnamed",3]]]],[11,"visit_fields_unnamed","","",109,[[["fieldsunnamed",3]]]],[11,"visit_file","","",109,[[["file",3]]]],[11,"visit_fn_arg","","",109,[[["fnarg",4]]]],[11,"visit_foreign_item","","",109,[[["foreignitem",4]]]],[11,"visit_foreign_item_fn","","",109,[[["foreignitemfn",3]]]],[11,"visit_foreign_item_macro","","",109,[[["foreignitemmacro",3]]]],[11,"visit_foreign_item_static","","",109,[[["foreignitemstatic",3]]]],[11,"visit_foreign_item_type","","",109,[[["foreignitemtype",3]]]],[11,"visit_generic_argument","","",109,[[["genericargument",4]]]],[11,"visit_generic_method_argument","","",109,[[["genericmethodargument",4]]]],[11,"visit_generic_param","","",109,[[["genericparam",4]]]],[11,"visit_generics","","",109,[[["generics",3]]]],[11,"visit_ident","","",109,[[["ident",3]]]],[11,"visit_impl_item","","",109,[[["implitem",4]]]],[11,"visit_impl_item_const","","",109,[[["implitemconst",3]]]],[11,"visit_impl_item_macro","","",109,[[["implitemmacro",3]]]],[11,"visit_impl_item_method","","",109,[[["implitemmethod",3]]]],[11,"visit_impl_item_type","","",109,[[["implitemtype",3]]]],[11,"visit_index","","",109,[[["index",3]]]],[11,"visit_item","","",109,[[["item",4]]]],[11,"visit_item_const","","",109,[[["itemconst",3]]]],[11,"visit_item_enum","","",109,[[["itemenum",3]]]],[11,"visit_item_extern_crate","","",109,[[["itemexterncrate",3]]]],[11,"visit_item_fn","","",109,[[["itemfn",3]]]],[11,"visit_item_foreign_mod","","",109,[[["itemforeignmod",3]]]],[11,"visit_item_impl","","",109,[[["itemimpl",3]]]],[11,"visit_item_macro","","",109,[[["itemmacro",3]]]],[11,"visit_item_macro2","","",109,[[["itemmacro2",3]]]],[11,"visit_item_mod","","",109,[[["itemmod",3]]]],[11,"visit_item_static","","",109,[[["itemstatic",3]]]],[11,"visit_item_struct","","",109,[[["itemstruct",3]]]],[11,"visit_item_trait","","",109,[[["itemtrait",3]]]],[11,"visit_item_trait_alias","","",109,[[["itemtraitalias",3]]]],[11,"visit_item_type","","",109,[[["itemtype",3]]]],[11,"visit_item_union","","",109,[[["itemunion",3]]]],[11,"visit_item_use","","",109,[[["itemuse",3]]]],[11,"visit_label","","",109,[[["label",3]]]],[11,"visit_lifetime","","",109,[[["lifetime",3]]]],[11,"visit_lifetime_def","","",109,[[["lifetimedef",3]]]],[11,"visit_lit","","",109,[[["lit",4]]]],[11,"visit_lit_bool","","",109,[[["litbool",3]]]],[11,"visit_lit_byte","","",109,[[["litbyte",3]]]],[11,"visit_lit_byte_str","","",109,[[["litbytestr",3]]]],[11,"visit_lit_char","","",109,[[["litchar",3]]]],[11,"visit_lit_float","","",109,[[["litfloat",3]]]],[11,"visit_lit_int","","",109,[[["litint",3]]]],[11,"visit_lit_str","","",109,[[["litstr",3]]]],[11,"visit_local","","",109,[[["local",3]]]],[11,"visit_macro","","",109,[[["macro",3]]]],[11,"visit_macro_delimiter","","",109,[[["macrodelimiter",4]]]],[11,"visit_member","","",109,[[["member",4]]]],[11,"visit_meta","","",109,[[["meta",4]]]],[11,"visit_meta_list","","",109,[[["metalist",3]]]],[11,"visit_meta_name_value","","",109,[[["metanamevalue",3]]]],[11,"visit_method_turbofish","","",109,[[["methodturbofish",3]]]],[11,"visit_nested_meta","","",109,[[["nestedmeta",4]]]],[11,"visit_parenthesized_generic_arguments","","",109,[[["parenthesizedgenericarguments",3]]]],[11,"visit_pat","","",109,[[["pat",4]]]],[11,"visit_pat_box","","",109,[[["patbox",3]]]],[11,"visit_pat_ident","","",109,[[["patident",3]]]],[11,"visit_pat_lit","","",109,[[["patlit",3]]]],[11,"visit_pat_macro","","",109,[[["patmacro",3]]]],[11,"visit_pat_or","","",109,[[["pator",3]]]],[11,"visit_pat_path","","",109,[[["patpath",3]]]],[11,"visit_pat_range","","",109,[[["patrange",3]]]],[11,"visit_pat_reference","","",109,[[["patreference",3]]]],[11,"visit_pat_rest","","",109,[[["patrest",3]]]],[11,"visit_pat_slice","","",109,[[["patslice",3]]]],[11,"visit_pat_struct","","",109,[[["patstruct",3]]]],[11,"visit_pat_tuple","","",109,[[["pattuple",3]]]],[11,"visit_pat_tuple_struct","","",109,[[["pattuplestruct",3]]]],[11,"visit_pat_type","","",109,[[["pattype",3]]]],[11,"visit_pat_wild","","",109,[[["patwild",3]]]],[11,"visit_path","","",109,[[["path",3]]]],[11,"visit_path_arguments","","",109,[[["patharguments",4]]]],[11,"visit_path_segment","","",109,[[["pathsegment",3]]]],[11,"visit_predicate_eq","","",109,[[["predicateeq",3]]]],[11,"visit_predicate_lifetime","","",109,[[["predicatelifetime",3]]]],[11,"visit_predicate_type","","",109,[[["predicatetype",3]]]],[11,"visit_qself","","",109,[[["qself",3]]]],[11,"visit_range_limits","","",109,[[["rangelimits",4]]]],[11,"visit_receiver","","",109,[[["receiver",3]]]],[11,"visit_return_type","","",109,[[["returntype",4]]]],[11,"visit_signature","","",109,[[["signature",3]]]],[11,"visit_span","","",109,[[["span",3]]]],[11,"visit_stmt","","",109,[[["stmt",4]]]],[11,"visit_trait_bound","","",109,[[["traitbound",3]]]],[11,"visit_trait_bound_modifier","","",109,[[["traitboundmodifier",4]]]],[11,"visit_trait_item","","",109,[[["traititem",4]]]],[11,"visit_trait_item_const","","",109,[[["traititemconst",3]]]],[11,"visit_trait_item_macro","","",109,[[["traititemmacro",3]]]],[11,"visit_trait_item_method","","",109,[[["traititemmethod",3]]]],[11,"visit_trait_item_type","","",109,[[["traititemtype",3]]]],[11,"visit_type","","",109,[[["type",4]]]],[11,"visit_type_array","","",109,[[["typearray",3]]]],[11,"visit_type_bare_fn","","",109,[[["typebarefn",3]]]],[11,"visit_type_group","","",109,[[["typegroup",3]]]],[11,"visit_type_impl_trait","","",109,[[["typeimpltrait",3]]]],[11,"visit_type_infer","","",109,[[["typeinfer",3]]]],[11,"visit_type_macro","","",109,[[["typemacro",3]]]],[11,"visit_type_never","","",109,[[["typenever",3]]]],[11,"visit_type_param","","",109,[[["typeparam",3]]]],[11,"visit_type_param_bound","","",109,[[["typeparambound",4]]]],[11,"visit_type_paren","","",109,[[["typeparen",3]]]],[11,"visit_type_path","","",109,[[["typepath",3]]]],[11,"visit_type_ptr","","",109,[[["typeptr",3]]]],[11,"visit_type_reference","","",109,[[["typereference",3]]]],[11,"visit_type_slice","","",109,[[["typeslice",3]]]],[11,"visit_type_trait_object","","",109,[[["typetraitobject",3]]]],[11,"visit_type_tuple","","",109,[[["typetuple",3]]]],[11,"visit_un_op","","",109,[[["unop",4]]]],[11,"visit_use_glob","","",109,[[["useglob",3]]]],[11,"visit_use_group","","",109,[[["usegroup",3]]]],[11,"visit_use_name","","",109,[[["usename",3]]]],[11,"visit_use_path","","",109,[[["usepath",3]]]],[11,"visit_use_rename","","",109,[[["userename",3]]]],[11,"visit_use_tree","","",109,[[["usetree",4]]]],[11,"visit_variadic","","",109,[[["variadic",3]]]],[11,"visit_variant","","",109,[[["variant",3]]]],[11,"visit_vis_crate","","",109,[[["viscrate",3]]]],[11,"visit_vis_public","","",109,[[["vispublic",3]]]],[11,"visit_vis_restricted","","",109,[[["visrestricted",3]]]],[11,"visit_visibility","","",109,[[["visibility",4]]]],[11,"visit_where_clause","","",109,[[["whereclause",3]]]],[11,"visit_where_predicate","","",109,[[["wherepredicate",4]]]],[11,"visit_abi_mut","syn::visit_mut","",110,[[["abi",3]]]],[11,"visit_angle_bracketed_generic_arguments_mut","","",110,[[["anglebracketedgenericarguments",3]]]],[11,"visit_arm_mut","","",110,[[["arm",3]]]],[11,"visit_attr_style_mut","","",110,[[["attrstyle",4]]]],[11,"visit_attribute_mut","","",110,[[["attribute",3]]]],[11,"visit_bare_fn_arg_mut","","",110,[[["barefnarg",3]]]],[11,"visit_bin_op_mut","","",110,[[["binop",4]]]],[11,"visit_binding_mut","","",110,[[["binding",3]]]],[11,"visit_block_mut","","",110,[[["block",3]]]],[11,"visit_bound_lifetimes_mut","","",110,[[["boundlifetimes",3]]]],[11,"visit_const_param_mut","","",110,[[["constparam",3]]]],[11,"visit_constraint_mut","","",110,[[["constraint",3]]]],[11,"visit_data_mut","","",110,[[["data",4]]]],[11,"visit_data_enum_mut","","",110,[[["dataenum",3]]]],[11,"visit_data_struct_mut","","",110,[[["datastruct",3]]]],[11,"visit_data_union_mut","","",110,[[["dataunion",3]]]],[11,"visit_derive_input_mut","","",110,[[["deriveinput",3]]]],[11,"visit_expr_mut","","",110,[[["expr",4]]]],[11,"visit_expr_array_mut","","",110,[[["exprarray",3]]]],[11,"visit_expr_assign_mut","","",110,[[["exprassign",3]]]],[11,"visit_expr_assign_op_mut","","",110,[[["exprassignop",3]]]],[11,"visit_expr_async_mut","","",110,[[["exprasync",3]]]],[11,"visit_expr_await_mut","","",110,[[["exprawait",3]]]],[11,"visit_expr_binary_mut","","",110,[[["exprbinary",3]]]],[11,"visit_expr_block_mut","","",110,[[["exprblock",3]]]],[11,"visit_expr_box_mut","","",110,[[["exprbox",3]]]],[11,"visit_expr_break_mut","","",110,[[["exprbreak",3]]]],[11,"visit_expr_call_mut","","",110,[[["exprcall",3]]]],[11,"visit_expr_cast_mut","","",110,[[["exprcast",3]]]],[11,"visit_expr_closure_mut","","",110,[[["exprclosure",3]]]],[11,"visit_expr_continue_mut","","",110,[[["exprcontinue",3]]]],[11,"visit_expr_field_mut","","",110,[[["exprfield",3]]]],[11,"visit_expr_for_loop_mut","","",110,[[["exprforloop",3]]]],[11,"visit_expr_group_mut","","",110,[[["exprgroup",3]]]],[11,"visit_expr_if_mut","","",110,[[["exprif",3]]]],[11,"visit_expr_index_mut","","",110,[[["exprindex",3]]]],[11,"visit_expr_let_mut","","",110,[[["exprlet",3]]]],[11,"visit_expr_lit_mut","","",110,[[["exprlit",3]]]],[11,"visit_expr_loop_mut","","",110,[[["exprloop",3]]]],[11,"visit_expr_macro_mut","","",110,[[["exprmacro",3]]]],[11,"visit_expr_match_mut","","",110,[[["exprmatch",3]]]],[11,"visit_expr_method_call_mut","","",110,[[["exprmethodcall",3]]]],[11,"visit_expr_paren_mut","","",110,[[["exprparen",3]]]],[11,"visit_expr_path_mut","","",110,[[["exprpath",3]]]],[11,"visit_expr_range_mut","","",110,[[["exprrange",3]]]],[11,"visit_expr_reference_mut","","",110,[[["exprreference",3]]]],[11,"visit_expr_repeat_mut","","",110,[[["exprrepeat",3]]]],[11,"visit_expr_return_mut","","",110,[[["exprreturn",3]]]],[11,"visit_expr_struct_mut","","",110,[[["exprstruct",3]]]],[11,"visit_expr_try_mut","","",110,[[["exprtry",3]]]],[11,"visit_expr_try_block_mut","","",110,[[["exprtryblock",3]]]],[11,"visit_expr_tuple_mut","","",110,[[["exprtuple",3]]]],[11,"visit_expr_type_mut","","",110,[[["exprtype",3]]]],[11,"visit_expr_unary_mut","","",110,[[["exprunary",3]]]],[11,"visit_expr_unsafe_mut","","",110,[[["exprunsafe",3]]]],[11,"visit_expr_while_mut","","",110,[[["exprwhile",3]]]],[11,"visit_expr_yield_mut","","",110,[[["expryield",3]]]],[11,"visit_field_mut","","",110,[[["field",3]]]],[11,"visit_field_pat_mut","","",110,[[["fieldpat",3]]]],[11,"visit_field_value_mut","","",110,[[["fieldvalue",3]]]],[11,"visit_fields_mut","","",110,[[["fields",4]]]],[11,"visit_fields_named_mut","","",110,[[["fieldsnamed",3]]]],[11,"visit_fields_unnamed_mut","","",110,[[["fieldsunnamed",3]]]],[11,"visit_file_mut","","",110,[[["file",3]]]],[11,"visit_fn_arg_mut","","",110,[[["fnarg",4]]]],[11,"visit_foreign_item_mut","","",110,[[["foreignitem",4]]]],[11,"visit_foreign_item_fn_mut","","",110,[[["foreignitemfn",3]]]],[11,"visit_foreign_item_macro_mut","","",110,[[["foreignitemmacro",3]]]],[11,"visit_foreign_item_static_mut","","",110,[[["foreignitemstatic",3]]]],[11,"visit_foreign_item_type_mut","","",110,[[["foreignitemtype",3]]]],[11,"visit_generic_argument_mut","","",110,[[["genericargument",4]]]],[11,"visit_generic_method_argument_mut","","",110,[[["genericmethodargument",4]]]],[11,"visit_generic_param_mut","","",110,[[["genericparam",4]]]],[11,"visit_generics_mut","","",110,[[["generics",3]]]],[11,"visit_ident_mut","","",110,[[["ident",3]]]],[11,"visit_impl_item_mut","","",110,[[["implitem",4]]]],[11,"visit_impl_item_const_mut","","",110,[[["implitemconst",3]]]],[11,"visit_impl_item_macro_mut","","",110,[[["implitemmacro",3]]]],[11,"visit_impl_item_method_mut","","",110,[[["implitemmethod",3]]]],[11,"visit_impl_item_type_mut","","",110,[[["implitemtype",3]]]],[11,"visit_index_mut","","",110,[[["index",3]]]],[11,"visit_item_mut","","",110,[[["item",4]]]],[11,"visit_item_const_mut","","",110,[[["itemconst",3]]]],[11,"visit_item_enum_mut","","",110,[[["itemenum",3]]]],[11,"visit_item_extern_crate_mut","","",110,[[["itemexterncrate",3]]]],[11,"visit_item_fn_mut","","",110,[[["itemfn",3]]]],[11,"visit_item_foreign_mod_mut","","",110,[[["itemforeignmod",3]]]],[11,"visit_item_impl_mut","","",110,[[["itemimpl",3]]]],[11,"visit_item_macro_mut","","",110,[[["itemmacro",3]]]],[11,"visit_item_macro2_mut","","",110,[[["itemmacro2",3]]]],[11,"visit_item_mod_mut","","",110,[[["itemmod",3]]]],[11,"visit_item_static_mut","","",110,[[["itemstatic",3]]]],[11,"visit_item_struct_mut","","",110,[[["itemstruct",3]]]],[11,"visit_item_trait_mut","","",110,[[["itemtrait",3]]]],[11,"visit_item_trait_alias_mut","","",110,[[["itemtraitalias",3]]]],[11,"visit_item_type_mut","","",110,[[["itemtype",3]]]],[11,"visit_item_union_mut","","",110,[[["itemunion",3]]]],[11,"visit_item_use_mut","","",110,[[["itemuse",3]]]],[11,"visit_label_mut","","",110,[[["label",3]]]],[11,"visit_lifetime_mut","","",110,[[["lifetime",3]]]],[11,"visit_lifetime_def_mut","","",110,[[["lifetimedef",3]]]],[11,"visit_lit_mut","","",110,[[["lit",4]]]],[11,"visit_lit_bool_mut","","",110,[[["litbool",3]]]],[11,"visit_lit_byte_mut","","",110,[[["litbyte",3]]]],[11,"visit_lit_byte_str_mut","","",110,[[["litbytestr",3]]]],[11,"visit_lit_char_mut","","",110,[[["litchar",3]]]],[11,"visit_lit_float_mut","","",110,[[["litfloat",3]]]],[11,"visit_lit_int_mut","","",110,[[["litint",3]]]],[11,"visit_lit_str_mut","","",110,[[["litstr",3]]]],[11,"visit_local_mut","","",110,[[["local",3]]]],[11,"visit_macro_mut","","",110,[[["macro",3]]]],[11,"visit_macro_delimiter_mut","","",110,[[["macrodelimiter",4]]]],[11,"visit_member_mut","","",110,[[["member",4]]]],[11,"visit_meta_mut","","",110,[[["meta",4]]]],[11,"visit_meta_list_mut","","",110,[[["metalist",3]]]],[11,"visit_meta_name_value_mut","","",110,[[["metanamevalue",3]]]],[11,"visit_method_turbofish_mut","","",110,[[["methodturbofish",3]]]],[11,"visit_nested_meta_mut","","",110,[[["nestedmeta",4]]]],[11,"visit_parenthesized_generic_arguments_mut","","",110,[[["parenthesizedgenericarguments",3]]]],[11,"visit_pat_mut","","",110,[[["pat",4]]]],[11,"visit_pat_box_mut","","",110,[[["patbox",3]]]],[11,"visit_pat_ident_mut","","",110,[[["patident",3]]]],[11,"visit_pat_lit_mut","","",110,[[["patlit",3]]]],[11,"visit_pat_macro_mut","","",110,[[["patmacro",3]]]],[11,"visit_pat_or_mut","","",110,[[["pator",3]]]],[11,"visit_pat_path_mut","","",110,[[["patpath",3]]]],[11,"visit_pat_range_mut","","",110,[[["patrange",3]]]],[11,"visit_pat_reference_mut","","",110,[[["patreference",3]]]],[11,"visit_pat_rest_mut","","",110,[[["patrest",3]]]],[11,"visit_pat_slice_mut","","",110,[[["patslice",3]]]],[11,"visit_pat_struct_mut","","",110,[[["patstruct",3]]]],[11,"visit_pat_tuple_mut","","",110,[[["pattuple",3]]]],[11,"visit_pat_tuple_struct_mut","","",110,[[["pattuplestruct",3]]]],[11,"visit_pat_type_mut","","",110,[[["pattype",3]]]],[11,"visit_pat_wild_mut","","",110,[[["patwild",3]]]],[11,"visit_path_mut","","",110,[[["path",3]]]],[11,"visit_path_arguments_mut","","",110,[[["patharguments",4]]]],[11,"visit_path_segment_mut","","",110,[[["pathsegment",3]]]],[11,"visit_predicate_eq_mut","","",110,[[["predicateeq",3]]]],[11,"visit_predicate_lifetime_mut","","",110,[[["predicatelifetime",3]]]],[11,"visit_predicate_type_mut","","",110,[[["predicatetype",3]]]],[11,"visit_qself_mut","","",110,[[["qself",3]]]],[11,"visit_range_limits_mut","","",110,[[["rangelimits",4]]]],[11,"visit_receiver_mut","","",110,[[["receiver",3]]]],[11,"visit_return_type_mut","","",110,[[["returntype",4]]]],[11,"visit_signature_mut","","",110,[[["signature",3]]]],[11,"visit_span_mut","","",110,[[["span",3]]]],[11,"visit_stmt_mut","","",110,[[["stmt",4]]]],[11,"visit_trait_bound_mut","","",110,[[["traitbound",3]]]],[11,"visit_trait_bound_modifier_mut","","",110,[[["traitboundmodifier",4]]]],[11,"visit_trait_item_mut","","",110,[[["traititem",4]]]],[11,"visit_trait_item_const_mut","","",110,[[["traititemconst",3]]]],[11,"visit_trait_item_macro_mut","","",110,[[["traititemmacro",3]]]],[11,"visit_trait_item_method_mut","","",110,[[["traititemmethod",3]]]],[11,"visit_trait_item_type_mut","","",110,[[["traititemtype",3]]]],[11,"visit_type_mut","","",110,[[["type",4]]]],[11,"visit_type_array_mut","","",110,[[["typearray",3]]]],[11,"visit_type_bare_fn_mut","","",110,[[["typebarefn",3]]]],[11,"visit_type_group_mut","","",110,[[["typegroup",3]]]],[11,"visit_type_impl_trait_mut","","",110,[[["typeimpltrait",3]]]],[11,"visit_type_infer_mut","","",110,[[["typeinfer",3]]]],[11,"visit_type_macro_mut","","",110,[[["typemacro",3]]]],[11,"visit_type_never_mut","","",110,[[["typenever",3]]]],[11,"visit_type_param_mut","","",110,[[["typeparam",3]]]],[11,"visit_type_param_bound_mut","","",110,[[["typeparambound",4]]]],[11,"visit_type_paren_mut","","",110,[[["typeparen",3]]]],[11,"visit_type_path_mut","","",110,[[["typepath",3]]]],[11,"visit_type_ptr_mut","","",110,[[["typeptr",3]]]],[11,"visit_type_reference_mut","","",110,[[["typereference",3]]]],[11,"visit_type_slice_mut","","",110,[[["typeslice",3]]]],[11,"visit_type_trait_object_mut","","",110,[[["typetraitobject",3]]]],[11,"visit_type_tuple_mut","","",110,[[["typetuple",3]]]],[11,"visit_un_op_mut","","",110,[[["unop",4]]]],[11,"visit_use_glob_mut","","",110,[[["useglob",3]]]],[11,"visit_use_group_mut","","",110,[[["usegroup",3]]]],[11,"visit_use_name_mut","","",110,[[["usename",3]]]],[11,"visit_use_path_mut","","",110,[[["usepath",3]]]],[11,"visit_use_rename_mut","","",110,[[["userename",3]]]],[11,"visit_use_tree_mut","","",110,[[["usetree",4]]]],[11,"visit_variadic_mut","","",110,[[["variadic",3]]]],[11,"visit_variant_mut","","",110,[[["variant",3]]]],[11,"visit_vis_crate_mut","","",110,[[["viscrate",3]]]],[11,"visit_vis_public_mut","","",110,[[["vispublic",3]]]],[11,"visit_vis_restricted_mut","","",110,[[["visrestricted",3]]]],[11,"visit_visibility_mut","","",110,[[["visibility",4]]]],[11,"visit_where_clause_mut","","",110,[[["whereclause",3]]]],[11,"visit_where_predicate_mut","","",110,[[["wherepredicate",4]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine …",313,[[["peek",8]]]],[11,"error","","Triggers an error at the current position of the parse …",313,[[],["error",3]]]],"p":[[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[3,"Punctuated"],[4,"Pair"],[8,"Spanned"],[8,"Visit"],[8,"VisitMut"],[8,"Speculative"],[8,"Parse"],[3,"StepCursor"],[3,"ParseBuffer"],[8,"Parser"],[3,"Error"],[4,"AttrStyle"],[3,"Attribute"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Field"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[4,"Visibility"],[3,"Arm"],[3,"FieldValue"],[4,"GenericMethodArgument"],[3,"Label"],[3,"MethodTurbofish"],[4,"RangeLimits"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[4,"Member"],[3,"BoundLifetimes"],[3,"ConstParam"],[4,"GenericParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"TypeParam"],[4,"TypeParamBound"],[3,"WhereClause"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"Receiver"],[3,"Signature"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[4,"UseTree"],[3,"File"],[3,"Lifetime"],[4,"Lit"],[3,"LitBool"],[4,"StrStyle"],[3,"Macro"],[4,"MacroDelimiter"],[4,"Data"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[3,"Local"],[4,"Stmt"],[3,"Abi"],[3,"BareFnArg"],[4,"ReturnType"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"FieldPat"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[4,"GenericArgument"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[4,"PathArguments"],[3,"PathSegment"],[3,"QSelf"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]},\
"termcolor":{"doc":"This crate provides a cross platform abstraction for …","i":[[8,"WriteColor","termcolor","This trait describes the behavior of writers that support …",null,null],[10,"supports_color","","Returns true if and only if the underlying writer …",0,[[]]],[10,"set_color","","Set the color settings of the writer.",0,[[["colorspec",3]],["result",6]]],[10,"reset","","Reset the current color settings to their original …",0,[[],["result",6]]],[11,"is_synchronous","","Returns true if and only if the underlying writer must …",0,[[]]],[4,"ColorChoice","","ColorChoice represents the color preferences of an end …",null,null],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI …",1,null],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use …",1,null],[13,"Auto","","Try to use colors, but don\'t force the issue. If the …",1,null],[13,"Never","","Never emit colors.",1,null],[3,"StandardStream","","Satisfies <code>io::Write</code> and <code>WriteColor</code>, and supports optional …",null,null],[3,"StandardStreamLock","","<code>StandardStreamLock</code> is a locked reference to a …",null,null],[3,"BufferedStandardStream","","Like <code>StandardStream</code>, but does buffered writing.",null,null],[11,"stdout","","Create a new <code>StandardStream</code> with the given color …",2,[[["colorchoice",4]],["standardstream",3]]],[11,"stderr","","Create a new <code>StandardStream</code> with the given color …",2,[[["colorchoice",4]],["standardstream",3]]],[11,"lock","","Lock the underlying writer.",2,[[],["standardstreamlock",3]]],[11,"stdout","","Create a new <code>BufferedStandardStream</code> with the given color …",3,[[["colorchoice",4]],["bufferedstandardstream",3]]],[11,"stderr","","Create a new <code>BufferedStandardStream</code> with the given color …",3,[[["colorchoice",4]],["bufferedstandardstream",3]]],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",null,null],[11,"stdout","","Create a new <code>BufferWriter</code> that writes to stdout with the …",4,[[["colorchoice",4]],["bufferwriter",3]]],[11,"stderr","","Create a new <code>BufferWriter</code> that writes to stderr with the …",4,[[["colorchoice",4]],["bufferwriter",3]]],[11,"separator","","If set, the separator given is printed between buffers. …",4,[[["option",4],["vec",3]]]],[11,"buffer","","Creates a new <code>Buffer</code> with the current color preferences.",4,[[],["buffer",3]]],[11,"print","","Prints the contents of the given buffer.",4,[[["buffer",3]],["result",6]]],[3,"Buffer","","Write colored text to memory.",null,null],[11,"no_color","","Create a buffer that drops all color information.",5,[[],["buffer",3]]],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",5,[[],["buffer",3]]],[11,"is_empty","","Returns true if and only if this buffer is empty.",5,[[]]],[11,"len","","Returns the length of this buffer in bytes.",5,[[]]],[11,"clear","","Clears this buffer.",5,[[]]],[11,"into_inner","","Consume this buffer and return the underlying raw data.",5,[[],["vec",3]]],[11,"as_slice","","Return the underlying data of the buffer.",5,[[]]],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable …",5,[[]]],[3,"NoColor","","Satisfies <code>WriteColor</code> but ignores all color options.",null,null],[11,"new","","Create a new writer that satisfies <code>WriteColor</code> but drops …",6,[[],["nocolor",3]]],[11,"into_inner","","Consume this <code>NoColor</code> value and return the inner writer.",6,[[]]],[11,"get_ref","","Return a reference to the inner writer.",6,[[]]],[11,"get_mut","","Return a mutable reference to the inner writer.",6,[[]]],[3,"Ansi","","Satisfies <code>WriteColor</code> using standard ANSI escape sequences.",null,null],[11,"new","","Create a new writer that satisfies <code>WriteColor</code> using …",7,[[],["ansi",3]]],[11,"into_inner","","Consume this <code>Ansi</code> value and return the inner writer.",7,[[]]],[11,"get_ref","","Return a reference to the inner writer.",7,[[]]],[11,"get_mut","","Return a mutable reference to the inner writer.",7,[[]]],[3,"ColorSpec","","A color specification.",null,null],[11,"new","","Create a new color specification that has no colors or …",8,[[],["colorspec",3]]],[11,"fg","","Get the foreground color.",8,[[],[["option",4],["color",4]]]],[11,"set_fg","","Set the foreground color.",8,[[["option",4],["color",4]],["colorspec",3]]],[11,"bg","","Get the background color.",8,[[],[["option",4],["color",4]]]],[11,"set_bg","","Set the background color.",8,[[["option",4],["color",4]],["colorspec",3]]],[11,"bold","","Get whether this is bold or not.",8,[[]]],[11,"set_bold","","Set whether the text is bolded or not.",8,[[],["colorspec",3]]],[11,"dimmed","","Get whether this is dimmed or not.",8,[[]]],[11,"set_dimmed","","Set whether the text is dimmed or not.",8,[[],["colorspec",3]]],[11,"italic","","Get whether this is italic or not.",8,[[]]],[11,"set_italic","","Set whether the text is italicized or not.",8,[[],["colorspec",3]]],[11,"underline","","Get whether this is underline or not.",8,[[]]],[11,"set_underline","","Set whether the text is underlined or not.",8,[[],["colorspec",3]]],[11,"reset","","Get whether reset is enabled or not.",8,[[]]],[11,"set_reset","","Set whether to reset the terminal whenever color settings …",8,[[],["colorspec",3]]],[11,"intense","","Get whether this is intense or not.",8,[[]]],[11,"set_intense","","Set whether the text is intense or not.",8,[[],["colorspec",3]]],[11,"is_none","","Returns true if this color specification has no colors or …",8,[[]]],[11,"clear","","Clears this color specification so that it has no …",8,[[]]],[4,"Color","","The set of available colors for the terminal …",null,null],[13,"Black","","",9,null],[13,"Blue","","",9,null],[13,"Green","","",9,null],[13,"Red","","",9,null],[13,"Cyan","","",9,null],[13,"Magenta","","",9,null],[13,"Yellow","","",9,null],[13,"White","","",9,null],[13,"Ansi256","","",9,null],[13,"Rgb","","",9,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[11,"invalid","","Return the string that couldn\'t be parsed as a valid …",10,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"supports_color","","",2,[[]]],[11,"set_color","","",2,[[["colorspec",3]],["result",6]]],[11,"reset","","",2,[[],["result",6]]],[11,"is_synchronous","","",2,[[]]],[11,"supports_color","","",11,[[]]],[11,"set_color","","",11,[[["colorspec",3]],["result",6]]],[11,"reset","","",11,[[],["result",6]]],[11,"is_synchronous","","",11,[[]]],[11,"supports_color","","",3,[[]]],[11,"set_color","","",3,[[["colorspec",3]],["result",6]]],[11,"reset","","",3,[[],["result",6]]],[11,"is_synchronous","","",3,[[]]],[11,"supports_color","","",5,[[]]],[11,"set_color","","",5,[[["colorspec",3]],["result",6]]],[11,"reset","","",5,[[],["result",6]]],[11,"is_synchronous","","",5,[[]]],[11,"supports_color","","",6,[[]]],[11,"set_color","","",6,[[["colorspec",3]],["result",6]]],[11,"reset","","",6,[[],["result",6]]],[11,"is_synchronous","","",6,[[]]],[11,"supports_color","","",7,[[]]],[11,"set_color","","",7,[[["colorspec",3]],["result",6]]],[11,"reset","","",7,[[],["result",6]]],[11,"is_synchronous","","",7,[[]]],[11,"clone","","",1,[[],["colorchoice",4]]],[11,"clone","","",8,[[],["colorspec",3]]],[11,"clone","","",9,[[],["color",4]]],[11,"clone","","",10,[[],["parsecolorerror",3]]],[11,"default","","",8,[[],["colorspec",3]]],[11,"eq","","",1,[[["colorchoice",4]]]],[11,"eq","","",8,[[["colorspec",3]]]],[11,"ne","","",8,[[["colorspec",3]]]],[11,"eq","","",9,[[["color",4]]]],[11,"ne","","",9,[[["color",4]]]],[11,"eq","","",10,[[["parsecolorerror",3]]]],[11,"ne","","",10,[[["parsecolorerror",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"from_str","","",9,[[],[["result",4],["parsecolorerror",3],["color",4]]]],[11,"description","","",10,[[]]],[11,"write","","",2,[[],["result",6]]],[11,"flush","","",2,[[],["result",6]]],[11,"write","","",11,[[],["result",6]]],[11,"flush","","",11,[[],["result",6]]],[11,"write","","",3,[[],["result",6]]],[11,"flush","","",3,[[],["result",6]]],[11,"write","","",5,[[],["result",6]]],[11,"flush","","",5,[[],["result",6]]],[11,"write","","",6,[[],["result",6]]],[11,"flush","","",6,[[],["result",6]]],[11,"write","","",7,[[],["result",6]]],[11,"flush","","",7,[[],["result",6]]]],"p":[[8,"WriteColor"],[4,"ColorChoice"],[3,"StandardStream"],[3,"BufferedStandardStream"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[4,"Color"],[3,"ParseColorError"],[3,"StandardStreamLock"]]},\
"textwrap":{"doc":"<code>textwrap</code> provides functions for word wrapping and filling …","i":[[5,"dedent","textwrap","Removes common leading whitespace from each line.",null,[[],["string",3]]],[5,"indent","","Add prefix to each non-empty line.",null,[[],["string",3]]],[3,"HyphenSplitter","","Simple and default way to split words: splitting on …",null,null],[3,"NoHyphenation","","Use this as a <code>Wrapper.splitter</code> to avoid any kind of …",null,null],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple…",0,[[],["vec",3]]],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. …",null,null],[12,"width","","The width in columns at which the text will be wrapped.",1,null],[12,"initial_indent","","Indentation used for the first line of output.",1,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",1,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a …",1,null],[12,"splitter","","The method for splitting words. If the <code>hyphenation</code> feature…",1,null],[11,"new","","Create a new Wrapper for wrapping at the specified width. …",1,[[],[["wrapper",3],["hyphensplitter",3]]]],[11,"with_splitter","","Use the given <code>WordSplitter</code> to create a new Wrapper for …",1,[[],["wrapper",3]]],[11,"initial_indent","","Change <code>self.initial_indent</code>. The initial indentation is …",1,[[],["wrapper",3]]],[11,"subsequent_indent","","Change <code>self.subsequent_indent</code>. The subsequent indentation …",1,[[],["wrapper",3]]],[11,"break_words","","Change <code>self.break_words</code>. This controls if words longer …",1,[[],["wrapper",3]]],[11,"fill","","Fill a line of text at <code>self.width</code> characters.",1,[[],["string",3]]],[11,"wrap","","Wrap a line of text at <code>self.width</code> characters.",1,[[],[["vec",3],["cow",4]]]],[11,"wrap_iter","","Lazily wrap a line of text at <code>self.width</code> characters.",1,[[],["wrapiter",3]]],[11,"into_wrap_iter","","Lazily wrap a line of text at <code>self.width</code> characters.",1,[[],["intowrapiter",3]]],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns …",null,null],[3,"WrapIter","","An iterator over the lines of the input string which …",null,null],[5,"fill","","Fill a line of text at <code>width</code> characters.",null,[[],["string",3]]],[5,"wrap","","Wrap a line of text at <code>width</code> characters.",null,[[],[["vec",3],["cow",4]]]],[5,"wrap_iter","","Lazily wrap a line of text at <code>width</code> characters.",null,[[],[["intowrapiter",3],["hyphensplitter",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"split","","",2,[[],["vec",3]]],[11,"split","","",3,[[],["vec",3]]],[11,"next","","",4,[[],[["option",4],["cow",4]]]],[11,"next","","",5,[[],[["option",4],["cow",4]]]],[11,"clone","","",2,[[],["nohyphenation",3]]],[11,"clone","","",3,[[],["hyphensplitter",3]]],[11,"clone","","",1,[[],["wrapper",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]]],"p":[[8,"WordSplitter"],[3,"Wrapper"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]},\
"thiserror":{"doc":"github crates-io docs-rs","i":[[24,"Error","thiserror","",null,null]],"p":[]},\
"thiserror_impl":{"doc":"","i":[[24,"Error","thiserror_impl","",null,null]],"p":[]},\
"thread_local":{"doc":"Per-object thread-local storage","i":[[3,"CachedIntoIter","thread_local","An iterator that moves out of a <code>CachedThreadLocal</code>.",null,null],[3,"CachedIterMut","","Mutable iterator over the contents of a <code>CachedThreadLocal</code>.",null,null],[3,"CachedThreadLocal","","Wrapper around [<code>ThreadLocal</code>].",null,null],[3,"ThreadLocal","","Thread-local variable wrapper",null,null],[11,"new","","Creates a new empty <code>ThreadLocal</code>.",0,[[],["threadlocal",3]]],[11,"with_capacity","","Creates a new <code>ThreadLocal</code> with an initial capacity. If …",0,[[],["threadlocal",3]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[],["option",4]]],[11,"get_or","","Returns the element for the current thread, or creates it …",0,[[]]],[11,"get_or_try","","Returns the element for the current thread, or creates it …",0,[[],["result",4]]],[11,"iter","","Returns an iterator over the local values of all threads …",0,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all …",0,[[],["itermut",3]]],[11,"clear","","Removes all thread-specific values from the <code>ThreadLocal</code>, …",0,[[]]],[11,"get_or_default","","Returns the element for the current thread, or creates a …",0,[[]]],[3,"Iter","","Iterator over the contents of a <code>ThreadLocal</code>.",null,null],[3,"IterMut","","Mutable iterator over the contents of a <code>ThreadLocal</code>.",null,null],[3,"IntoIter","","An iterator that moves out of a <code>ThreadLocal</code>.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"drop","","",0,[[]]],[11,"into_iter","","",1,[[],["cachedintoiter",3]]],[11,"into_iter","","",0,[[],["intoiter",3]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"default","","",1,[[],["cachedthreadlocal",3]]],[11,"default","","",0,[[],["threadlocal",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"new","","Creates a new empty <code>CachedThreadLocal</code>.",1,[[],["cachedthreadlocal",3]]],[11,"get","","Returns the element for the current thread, if it exists.",1,[[],["option",4]]],[11,"get_or","","Returns the element for the current thread, or creates it …",1,[[]]],[11,"get_or_try","","Returns the element for the current thread, or creates it …",1,[[],["result",4]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all …",1,[[],["cacheditermut",3]]],[11,"clear","","Removes all thread-specific values from the <code>ThreadLocal</code>, …",1,[[]]],[11,"get_or_default","","Returns the element for the current thread, or creates a …",1,[[]]]],"p":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"CachedIterMut"],[3,"CachedIntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]},\
"thunderdome":{"doc":"GitHub CI Status thunderdome on crates.io thunderdome docs","i":[[3,"Arena","thunderdome","Container that can have elements inserted into it and …",null,null],[3,"Index","","Index type for [<code>Arena</code>] that has a generation attached to …",null,null],[3,"Drain","","See [<code>Arena::drain</code>].",null,null],[3,"IntoIter","","Iterator typed used when an Arena is turned [<code>IntoIterator</code>]…",null,null],[3,"Iter","","See <code>Arena::iter</code>.",null,null],[3,"IterMut","","See <code>Arena::iter_mut</code>.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"drop","","",2,[[]]],[11,"into_iter","","",0,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"clone","","",0,[[],["arena",3]]],[11,"clone","","",1,[[],["index",3]]],[11,"default","","",0,[[]]],[11,"cmp","","",1,[[["index",3]],["ordering",4]]],[11,"eq","","",1,[[["index",3]]]],[11,"ne","","",1,[[["index",3]]]],[11,"partial_cmp","","",1,[[["index",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["index",3]]]],[11,"le","","",1,[[["index",3]]]],[11,"gt","","",1,[[["index",3]]]],[11,"ge","","",1,[[["index",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"index","","",0,[[["index",3]]]],[11,"index_mut","","",0,[[["index",3]]]],[11,"hash","","",1,[[]]],[11,"to_bits","","Convert this <code>Index</code> to an equivalent <code>u64</code> representation. …",1,[[]]],[11,"from_bits","","Convert back from a value generated with <code>Index::to_bits</code>. …",1,[[]]],[11,"slot","","Convert this <code>Index</code> into a slot, discarding its …",1,[[]]],[11,"new","","Construct an empty arena.",0,[[]]],[11,"with_capacity","","Construct an empty arena with space to hold exactly …",0,[[]]],[11,"len","","Return the number of elements contained in the arena.",0,[[]]],[11,"capacity","","Return the number of elements the arena can hold without …",0,[[]]],[11,"is_empty","","Returns whether the arena is empty.",0,[[]]],[11,"insert","","Insert a new value into the arena, returning an index …",0,[[],["index",3]]],[11,"contains","","Returns true if the given index is valid for the arena.",0,[[["index",3]]]],[11,"contains_slot","","Checks to see whether a slot is occupied in the arena, …",0,[[],[["option",4],["index",3]]]],[11,"get","","Get an immutable reference to a value inside the arena by …",0,[[["index",3]],["option",4]]],[11,"get_mut","","Get a mutable reference to a value inside the arena by […",0,[[["index",3]],["option",4]]],[11,"get2_mut","","Get mutable references of two values inside this arena at …",0,[[["index",3]]]],[11,"remove","","Remove the value contained at the given index from the …",0,[[["index",3]],["option",4]]],[11,"invalidate","","Invalidate the given index and return a new index to the …",0,[[["index",3]],[["option",4],["index",3]]]],[11,"get_by_slot","","Attempt to look up the given slot in the arena, …",0,[[],["option",4]]],[11,"get_by_slot_mut","","Attempt to look up the given slot in the arena, …",0,[[],["option",4]]],[11,"remove_by_slot","","Remove an entry in the arena by its slot, disregarding …",0,[[],["option",4]]],[11,"clear","","Clear the arena and drop all elements.",0,[[]]],[11,"iter","","Iterate over all of the indexes and values contained in …",0,[[],["iter",3]]],[11,"iter_mut","","Iterate over all of the indexes and values contained in …",0,[[],["itermut",3]]],[11,"drain","","Returns an iterator that removes each element from the …",0,[[],["drain",3]]],[11,"retain","","Remove all entries in the <code>Arena</code> which don\'t satisfy the …",0,[[["fnmut",8]]]]],"p":[[3,"Arena"],[3,"Index"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"]]},\
"tinyvec":{"doc":"<code>tinyvec</code> provides 100% safe vec-like data structures.","i":[[8,"Array","tinyvec","A trait for types that are an array.",null,null],[16,"Item","","The type of the items in the thing.",0,null],[18,"CAPACITY","","The number of slots in the thing.",0,null],[10,"as_slice","","Gives a shared slice over the whole thing.",0,[[]]],[10,"as_slice_mut","","Gives a unique slice over the whole thing.",0,[[]]],[10,"default","","Create a default-initialized instance of ourself, similar …",0,[[]]],[3,"ArrayVec","","An array-backed, vector-like data structure.",null,null],[3,"ArrayVecSplice","","Splicing iterator for <code>ArrayVec</code> See <code>ArrayVec::splice</code>",null,null],[3,"ArrayVecIterator","","Iterator for consuming an <code>ArrayVec</code> and returning owned …",null,null],[3,"ArrayVecDrain","","Draining iterator for [<code>ArrayVec</code>]",null,null],[3,"SliceVec","","A slice-backed vector-like data structure.",null,null],[3,"SliceVecDrain","","Draining iterator for [<code>SliceVec</code>]",null,null],[4,"TinyVec","","A vector that starts inline, but can automatically move …",null,null],[13,"Inline","","",1,null],[13,"Heap","","",1,null],[4,"TinyVecDrain","","Draining iterator for <code>TinyVecDrain</code>",null,null],[13,"Inline","","",2,null],[13,"Heap","","",2,null],[3,"TinyVecSplice","","Splicing iterator for <code>TinyVec</code> See <code>TinyVec::splice</code>",null,null],[4,"TinyVecIterator","","Iterator for consuming an <code>TinyVec</code> and returning owned …",null,null],[13,"Inline","","",3,null],[13,"Heap","","",3,null],[14,"array_vec","","Helper to make an <code>ArrayVec</code>.",null,null],[14,"tiny_vec","","Helper to make a <code>TinyVec</code>.",null,null],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_string","","",8,[[],["string",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"into_iter","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"deref","","",4,[[]]],[11,"deref","","",8,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",4,[[]]],[11,"deref_mut","","",8,[[]]],[11,"deref_mut","","",1,[[]]],[11,"from","","The output has a length equal to the full array.",4,[[]]],[11,"from","","Uses the full slice as the initial length.",8,[[]]],[11,"from","","Calls <code>AsRef::as_mut</code> then uses the full slice as the …",8,[[]]],[11,"from","","",1,[[["arrayvec",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",8,[[]]],[11,"eq","","",8,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",1,[[]]],[11,"cmp","","",4,[[],["ordering",4]]],[11,"cmp","","",8,[[],["ordering",4]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",8,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"drop","","",5,[[]]],[11,"drop","","",9,[[]]],[11,"drop","","",10,[[]]],[11,"index","","",4,[[]]],[11,"index","","",8,[[]]],[11,"index","","",1,[[]]],[11,"index_mut","","",4,[[]]],[11,"index_mut","","",8,[[]]],[11,"index_mut","","",1,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",1,[[]]],[11,"len","","",5,[[]]],[11,"len","","",10,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"from_iter","","",4,[[["intoiterator",8]]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"as_ref","","",4,[[]]],[11,"as_ref","","",8,[[]]],[11,"as_ref","","",1,[[]]],[11,"as_mut","","",4,[[]]],[11,"as_mut","","",8,[[]]],[11,"as_mut","","",1,[[]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",7,[[],["option",4]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",10,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"count","","",6,[[]]],[11,"last","","",6,[[],["option",4]]],[11,"nth","","",6,[[],["option",4]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"nth","","",7,[[],["option",4]]],[11,"last","","",7,[[],["option",4]]],[11,"for_each","","",7,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"nth","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"last","","",2,[[],["option",4]]],[11,"count","","",2,[[]]],[11,"for_each","","",2,[[["fnmut",8]]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"count","","",3,[[]]],[11,"last","","",3,[[],["option",4]]],[11,"nth","","",3,[[],["option",4]]],[11,"into_iter","","",4,[[]]],[11,"into_iter","","",8,[[]]],[11,"into_iter","","",1,[[]]],[11,"extend","","",4,[[["intoiterator",8]]]],[11,"extend","","",8,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"clone","","",4,[[],["arrayvec",3]]],[11,"clone","","",1,[[],["tinyvec",4]]],[11,"default","","",4,[[]]],[11,"default","","",8,[[]]],[11,"default","","",1,[[]]],[18,"CAPACITY","","The number of slots in the thing.",0,null],[11,"append","","Move all values from <code>other</code> into this vec.",4,[[]]],[11,"try_append","","Move all values from <code>other</code> into this vec. If appending …",4,[[],["option",4]]],[11,"as_mut_ptr","","A <code>*mut</code> pointer to the backing array.",4,[[]]],[11,"as_mut_slice","","Performs a <code>deref_mut</code>, into unique slice form.",4,[[]]],[11,"as_ptr","","A <code>*const</code> pointer to the backing array.",4,[[]]],[11,"as_slice","","Performs a <code>deref</code>, into shared slice form.",4,[[]]],[11,"capacity","","The capacity of the <code>ArrayVec</code>.",4,[[]]],[11,"clear","","Truncates the <code>ArrayVec</code> down to length 0.",4,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",4,[[],["arrayvecdrain",3]]],[11,"into_inner","","Returns the inner array of the <code>ArrayVec</code>.",4,[[]]],[11,"extend_from_slice","","Clone each element of the slice into this <code>ArrayVec</code>.",4,[[]]],[11,"fill","","Fill the vector until its capacity has been reached.",4,[[["intoiterator",8]]]],[11,"from_array_len","","Wraps up an array and uses the given length as the …",4,[[]]],[11,"insert","","Inserts an item at the position given, moving all …",4,[[]]],[11,"try_insert","","Tries to insert an item at the position given, moving all …",4,[[],["option",4]]],[11,"is_empty","","Checks if the length is 0.",4,[[]]],[11,"len","","The length of the <code>ArrayVec</code> (in elements).",4,[[]]],[11,"new","","Makes a new, empty <code>ArrayVec</code>.",4,[[]]],[11,"pop","","Remove and return the last element of the vec, if there …",4,[[],["option",4]]],[11,"push","","Place an element onto the end of the vec.",4,[[]]],[11,"try_push","","Tries to place an element onto the end of the vec. …",4,[[],["option",4]]],[11,"remove","","Removes the item at <code>index</code>, shifting all others down by …",4,[[]]],[11,"resize","","As <code>resize_with</code> and it clones the value as the closure.",4,[[]]],[11,"resize_with","","Resize the vec to the new length.",4,[[["fnmut",8]]]],[11,"retain","","Walk the vec and keep only the elements that pass the …",4,[[["fnmut",8]]]],[11,"set_len","","Forces the length of the vector to <code>new_len</code>.",4,[[]]],[11,"split_off","","Splits the collection at the point given.",4,[[]]],[11,"splice","","Creates a splicing iterator that removes the specified …",4,[[],[["fuse",3],["arrayvecsplice",3]]]],[11,"swap_remove","","Remove an element, swapping the end of the vec into its …",4,[[]]],[11,"truncate","","Reduces the vec\'s length to the given value.",4,[[]]],[11,"try_from_array_len","","Wraps an array, using the given length as the starting …",4,[[],["result",4]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",6,[[]]],[11,"drain_to_vec_and_reserve","","Drains all elements to a Vec, but reserves additional …",4,[[],["vec",3]]],[11,"drain_to_vec","","Drains all elements to a Vec",4,[[],["vec",3]]],[11,"append","","",8,[[]]],[11,"as_mut_ptr","","A <code>*mut</code> pointer to the backing slice.",8,[[]]],[11,"as_mut_slice","","Performs a <code>deref_mut</code>, into unique slice form.",8,[[]]],[11,"as_ptr","","A <code>*const</code> pointer to the backing slice.",8,[[]]],[11,"as_slice","","Performs a <code>deref</code>, into shared slice form.",8,[[]]],[11,"capacity","","The capacity of the <code>SliceVec</code>.",8,[[]]],[11,"clear","","Truncates the <code>SliceVec</code> down to length 0.",8,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",8,[[["rangebounds",8]],["slicevecdrain",3]]],[11,"extend_from_slice","","",8,[[]]],[11,"fill","","Fill the vector until its capacity has been reached.",8,[[["intoiterator",8]]]],[11,"from_slice_len","","Wraps up a slice and uses the given length as the initial …",8,[[]]],[11,"insert","","Inserts an item at the position given, moving all …",8,[[]]],[11,"is_empty","","Checks if the length is 0.",8,[[]]],[11,"len","","The length of the <code>SliceVec</code> (in elements).",8,[[]]],[11,"pop","","Remove and return the last element of the vec, if there …",8,[[],["option",4]]],[11,"push","","Place an element onto the end of the vec.",8,[[]]],[11,"remove","","Removes the item at <code>index</code>, shifting all others down by …",8,[[]]],[11,"resize","","As <code>resize_with</code> and it clones the value as the closure.",8,[[]]],[11,"resize_with","","Resize the vec to the new length.",8,[[["fnmut",8]]]],[11,"retain","","Walk the vec and keep only the elements that pass the …",8,[[["fnmut",8]]]],[11,"set_len","","Forces the length of the vector to <code>new_len</code>.",8,[[]]],[11,"split_off","","Splits the collection at the point given.",8,[[],["slicevec",3]]],[11,"swap_remove","","Remove an element, swapping the end of the vec into its …",8,[[]]],[11,"truncate","","Reduces the vec\'s length to the given value.",8,[[]]],[11,"try_from_slice_len","","Wraps a slice, using the given length as the starting …",8,[[],["option",4]]],[11,"is_heap","","Returns whether elements are on heap",1,[[]]],[11,"is_inline","","Returns whether elements are on stack",1,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible. …",1,[[]]],[11,"move_to_the_heap","","Moves the content of the TinyVec to the heap, if it\'s …",1,[[]]],[11,"move_to_the_heap_and_reserve","","If TinyVec is inline, moves the content of it to the heap.…",1,[[]]],[11,"reserve","","Reserves additional space. Moves to the heap if array …",1,[[]]],[11,"reserve_exact","","Reserves additional space. Moves to the heap if array …",1,[[]]],[11,"with_capacity","","Makes a new TinyVec with <em>at least</em> the given capacity.",1,[[]]],[11,"append","","Move all values from <code>other</code> into this vec.",1,[[]]],[11,"swap_remove","","Remove an element, swapping the end of the vec into its …",1,[[]]],[11,"pop","","Remove and return the last element of the vec, if there …",1,[[],["option",4]]],[11,"remove","","Removes the item at <code>index</code>, shifting all others down by …",1,[[]]],[11,"len","","The length of the vec (in elements).",1,[[]]],[11,"capacity","","The capacity of the <code>TinyVec</code>.",1,[[]]],[11,"truncate","","Reduces the vec\'s length to the given value.",1,[[]]],[11,"as_mut_ptr","","A mutable pointer to the backing array.",1,[[]]],[11,"as_ptr","","A const pointer to the backing array.",1,[[]]],[11,"retain","","Walk the vec and keep only the elements that pass the …",1,[[["fnmut",8]]]],[11,"as_mut_slice","","Helper for getting the mut slice.",1,[[]]],[11,"as_slice","","Helper for getting the shared slice.",1,[[]]],[11,"clear","","Removes all elements from the vec.",1,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",1,[[["rangebounds",8]],["tinyvecdrain",4]]],[11,"extend_from_slice","","Clone each element of the slice into this vec.",1,[[]]],[11,"from_array_len","","Wraps up an array and uses the given length as the …",1,[[]]],[11,"insert","","Inserts an item at the position given, moving all …",1,[[]]],[11,"is_empty","","If the vec is empty.",1,[[]]],[11,"new","","Makes a new, empty vec.",1,[[]]],[11,"push","","Place an element onto the end of the vec.",1,[[]]],[11,"resize","","Resize the vec to the new length.",1,[[]]],[11,"resize_with","","Resize the vec to the new length.",1,[[["fnmut",8]]]],[11,"split_off","","Splits the collection at the point given.",1,[[]]],[11,"splice","","Creates a splicing iterator that removes the specified …",1,[[],[["tinyvecsplice",3],["fuse",3]]]],[11,"try_from_array_len","","Wraps an array, using the given length as the starting …",1,[[],["result",4]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",3,[[]]]],"p":[[8,"Array"],[4,"TinyVec"],[4,"TinyVecDrain"],[4,"TinyVecIterator"],[3,"ArrayVec"],[3,"ArrayVecSplice"],[3,"ArrayVecIterator"],[3,"ArrayVecDrain"],[3,"SliceVec"],[3,"SliceVecDrain"],[3,"TinyVecSplice"]]},\
"tinyvec_macros":{"doc":"","i":[[14,"impl_mirrored","tinyvec_macros","",null,null]],"p":[]},\
"tracing":{"doc":"A scoped, structured logging and diagnostics system.","i":[[3,"Dispatch","tracing","<code>Dispatch</code> trace data to a <code>Subscriber</code>.",null,null],[3,"Event","","<code>Event</code>s represent single points in time where something …",null,null],[8,"Value","","A field value of an erased type.",null,null],[10,"record","","Visits this value with the given <code>Visitor</code>.",0,[[["field",3],["visit",8]]]],[8,"Subscriber","","Trait representing the functions required to collect …",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning …",1,[[["metadata",3]],["interest",3]]],[10,"enabled","","Returns true if a span or event with the specified …",1,[[["metadata",3]]]],[11,"max_level_hint","","Returns the highest verbosity level that this <code>Subscriber</code> …",1,[[],[["levelfilter",3],["option",4]]]],[10,"new_span","","Visit the construction of a new span, returning a new …",1,[[["attributes",3]],["id",3]]],[10,"record","","Record a set of values on a span.",1,[[["record",3],["id",3]]]],[10,"record_follows_from","","Adds an indication that <code>span</code> follows from the span with …",1,[[["id",3]]]],[10,"event","","Records that an <code>Event</code> has occurred.",1,[[["event",3]]]],[10,"enter","","Records that a span has been entered.",1,[[["id",3]]]],[10,"exit","","Records that a span has been exited.",1,[[["id",3]]]],[11,"clone_span","","Notifies the subscriber that a span ID has been cloned.",1,[[["id",3]],["id",3]]],[11,"drop_span","","<strong>This method is deprecated.</strong>",1,[[["id",3]]]],[11,"try_close","","Notifies the subscriber that a [<code>span ID</code>] has been …",1,[[["id",3]]]],[11,"current_span","","Returns a type representing this subscriber\'s view of the …",1,[[],["current",3]]],[11,"downcast_raw","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …",1,[[["typeid",3]],["option",4]]],[0,"event","","Events represent single points in time during the …",null,null],[3,"Event","tracing::event","<code>Event</code>s represent single points in time where something …",null,null],[3,"Level","tracing","Describes the level of verbosity of a span or event.",null,null],[3,"Metadata","","Metadata describing a span or event.",null,null],[23,"instrument","","Instruments a function to create and enter a <code>tracing</code> span …",null,null],[0,"dispatcher","","Dispatches trace events to <code>Subscriber</code>s.",null,null],[5,"set_default","tracing::dispatcher","Sets the dispatch as the default dispatch for the …",null,[[["dispatch",3]],["defaultguard",3]]],[5,"with_default","","Sets this dispatch as the default for the duration of a …",null,[[["dispatch",3]]]],[3,"DefaultGuard","","A guard that resets the current default dispatcher to the …",null,null],[5,"get_default","","Executes a closure with a reference to this thread\'s …",null,[[]]],[5,"set_global_default","","Sets this dispatch as the global default for the duration …",null,[[["dispatch",3]],[["result",4],["setglobaldefaulterror",3]]]],[3,"Dispatch","","<code>Dispatch</code> trace data to a <code>Subscriber</code>.",null,null],[3,"SetGlobalDefaultError","","Returned if setting the global dispatcher fails.",null,null],[0,"field","tracing","Structured data associated with <code>Span</code>s and <code>Event</code>s.",null,null],[3,"Field","tracing::field","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>\'s …",null,null],[3,"Empty","","An empty field.",null,null],[3,"FieldSet","","Describes the fields present on a span.",null,null],[3,"ValueSet","","A set of fields and values for a span.",null,null],[3,"Iter","","An iterator over a set of fields.",null,null],[8,"Visit","","Visits typed values.",null,null],[11,"record_i64","","Visit a signed 64-bit integer value.",2,[[["field",3]]]],[11,"record_u64","","Visit an unsigned 64-bit integer value.",2,[[["field",3]]]],[11,"record_bool","","Visit a boolean value.",2,[[["field",3]]]],[11,"record_str","","Visit a string value.",2,[[["field",3]]]],[11,"record_error","","Records a type implementing <code>Error</code>.",2,[[["field",3],["error",8]]]],[10,"record_debug","","Visit a value implementing <code>fmt::Debug</code>.",2,[[["field",3],["debug",8]]]],[8,"Value","","A field value of an erased type.",null,null],[10,"record","","Visits this value with the given <code>Visitor</code>.",0,[[["field",3],["visit",8]]]],[3,"DisplayValue","","A <code>Value</code> which serializes using <code>fmt::Display</code>.",null,null],[3,"DebugValue","","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.",null,null],[5,"display","","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that …",null,[[],["displayvalue",3]]],[5,"debug","","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can …",null,[[],["debugvalue",3]]],[8,"AsField","","Trait implemented to allow a type to be used as a field …",null,null],[10,"as_field","","Attempts to convert <code>&self</code> into a <code>Field</code> with the specified …",3,[[["metadata",3]],[["option",4],["field",3]]]],[0,"instrument","tracing","Attach a span to a <code>std::future::Future</code>.",null,null],[8,"Instrument","tracing::instrument","Attaches spans to a <code>std::future::Future</code>.",null,null],[11,"instrument","","Instruments this type with the provided <code>Span</code>, returning an…",4,[[["span",3]],["instrumented",3]]],[11,"in_current_span","","Instruments this type with the current <code>Span</code>, returning an …",4,[[],["instrumented",3]]],[8,"WithSubscriber","","Extension trait allowing futures to be instrumented with …",null,null],[11,"with_subscriber","","Attaches the provided <code>Subscriber</code> to this type, returning a…",5,[[],["withdispatch",3]]],[11,"with_current_subscriber","","Attaches the current default <code>Subscriber</code> to this type, …",5,[[],["withdispatch",3]]],[3,"WithDispatch","","A future that has been instrumented with a <code>tracing</code> …",null,null],[3,"Instrumented","","A future that has been instrumented with a <code>tracing</code> span.",null,null],[11,"span","","Borrows the <code>Span</code> that this type is instrumented by.",6,[[],["span",3]]],[11,"span_mut","","Mutably borrows the <code>Span</code> that this type is instrumented …",6,[[],["span",3]]],[11,"inner","","Borrows the wrapped type.",6,[[]]],[11,"inner_mut","","Mutably borrows the wrapped type.",6,[[]]],[11,"inner_pin_ref","","Get a pinned reference to the wrapped type.",6,[[["pin",3]],["pin",3]]],[11,"inner_pin_mut","","Get a pinned mutable reference to the wrapped type.",6,[[["pin",3]],["pin",3]]],[11,"into_inner","","Consumes the <code>Instrumented</code>, returning the wrapped type.",6,[[]]],[0,"level_filters","tracing","Trace verbosity level filtering.",null,null],[3,"ParseLevelFilterError","tracing::level_filters","Indicates that a string could not be parsed to a valid …",null,null],[3,"LevelFilter","","A filter comparable to a verbosity <code>Level</code>.",null,null],[17,"STATIC_MAX_LEVEL","","The statically configured maximum trace level.",null,null],[0,"span","tracing","Spans represent periods of time in which a program was …",null,null],[3,"Attributes","tracing::span","Attributes provided to a <code>Subscriber</code> describing a new span …",null,null],[3,"Id","","Identifies a span within the context of a subscriber.",null,null],[3,"Record","","A set of fields recorded by a span.",null,null],[8,"AsId","","Trait implemented by types which have a span <code>Id</code>.",null,null],[10,"as_id","","Returns the <code>Id</code> of the span that <code>self</code> corresponds to, or …",7,[[],[["id",3],["option",4]]]],[3,"Span","","A handle representing a span, with the capability to …",null,null],[3,"Entered","","A guard representing a span which has been entered and is …",null,null],[3,"EnteredSpan","","An owned version of [<code>Entered</code>], a guard representing a …",null,null],[11,"new","","Constructs a new <code>Span</code> with the given metadata and set of …",8,[[["valueset",3],["metadata",3]],["span",3]]],[11,"new_root","","Constructs a new <code>Span</code> as the root of its own trace tree, …",8,[[["valueset",3],["metadata",3]],["span",3]]],[11,"child_of","","Constructs a new <code>Span</code> as child of the given parent span, …",8,[[["valueset",3],["metadata",3]],["span",3]]],[11,"new_disabled","","Constructs a new disabled span with the given <code>Metadata</code>.",8,[[["metadata",3]],["span",3]]],[11,"none","","Constructs a new span that is <em>completely disabled</em>.",8,[[],["span",3]]],[11,"current","","Returns a handle to the span considered by the <code>Subscriber</code> …",8,[[],["span",3]]],[11,"enter","","Enters this span, returning a guard that will exit the …",8,[[],["entered",3]]],[11,"entered","","Enters this span, consuming it and returning a [guard][…",8,[[],["enteredspan",3]]],[11,"in_scope","","Executes the given function in the context of this span.",8,[[["fnonce",8]]]],[11,"field","","Returns a <code>Field</code> for the field with the given <code>name</code>, if one …",8,[[],[["field",3],["option",4]]]],[11,"has_field","","Returns true if this <code>Span</code> has a field for the given <code>Field</code> …",8,[[]]],[11,"record","","Records that the field described by <code>field</code> has the value …",8,[[]]],[11,"record_all","","Records all the fields in the provided <code>ValueSet</code>.",8,[[["valueset",3]]]],[11,"is_disabled","","Returns <code>true</code> if this span was disabled by the subscriber …",8,[[]]],[11,"is_none","","Returns <code>true</code> if this span was constructed by <code>Span::none</code> …",8,[[]]],[11,"follows_from","","Indicates that the span with the given ID has an indirect …",8,[[]]],[11,"id","","Returns this span\'s <code>Id</code>, if it is enabled.",8,[[],[["id",3],["option",4]]]],[11,"metadata","","Returns this span\'s <code>Metadata</code>, if it is enabled.",8,[[],[["option",4],["metadata",3]]]],[11,"with_subscriber","","Invokes a function with a reference to this span\'s ID and …",8,[[],["option",4]]],[11,"exit","","Exits this span, returning the underlying [<code>Span</code>].",9,[[],["span",3]]],[0,"subscriber","tracing","Collects and records trace data.",null,null],[8,"Subscriber","tracing::subscriber","Trait representing the functions required to collect …",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning …",1,[[["metadata",3]],["interest",3]]],[10,"enabled","","Returns true if a span or event with the specified …",1,[[["metadata",3]]]],[11,"max_level_hint","","Returns the highest verbosity level that this <code>Subscriber</code> …",1,[[],[["levelfilter",3],["option",4]]]],[10,"new_span","","Visit the construction of a new span, returning a new …",1,[[["attributes",3]],["id",3]]],[10,"record","","Record a set of values on a span.",1,[[["record",3],["id",3]]]],[10,"record_follows_from","","Adds an indication that <code>span</code> follows from the span with …",1,[[["id",3]]]],[10,"event","","Records that an <code>Event</code> has occurred.",1,[[["event",3]]]],[10,"enter","","Records that a span has been entered.",1,[[["id",3]]]],[10,"exit","","Records that a span has been exited.",1,[[["id",3]]]],[11,"clone_span","","Notifies the subscriber that a span ID has been cloned.",1,[[["id",3]],["id",3]]],[11,"drop_span","","<strong>This method is deprecated.</strong>",1,[[["id",3]]]],[11,"try_close","","Notifies the subscriber that a [<code>span ID</code>] has been …",1,[[["id",3]]]],[11,"current_span","","Returns a type representing this subscriber\'s view of the …",1,[[],["current",3]]],[11,"downcast_raw","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …",1,[[["typeid",3]],["option",4]]],[3,"Interest","","Indicates a <code>Subscriber</code>\'s interest in a particular …",null,null],[3,"DefaultGuard","","A guard that resets the current default dispatcher to the …",null,null],[3,"SetGlobalDefaultError","","Returned if setting the global dispatcher fails.",null,null],[5,"with_default","","Sets this subscriber as the default for the duration of a …",null,[[]]],[5,"set_global_default","","Sets this subscriber as the global default for the …",null,[[],[["setglobaldefaulterror",3],["result",4]]]],[5,"set_default","","Sets the subscriber as the default for the duration of …",null,[[],["defaultguard",3]]],[8,"Instrument","tracing","Attaches spans to a <code>std::future::Future</code>.",null,null],[11,"instrument","","Instruments this type with the provided <code>Span</code>, returning an…",4,[[["span",3]],["instrumented",3]]],[11,"in_current_span","","Instruments this type with the current <code>Span</code>, returning an …",4,[[],["instrumented",3]]],[3,"Span","","A handle representing a span, with the capability to …",null,null],[14,"span","","Constructs a new span.",null,null],[14,"trace_span","","Constructs a span at the trace level.",null,null],[14,"debug_span","","Constructs a span at the debug level.",null,null],[14,"info_span","","Constructs a span at the info level.",null,null],[14,"warn_span","","Constructs a span at the warn level.",null,null],[14,"error_span","","Constructs a span at the error level.",null,null],[14,"event","","Constructs a new <code>Event</code>.",null,null],[14,"trace","","Constructs an event at the trace level.",null,null],[14,"debug","","Constructs an event at the debug level.",null,null],[14,"info","","Constructs an event at the info level.",null,null],[14,"warn","","Constructs an event at the warn level.",null,null],[14,"error","","Constructs an event at the error level.",null,null],[11,"from","tracing::dispatcher","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","tracing::event","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","tracing","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","tracing::subscriber","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","tracing::field","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","tracing::instrument","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"into_future","","",6,[[]]],[11,"from","tracing::level_filters","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","tracing::span","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","tracing","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","tracing::span","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","tracing::subscriber","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"fmt","tracing::level_filters","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::subscriber","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing","",12,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::level_filters","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",25,[[["level",3]],[["ordering",4],["option",4]]]],[11,"lt","","",25,[[["level",3]]]],[11,"le","","",25,[[["level",3]]]],[11,"gt","","",25,[[["level",3]]]],[11,"ge","","",25,[[["level",3]]]],[11,"partial_cmp","tracing","",12,[[["level",3]],[["ordering",4],["option",4]]]],[11,"lt","","",12,[[["level",3]]]],[11,"le","","",12,[[["level",3]]]],[11,"gt","","",12,[[["level",3]]]],[11,"ge","","",12,[[["level",3]]]],[11,"partial_cmp","tracing::level_filters","",25,[[["levelfilter",3]],[["ordering",4],["option",4]]]],[11,"lt","","",25,[[["levelfilter",3]]]],[11,"le","","",25,[[["levelfilter",3]]]],[11,"gt","","",25,[[["levelfilter",3]]]],[11,"ge","","",25,[[["levelfilter",3]]]],[11,"partial_cmp","tracing","",12,[[["levelfilter",3]],[["ordering",4],["option",4]]]],[11,"lt","","",12,[[["levelfilter",3]]]],[11,"le","","",12,[[["levelfilter",3]]]],[11,"gt","","",12,[[["levelfilter",3]]]],[11,"ge","","",12,[[["levelfilter",3]]]],[11,"next","tracing::field","",20,[[],[["field",3],["option",4]]]],[11,"from_str","tracing::level_filters","",25,[[],[["result",4],["levelfilter",3]]]],[11,"from_str","tracing","",12,[[],[["level",3],["parselevelerror",3],["result",4]]]],[11,"from","tracing::dispatcher","",10,[[],["dispatch",3]]],[11,"from","tracing::level_filters","",25,[[["level",3]],["levelfilter",3]]],[11,"from","","",25,[[["option",4],["level",3]],["levelfilter",3]]],[11,"hash","tracing::span","",27,[[]]],[11,"hash","tracing::field","",16,[[]]],[11,"default","tracing::dispatcher","Returns the current default dispatcher",10,[[],["dispatch",3]]],[11,"into","tracing::level_filters","",25,[[],[["option",4],["level",3]]]],[11,"cmp","tracing","",12,[[["level",3]],["ordering",4]]],[11,"cmp","tracing::level_filters","",25,[[["levelfilter",3]],["ordering",4]]],[11,"eq","","",25,[[["levelfilter",3]]]],[11,"ne","","",25,[[["levelfilter",3]]]],[11,"eq","tracing::field","",16,[[["field",3]]]],[11,"eq","tracing::level_filters","",25,[[["level",3]]]],[11,"eq","tracing","",12,[[["level",3]]]],[11,"ne","","",12,[[["level",3]]]],[11,"eq","tracing::field","",17,[[["empty",3]]]],[11,"eq","tracing","",12,[[["levelfilter",3]]]],[11,"eq","tracing::span","",27,[[["id",3]]]],[11,"ne","","",27,[[["id",3]]]],[11,"clone","tracing::subscriber","",30,[[],["interest",3]]],[11,"clone","tracing","",12,[[],["level",3]]],[11,"clone","tracing::level_filters","",25,[[],["levelfilter",3]]],[11,"clone","","",24,[[],["parselevelfiltererror",3]]],[11,"clone","tracing::span","",27,[[],["id",3]]],[11,"clone","tracing::field","",21,[[],["displayvalue",3]]],[11,"clone","","",16,[[],["field",3]]],[11,"clone","tracing::dispatcher","",10,[[],["dispatch",3]]],[11,"clone","tracing::field","",22,[[],["debugvalue",3]]],[11,"fmt","tracing::subscriber","",30,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::span","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::dispatcher","",10,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing","",12,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::subscriber","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::event","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::level_filters","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::span","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::level_filters","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::span","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::field","",17,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tracing::subscriber","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"as_ref","tracing::field","",16,[[]]],[11,"record","","",22,[[["field",3],["visit",8]]]],[11,"record","","",17,[[["field",3],["visit",8]]]],[11,"record","","",21,[[["field",3],["visit",8]]]],[11,"drop","tracing::subscriber","",14,[[]]],[11,"as_field","tracing::field","",16,[[["metadata",3]],[["option",4],["field",3]]]],[11,"drop","tracing","",8,[[]]],[11,"drop","tracing::span","",29,[[]]],[11,"drop","","",9,[[]]],[11,"into","tracing","",8,[[],[["id",3],["option",4]]]],[11,"clone","tracing::instrument","",23,[[],["withdispatch",3]]],[11,"clone","","",6,[[],["instrumented",3]]],[11,"clone","tracing","",8,[[],["span",3]]],[11,"eq","","",8,[[]]],[11,"deref","tracing::span","",9,[[],["span",3]]],[11,"fmt","tracing::instrument","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","tracing::span","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","tracing","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",8,[[]]],[11,"poll","tracing::instrument","",6,[[["context",3],["pin",3]],["poll",4]]],[11,"none","tracing::dispatcher","Returns a new <code>Dispatch</code> that discards events and spans.",10,[[],["dispatch",3]]],[11,"new","","Returns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.",10,[[],["dispatch",3]]],[11,"register_callsite","","Registers a new callsite with this subscriber, returning …",10,[[["metadata",3]],["interest",3]]],[11,"new_span","","Record the construction of a new span, returning a new ID …",10,[[["attributes",3]],["id",3]]],[11,"record","","Record a set of values on a span.",10,[[["record",3],["id",3]]]],[11,"record_follows_from","","Adds an indication that <code>span</code> follows from the span with …",10,[[["id",3]]]],[11,"enabled","","Returns true if a span with the specified metadata would …",10,[[["metadata",3]]]],[11,"event","","Records that an <code>Event</code> has occurred.",10,[[["event",3]]]],[11,"enter","","Records that a span has been can_enter.",10,[[["id",3]]]],[11,"exit","","Records that a span has been exited.",10,[[["id",3]]]],[11,"clone_span","","Notifies the subscriber that a span ID has been cloned.",10,[[["id",3]],["id",3]]],[11,"drop_span","","Notifies the subscriber that a span ID has been dropped.",10,[[["id",3]]]],[11,"try_close","","Notifies the subscriber that a span ID has been dropped, …",10,[[["id",3]]]],[11,"current_span","","Returns a type representing this subscriber\'s view of the …",10,[[],["current",3]]],[11,"is","","Returns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …",10,[[]]],[11,"downcast_ref","","Returns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …",10,[[],["option",4]]],[11,"dispatch","tracing::event","Constructs a new <code>Event</code> with the specified metadata and …",11,[[["valueset",3],["metadata",3]]]],[11,"new","","Returns a new <code>Event</code> in the current span, with the …",11,[[["valueset",3],["metadata",3]],["event",3]]],[11,"new_child_of","","Returns a new <code>Event</code> as a child of the specified span, …",11,[[["valueset",3],["metadata",3]],["event",3]]],[11,"child_of","","Constructs a new <code>Event</code> with the specified metadata and …",11,[[["valueset",3],["metadata",3]]]],[11,"record","","Visits all the fields on this <code>Event</code> with the specified …",11,[[["visit",8]]]],[11,"fields","","Returns an iterator over the set of values on this <code>Event</code>.",11,[[],["iter",3]]],[11,"metadata","","Returns metadata describing this <code>Event</code>.",11,[[],["metadata",3]]],[11,"is_root","","Returns true if the new event should be a root.",11,[[]]],[11,"is_contextual","","Returns true if the new event\'s parent should be …",11,[[]]],[11,"parent","","Returns the new event\'s explicitly-specified parent, if …",11,[[],[["id",3],["option",4]]]],[11,"is","tracing::subscriber","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.",1,[[]]],[11,"downcast_ref","","Returns some reference to this <code>Subscriber</code> value if it is …",1,[[],["option",4]]],[18,"ERROR","tracing","The \\\"error\\\" level.",12,null],[18,"WARN","","The \\\"warn\\\" level.",12,null],[18,"INFO","","The \\\"info\\\" level.",12,null],[18,"DEBUG","","The \\\"debug\\\" level.",12,null],[18,"TRACE","","The \\\"trace\\\" level.",12,null],[11,"new","","Construct new metadata for a span or event, with a name, …",13,[[["kind",3],["level",3],["option",4],["fieldset",3],["option",4]],["metadata",3]]],[11,"fields","","Returns the names of the fields on the described span or …",13,[[],["fieldset",3]]],[11,"level","","Returns the level of verbosity of the described span or …",13,[[],["level",3]]],[11,"name","","Returns the name of the span.",13,[[]]],[11,"target","","Returns a string describing the part of the system where …",13,[[]]],[11,"module_path","","Returns the path to the Rust module where the span …",13,[[],["option",4]]],[11,"file","","Returns the name of the source code file where the span …",13,[[],["option",4]]],[11,"line","","Returns the line number in the source code file where the …",13,[[],["option",4]]],[11,"callsite","","Returns an opaque <code>Identifier</code> that uniquely identifies the …",13,[[],["identifier",3]]],[11,"is_event","","Returns true if the callsite kind is <code>Event</code>.",13,[[]]],[11,"is_span","","Return true if the callsite kind is <code>Span</code>.",13,[[]]],[11,"callsite","tracing::field","Returns an <code>Identifier</code> that uniquely identifies the …",16,[[],["identifier",3]]],[11,"name","","Returns a string representing the name of the field.",16,[[]]],[11,"new","","Constructs a new <code>FieldSet</code> with the given array of field …",18,[[["identifier",3]],["fieldset",3]]],[11,"field","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …",18,[[],[["field",3],["option",4]]]],[11,"contains","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.",18,[[["field",3]]]],[11,"iter","","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.",18,[[],["iter",3]]],[11,"len","","Returns the number of fields in this <code>FieldSet</code>.",18,[[]]],[11,"is_empty","","Returns whether or not this <code>FieldSet</code> has fields.",18,[[]]],[11,"callsite","","Returns an <code>Identifier</code> that uniquely identifies the …",19,[[],["identifier",3]]],[18,"OFF","tracing::level_filters","The \\\"off\\\" level.",25,null],[18,"ERROR","","The \\\"error\\\" level.",25,null],[18,"WARN","","The \\\"warn\\\" level.",25,null],[18,"INFO","","The \\\"info\\\" level.",25,null],[18,"DEBUG","","The \\\"debug\\\" level.",25,null],[18,"TRACE","","The \\\"trace\\\" level.",25,null],[11,"from_level","","Returns a <code>LevelFilter</code> that enables spans and events with …",25,[[["level",3]],["levelfilter",3]]],[11,"into_level","","Returns the most verbose <code>Level</code> that this filter accepts, …",25,[[],[["option",4],["level",3]]]],[11,"current","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …",25,[[],["levelfilter",3]]],[11,"new","tracing::span","Returns <code>Attributes</code> describing a new child span of the …",26,[[["valueset",3],["metadata",3]],["attributes",3]]],[11,"new_root","","Returns <code>Attributes</code> describing a new span at the root of …",26,[[["valueset",3],["metadata",3]],["attributes",3]]],[11,"child_of","","Returns <code>Attributes</code> describing a new child span of the …",26,[[["id",3],["valueset",3],["metadata",3]],["attributes",3]]],[11,"metadata","","Returns a reference to the new span\'s metadata.",26,[[],["metadata",3]]],[11,"values","","Returns a reference to a <code>ValueSet</code> containing any values …",26,[[],["valueset",3]]],[11,"is_root","","Returns true if the new span should be a root.",26,[[]]],[11,"is_contextual","","Returns true if the new span\'s parent should be …",26,[[]]],[11,"parent","","Returns the new span\'s explicitly-specified parent, if …",26,[[],[["id",3],["option",4]]]],[11,"record","","Records all the fields in this set of <code>Attributes</code> with the …",26,[[["visit",8]]]],[11,"contains","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …",26,[[["field",3]]]],[11,"is_empty","","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.",26,[[]]],[11,"from_u64","","Constructs a new span ID from the given <code>u64</code>.",27,[[],["id",3]]],[11,"from_non_zero_u64","","Constructs a new span ID from the given <code>NonZeroU64</code>.",27,[[["nonzerou64",3]],["id",3]]],[11,"into_u64","","Returns the span\'s ID as a <code>u64</code>.",27,[[]]],[11,"into_non_zero_u64","","Returns the span\'s ID as a <code>NonZeroU64</code>.",27,[[],["nonzerou64",3]]],[11,"new","","Constructs a new <code>Record</code> from a <code>ValueSet</code>.",28,[[["valueset",3]],["record",3]]],[11,"record","","Records all the fields in this <code>Record</code> with the provided …",28,[[["visit",8]]]],[11,"contains","","Returns <code>true</code> if this <code>Record</code> contains a value for the …",28,[[["field",3]]]],[11,"is_empty","","Returns true if this <code>Record</code> contains <em>no</em> values.",28,[[]]],[11,"never","tracing::subscriber","Returns an <code>Interest</code> indicating that the subscriber is …",30,[[],["interest",3]]],[11,"sometimes","","Returns an <code>Interest</code> indicating the subscriber is …",30,[[],["interest",3]]],[11,"always","","Returns an <code>Interest</code> indicating the subscriber is always …",30,[[],["interest",3]]],[11,"is_never","","Returns <code>true</code> if the subscriber is never interested in …",30,[[]]],[11,"is_sometimes","","Returns <code>true</code> if the subscriber is sometimes interested in …",30,[[]]],[11,"is_always","","Returns <code>true</code> if the subscriber is always interested in …",30,[[]]]],"p":[[8,"Value"],[8,"Subscriber"],[8,"Visit"],[8,"AsField"],[8,"Instrument"],[8,"WithSubscriber"],[3,"Instrumented"],[8,"AsId"],[3,"Span"],[3,"EnteredSpan"],[3,"Dispatch"],[3,"Event"],[3,"Level"],[3,"Metadata"],[3,"DefaultGuard"],[3,"SetGlobalDefaultError"],[3,"Field"],[3,"Empty"],[3,"FieldSet"],[3,"ValueSet"],[3,"Iter"],[3,"DisplayValue"],[3,"DebugValue"],[3,"WithDispatch"],[3,"ParseLevelFilterError"],[3,"LevelFilter"],[3,"Attributes"],[3,"Id"],[3,"Record"],[3,"Entered"],[3,"Interest"]]},\
"tracing_attributes":{"doc":"A procedural macro attribute for instrumenting functions …","i":[[23,"instrument","tracing_attributes","Instruments a function to create and enter a <code>tracing</code> span …",null,null]],"p":[]},\
"tracing_core":{"doc":"Core primitives for <code>tracing</code>.","i":[[3,"Once","tracing_core","A synchronization primitive which can be used to run a …",null,null],[0,"callsite","","Callsites represent the source locations from which spans …",null,null],[8,"Callsite","tracing_core::callsite","Trait implemented by callsites.",null,null],[10,"set_interest","","Sets the <code>Interest</code> for this callsite.",0,[[["interest",3]]]],[10,"metadata","","Returns the metadata associated with the callsite.",0,[[],["metadata",3]]],[3,"Identifier","","Uniquely identifies a <code>Callsite</code>",null,null],[5,"rebuild_interest_cache","","Clear and reregister interest on every <code>Callsite</code>",null,[[]]],[5,"register","","Register a new <code>Callsite</code> with the global registry.",null,[[["callsite",8]]]],[0,"dispatcher","tracing_core","Dispatches trace events to <code>Subscriber</code>s.",null,null],[3,"Dispatch","tracing_core::dispatcher","<code>Dispatch</code> trace data to a <code>Subscriber</code>.",null,null],[3,"DefaultGuard","","A guard that resets the current default dispatcher to the …",null,null],[5,"with_default","","Sets this dispatch as the default for the duration of a …",null,[[["dispatch",3]]]],[5,"set_default","","Sets the dispatch as the default dispatch for the …",null,[[["dispatch",3]],["defaultguard",3]]],[5,"set_global_default","","Sets this dispatch as the global default for the duration …",null,[[["dispatch",3]],[["setglobaldefaulterror",3],["result",4]]]],[3,"SetGlobalDefaultError","","Returned if setting the global dispatcher fails.",null,null],[5,"get_default","","Executes a closure with a reference to this thread\'s …",null,[[]]],[11,"none","","Returns a new <code>Dispatch</code> that discards events and spans.",1,[[]]],[11,"new","","Returns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.",1,[[]]],[11,"register_callsite","","Registers a new callsite with this subscriber, returning …",1,[[["metadata",3]],["interest",3]]],[11,"new_span","","Record the construction of a new span, returning a new ID …",1,[[["attributes",3]],["id",3]]],[11,"record","","Record a set of values on a span.",1,[[["id",3],["record",3]]]],[11,"record_follows_from","","Adds an indication that <code>span</code> follows from the span with …",1,[[["id",3]]]],[11,"enabled","","Returns true if a span with the specified metadata would …",1,[[["metadata",3]]]],[11,"event","","Records that an <code>Event</code> has occurred.",1,[[["event",3]]]],[11,"enter","","Records that a span has been can_enter.",1,[[["id",3]]]],[11,"exit","","Records that a span has been exited.",1,[[["id",3]]]],[11,"clone_span","","Notifies the subscriber that a span ID has been cloned.",1,[[["id",3]],["id",3]]],[11,"drop_span","","Notifies the subscriber that a span ID has been dropped.",1,[[["id",3]]]],[11,"try_close","","Notifies the subscriber that a span ID has been dropped, …",1,[[["id",3]]]],[11,"current_span","","Returns a type representing this subscriber\'s view of the …",1,[[],["current",3]]],[11,"is","","Returns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …",1,[[]]],[11,"downcast_ref","","Returns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …",1,[[],["option",4]]],[0,"event","tracing_core","Events represent single points in time during the …",null,null],[3,"Event","tracing_core::event","<code>Event</code>s represent single points in time where something …",null,null],[11,"dispatch","","Constructs a new <code>Event</code> with the specified metadata and …",2,[[["metadata",3],["valueset",3]]]],[11,"new","","Returns a new <code>Event</code> in the current span, with the …",2,[[["metadata",3],["valueset",3]]]],[11,"new_child_of","","Returns a new <code>Event</code> as a child of the specified span, …",2,[[["metadata",3],["valueset",3]]]],[11,"child_of","","Constructs a new <code>Event</code> with the specified metadata and …",2,[[["metadata",3],["valueset",3]]]],[11,"record","","Visits all the fields on this <code>Event</code> with the specified …",2,[[["visit",8]]]],[11,"fields","","Returns an iterator over the set of values on this <code>Event</code>.",2,[[],["iter",3]]],[11,"metadata","","Returns metadata describing this <code>Event</code>.",2,[[],["metadata",3]]],[11,"is_root","","Returns true if the new event should be a root.",2,[[]]],[11,"is_contextual","","Returns true if the new event\'s parent should be …",2,[[]]],[11,"parent","","Returns the new event\'s explicitly-specified parent, if …",2,[[],[["option",4],["id",3]]]],[0,"field","tracing_core","Span and <code>Event</code> key-value data.",null,null],[3,"Field","tracing_core::field","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>\'s …",null,null],[3,"Empty","","An empty field.",null,null],[3,"FieldSet","","Describes the fields present on a span.",null,null],[3,"ValueSet","","A set of fields and values for a span.",null,null],[3,"Iter","","An iterator over a set of fields.",null,null],[8,"Visit","","Visits typed values.",null,null],[11,"record_i64","","Visit a signed 64-bit integer value.",3,[[["field",3]]]],[11,"record_u64","","Visit an unsigned 64-bit integer value.",3,[[["field",3]]]],[11,"record_bool","","Visit a boolean value.",3,[[["field",3]]]],[11,"record_str","","Visit a string value.",3,[[["field",3]]]],[11,"record_error","","Records a type implementing <code>Error</code>.",3,[[["error",8],["field",3]]]],[10,"record_debug","","Visit a value implementing <code>fmt::Debug</code>.",3,[[["debug",8],["field",3]]]],[8,"Value","","A field value of an erased type.",null,null],[10,"record","","Visits this value with the given <code>Visitor</code>.",4,[[["visit",8],["field",3]]]],[3,"DisplayValue","","A <code>Value</code> which serializes using <code>fmt::Display</code>.",null,null],[3,"DebugValue","","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.",null,null],[5,"display","","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that …",null,[[],["displayvalue",3]]],[5,"debug","","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can …",null,[[],["debugvalue",3]]],[11,"callsite","","Returns an <code>Identifier</code> that uniquely identifies the …",5,[[],["identifier",3]]],[11,"name","","Returns a string representing the name of the field.",5,[[]]],[11,"new","","Constructs a new <code>FieldSet</code> with the given array of field …",6,[[["identifier",3]]]],[11,"field","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …",6,[[],[["field",3],["option",4]]]],[11,"contains","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.",6,[[["field",3]]]],[11,"iter","","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.",6,[[],["iter",3]]],[11,"len","","Returns the number of fields in this <code>FieldSet</code>.",6,[[]]],[11,"is_empty","","Returns whether or not this <code>FieldSet</code> has fields.",6,[[]]],[11,"callsite","","Returns an <code>Identifier</code> that uniquely identifies the …",7,[[],["identifier",3]]],[0,"metadata","tracing_core","Metadata describing trace data.",null,null],[3,"Metadata","tracing_core::metadata","Metadata describing a span or event.",null,null],[3,"Kind","","Indicates whether the callsite is a span or event.",null,null],[3,"Level","","Describes the level of verbosity of a span or event.",null,null],[3,"LevelFilter","","A filter comparable to a verbosity <code>Level</code>.",null,null],[3,"ParseLevelFilterError","","Indicates that a string could not be parsed to a valid …",null,null],[11,"new","","Construct new metadata for a span or event, with a name, …",8,[[["option",4],["level",3],["kind",3],["fieldset",3],["option",4]]]],[11,"fields","","Returns the names of the fields on the described span or …",8,[[],["fieldset",3]]],[11,"level","","Returns the level of verbosity of the described span or …",8,[[],["level",3]]],[11,"name","","Returns the name of the span.",8,[[]]],[11,"target","","Returns a string describing the part of the system where …",8,[[]]],[11,"module_path","","Returns the path to the Rust module where the span …",8,[[],["option",4]]],[11,"file","","Returns the name of the source code file where the span …",8,[[],["option",4]]],[11,"line","","Returns the line number in the source code file where the …",8,[[],["option",4]]],[11,"callsite","","Returns an opaque <code>Identifier</code> that uniquely identifies the …",8,[[],["identifier",3]]],[11,"is_event","","Returns true if the callsite kind is <code>Event</code>.",8,[[]]],[11,"is_span","","Return true if the callsite kind is <code>Span</code>.",8,[[]]],[18,"EVENT","","<code>Event</code> callsite",9,null],[18,"SPAN","","<code>Span</code> callsite",9,null],[11,"is_span","","Return true if the callsite kind is <code>Span</code>",9,[[]]],[11,"is_event","","Return true if the callsite kind is <code>Event</code>",9,[[]]],[18,"ERROR","","The \\\"error\\\" level.",10,null],[18,"WARN","","The \\\"warn\\\" level.",10,null],[18,"INFO","","The \\\"info\\\" level.",10,null],[18,"DEBUG","","The \\\"debug\\\" level.",10,null],[18,"TRACE","","The \\\"trace\\\" level.",10,null],[18,"OFF","","The \\\"off\\\" level.",11,null],[18,"ERROR","","The \\\"error\\\" level.",11,null],[18,"WARN","","The \\\"warn\\\" level.",11,null],[18,"INFO","","The \\\"info\\\" level.",11,null],[18,"DEBUG","","The \\\"debug\\\" level.",11,null],[18,"TRACE","","The \\\"trace\\\" level.",11,null],[11,"from_level","","Returns a <code>LevelFilter</code> that enables spans and events with …",11,[[["level",3]]]],[11,"into_level","","Returns the most verbose <code>Level</code> that this filter accepts, …",11,[[],[["option",4],["level",3]]]],[11,"current","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …",11,[[]]],[3,"ParseLevelError","","Returned if parsing a <code>Level</code> fails.",null,null],[0,"span","tracing_core","Spans represent periods of time in the execution of a …",null,null],[3,"Id","tracing_core::span","Identifies a span within the context of a subscriber.",null,null],[3,"Attributes","","Attributes provided to a <code>Subscriber</code> describing a new span …",null,null],[3,"Record","","A set of fields recorded by a span.",null,null],[3,"Current","","Indicates what the <code>Subscriber</code> considers the \\\"current\\\" …",null,null],[11,"from_u64","","Constructs a new span ID from the given <code>u64</code>.",12,[[]]],[11,"from_non_zero_u64","","Constructs a new span ID from the given <code>NonZeroU64</code>.",12,[[["nonzerou64",3]]]],[11,"into_u64","","Returns the span\'s ID as a <code>u64</code>.",12,[[]]],[11,"into_non_zero_u64","","Returns the span\'s ID as a <code>NonZeroU64</code>.",12,[[],["nonzerou64",3]]],[11,"new","","Returns <code>Attributes</code> describing a new child span of the …",13,[[["metadata",3],["valueset",3]]]],[11,"new_root","","Returns <code>Attributes</code> describing a new span at the root of …",13,[[["metadata",3],["valueset",3]]]],[11,"child_of","","Returns <code>Attributes</code> describing a new child span of the …",13,[[["metadata",3],["id",3],["valueset",3]]]],[11,"metadata","","Returns a reference to the new span\'s metadata.",13,[[],["metadata",3]]],[11,"values","","Returns a reference to a <code>ValueSet</code> containing any values …",13,[[],["valueset",3]]],[11,"is_root","","Returns true if the new span should be a root.",13,[[]]],[11,"is_contextual","","Returns true if the new span\'s parent should be …",13,[[]]],[11,"parent","","Returns the new span\'s explicitly-specified parent, if …",13,[[],[["option",4],["id",3]]]],[11,"record","","Records all the fields in this set of <code>Attributes</code> with the …",13,[[["visit",8]]]],[11,"contains","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …",13,[[["field",3]]]],[11,"is_empty","","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.",13,[[]]],[11,"new","","Constructs a new <code>Record</code> from a <code>ValueSet</code>.",14,[[["valueset",3]]]],[11,"record","","Records all the fields in this <code>Record</code> with the provided …",14,[[["visit",8]]]],[11,"contains","","Returns <code>true</code> if this <code>Record</code> contains a value for the …",14,[[["field",3]]]],[11,"is_empty","","Returns true if this <code>Record</code> contains <em>no</em> values.",14,[[]]],[11,"new","","Constructs a new <code>Current</code> that indicates the current …",15,[[["metadata",3],["id",3]]]],[11,"none","","Constructs a new <code>Current</code> that indicates the current …",15,[[]]],[11,"is_known","","Returns <code>true</code> if the <code>Subscriber</code> that constructed this …",15,[[]]],[11,"into_inner","","Consumes <code>self</code> and returns the span <code>Id</code> and <code>Metadata</code> of the …",15,[[],["option",4]]],[11,"id","","Borrows the <code>Id</code> of the current span, if one exists and is …",15,[[],[["option",4],["id",3]]]],[11,"metadata","","Borrows the <code>Metadata</code> of the current span, if one exists …",15,[[],[["metadata",3],["option",4]]]],[0,"subscriber","tracing_core","Subscribers collect and record trace data.",null,null],[8,"Subscriber","tracing_core::subscriber","Trait representing the functions required to collect …",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning …",16,[[["metadata",3]],["interest",3]]],[10,"enabled","","Returns true if a span or event with the specified …",16,[[["metadata",3]]]],[11,"max_level_hint","","Returns the highest verbosity level that this <code>Subscriber</code> …",16,[[],[["option",4],["levelfilter",3]]]],[10,"new_span","","Visit the construction of a new span, returning a new …",16,[[["attributes",3]],["id",3]]],[10,"record","","Record a set of values on a span.",16,[[["id",3],["record",3]]]],[10,"record_follows_from","","Adds an indication that <code>span</code> follows from the span with …",16,[[["id",3]]]],[10,"event","","Records that an <code>Event</code> has occurred.",16,[[["event",3]]]],[10,"enter","","Records that a span has been entered.",16,[[["id",3]]]],[10,"exit","","Records that a span has been exited.",16,[[["id",3]]]],[11,"clone_span","","Notifies the subscriber that a span ID has been cloned.",16,[[["id",3]],["id",3]]],[11,"drop_span","","<strong>This method is deprecated.</strong>",16,[[["id",3]]]],[11,"try_close","","Notifies the subscriber that a [<code>span ID</code>] has been …",16,[[["id",3]]]],[11,"current_span","","Returns a type representing this subscriber\'s view of the …",16,[[],["current",3]]],[11,"downcast_raw","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …",16,[[["typeid",3]],["option",4]]],[11,"is","","Returns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.",16,[[]]],[11,"downcast_ref","","Returns some reference to this <code>Subscriber</code> value if it is …",16,[[],["option",4]]],[3,"Interest","","Indicates a <code>Subscriber</code>\'s interest in a particular …",null,null],[11,"never","","Returns an <code>Interest</code> indicating that the subscriber is …",17,[[]]],[11,"sometimes","","Returns an <code>Interest</code> indicating the subscriber is …",17,[[]]],[11,"always","","Returns an <code>Interest</code> indicating the subscriber is always …",17,[[]]],[11,"is_never","","Returns <code>true</code> if the subscriber is never interested in …",17,[[]]],[11,"is_sometimes","","Returns <code>true</code> if the subscriber is sometimes interested in …",17,[[]]],[11,"is_always","","Returns <code>true</code> if the subscriber is always interested in …",17,[[]]],[8,"Callsite","tracing_core","Trait implemented by callsites.",null,null],[10,"set_interest","","Sets the <code>Interest</code> for this callsite.",0,[[["interest",3]]]],[10,"metadata","","Returns the metadata associated with the callsite.",0,[[],["metadata",3]]],[3,"Dispatch","","<code>Dispatch</code> trace data to a <code>Subscriber</code>.",null,null],[3,"Event","","<code>Event</code>s represent single points in time where something …",null,null],[3,"Field","","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>\'s …",null,null],[3,"Level","","Describes the level of verbosity of a span or event.",null,null],[3,"LevelFilter","","A filter comparable to a verbosity <code>Level</code>.",null,null],[3,"Metadata","","Metadata describing a span or event.",null,null],[8,"Subscriber","","Trait representing the functions required to collect …",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning …",16,[[["metadata",3]],["interest",3]]],[10,"enabled","","Returns true if a span or event with the specified …",16,[[["metadata",3]]]],[11,"max_level_hint","","Returns the highest verbosity level that this <code>Subscriber</code> …",16,[[],[["option",4],["levelfilter",3]]]],[10,"new_span","","Visit the construction of a new span, returning a new …",16,[[["attributes",3]],["id",3]]],[10,"record","","Record a set of values on a span.",16,[[["id",3],["record",3]]]],[10,"record_follows_from","","Adds an indication that <code>span</code> follows from the span with …",16,[[["id",3]]]],[10,"event","","Records that an <code>Event</code> has occurred.",16,[[["event",3]]]],[10,"enter","","Records that a span has been entered.",16,[[["id",3]]]],[10,"exit","","Records that a span has been exited.",16,[[["id",3]]]],[11,"clone_span","","Notifies the subscriber that a span ID has been cloned.",16,[[["id",3]],["id",3]]],[11,"drop_span","","<strong>This method is deprecated.</strong>",16,[[["id",3]]]],[11,"try_close","","Notifies the subscriber that a [<code>span ID</code>] has been …",16,[[["id",3]]]],[11,"current_span","","Returns a type representing this subscriber\'s view of the …",16,[[],["current",3]]],[11,"downcast_raw","","If <code>self</code> is the same type as the provided <code>TypeId</code>, returns …",16,[[["typeid",3]],["option",4]]],[14,"identify_callsite","","Statically constructs an <code>Identifier</code> for the provided …",null,null],[14,"metadata","","Statically constructs new span metadata.",null,null],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","tracing_core::callsite","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","tracing_core","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","tracing_core::dispatcher","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","tracing_core","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","tracing_core::field","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"into_iter","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","tracing_core","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","tracing_core::metadata","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","tracing_core","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","tracing_core::metadata","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","tracing_core::span","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","tracing_core::subscriber","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"fmt","tracing_core","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"record","tracing_core::field","",24,[[["visit",8],["field",3]]]],[11,"record","","",25,[[["visit",8],["field",3]]]],[11,"record","","",22,[[["visit",8],["field",3]]]],[11,"drop","tracing_core::dispatcher","",20,[[]]],[11,"as_ref","tracing_core","",5,[[]]],[11,"from","","",1,[[]]],[11,"from","","",11,[[["level",3]]]],[11,"from","","",11,[[["option",4],["level",3]]]],[11,"into","","",11,[[],[["option",4],["level",3]]]],[11,"into","tracing_core::span","",15,[[],[["id",3],["option",4]]]],[11,"next","tracing_core::field","",23,[[],[["field",3],["option",4]]]],[11,"clone","tracing_core::callsite","",19,[[],["identifier",3]]],[11,"clone","tracing_core","",1,[[],["dispatch",3]]],[11,"clone","tracing_core::field","",24,[[],["displayvalue",3]]],[11,"clone","","",25,[[],["debugvalue",3]]],[11,"clone","tracing_core","",5,[[]]],[11,"clone","tracing_core::metadata","",9,[[],["kind",3]]],[11,"clone","tracing_core","",10,[[],["level",3]]],[11,"clone","","",11,[[],["levelfilter",3]]],[11,"clone","tracing_core::metadata","",26,[[],["parselevelfiltererror",3]]],[11,"clone","tracing_core::span","",12,[[],["id",3]]],[11,"clone","tracing_core::subscriber","",17,[[],["interest",3]]],[11,"default","tracing_core","Returns the current default dispatcher",1,[[]]],[11,"cmp","","",10,[[],["ordering",4]]],[11,"cmp","","",11,[[],["ordering",4]]],[11,"eq","tracing_core::callsite","",19,[[["identifier",3]]]],[11,"eq","tracing_core::field","",22,[[["empty",3]]]],[11,"eq","tracing_core","",5,[[]]],[11,"eq","tracing_core::metadata","",9,[[["kind",3]]]],[11,"ne","","",9,[[["kind",3]]]],[11,"eq","tracing_core","",10,[[["level",3]]]],[11,"ne","","",10,[[["level",3]]]],[11,"eq","","",11,[[["levelfilter",3]]]],[11,"ne","","",11,[[["levelfilter",3]]]],[11,"eq","","",10,[[["levelfilter",3]]]],[11,"eq","","",11,[[["level",3]]]],[11,"eq","tracing_core::span","",12,[[["id",3]]]],[11,"ne","","",12,[[["id",3]]]],[11,"partial_cmp","tracing_core","",10,[[["level",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["level",3]]]],[11,"le","","",10,[[["level",3]]]],[11,"gt","","",10,[[["level",3]]]],[11,"ge","","",10,[[["level",3]]]],[11,"partial_cmp","","",10,[[["levelfilter",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["levelfilter",3]]]],[11,"le","","",10,[[["levelfilter",3]]]],[11,"gt","","",10,[[["levelfilter",3]]]],[11,"ge","","",10,[[["levelfilter",3]]]],[11,"partial_cmp","","",11,[[["levelfilter",3]],[["ordering",4],["option",4]]]],[11,"lt","","",11,[[["levelfilter",3]]]],[11,"le","","",11,[[["levelfilter",3]]]],[11,"gt","","",11,[[["levelfilter",3]]]],[11,"ge","","",11,[[["levelfilter",3]]]],[11,"partial_cmp","","",11,[[["level",3]],[["ordering",4],["option",4]]]],[11,"lt","","",11,[[["level",3]]]],[11,"le","","",11,[[["level",3]]]],[11,"gt","","",11,[[["level",3]]]],[11,"ge","","",11,[[["level",3]]]],[11,"fmt","tracing_core::callsite","",19,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::dispatcher","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::field","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::metadata","",9,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core","",10,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::metadata","",26,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::metadata","",27,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::span","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::subscriber","",17,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::dispatcher","",21,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::field","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core","",5,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::field","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_core::metadata","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"hash","tracing_core::callsite","",19,[[]]],[11,"hash","tracing_core","",5,[[]]],[11,"hash","tracing_core::span","",12,[[]]],[11,"from_str","tracing_core","",10,[[],[["parselevelerror",3],["result",4]]]],[11,"from_str","","",11,[[],["result",4]]],[11,"new","","Creates a new <code>Once</code> value.",18,[[],["once",3]]],[11,"call_once","","Performs an initialization routine once and only once. …",18,[[]]],[11,"call_once_force","","Performs the same function as <code>call_once()</code> except ignores …",18,[[]]],[11,"is_completed","","Returns <code>true</code> if some <code>call_once()</code> call has completed …",18,[[]]]],"p":[[8,"Callsite"],[3,"Dispatch"],[3,"Event"],[8,"Visit"],[8,"Value"],[3,"Field"],[3,"FieldSet"],[3,"ValueSet"],[3,"Metadata"],[3,"Kind"],[3,"Level"],[3,"LevelFilter"],[3,"Id"],[3,"Attributes"],[3,"Record"],[3,"Current"],[8,"Subscriber"],[3,"Interest"],[3,"Once"],[3,"Identifier"],[3,"DefaultGuard"],[3,"SetGlobalDefaultError"],[3,"Empty"],[3,"Iter"],[3,"DisplayValue"],[3,"DebugValue"],[3,"ParseLevelFilterError"],[3,"ParseLevelError"]]},\
"tracing_log":{"doc":"Adapters for connecting unstructured log records from the …","i":[[0,"log_tracer","tracing_log","An adapter for converting [<code>log</code>] records into <code>tracing</code> <code>Event</code>…",null,null],[3,"SetLoggerError","tracing_log::log_tracer","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …",null,null],[3,"LogTracer","","A simple \\\"logger\\\" that converts all log records into …",null,null],[3,"Builder","","Configures a new <code>LogTracer</code>.",null,null],[11,"builder","","Returns a builder that allows customizing a <code>LogTracer</code> and …",0,[[],["builder",3]]],[11,"new","","Creates a new <code>LogTracer</code> that can then be used as a logger …",0,[[]]],[11,"init_with_filter","","Sets up <code>LogTracer</code> as global logger for the <code>log</code> crate, …",0,[[["levelfilter",4]],[["setloggererror",3],["result",4]]]],[11,"init","","Sets a <code>LogTracer</code> as the global logger for the <code>log</code> crate.",0,[[],[["setloggererror",3],["result",4]]]],[11,"new","","Returns a new <code>Builder</code> to construct a <code>LogTracer</code>.",1,[[]]],[11,"with_max_level","","Sets a global maximum level for <code>log</code> records.",1,[[]]],[11,"ignore_crate","","Configures the <code>LogTracer</code> to ignore all log records whose …",1,[[]]],[11,"ignore_all","","Configures the <code>LogTracer</code> to ignore all log records whose …",1,[[]]],[11,"init","","Constructs a new <code>LogTracer</code> with the provided …",1,[[],[["setloggererror",3],["result",4]]]],[3,"LogTracer","tracing_log","A simple \\\"logger\\\" that converts all log records into …",null,null],[5,"format_trace","","Format a log record as a trace event in the current span.",null,[[["record",3]],["result",6]]],[8,"AsLog","","Trait implemented for <code>tracing</code> types that can be converted …",null,null],[16,"Log","","The <code>log</code> type that this type can be converted into.",2,null],[10,"as_log","","Returns the <code>log</code> equivalent of <code>self</code>.",2,[[]]],[8,"AsTrace","","Trait implemented for <code>log</code> types that can be converted to …",null,null],[16,"Trace","","The <code>tracing</code> type that this type can be converted into.",3,null],[10,"as_trace","","Returns the <code>tracing</code> equivalent of <code>self</code>.",3,[[]]],[8,"NormalizeEvent","","Extends log <code>Event</code>s to provide complete <code>Metadata</code>.",null,null],[10,"normalized_metadata","","If this <code>Event</code> comes from a <code>log</code>, this method provides a new…",4,[[],[["metadata",3],["option",4]]]],[10,"is_log","","Returns whether this <code>Event</code> represents a log (from the <code>log</code> …",4,[[]]],[11,"from","tracing_log::log_tracer","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","tracing_log","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","tracing_log::log_tracer","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"default","tracing_log","",0,[[]]],[11,"default","tracing_log::log_tracer","",1,[[]]],[11,"fmt","tracing_log","",0,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_log::log_tracer","",1,[[["formatter",3]],["result",6]]],[11,"enabled","tracing_log","",0,[[["metadata",3]]]],[11,"log","","",0,[[["record",3]]]],[11,"flush","","",0,[[]]]],"p":[[3,"LogTracer"],[3,"Builder"],[8,"AsLog"],[8,"AsTrace"],[8,"NormalizeEvent"],[3,"SetLoggerError"]]},\
"tracing_serde":{"doc":"tracing-serdeAn adapter for serializing <code>tracing</code> types …","i":[[0,"fields","tracing_serde","Support for serializing fields as <code>serde</code> structs or maps.",null,null],[3,"SerializeFieldMap","tracing_serde::fields","",null,null],[8,"AsMap","","",null,null],[11,"field_map","","",0,[[],["serializefieldmap",3]]],[3,"SerializeField","tracing_serde","",null,null],[3,"SerializeFieldSet","","",null,null],[3,"SerializeLevel","","",null,null],[3,"SerializeId","","",null,null],[3,"SerializeMetadata","","",null,null],[3,"SerializeEvent","","Implements <code>serde::Serialize</code> to write <code>Event</code> data to a …",null,null],[3,"SerializeAttributes","","Implements <code>serde::Serialize</code> to write <code>Attributes</code> data to a …",null,null],[3,"SerializeRecord","","Implements <code>serde::Serialize</code> to write <code>Record</code> data to a …",null,null],[3,"SerdeMapVisitor","","Implements <code>tracing_core::field::Visit</code> for some …",null,null],[11,"new","","Create a new map visitor.",1,[[]]],[11,"finish","","Completes serializing the visited object, returning <code>Ok(())</code>…",1,[[],["result",4]]],[11,"take_serializer","","Completes serializing the visited object, returning …",1,[[],["result",4]]],[3,"SerdeStructVisitor","","Implements <code>tracing_core::field::Visit</code> for some …",null,null],[11,"finish","","Completes serializing the visited object, returning <code>Ok(())</code>…",2,[[],["result",4]]],[8,"AsSerde","","",null,null],[16,"Serializable","","",3,null],[10,"as_serde","","<code>as_serde</code> borrows a <code>tracing</code> value and returns the …",3,[[]]],[11,"from","tracing_serde::fields","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","tracing_serde","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"fmt","tracing_serde::fields","",4,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_serde","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"serialize","tracing_serde::fields","",4,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","tracing_serde","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"record_bool","","",1,[[["field",3]]]],[11,"record_debug","","",1,[[["field",3],["debug",8]]]],[11,"record_u64","","",1,[[["field",3]]]],[11,"record_i64","","",1,[[["field",3]]]],[11,"record_str","","",1,[[["field",3]]]],[11,"record_bool","","",2,[[["field",3]]]],[11,"record_debug","","",2,[[["field",3],["debug",8]]]],[11,"record_u64","","",2,[[["field",3]]]],[11,"record_i64","","",2,[[["field",3]]]],[11,"record_str","","",2,[[["field",3]]]]],"p":[[8,"AsMap"],[3,"SerdeMapVisitor"],[3,"SerdeStructVisitor"],[8,"AsSerde"],[3,"SerializeFieldMap"],[3,"SerializeField"],[3,"SerializeFieldSet"],[3,"SerializeLevel"],[3,"SerializeId"],[3,"SerializeMetadata"],[3,"SerializeEvent"],[3,"SerializeAttributes"],[3,"SerializeRecord"]]},\
"tracing_subscriber":{"doc":"Utilities for implementing and composing <code>tracing</code> …","i":[[0,"field","tracing_subscriber","Utilities for working with fields and field visitors.",null,null],[8,"Visit","tracing_subscriber::field","Visits typed values.",null,null],[11,"record_i64","","Visit a signed 64-bit integer value.",0,[[["field",3]]]],[11,"record_u64","","Visit an unsigned 64-bit integer value.",0,[[["field",3]]]],[11,"record_bool","","Visit a boolean value.",0,[[["field",3]]]],[11,"record_str","","Visit a string value.",0,[[["field",3]]]],[11,"record_error","","Records a type implementing <code>Error</code>.",0,[[["error",8],["field",3]]]],[10,"record_debug","","Visit a value implementing <code>fmt::Debug</code>.",0,[[["debug",8],["field",3]]]],[0,"debug","","<code>MakeVisitor</code> wrappers for working with <code>fmt::Debug</code> fields.",null,null],[3,"Alt","tracing_subscriber::field::debug","A visitor wrapper that ensures any <code>fmt::Debug</code> fields are …",null,null],[11,"new","","Wraps the provided visitor so that any <code>fmt::Debug</code> fields …",1,[[]]],[0,"delimited","tracing_subscriber::field","A <code>MakeVisitor</code> wrapper that separates formatted fields …",null,null],[3,"Delimited","tracing_subscriber::field::delimited","A <code>MakeVisitor</code> wrapper that wraps a visitor that writes …",null,null],[3,"VisitDelimited","","A visitor wrapper that inserts a delimiter after the …",null,null],[11,"new","","Returns a new <code>MakeVisitor</code> implementation that wraps <code>inner</code> …",2,[[]]],[11,"new","","Returns a new <code>Visit</code> implementation that wraps <code>inner</code> so …",3,[[]]],[0,"display","tracing_subscriber::field","<code>MakeVisitor</code> wrappers for working with <code>fmt::Display</code> fields.",null,null],[3,"Messages","tracing_subscriber::field::display","A visitor wrapper that ensures any strings named …",null,null],[11,"new","","Returns a new <code>MakeVisitor</code> implementation that will wrap …",4,[[]]],[8,"MakeVisitor","tracing_subscriber::field","Creates new visitors.",null,null],[16,"Visitor","","The visitor type produced by this <code>MakeVisitor</code>.",5,null],[10,"make_visitor","","Make a new visitor for the provided <code>target</code>.",5,[[]]],[8,"VisitOutput","","A visitor that produces output once it has visited a set …",null,null],[10,"finish","","Completes the visitor, returning any output.",6,[[]]],[11,"visit","","Visit a set of fields, and return the output of finishing …",6,[[]]],[8,"RecordFields","","Extension trait implemented by types which can be …",null,null],[10,"record","","Record all the fields in <code>self</code> with the provided <code>visitor</code>.",7,[[["visit",8]]]],[8,"MakeOutput","","Extension trait implemented for all <code>MakeVisitor</code> …",null,null],[11,"visit_with","","Visits all fields in <code>fields</code> with a new visitor …",8,[[]]],[8,"VisitWrite","","Extension trait implemented by visitors to indicate that …",null,null],[10,"writer","","Returns the writer that this visitor writes to.",9,[[],["write",8]]],[8,"VisitFmt","","Extension trait implemented by visitors to indicate that …",null,null],[10,"writer","","Returns the formatter that this visitor writes to.",10,[[],["write",8]]],[8,"MakeExt","","Extension trait providing <code>MakeVisitor</code> combinators.",null,null],[11,"debug_alt","","Wraps <code>self</code> so that any <code>fmt::Debug</code> fields are recorded …",11,[[],["alt",3]]],[11,"display_messages","","Wraps <code>self</code> so that any string fields named \\\"message\\\" are …",11,[[],["messages",3]]],[11,"delimited","","Wraps <code>self</code> so that when fields are formatted to a writer, …",11,[[],["delimited",3]]],[0,"filter","tracing_subscriber","<code>Layer</code>s that control which spans and events are enabled by …",null,null],[3,"LevelFilter","tracing_subscriber::filter","A filter comparable to a verbosity <code>Level</code>.",null,null],[3,"LevelParseError","","Indicates that a string could not be parsed to a valid …",null,null],[3,"Directive","","A single filtering directive.",null,null],[3,"ParseError","","Indicates that a string could not be parsed as a …",null,null],[3,"BadFieldName","","Indicates that a field name specified in a filter …",null,null],[3,"EnvFilter","","A <code>Layer</code> which filters spans and events based on a set of …",null,null],[3,"FromEnvError","","Indicates that an error occurred while parsing a <code>EnvFilter</code>…",null,null],[0,"fmt","tracing_subscriber","A <code>Subscriber</code> for formatting and logging <code>tracing</code> data.",null,null],[0,"format","tracing_subscriber::fmt","Formatters for logging <code>tracing</code> events.",null,null],[3,"Json","tracing_subscriber::fmt::format","Marker for <code>Format</code> that indicates that the verbose json …",null,null],[3,"JsonFields","","The JSON <code>FormatFields</code> implementation.",null,null],[3,"JsonVisitor","","The visitor produced by <code>JsonFields</code>\'s <code>MakeVisitor</code> …",null,null],[3,"Pretty","","An excessively pretty, human-readable event formatter.",null,null],[3,"PrettyVisitor","","The visitor produced by [<code>Pretty</code>]\'s <code>MakeVisitor</code> …",null,null],[3,"PrettyFields","","An excessively pretty, human-readable <code>MakeVisitor</code> …",null,null],[8,"FormatEvent","","A type that can format a tracing <code>Event</code> for a <code>fmt::Write</code>.",null,null],[10,"format_event","","Write a log message for <code>Event</code> in <code>Context</code> to the given …",12,[[["write",8],["event",3],["fmtcontext",3]],["result",6]]],[8,"FormatFields","","A type that can format a set of fields to a <code>fmt::Write</code>.",null,null],[10,"format_fields","","Format the provided <code>fields</code> to the provided <code>writer</code>, …",13,[[["recordfields",8],["write",8]],["result",6]]],[11,"add_fields","","Record additional field(s) on an existing span.",13,[[["string",3],["record",3]],["result",6]]],[5,"format","","Returns the default configuration for an [event formatter]…",null,[[],["format",3]]],[5,"json","","Returns the default configuration for a JSON [event …",null,[[],[["json",3],["format",3]]]],[5,"debug_fn","","Returns a <code>FormatFields</code> implementation that formats fields …",null,[[],["fieldfn",3]]],[3,"FieldFn","","A <code>FormatFields</code> implementation that formats fields by …",null,null],[3,"FieldFnVisitor","","The visitor produced by <code>FieldFn</code>\'s <code>MakeVisitor</code> …",null,null],[3,"Compact","","Marker for <code>Format</code> that indicates that the compact log …",null,null],[3,"Full","","Marker for <code>Format</code> that indicates that the verbose log …",null,null],[3,"Format","","A pre-configured event formatter.",null,null],[11,"compact","","Use a less verbose output format.",14,[[],[["compact",3],["format",3]]]],[11,"pretty","","Use an excessively pretty, human-readable output format.",14,[[],[["pretty",3],["format",3]]]],[11,"json","","Use the full JSON format.",14,[[],[["json",3],["format",3]]]],[11,"with_timer","","Use the given <code>timer</code> for log message timestamps.",14,[[],["format",3]]],[11,"without_time","","Do not emit timestamps with log messages.",14,[[],["format",3]]],[11,"with_ansi","","Enable ANSI terminal colors for formatted output.",14,[[],["format",3]]],[11,"with_target","","Sets whether or not an event\'s target is displayed.",14,[[],["format",3]]],[11,"with_level","","Sets whether or not an event\'s level is displayed.",14,[[],["format",3]]],[11,"with_thread_ids","","Sets whether or not the thread ID of the current thread …",14,[[],["format",3]]],[11,"with_thread_names","","Sets whether or not the name of the current thread is …",14,[[],["format",3]]],[11,"flatten_event","","Use the full JSON format with the event\'s event fields …",14,[[],[["json",3],["format",3]]]],[11,"with_current_span","","Sets whether or not the formatter will include the …",14,[[],[["json",3],["format",3]]]],[11,"with_span_list","","Sets whether or not the formatter will include a list …",14,[[],[["json",3],["format",3]]]],[3,"DefaultFields","","The default <code>FormatFields</code> implementation.",null,null],[3,"DefaultVisitor","","The visitor produced by <code>DefaultFields</code>\'s <code>MakeVisitor</code> …",null,null],[11,"new","","Returns a new default <code>FormatFields</code> implementation.",15,[[]]],[11,"new","","Returns a new default visitor that formats to the …",16,[[["write",8]]]],[3,"FmtSpan","","Configures what points in the span lifecycle are logged …",null,null],[18,"NEW","","one event when span is created",17,null],[18,"ENTER","","one event per enter of a span",17,null],[18,"EXIT","","one event per exit of a span",17,null],[18,"CLOSE","","one event when the span is dropped",17,null],[18,"NONE","","spans are ignored (this is the default)",17,null],[18,"ACTIVE","","one event per enter/exit of a span",17,null],[18,"FULL","","events at all points (new, enter, exit, drop)",17,null],[0,"time","tracing_subscriber::fmt","Formatters for event timestamps.",null,null],[8,"FormatTime","tracing_subscriber::fmt::time","A type that can measure and format the current time.",null,null],[10,"format_time","","Measure and write out the current time.",18,[[["write",8]],["result",6]]],[5,"time","","Returns a new <code>SystemTime</code> timestamp provider.",null,[[],["systemtime",3]]],[5,"uptime","","Returns a new <code>Uptime</code> timestamp provider.",null,[[],["uptime",3]]],[3,"SystemTime","","Retrieve and print the current wall-clock time.",null,null],[3,"Uptime","","Retrieve and print the relative elapsed wall-clock time …",null,null],[3,"ChronoUtc","","Retrieve and print the current UTC time.",null,null],[11,"rfc3339","","Format the time using the <code>RFC 3339</code> format (a subset of …",19,[[]]],[11,"with_format","","Format the time using the given format string.",19,[[["string",3]]]],[3,"ChronoLocal","","Retrieve and print the current local time.",null,null],[11,"rfc3339","","Format the time using the <code>RFC 3339</code> format (a subset of …",20,[[]]],[11,"with_format","","Format the time using the given format string.",20,[[["string",3]]]],[0,"writer","tracing_subscriber::fmt","Abstractions for creating <code>io::Write</code> instances.",null,null],[8,"MakeWriter","tracing_subscriber::fmt::writer","A type that can create <code>io::Write</code> instances.",null,null],[16,"Writer","","The concrete <code>io::Write</code> implementation returned by …",21,null],[10,"make_writer","","Returns an instance of <code>Writer</code>.",21,[[]]],[3,"TestWriter","","A writer intended to support <code>libtest</code>\'s output capturing …",null,null],[11,"new","","Returns a new <code>TestWriter</code> with the default configuration.",22,[[]]],[3,"BoxMakeWriter","","A writer that erases the specific <code>io::Write</code> and <code>Makewriter</code>…",null,null],[11,"new","","Constructs a <code>BoxMakeWriter</code> wrapping a type implementing …",23,[[]]],[6,"LayerBuilder","tracing_subscriber::fmt","A builder for <code>Layer</code> that logs formatted representations …",null,null],[3,"FmtContext","","Provides the current span context to a formatter.",null,null],[3,"FormattedFields","","A formatted representation of a span\'s fields stored in …",null,null],[12,"fields","","The formatted fields of a span.",24,null],[3,"Layer","","A <code>Layer</code> that logs formatted representations of <code>tracing</code> …",null,null],[5,"format","","Returns the default configuration for an [event formatter]…",null,[[],["format",3]]],[8,"FormatEvent","","A type that can format a tracing <code>Event</code> for a <code>fmt::Write</code>.",null,null],[10,"format_event","","Write a log message for <code>Event</code> in <code>Context</code> to the given …",12,[[["write",8],["event",3],["fmtcontext",3]],["result",6]]],[8,"FormatFields","","A type that can format a set of fields to a <code>fmt::Write</code>.",null,null],[10,"format_fields","","Format the provided <code>fields</code> to the provided <code>writer</code>, …",13,[[["recordfields",8],["write",8]],["result",6]]],[11,"add_fields","","Record additional field(s) on an existing span.",13,[[["string",3],["record",3]],["result",6]]],[5,"time","","Returns a new <code>SystemTime</code> timestamp provider.",null,[[],["systemtime",3]]],[8,"MakeWriter","","A type that can create <code>io::Write</code> instances.",null,null],[16,"Writer","","The concrete <code>io::Write</code> implementation returned by …",21,null],[10,"make_writer","","Returns an instance of <code>Writer</code>.",21,[[]]],[3,"TestWriter","","A writer intended to support <code>libtest</code>\'s output capturing …",null,null],[3,"Subscriber","","A <code>Subscriber</code> that logs formatted representations of …",null,null],[6,"Formatter","","A <code>Subscriber</code> that logs formatted representations of …",null,null],[3,"SubscriberBuilder","","Configures and constructs <code>Subscriber</code>s.",null,null],[5,"fmt","","Returns a new <code>SubscriberBuilder</code> for configuring a …",null,[[],["subscriberbuilder",3]]],[5,"layer","","Returns a new formatting layer that can be composed with …",null,[[],["layer",3]]],[18,"DEFAULT_MAX_LEVEL","","The maximum verbosity level that is enabled by a …",25,null],[11,"builder","","Returns a new <code>SubscriberBuilder</code> for configuring a format …",25,[[],["subscriberbuilder",3]]],[11,"new","","Returns a new format subscriber with the default …",25,[[]]],[11,"finish","","Finish the builder, returning a new <code>FmtSubscriber</code>.",26,[[],["subscriber",3]]],[11,"try_init","","Install this Subscriber as the global default if one is …",26,[[],[["box",3],["result",4]]]],[11,"init","","Install this Subscriber as the global default.",26,[[]]],[11,"with_timer","","Use the given <code>timer</code> for log message timestamps.",26,[[],[["subscriberbuilder",3],["format",3]]]],[11,"without_time","","Do not emit timestamps with log messages.",26,[[],[["subscriberbuilder",3],["format",3]]]],[11,"with_span_events","","Configures how synthesized events are emitted at points …",26,[[["fmtspan",3]]]],[11,"with_ansi","","Enable ANSI encoding for formatted events.",26,[[],[["format",3],["subscriberbuilder",3]]]],[11,"with_target","","Sets whether or not an event\'s target is displayed.",26,[[],[["format",3],["subscriberbuilder",3]]]],[11,"with_level","","Sets whether or not an event\'s level is displayed.",26,[[],[["format",3],["subscriberbuilder",3]]]],[11,"with_thread_names","","Sets whether or not the name of the current thread is …",26,[[],[["format",3],["subscriberbuilder",3]]]],[11,"with_thread_ids","","Sets whether or not the thread ID of the current thread …",26,[[],[["format",3],["subscriberbuilder",3]]]],[11,"compact","","Sets the subscriber being built to use a less verbose …",26,[[],[["format",3],["subscriberbuilder",3]]]],[11,"pretty","","Sets the subscriber being built to use an excessively …",26,[[],[["pretty",3],["subscriberbuilder",3],["format",3]]]],[11,"json","","Sets the subscriber being built to use a JSON formatter.",26,[[],[["jsonfields",3],["format",3],["subscriberbuilder",3]]]],[11,"flatten_event","","Sets the json subscriber being built to flatten event …",26,[[],[["jsonfields",3],["format",3],["subscriberbuilder",3]]]],[11,"with_current_span","","Sets whether or not the JSON subscriber being built will …",26,[[],[["jsonfields",3],["format",3],["subscriberbuilder",3]]]],[11,"with_span_list","","Sets whether or not the JSON subscriber being built will …",26,[[],[["jsonfields",3],["format",3],["subscriberbuilder",3]]]],[11,"with_filter_reloading","","Configures the subscriber being built to allow filter …",26,[[],[["subscriberbuilder",3],["layer",3]]]],[11,"reload_handle","","Returns a <code>Handle</code> that may be used to reload the …",26,[[],[["handle",3],["formatter",6],["envfilter",3]]]],[11,"fmt_fields","","Sets the Visitor that the subscriber being built will use …",26,[[],["subscriberbuilder",3]]],[11,"with_env_filter","","Sets the <code>EnvFilter</code> that the subscriber will use to …",26,[[],[["envfilter",3],["subscriberbuilder",3]]]],[11,"with_max_level","","Sets the maximum verbosity level that will be enabled by …",26,[[],[["subscriberbuilder",3],["levelfilter",3]]]],[11,"event_format","","Sets the function that the subscriber being built should …",26,[[],["subscriberbuilder",3]]],[11,"inherit_fields","","Sets whether or not spans inherit their parents\' field …",26,[[]]],[11,"on_event","","Sets the function that the subscriber being built should …",26,[[],["subscriberbuilder",3]]],[11,"with_writer","","Sets the <code>MakeWriter</code> that the subscriber being built will …",26,[[],["subscriberbuilder",3]]],[11,"with_test_writer","","Configures the subscriber to support <code>libtest</code>\'s output …",26,[[],[["subscriberbuilder",3],["testwriter",3]]]],[5,"try_init","","Install a global tracing subscriber that listens for …",null,[[],[["box",3],["result",4]]]],[5,"init","","Install a global tracing subscriber that listens for …",null,[[]]],[0,"layer","tracing_subscriber","A composable abstraction for building <code>Subscriber</code>s.",null,null],[8,"Layer","tracing_subscriber::layer","A composable handler for <code>tracing</code> events.",null,null],[11,"register_callsite","","Registers a new callsite with this layer, returning …",27,[[["metadata",3]],["interest",3]]],[11,"enabled","","Returns <code>true</code> if this layer is interested in a span or …",27,[[["context",3],["metadata",3]]]],[11,"new_span","","Notifies this layer that a new span was constructed with …",27,[[["id",3],["context",3],["attributes",3]]]],[11,"on_record","","Notifies this layer that a span with the given <code>Id</code> …",27,[[["context",3],["record",3],["id",3]]]],[11,"on_follows_from","","Notifies this layer that a span with the ID <code>span</code> recorded …",27,[[["context",3],["id",3]]]],[11,"on_event","","Notifies this layer that an event has occurred.",27,[[["event",3],["context",3]]]],[11,"on_enter","","Notifies this layer that a span with the given ID was …",27,[[["context",3],["id",3]]]],[11,"on_exit","","Notifies this layer that the span with the given ID was …",27,[[["context",3],["id",3]]]],[11,"on_close","","Notifies this layer that the span with the given ID has …",27,[[["id",3],["context",3]]]],[11,"on_id_change","","Notifies this layer that a span ID has been cloned, and …",27,[[["context",3],["id",3]]]],[11,"and_then","","Composes this layer around the given <code>Layer</code>, returning a …",27,[[],["layered",3]]],[11,"with_subscriber","","Composes this <code>Layer</code> with the given <code>Subscriber</code>, returning a…",27,[[],["layered",3]]],[8,"SubscriberExt","","Extension trait adding a <code>with(Layer)</code> combinator to …",null,null],[11,"with","","Wraps <code>self</code> with the provided <code>layer</code>.",28,[[],["layered",3]]],[3,"Context","","Represents information about the current context provided …",null,null],[3,"Layered","","A <code>Subscriber</code> composed of a <code>Subscriber</code> wrapped by one or …",null,null],[3,"Identity","","A layer that does nothing.",null,null],[3,"Scope","","An iterator over the stored data for all the spans in the …",null,null],[11,"current_span","","Returns the wrapped subscriber\'s view of the current span.",29,[[],["current",3]]],[11,"enabled","","Returns whether the wrapped subscriber would enable the …",29,[[["metadata",3]]]],[11,"event","","Records the provided <code>event</code> with the wrapped subscriber.",29,[[["event",3]]]],[11,"metadata","","Returns metadata for the span with the given <code>id</code>, if it …",29,[[["id",3]],[["metadata",3],["option",4]]]],[11,"span","","Returns stored data for the span with the given <code>id</code>, if it …",29,[[["id",3]],[["spanref",3],["option",4]]]],[11,"exists","","Returns <code>true</code> if an active span exists for the given <code>Id</code>.",29,[[["id",3]]]],[11,"lookup_current","","Returns stored data for the span that the wrapped …",29,[[],[["spanref",3],["option",4]]]],[11,"scope","","Returns an iterator over the stored data for all the …",29,[[],["scope",3]]],[11,"new","","Returns a new <code>Identity</code> layer.",30,[[]]],[0,"prelude","tracing_subscriber","The <code>tracing-subscriber</code> prelude.",null,null],[0,"registry","","Storage for span data shared by multiple <code>Layer</code>s.",null,null],[3,"Extensions","tracing_subscriber::registry","An immutable, read-only reference to a Span\'s extensions.",null,null],[3,"ExtensionsMut","","An mutable reference to a Span\'s extensions.",null,null],[3,"Data","","Span data stored in a <code>Registry</code>.",null,null],[3,"Registry","","A shared, reusable store for spans.",null,null],[8,"LookupSpan","","Provides access to stored span data.",null,null],[16,"Data","","The type of span data stored in this registry.",31,null],[10,"span_data","","Returns the <code>SpanData</code> for a given <code>Id</code>, if it exists.",31,[[["id",3]],["option",4]]],[11,"span","","Returns a <code>SpanRef</code> for the span with the given <code>Id</code>, if it …",31,[[["id",3]],[["option",4],["spanref",3]]]],[8,"SpanData","","A stored representation of data associated with a span.",null,null],[10,"id","","Returns this span\'s ID.",32,[[],["id",3]]],[10,"metadata","","Returns a reference to the span\'s <code>Metadata</code>.",32,[[],["metadata",3]]],[10,"parent","","Returns a reference to the ID",32,[[],[["option",4],["id",3]]]],[10,"extensions","","Returns a reference to this span\'s <code>Extensions</code>.",32,[[],["extensions",3]]],[10,"extensions_mut","","Returns a mutable reference to this span\'s <code>Extensions</code>.",32,[[],["extensionsmut",3]]],[3,"SpanRef","","A reference to span data and the associated registry.",null,null],[3,"Parents","","An iterator over the parents of a span.",null,null],[3,"FromRoot","","An iterator over a span\'s parents, starting with the root …",null,null],[11,"id","","Returns this span\'s ID.",33,[[],["id",3]]],[11,"metadata","","Returns a static reference to the span\'s metadata.",33,[[],["metadata",3]]],[11,"name","","Returns the span\'s name,",33,[[]]],[11,"fields","","Returns a list of fields defined by the span.",33,[[],["fieldset",3]]],[11,"parent_id","","Returns the ID of this span\'s parent, or <code>None</code> if this …",33,[[],[["option",4],["id",3]]]],[11,"parent","","Returns a <code>SpanRef</code> describing this span\'s parent, or <code>None</code> …",33,[[],["option",4]]],[11,"parents","","Returns an iterator over all parents of this span, …",33,[[],["parents",3]]],[11,"from_root","","Returns an iterator over all parents of this span, …",33,[[],["fromroot",3]]],[11,"extensions","","Returns a reference to this span\'s <code>Extensions</code>.",33,[[],["extensions",3]]],[11,"extensions_mut","","Returns a mutable reference to this span\'s <code>Extensions</code>.",33,[[],["extensionsmut",3]]],[0,"reload","tracing_subscriber","Wrapper for a <code>Layer</code> to allow it to be dynamically …",null,null],[3,"Layer","tracing_subscriber::reload","Wraps a <code>Layer</code>, allowing it to be reloaded dynamically at …",null,null],[3,"Handle","","Allows reloading the state of an associated <code>Layer</code>.",null,null],[3,"Error","","Indicates that an error occurred when reloading a layer.",null,null],[11,"new","","Wraps the given <code>Layer</code>, returning a <code>Layer</code> and a <code>Handle</code> …",34,[[]]],[11,"handle","","Returns a <code>Handle</code> that can be used to reload the wrapped …",34,[[],["handle",3]]],[11,"reload","","Replace the current layer with the provided <code>new_layer</code>.",35,[[],[["result",4],["error",3]]]],[11,"modify","","Invokes a closure with a mutable reference to the current …",35,[[],[["result",4],["error",3]]]],[11,"clone_current","","Returns a clone of the layer\'s current value if it still …",35,[[],["option",4]]],[11,"with_current","","Invokes a closure with a borrowed reference to the …",35,[[],[["error",3],["result",4]]]],[11,"is_poisoned","","Returns <code>true</code> if this error occurred because the layer was …",36,[[]]],[11,"is_dropped","","Returns <code>true</code> if this error occurred because the <code>Subscriber</code>…",36,[[]]],[0,"util","tracing_subscriber","Extension traits and other utilities to make working with …",null,null],[8,"SubscriberInitExt","tracing_subscriber::util","Extension trait adding utility methods for subscriber …",null,null],[11,"set_default","","Sets <code>self</code> as the default subscriber in the current scope, …",37,[[],["defaultguard",3]]],[11,"try_init","","Attempts to set <code>self</code> as the global default subscriber in …",37,[[],[["result",4],["tryiniterror",3]]]],[11,"init","","Attempts to set <code>self</code> as the global default subscriber in …",37,[[]]],[3,"TryInitError","","Error returned by <code>try_init</code> if a global default subscriber …",null,null],[3,"EnvFilter","tracing_subscriber","A <code>Layer</code> which filters spans and events based on a set of …",null,null],[3,"Registry","","A shared, reusable store for spans.",null,null],[5,"registry","","",null,[[],["registry",3]]],[3,"CurrentSpan","","Tracks the currently executing span on a per-thread basis.",null,null],[11,"new","","Returns a new <code>CurrentSpan</code>.",38,[[]]],[11,"id","","Returns the <code>Id</code> of the span in which the current thread is …",38,[[],[["id",3],["option",4]]]],[11,"enter","","Records that the current thread has entered the span with …",38,[[["id",3]]]],[11,"exit","","Records that the current thread has exited a span.",38,[[]]],[11,"from","tracing_subscriber::field::debug","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","tracing_subscriber::field::delimited","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","tracing_subscriber::field::display","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","tracing_subscriber::filter","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"to_string","","",40,[[],["string",3]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_string","","",41,[[],["string",3]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_string","","",42,[[],["string",3]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","tracing_subscriber::fmt","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","tracing_subscriber::fmt::format","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","tracing_subscriber::fmt::time","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","tracing_subscriber::fmt","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","tracing_subscriber::fmt::writer","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","tracing_subscriber::fmt","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","tracing_subscriber::layer","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"into_iter","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","tracing_subscriber::registry","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"into_iter","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"into_iter","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","tracing_subscriber::reload","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_string","","",36,[[],["string",3]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","tracing_subscriber::util","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_string","","",68,[[],["string",3]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","tracing_subscriber","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"fmt","tracing_subscriber::filter","",39,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",40,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",39,[[["level",3]],[["ordering",4],["option",4]]]],[11,"lt","","",39,[[["level",3]]]],[11,"le","","",39,[[["level",3]]]],[11,"gt","","",39,[[["level",3]]]],[11,"ge","","",39,[[["level",3]]]],[11,"partial_cmp","","",39,[[["levelfilter",3]],[["ordering",4],["option",4]]]],[11,"lt","","",39,[[["levelfilter",3]]]],[11,"le","","",39,[[["levelfilter",3]]]],[11,"gt","","",39,[[["levelfilter",3]]]],[11,"ge","","",39,[[["levelfilter",3]]]],[11,"from_str","","",39,[[],[["result",4],["levelfilter",3]]]],[11,"from","","",39,[[["level",3]],["levelfilter",3]]],[11,"from","","",39,[[["option",4],["level",3]],["levelfilter",3]]],[11,"into","","",39,[[],[["level",3],["option",4]]]],[11,"cmp","","",39,[[["levelfilter",3]],["ordering",4]]],[11,"eq","","",39,[[["levelfilter",3]]]],[11,"ne","","",39,[[["levelfilter",3]]]],[11,"eq","","",39,[[["level",3]]]],[11,"clone","","",39,[[],["levelfilter",3]]],[11,"clone","","",40,[[],["parselevelfiltererror",3]]],[11,"fmt","","",39,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",40,[[["formatter",3]],[["result",4],["error",3]]]],[11,"as_log","","",39,[[]]],[11,"make_visitor","tracing_subscriber::field::debug","",1,[[]]],[11,"make_visitor","tracing_subscriber::field::delimited","",2,[[]]],[11,"make_visitor","tracing_subscriber::field::display","",4,[[]]],[11,"make_visitor","tracing_subscriber::fmt::format","",53,[[["write",8]]]],[11,"make_visitor","","",15,[[["write",8]]]],[11,"make_visitor","","",54,[[["write",8]]]],[11,"finish","tracing_subscriber::field::debug","",1,[[]]],[11,"finish","tracing_subscriber::field::delimited","",3,[[],["result",6]]],[11,"finish","tracing_subscriber::field::display","",4,[[]]],[11,"finish","tracing_subscriber::fmt::format","",50,[[],["result",6]]],[11,"finish","","",52,[[],["result",6]]],[11,"finish","","",16,[[],["result",6]]],[11,"finish","","",55,[[],["result",6]]],[11,"writer","tracing_subscriber::field::debug","",1,[[],["write",8]]],[11,"writer","tracing_subscriber::field::display","",4,[[],["write",8]]],[11,"writer","tracing_subscriber::field::debug","",1,[[],["write",8]]],[11,"writer","tracing_subscriber::field::delimited","",3,[[],["write",8]]],[11,"writer","tracing_subscriber::field::display","",4,[[],["write",8]]],[11,"writer","tracing_subscriber::fmt::format","",50,[[],["write",8]]],[11,"writer","","",52,[[],["write",8]]],[11,"writer","","",16,[[],["write",8]]],[11,"writer","","",55,[[],["write",8]]],[11,"format_event","","",14,[[["write",8],["event",3],["fmtcontext",3]],["result",6]]],[11,"format_event","","",14,[[["write",8],["event",3],["fmtcontext",3]],["result",6]]],[11,"format_event","","",14,[[["write",8],["event",3],["fmtcontext",3]],["result",6]]],[11,"format_event","","",14,[[["write",8],["event",3],["fmtcontext",3]],["result",6]]],[11,"format_fields","tracing_subscriber::fmt","",47,[[["recordfields",8],["write",8]],["result",6]]],[11,"format_fields","tracing_subscriber::fmt::format","Format the provided <code>fields</code> to the provided <code>writer</code>, …",49,[[["write",8],["recordfields",8]],["result",6]]],[11,"add_fields","","Record additional field(s) on an existing span.",49,[[["string",3],["record",3]],["result",6]]],[11,"format_fields","","",51,[[["recordfields",8],["write",8]],["result",6]]],[11,"add_fields","","",51,[[["string",3],["record",3]],["result",6]]],[11,"format_time","tracing_subscriber::fmt::time","",58,[[["write",8]],["result",6]]],[11,"format_time","","",59,[[["write",8]],["result",6]]],[11,"format_time","","",19,[[["write",8]],["result",6]]],[11,"format_time","","",20,[[["write",8]],["result",6]]],[11,"make_writer","tracing_subscriber::fmt","",22,[[]]],[11,"make_writer","tracing_subscriber::fmt::writer","",23,[[]]],[11,"register_callsite","tracing_subscriber::filter","",44,[[["metadata",3]],["interest",3]]],[11,"max_level_hint","","",44,[[],[["levelfilter",3],["option",4]]]],[11,"enabled","","",44,[[["context",3],["metadata",3]]]],[11,"new_span","","",44,[[["id",3],["context",3],["attributes",3]]]],[11,"on_record","","",44,[[["context",3],["record",3],["id",3]]]],[11,"on_enter","","",44,[[["context",3],["id",3]]]],[11,"on_exit","","",44,[[["context",3],["id",3]]]],[11,"on_close","","",44,[[["id",3],["context",3]]]],[11,"register_callsite","","",39,[[["metadata",3]],["interest",3]]],[11,"enabled","","",39,[[["context",3],["metadata",3]]]],[11,"max_level_hint","","",39,[[],[["levelfilter",3],["option",4]]]],[11,"new_span","tracing_subscriber::fmt","",46,[[["id",3],["context",3],["attributes",3]]]],[11,"on_record","","",46,[[["id",3],["context",3],["record",3]]]],[11,"on_enter","","",46,[[["id",3],["context",3]]]],[11,"on_exit","","",46,[[["id",3],["context",3]]]],[11,"on_close","","",46,[[["id",3],["context",3]]]],[11,"on_event","","",46,[[["event",3],["context",3]]]],[11,"downcast_raw","","",46,[[["typeid",3]],["option",4]]],[11,"register_callsite","tracing_subscriber::layer","",60,[[["metadata",3]],["interest",3]]],[11,"enabled","","",60,[[["context",3],["metadata",3]]]],[11,"new_span","","",60,[[["id",3],["context",3],["attributes",3]]]],[11,"on_record","","",60,[[["context",3],["record",3],["id",3]]]],[11,"on_follows_from","","",60,[[["context",3],["id",3]]]],[11,"on_event","","",60,[[["event",3],["context",3]]]],[11,"on_enter","","",60,[[["context",3],["id",3]]]],[11,"on_exit","","",60,[[["context",3],["id",3]]]],[11,"on_close","","",60,[[["id",3],["context",3]]]],[11,"on_id_change","","",60,[[["context",3],["id",3]]]],[11,"register_callsite","tracing_subscriber::reload","",34,[[["metadata",3]],["interest",3]]],[11,"enabled","","",34,[[["context",3],["metadata",3]]]],[11,"new_span","","",34,[[["id",3],["context",3],["attributes",3]]]],[11,"on_record","","",34,[[["context",3],["record",3],["id",3]]]],[11,"on_follows_from","","",34,[[["context",3],["id",3]]]],[11,"on_event","","",34,[[["event",3],["context",3]]]],[11,"on_enter","","",34,[[["context",3],["id",3]]]],[11,"on_exit","","",34,[[["context",3],["id",3]]]],[11,"on_close","","",34,[[["context",3],["id",3]]]],[11,"on_id_change","","",34,[[["context",3],["id",3]]]],[11,"span_data","tracing_subscriber::fmt","",25,[[["id",3]],["option",4]]],[11,"span_data","tracing_subscriber::layer","",60,[[["id",3]],["option",4]]],[11,"span_data","tracing_subscriber::registry","",64,[[["id",3]],["option",4]]],[11,"id","","",65,[[],["id",3]]],[11,"metadata","","",65,[[],["metadata",3]]],[11,"parent","","",65,[[],[["option",4],["id",3]]]],[11,"extensions","","",65,[[],["extensions",3]]],[11,"extensions_mut","","",65,[[],["extensionsmut",3]]],[11,"from","tracing_subscriber::filter","",41,[[["levelfilter",3]]]],[11,"from","","",41,[[["level",3]]]],[11,"from","","",42,[[["box",3],["error",8]]]],[11,"from","","",42,[[["parseerror",3]]]],[11,"from","","",44,[[]]],[11,"from","","",45,[[["parseerror",3]]]],[11,"from","","",45,[[["varerror",4]]]],[11,"from","tracing_subscriber::fmt::time","",59,[[["instant",3]]]],[11,"into","tracing_subscriber::fmt","",26,[[],["dispatch",3]]],[11,"next","tracing_subscriber::layer","",61,[[],["option",4]]],[11,"next","tracing_subscriber::registry","",66,[[],["option",4]]],[11,"next","","",67,[[],["option",4]]],[11,"size_hint","","",67,[[]]],[11,"clone","tracing_subscriber::field::debug","",1,[[],["alt",3]]],[11,"clone","tracing_subscriber::field::delimited","",2,[[],["delimited",3]]],[11,"clone","tracing_subscriber::field::display","",4,[[],["messages",3]]],[11,"clone","tracing_subscriber::filter","",43,[[],["badname",3]]],[11,"clone","tracing_subscriber::fmt::format","",48,[[],["json",3]]],[11,"clone","","",51,[[],["pretty",3]]],[11,"clone","","",54,[[],["fieldfn",3]]],[11,"clone","","",56,[[],["compact",3]]],[11,"clone","","",57,[[],["full",3]]],[11,"clone","","",14,[[],["format",3]]],[11,"clone","","",17,[[],["fmtspan",3]]],[11,"clone","tracing_subscriber::fmt::time","",58,[[],["systemtime",3]]],[11,"clone","","",59,[[],["uptime",3]]],[11,"clone","","",19,[[],["chronoutc",3]]],[11,"clone","","",20,[[],["chronolocal",3]]],[11,"clone","tracing_subscriber::layer","",60,[[],["layered",3]]],[11,"clone","","",30,[[],["identity",3]]],[11,"clone","","",29,[[]]],[11,"clone","tracing_subscriber::reload","",35,[[]]],[11,"default","tracing_subscriber::filter","",41,[[]]],[11,"default","","",44,[[]]],[11,"default","tracing_subscriber::fmt","",46,[[]]],[11,"default","","",24,[[],["formattedfields",3]]],[11,"default","tracing_subscriber::fmt::format","",48,[[],["json",3]]],[11,"default","","",49,[[]]],[11,"default","","",51,[[]]],[11,"default","","",53,[[]]],[11,"default","","",56,[[],["compact",3]]],[11,"default","","",57,[[],["full",3]]],[11,"default","","",14,[[]]],[11,"default","","",15,[[]]],[11,"default","tracing_subscriber::fmt::time","",58,[[],["systemtime",3]]],[11,"default","","",59,[[]]],[11,"default","","",19,[[],["chronoutc",3]]],[11,"default","","",20,[[],["chronolocal",3]]],[11,"default","tracing_subscriber::fmt","",22,[[],["testwriter",3]]],[11,"default","","",25,[[]]],[11,"default","","",26,[[]]],[11,"default","tracing_subscriber::layer","",30,[[],["identity",3]]],[11,"default","tracing_subscriber::registry","",64,[[]]],[11,"default","tracing_subscriber","",38,[[]]],[11,"cmp","tracing_subscriber::filter","",41,[[["directive",3]],["ordering",4]]],[11,"cmp","tracing_subscriber::fmt::format","",17,[[["fmtspan",3]],["ordering",4]]],[11,"eq","tracing_subscriber::filter","",41,[[["directive",3]]]],[11,"ne","","",41,[[["directive",3]]]],[11,"eq","tracing_subscriber::fmt::format","",48,[[["json",3]]]],[11,"ne","","",48,[[["json",3]]]],[11,"eq","","",51,[[["pretty",3]]]],[11,"ne","","",51,[[["pretty",3]]]],[11,"eq","","",56,[[["compact",3]]]],[11,"eq","","",57,[[["full",3]]]],[11,"eq","","",17,[[["fmtspan",3]]]],[11,"ne","","",17,[[["fmtspan",3]]]],[11,"eq","tracing_subscriber::fmt::time","",58,[[["systemtime",3]]]],[11,"eq","","",59,[[["uptime",3]]]],[11,"ne","","",59,[[["uptime",3]]]],[11,"eq","","",19,[[["chronoutc",3]]]],[11,"ne","","",19,[[["chronoutc",3]]]],[11,"eq","","",20,[[["chronolocal",3]]]],[11,"ne","","",20,[[["chronolocal",3]]]],[11,"partial_cmp","tracing_subscriber::filter","",41,[[["directive",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","tracing_subscriber::fmt::format","",17,[[["fmtspan",3]],[["option",4],["ordering",4]]]],[11,"lt","","",17,[[["fmtspan",3]]]],[11,"le","","",17,[[["fmtspan",3]]]],[11,"gt","","",17,[[["fmtspan",3]]]],[11,"ge","","",17,[[["fmtspan",3]]]],[11,"deref","tracing_subscriber::fmt","",24,[[]]],[11,"fmt","tracing_subscriber::field::debug","",1,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::field::delimited","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::field::display","",4,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::filter","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt::format","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt::time","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt","",22,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt::writer","",23,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::layer","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::registry","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::reload","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::util","",68,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber","",38,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::filter","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::fmt","",24,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::reload","",36,[[["formatter",3]],["result",6]]],[11,"fmt","tracing_subscriber::util","",68,[[["formatter",3]],["result",6]]],[11,"bitand","tracing_subscriber::fmt::format","",17,[[]]],[11,"bitor","","",17,[[]]],[11,"bitxor","","",17,[[]]],[11,"bitand_assign","","",17,[[]]],[11,"bitor_assign","","",17,[[]]],[11,"bitxor_assign","","",17,[[]]],[11,"from_str","tracing_subscriber::filter","",41,[[],["result",4]]],[11,"from_str","","",44,[[],["result",4]]],[11,"description","","",42,[[]]],[11,"source","","",42,[[],[["option",4],["error",8]]]],[11,"source","","",45,[[],[["option",4],["error",8]]]],[11,"source","tracing_subscriber::util","",68,[[],[["option",4],["error",8]]]],[11,"write","tracing_subscriber::fmt","",22,[[],["result",6]]],[11,"flush","","",22,[[],["result",6]]],[11,"record_i64","tracing_subscriber::field::debug","",1,[[["field",3]]]],[11,"record_u64","","",1,[[["field",3]]]],[11,"record_bool","","",1,[[["field",3]]]],[11,"record_str","","Visit a string value.",1,[[["field",3]]]],[11,"record_debug","","",1,[[["field",3],["debug",8]]]],[11,"record_i64","tracing_subscriber::field::delimited","",3,[[["field",3]]]],[11,"record_u64","","",3,[[["field",3]]]],[11,"record_bool","","",3,[[["field",3]]]],[11,"record_str","","",3,[[["field",3]]]],[11,"record_debug","","",3,[[["field",3],["debug",8]]]],[11,"record_i64","tracing_subscriber::field::display","",4,[[["field",3]]]],[11,"record_u64","","",4,[[["field",3]]]],[11,"record_bool","","",4,[[["field",3]]]],[11,"record_str","","Visit a string value.",4,[[["field",3]]]],[11,"record_debug","","",4,[[["field",3],["debug",8]]]],[11,"record_i64","tracing_subscriber::fmt::format","Visit a signed 64-bit integer value.",50,[[["field",3]]]],[11,"record_u64","","Visit an unsigned 64-bit integer value.",50,[[["field",3]]]],[11,"record_bool","","Visit a boolean value.",50,[[["field",3]]]],[11,"record_str","","Visit a string value.",50,[[["field",3]]]],[11,"record_debug","","",50,[[["field",3],["debug",8]]]],[11,"record_str","","",52,[[["field",3]]]],[11,"record_error","","",52,[[["error",8],["field",3]]]],[11,"record_debug","","",52,[[["field",3],["debug",8]]]],[11,"record_str","","",16,[[["field",3]]]],[11,"record_error","","",16,[[["error",8],["field",3]]]],[11,"record_debug","","",16,[[["field",3],["debug",8]]]],[11,"record_debug","","",55,[[["field",3],["debug",8]]]],[11,"register_callsite","tracing_subscriber::fmt","",25,[[["metadata",3]],["interest",3]]],[11,"enabled","","",25,[[["metadata",3]]]],[11,"new_span","","",25,[[["attributes",3]],["id",3]]],[11,"record","","",25,[[["record",3],["id",3]]]],[11,"record_follows_from","","",25,[[["id",3]]]],[11,"event","","",25,[[["event",3]]]],[11,"enter","","",25,[[["id",3]]]],[11,"exit","","",25,[[["id",3]]]],[11,"current_span","","",25,[[],["current",3]]],[11,"clone_span","","",25,[[["id",3]],["id",3]]],[11,"try_close","","",25,[[["id",3]]]],[11,"max_level_hint","","",25,[[],[["levelfilter",3],["option",4]]]],[11,"downcast_raw","","",25,[[["typeid",3]],["option",4]]],[11,"register_callsite","tracing_subscriber::layer","",60,[[["metadata",3]],["interest",3]]],[11,"enabled","","",60,[[["metadata",3]]]],[11,"max_level_hint","","",60,[[],[["levelfilter",3],["option",4]]]],[11,"new_span","","",60,[[["attributes",3]],["id",3]]],[11,"record","","",60,[[["record",3],["id",3]]]],[11,"record_follows_from","","",60,[[["id",3]]]],[11,"event","","",60,[[["event",3]]]],[11,"enter","","",60,[[["id",3]]]],[11,"exit","","",60,[[["id",3]]]],[11,"clone_span","","",60,[[["id",3]],["id",3]]],[11,"drop_span","","",60,[[["id",3]]]],[11,"try_close","","",60,[[["id",3]]]],[11,"current_span","","",60,[[],["current",3]]],[11,"register_callsite","tracing_subscriber::registry","",64,[[["metadata",3]],["interest",3]]],[11,"enabled","","",64,[[["metadata",3]]]],[11,"new_span","","",64,[[["attributes",3]],["id",3]]],[11,"record","","This is intentionally not implemented, as recording fields…",64,[[["record",3],["id",3]]]],[11,"record_follows_from","","",64,[[["id",3]]]],[11,"event","","This is intentionally not implemented, as recording events…",64,[[["event",3]]]],[11,"enter","","",64,[[["id",3]]]],[11,"exit","","",64,[[["id",3]]]],[11,"clone_span","","",64,[[["id",3]],["id",3]]],[11,"current_span","","",64,[[],["current",3]]],[11,"try_close","","Decrements the reference count of the span with the given …",64,[[["id",3]]]],[18,"OFF","tracing_subscriber::filter","The \\\"off\\\" level.",39,null],[18,"ERROR","","The \\\"error\\\" level.",39,null],[18,"WARN","","The \\\"warn\\\" level.",39,null],[18,"INFO","","The \\\"info\\\" level.",39,null],[18,"DEBUG","","The \\\"debug\\\" level.",39,null],[18,"TRACE","","The \\\"trace\\\" level.",39,null],[11,"from_level","","Returns a <code>LevelFilter</code> that enables spans and events with …",39,[[["level",3]],["levelfilter",3]]],[11,"into_level","","Returns the most verbose <code>Level</code> that this filter accepts, …",39,[[],[["level",3],["option",4]]]],[11,"current","","Returns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …",39,[[],["levelfilter",3]]],[18,"DEFAULT_ENV","","<code>RUST_LOG</code> is the default environment variable used by …",44,null],[11,"from_default_env","","Returns a new <code>EnvFilter</code> from the value of the <code>RUST_LOG</code> …",44,[[]]],[11,"from_env","","Returns a new <code>EnvFilter</code> from the value of the given …",44,[[["asref",8]]]],[11,"new","","Returns a new <code>EnvFilter</code> from the directives in the given …",44,[[["asref",8]]]],[11,"try_new","","Returns a new <code>EnvFilter</code> from the directives in the given …",44,[[["asref",8]],[["result",4],["parseerror",3]]]],[11,"try_from_default_env","","Returns a new <code>EnvFilter</code> from the value of the <code>RUST_LOG</code> …",44,[[],[["result",4],["fromenverror",3]]]],[11,"try_from_env","","Returns a new <code>EnvFilter</code> from the value of the given …",44,[[["asref",8]],[["result",4],["fromenverror",3]]]],[11,"add_directive","","Add a filtering directive to this <code>EnvFilter</code>.",44,[[["directive",3]]]],[11,"builder","tracing_subscriber::fmt","Returns a new <code>LayerBuilder</code> for configuring a <code>Layer</code>.",46,[[],["layerbuilder",6]]],[11,"new","","Returns a new <code>Layer</code> with the default configuration.",46,[[]]],[11,"event_format","","Sets the event formatter that the layer will use to …",46,[[],["layer",3]]],[11,"with_writer","","Sets the <code>MakeWriter</code> that the <code>Layer</code> being built will use …",46,[[],["layer",3]]],[11,"with_test_writer","","Configures the subscriber to support <code>libtest</code>\'s output …",46,[[],[["layer",3],["testwriter",3]]]],[11,"with_timer","","Use the given <code>timer</code> for span and event timestamps.",46,[[],[["layer",3],["format",3]]]],[11,"without_time","","Do not emit timestamps with spans and event.",46,[[],[["layer",3],["format",3]]]],[11,"with_span_events","","Configures how synthesized events are emitted at points …",46,[[["fmtspan",3]]]],[11,"with_ansi","","Enable ANSI encoding for formatted events.",46,[[],[["format",3],["layer",3]]]],[11,"with_target","","Sets whether or not an event\'s target is displayed.",46,[[],[["format",3],["layer",3]]]],[11,"with_level","","Sets whether or not an event\'s level is displayed.",46,[[],[["format",3],["layer",3]]]],[11,"with_thread_ids","","Sets whether or not the thread ID of the current thread …",46,[[],[["format",3],["layer",3]]]],[11,"with_thread_names","","Sets whether or not the name of the current thread is …",46,[[],[["format",3],["layer",3]]]],[11,"compact","","Sets the layer being built to use a less verbose formatter…",46,[[],[["format",3],["layer",3]]]],[11,"pretty","","Sets the layer being built to use an excessively pretty, …",46,[[],[["layer",3],["pretty",3],["format",3]]]],[11,"json","","Sets the layer being built to use a JSON formatter.",46,[[],[["layer",3],["jsonfields",3],["format",3]]]],[11,"flatten_event","","Sets the JSON layer being built to flatten event metadata.",46,[[],[["layer",3],["jsonfields",3],["format",3]]]],[11,"with_current_span","","Sets whether or not the formatter will include the …",46,[[],[["layer",3],["jsonfields",3],["format",3]]]],[11,"with_span_list","","Sets whether or not the formatter will include a list …",46,[[],[["layer",3],["jsonfields",3],["format",3]]]],[11,"fmt_fields","","Sets the field formatter that the layer being built will …",46,[[],["layer",3]]],[11,"finish","","Builds a <code>Layer</code> with the provided configuration.",46,[[],["layer",3]]],[11,"finish","","Builds a <code>Layer</code> with the provided configuration.",69,[[],["layer",3]]],[11,"new","","Returns a new <code>FormattedFields</code>.",24,[[["string",3]]]],[11,"visit_spans","","Visits every span in the current context with a closure.",47,[[],["result",4]]],[11,"metadata","","Returns metadata for the span with the given <code>id</code>, if it …",47,[[["id",3]],[["metadata",3],["option",4]]]],[11,"span","","Returns stored data for the span with the given <code>id</code>, if it …",47,[[["id",3]],[["option",4],["spanref",3]]]],[11,"exists","","Returns <code>true</code> if an active span exists for the given <code>Id</code>.",47,[[["id",3]]]],[11,"lookup_current","","Returns stored data for the span that the wrapped …",47,[[],[["option",4],["spanref",3]]]],[11,"scope","","Returns an iterator over the stored data for all the …",47,[[],["scope",3]]],[11,"current_span","","Returns the current span for this formatter.",47,[[],["current",3]]],[11,"field_format","","Returns the field formatter configured by the subscriber …",47,[[]]],[11,"flatten_event","tracing_subscriber::fmt::format","If set to <code>true</code> event metadata will be flattened into the …",48,[[]]],[11,"with_current_span","","If set to <code>false</code>, formatted events won\'t contain a field …",48,[[]]],[11,"with_span_list","","If set to <code>false</code>, formatted events won\'t contain a list of …",48,[[]]],[11,"new","","Returns a new JSON <code>FormatFields</code> implementation.",49,[[]]],[11,"new","","Returns a new default visitor that formats to the …",50,[[["write",8]]]],[11,"with_source_location","","Sets whether the event\'s source code location is …",51,[[]]],[11,"with_source_location","","Sets whether or not the source code location from which …",14,[[]]],[11,"new","","Returns a new default [<code>PrettyFields</code>] implementation.",53,[[]]],[11,"with_ansi","","Enable ANSI encoding for formatted fields.",53,[[]]],[11,"new","","Returns a new default visitor that formats to the …",52,[[["write",8]]]],[11,"get","tracing_subscriber::registry","Immutably borrows a type previously inserted into this …",62,[[],["option",4]]],[11,"insert","","Insert a type into this <code>Extensions</code>.",63,[[["send",8],["sync",8]]]],[11,"replace","","Replaces an existing <code>T</code> into this extensions.",63,[[["send",8],["sync",8]],[["send",8],["option",4],["sync",8]]]],[11,"get_mut","","Get a mutable reference to a type previously inserted on …",63,[[],["option",4]]],[11,"remove","","Remove a type from this <code>Extensions</code>.",63,[[],[["send",8],["option",4],["sync",8]]]]],"p":[[8,"Visit"],[3,"Alt"],[3,"Delimited"],[3,"VisitDelimited"],[3,"Messages"],[8,"MakeVisitor"],[8,"VisitOutput"],[8,"RecordFields"],[8,"MakeOutput"],[8,"VisitWrite"],[8,"VisitFmt"],[8,"MakeExt"],[8,"FormatEvent"],[8,"FormatFields"],[3,"Format"],[3,"DefaultFields"],[3,"DefaultVisitor"],[3,"FmtSpan"],[8,"FormatTime"],[3,"ChronoUtc"],[3,"ChronoLocal"],[8,"MakeWriter"],[3,"TestWriter"],[3,"BoxMakeWriter"],[3,"FormattedFields"],[3,"Subscriber"],[3,"SubscriberBuilder"],[8,"Layer"],[8,"SubscriberExt"],[3,"Context"],[3,"Identity"],[8,"LookupSpan"],[8,"SpanData"],[3,"SpanRef"],[3,"Layer"],[3,"Handle"],[3,"Error"],[8,"SubscriberInitExt"],[3,"CurrentSpan"],[3,"LevelFilter"],[3,"LevelParseError"],[3,"Directive"],[3,"ParseError"],[3,"BadFieldName"],[3,"EnvFilter"],[3,"FromEnvError"],[3,"Layer"],[3,"FmtContext"],[3,"Json"],[3,"JsonFields"],[3,"JsonVisitor"],[3,"Pretty"],[3,"PrettyVisitor"],[3,"PrettyFields"],[3,"FieldFn"],[3,"FieldFnVisitor"],[3,"Compact"],[3,"Full"],[3,"SystemTime"],[3,"Uptime"],[3,"Layered"],[3,"Scope"],[3,"Extensions"],[3,"ExtensionsMut"],[3,"Registry"],[3,"Data"],[3,"Parents"],[3,"FromRoot"],[3,"TryInitError"],[6,"LayerBuilder"]]},\
"unescape":{"doc":"","i":[[5,"unescape","unescape","",null,[[],[["string",3],["option",4]]]]],"p":[]},\
"unicode_segmentation":{"doc":"Iterators which split strings on Grapheme Cluster, Word …","i":[[3,"Graphemes","unicode_segmentation","External iterator for a string\'s grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was …",null,null],[13,"PreContext","","More pre-context is needed. The caller should call …",0,null],[13,"PrevChunk","","When requesting <code>prev_boundary</code>, the cursor is moving past …",0,null],[13,"NextChunk","","When requesting <code>next_boundary</code>, the cursor is moving past …",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain …",0,null],[17,"UNICODE_VERSION","","The version of Unicode that this version of …",null,null],[3,"UWordBounds","","External iterator for a string\'s word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after …",null,null],[3,"USentenceBounds","","External iterator for a string\'s sentence boundaries.",null,null],[3,"USentenceBoundIndices","","External iterator for sentence boundaries and byte …",null,null],[3,"UnicodeSentences","","An iterator over the substrings of a string which, after …",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode …",null,null],[10,"graphemes","","Returns an iterator over the grapheme clusters of <code>self</code>.",1,[[],["graphemes",3]]],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of <code>self</code> …",1,[[],["graphemeindices",3]]],[10,"unicode_words","","Returns an iterator over the words of <code>self</code>, separated on …",1,[[],["unicodewords",3]]],[10,"split_word_bounds","","Returns an iterator over substrings of <code>self</code> separated on …",1,[[],["uwordbounds",3]]],[10,"split_word_bound_indices","","Returns an iterator over substrings of <code>self</code>, split on …",1,[[],["uwordboundindices",3]]],[10,"unicode_sentences","","Returns an iterator over substrings of <code>self</code> separated on …",1,[[],["unicodesentences",3]]],[10,"split_sentence_bounds","","Returns an iterator over substrings of <code>self</code> separated on …",1,[[],["usentencebounds",3]]],[10,"split_sentence_bound_indices","","Returns an iterator over substrings of <code>self</code>, split on …",1,[[],["usentenceboundindices",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"into_iter","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["graphemeincomplete",4]]]],[11,"ne","","",0,[[["graphemeincomplete",4]]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",7,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"size_hint","","",3,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"size_hint","","",6,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"clone","","",2,[[],["graphemeindices",3]]],[11,"clone","","",3,[[],["graphemes",3]]],[11,"clone","","",4,[[],["graphemecursor",3]]],[11,"clone","","",6,[[],["uwordbounds",3]]],[11,"clone","","",7,[[],["uwordboundindices",3]]],[11,"clone","","",8,[[],["unicodesentences",3]]],[11,"clone","","",9,[[],["usentencebounds",3]]],[11,"clone","","",10,[[],["usentenceboundindices",3]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",2,[[]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",3,[[]]],[11,"new","","Create a new cursor. The string and initial offset are …",4,[[],["graphemecursor",3]]],[11,"set_cursor","","Set the cursor to a new location in the same string.",4,[[]]],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value …",4,[[]]],[11,"provide_context","","Provide additional pre-context when it is needed to …",4,[[]]],[11,"is_boundary","","Determine whether the current cursor location is a …",4,[[],[["result",4],["graphemeincomplete",4]]]],[11,"next_boundary","","Find the next boundary after the current cursor position. …",4,[[],[["option",4],["result",4],["graphemeincomplete",4]]]],[11,"prev_boundary","","Find the previous boundary after the current cursor …",4,[[],[["option",4],["result",4],["graphemeincomplete",4]]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",7,[[]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",6,[[]]]],"p":[[4,"GraphemeIncomplete"],[8,"UnicodeSegmentation"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[3,"UnicodeSentences"],[3,"USentenceBounds"],[3,"USentenceBoundIndices"]]},\
"unicode_width":{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","i":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width …",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode …",null,null],[10,"width","","Returns the character\'s displayed width in columns, or …",0,[[],["option",4]]],[10,"width_cjk","","Returns the character\'s displayed width in columns, or …",0,[[],["option",4]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode …",null,null],[10,"width","","Returns the string\'s displayed width in columns.",1,[[]]],[10,"width_cjk","","Returns the string\'s displayed width in columns.",1,[[]]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","i":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid …",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid …",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the …",0,[[]]],[10,"is_xid_continue","","Returns whether the specified <code>char</code> satisfies the …",0,[[]]]],"p":[[8,"UnicodeXID"]]},\
"utf8_ranges":{"doc":"Crate <code>utf8-ranges</code> converts ranges of Unicode scalar …","i":[[4,"Utf8Sequence","utf8_ranges","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",0,null],[13,"Two","","Two successive byte ranges.",0,null],[13,"Three","","Three successive byte ranges.",0,null],[13,"Four","","Four successive byte ranges.",0,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",0,[[]]],[11,"len","","Returns the number of byte ranges in this sequence.",0,[[]]],[11,"matches","","Returns true if and only if a prefix of <code>bytes</code> matches …",0,[[]]],[3,"Utf8Range","","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",1,null],[12,"end","","End of byte range (inclusive).",1,null],[11,"matches","","Returns true if and only if the given byte is in this …",1,[[]]],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the …",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next","","",2,[[],["option",4]]],[11,"clone","","",0,[[],["utf8sequence",4]]],[11,"clone","","",1,[[],["utf8range",3]]],[11,"eq","","",0,[[["utf8sequence",4]]]],[11,"ne","","",0,[[["utf8sequence",4]]]],[11,"eq","","",1,[[["utf8range",3]]]],[11,"ne","","",1,[[["utf8range",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"]]},\
"vec1":{"doc":"This crate provides a <code>Vec</code> wrapper (<code>Vec1</code>) which guarantees …","i":[[3,"Size0Error","vec1","Error returned by operations which would cause <code>Vec1</code> to …",null,null],[3,"Vec1","","<code>std::vec::Vec</code> wrapper which guarantees to have at least 1 …",null,null],[11,"new","","Creates a new <code>Vec1</code> instance containing a single element.",0,[[]]],[11,"from_vec","","Tries to create a <code>Vec1<T></code> from a <code>Vec<T></code>.",0,[[["vec",3]],[["stdresult",4],["vec",3]]]],[11,"try_from_vec","","Tries to create a <code>Vec1<T></code> from a normal <code>Vec<T></code>.",0,[[["vec",3]],[["size0error",3],["stdresult",4]]]],[11,"with_capacity","","Creates a new <code>Vec1</code> with a given capacity and a given …",0,[[]]],[11,"into_vec","","Turns this <code>Vec1</code> into a <code>Vec</code>.",0,[[],["vec",3]]],[11,"mapped","","Create a new <code>Vec1</code> by consuming <code>self</code> and mapping each …",0,[[],["vec1",3]]],[11,"mapped_ref","","Create a new <code>Vec1</code> by mapping references to the elements …",0,[[],["vec1",3]]],[11,"mapped_mut","","Create a new <code>Vec1</code> by mapping mutable references to the …",0,[[],["vec1",3]]],[11,"try_mapped","","Create a new <code>Vec1</code> by consuming <code>self</code> and mapping each …",0,[[],[["vec1",3],["result",4]]]],[11,"try_mapped_ref","","Create a new <code>Vec1</code> by mapping references to the elements …",0,[[],[["vec1",3],["result",4]]]],[11,"try_mapped_mut","","Create a new <code>Vec1</code> by mapping mutable references to the …",0,[[],[["vec1",3],["result",4]]]],[11,"last","","Returns a reference to the last element.",0,[[]]],[11,"last_mut","","Returns a mutable reference to the last element.",0,[[]]],[11,"first","","Returns a reference to the first element.",0,[[]]],[11,"first_mut","","Returns a mutable reference to the first element.",0,[[]]],[11,"try_truncate","","Truncates the vec1 to given length.",0,[[],[["stdresult",4],["size0error",3]]]],[11,"try_swap_remove","","Calls <code>swap_remove</code> on the inner vec if length >= 2.",0,[[],[["size0error",3],["stdresult",4]]]],[11,"try_remove","","Calls <code>remove</code> on the inner vec if length >= 2.",0,[[],[["size0error",3],["stdresult",4]]]],[11,"try_split_off","","Calls <code>split_off</code> on the inner vec if both resulting parts …",0,[[],[["vec1",3],["size0error",3],["stdresult",4]]]],[11,"dedup_by_key","","Calls <code>dedup_by_key</code> on the inner vec.",0,[[]]],[11,"dedup_by","","Calls <code>dedup_by_key</code> on the inner vec.",0,[[]]],[11,"try_pop","","Tries to remove the last element from the <code>Vec1</code>.",0,[[],[["size0error",3],["stdresult",4]]]],[11,"as_vec","","Return a reference to the underlying <code>Vec</code>.",0,[[],["vec",3]]],[11,"splice","","Calls <code>splice</code> on the underlying vec if it will not produce …",0,[[],[["stdresult",4],["size0error",3],["splice",3]]]],[11,"split_off_first","","Splits off the first element of this vector and returns …",0,[[]]],[11,"split_off_last","","Splits off the last element of this vector and returns it …",0,[[]]],[11,"to_ascii_uppercase","","Works like <code>&[u8].to_ascii_uppercase()</code> but returns a …",0,[[],["vec1",3]]],[11,"to_ascii_lowercase","","Works like <code>&[u8].to_ascii_lowercase()</code> but returns a …",0,[[],["vec1",3]]],[3,"Splice","","",null,null],[11,"reserve","","",0,[[]]],[11,"reserve_exact","","",0,[[]]],[11,"shrink_to_fit","","",0,[[]]],[11,"as_mut_slice","","",0,[[]]],[11,"push","","",0,[[]]],[11,"append","","",0,[[["vec",3]]]],[11,"insert","","",0,[[]]],[11,"len","","",0,[[]]],[11,"capacity","","",0,[[]]],[11,"as_slice","","",0,[[]]],[11,"try_resize","","Calls <code>resize</code> on the underlying <code>Vec</code> if <code>new_len</code> >= 1.",0,[[],[["stdresult",4],["size0error",3]]]],[11,"extend_from_slice","","",0,[[]]],[11,"dedub","","",0,[[]]],[11,"dedup","","",0,[[]]],[14,"vec1","","A macro similar to <code>vec!</code> to create a <code>Vec1</code>.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[],["vec1",3]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[],["vec",3]]],[11,"as_ref","","",0,[[],["vec1",3]]],[11,"into","","",0,[[],["vec",3]]],[11,"into","","",0,[[],["rc",3]]],[11,"into","","",0,[[],["arc",3]]],[11,"into","","",0,[[],["box",3]]],[11,"into","","",0,[[],["vecdeque",3]]],[11,"next_back","","",2,[[],["option",4]]],[11,"extend","","",0,[[]]],[11,"extend","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"clone","","",1,[[],["size0error",3]]],[11,"clone","","",0,[[],["vec1",3]]],[11,"default","","",0,[[]]],[11,"cmp","","",0,[[["vec1",3]],["ordering",4]]],[11,"eq","","",1,[[["size0error",3]]]],[11,"eq","","",0,[[["vec1",3]]]],[11,"eq","","",0,[[]]],[11,"partial_cmp","","",0,[[["vec1",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["vec1",3]]]],[11,"le","","",0,[[["vec1",3]]]],[11,"gt","","",0,[[["vec1",3]]]],[11,"ge","","",0,[[["vec1",3]]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"index","","",0,[[]]],[11,"index_mut","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow","","",0,[[],["vec",3]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[["vec",3]],["stdresult",4]]],[11,"try_from","","",0,[[["box",3]],["stdresult",4]]],[11,"try_from","","",0,[[["binaryheap",3]],["stdresult",4]]],[11,"try_from","","",0,[[["string",3]],["stdresult",4]]],[11,"try_from","","",0,[[],["stdresult",4]]],[11,"try_from","","",0,[[],["stdresult",4]]],[11,"try_from","","",0,[[],["stdresult",4]]],[11,"try_from","","",0,[[["vecdeque",3]],["stdresult",4]]],[11,"try_from","","Like <code>Vec</code>\'s <code>From<CString></code> this will treat the <code>\'\\\\0\'</code> as not …",0,[[["cstring",3]],["stdresult",4]]]],"p":[[3,"Vec1"],[3,"Size0Error"],[3,"Splice"]]},\
"vec_map":{"doc":"A simple map based on a vector for small integer keys. …","i":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[11,"new","","Creates an empty <code>VecMap</code>.",1,[[]]],[11,"with_capacity","","Creates an empty <code>VecMap</code> with space for at least <code>capacity</code> …",1,[[]]],[11,"capacity","","Returns the number of elements the <code>VecMap</code> can hold without…",1,[[]]],[11,"reserve_len","","Reserves capacity for the given <code>VecMap</code> to contain <code>len</code> …",1,[[]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given <code>VecMap</code> to …",1,[[]]],[11,"shrink_to_fit","","Trims the <code>VecMap</code> of any excess capacity.",1,[[]]],[11,"keys","","Returns an iterator visiting all keys in ascending order …",1,[[],["keys",3]]],[11,"values","","Returns an iterator visiting all values in ascending …",1,[[],["values",3]]],[11,"values_mut","","Returns an iterator visiting all values in ascending …",1,[[],["valuesmut",3]]],[11,"iter","","Returns an iterator visiting all key-value pairs in …",1,[[],["iter",3]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in …",1,[[],["itermut",3]]],[11,"append","","Moves all elements from <code>other</code> into the map while …",1,[[]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[]]],[11,"drain","","Returns an iterator visiting all key-value pairs in …",1,[[],["drain",3]]],[11,"len","","Returns the number of elements in the map.",1,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[],["option",4]]],[11,"contains_key","","Returns true if the map contains a value for the …",1,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",1,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map. If the key already …",1,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",1,[[],["option",4]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",1,[[],["entry",4]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",0,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",0,[[["fnonce",8]]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",2,[[]]],[11,"get","","Gets a reference to the value in the entry.",3,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry\'s key, …",3,[[]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",3,[[]]],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the …",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"ValuesMut","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",10,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",7,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],["option",4]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in …",1,[[],["intoiter",3]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",4,[[],["iter",3]]],[11,"clone","","",6,[[],["keys",3]]],[11,"clone","","",7,[[],["values",3]]],[11,"default","","",1,[[]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"eq","","",1,[[]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]]],"p":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Drain"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);