(function() {var implementors = {};
implementors["anymap"] = [{"text":"impl Clone for Box&lt;dyn CloneAny&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn CloneAny + Send&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn CloneAny + Sync&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn CloneAny + Send + Sync&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized + UncheckedAnyExt&gt; Clone for RawMap&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;A&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Clone + ?Sized + UncheckedAnyExt&gt; Clone for Iter&lt;'a, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized + UncheckedAnyExt&gt; Clone for Map&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;A&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["azuki_syntax"] = [{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Mut&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]},{"text":"impl Clone for Program","synthetic":false,"types":[]},{"text":"impl Clone for FuncStmt","synthetic":false,"types":[]},{"text":"impl Clone for FuncParam","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for DeclStmt","synthetic":false,"types":[]},{"text":"impl Clone for ReturnStmt","synthetic":false,"types":[]},{"text":"impl Clone for TyDef","synthetic":false,"types":[]},{"text":"impl Clone for BlockStmt","synthetic":false,"types":[]},{"text":"impl Clone for WhileStmt","synthetic":false,"types":[]},{"text":"impl Clone for IfStmt","synthetic":false,"types":[]},{"text":"impl Clone for IfElseBlock","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for LiteralExpr","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for UnaryExpr","synthetic":false,"types":[]},{"text":"impl Clone for AssignExpr","synthetic":false,"types":[]},{"text":"impl Clone for AsExpr","synthetic":false,"types":[]},{"text":"impl Clone for BinaryExpr","synthetic":false,"types":[]},{"text":"impl Clone for CallExpr","synthetic":false,"types":[]},{"text":"impl Clone for UnaryOp","synthetic":false,"types":[]},{"text":"impl Clone for BinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]}];
implementors["azuki_tac"] = [{"text":"impl Clone for BBId","synthetic":false,"types":[]},{"text":"impl Clone for Ty","synthetic":false,"types":[]},{"text":"impl Clone for NumericTy","synthetic":false,"types":[]},{"text":"impl Clone for TyKind","synthetic":false,"types":[]},{"text":"impl Clone for FuncTy","synthetic":false,"types":[]},{"text":"impl Clone for Program","synthetic":false,"types":[]},{"text":"impl Clone for TacFunc","synthetic":false,"types":[]},{"text":"impl Clone for BasicBlock","synthetic":false,"types":[]},{"text":"impl Clone for Tac","synthetic":false,"types":[]},{"text":"impl Clone for BinaryInst","synthetic":false,"types":[]},{"text":"impl Clone for FunctionCall","synthetic":false,"types":[]},{"text":"impl Clone for Inst","synthetic":false,"types":[]},{"text":"impl Clone for InstKind","synthetic":false,"types":[]},{"text":"impl Clone for Branch","synthetic":false,"types":[]},{"text":"impl Clone for BinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["beef"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized, U&gt; Clone for Cow&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Beef,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Capacity,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["bit_set"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Clone for BitSet&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Iter&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Union&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Intersection&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Difference&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for SymmetricDifference&lt;'a, B&gt;","synthetic":false,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Clone for BitVec&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Iter&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Blocks&lt;'a, B&gt;","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for BytesMut","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'help&gt; Clone for App&lt;'help&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl Clone for ValueHint","synthetic":false,"types":[]},{"text":"impl&lt;'help&gt; Clone for Arg&lt;'help&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgGroup&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for ArgMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Indices&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T:&nbsp;Clone, R:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Info&lt;T, R, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Commit&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnexpectedParse","synthetic":false,"types":[]},{"text":"impl Clone for StringStreamError","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Tracked&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for ParseResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Info&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Stream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, X:&nbsp;Clone&gt; Clone for Stream&lt;Input, X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IndexPositioner","synthetic":false,"types":[]},{"text":"impl Clone for SourcePosition","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Span&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Stream&lt;S, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Stream&lt;S, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for PartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for CompleteStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for MaybePartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for SliceStream&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for IteratorStream&lt;Input&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Clone for PointerOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for TakeUntilByte&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: RangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Range: AsRef&lt;[u8]&gt; + Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for TakeUntilByte2&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: RangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Range: AsRef&lt;[u8]&gt; + Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for TakeUntilByte3&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: RangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Range: AsRef&lt;[u8]&gt; + Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for Digit&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream&lt;Token = char&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Choice&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Clone, P2:&nbsp;Clone&gt; Clone for Or&lt;P1, P2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Optional&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for NotFollowedBy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Try&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for LookAhead&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInput&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FlatMap&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for AndThen&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Recognize&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Ignore&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Lazy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Factory&lt;P, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, Input:&nbsp;Clone, O:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Opaque&lt;F, Input, O, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Spanned&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Unexpected&lt;I, T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Message&lt;P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Expected&lt;P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Silent&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FnParser&lt;Input, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E, Input, T&gt; Clone for EnvParser&lt;E, Input, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Recognize&lt;Input, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: RangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Range: Range,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for RecognizeWithValue&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for CountMinMax&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Many&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Many1&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepEndBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepEndBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, Op:&nbsp;Clone&gt; Clone for Chainl1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, Op:&nbsp;Clone&gt; Clone for Chainr1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for TakeUntil&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for RepeatUntil&lt;F, P, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Clone, P2:&nbsp;Clone&gt; Clone for With&lt;P1, P2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Clone, P2:&nbsp;Clone&gt; Clone for Skip&lt;P1, P2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, L:&nbsp;Clone, R:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Between&lt;Input, L, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Input as StreamOnce&gt;::Error: ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser&lt;Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Output: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Then&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for ThenPartial&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for ThenRef&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for Any&lt;Input&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Satisfy&lt;Input, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for SatisfyMap&lt;Input, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for Token&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Token: PartialEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input::Token: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, E:&nbsp;Clone, T:&nbsp;Clone, Input:&nbsp;Clone&gt; Clone for Tokens&lt;C, E, T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, T:&nbsp;Clone, Input:&nbsp;Clone&gt; Clone for TokensCmp&lt;C, T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for Position&lt;Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, Input:&nbsp;Clone&gt; Clone for OneOf&lt;T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, Input:&nbsp;Clone&gt; Clone for NoneOf&lt;T, Input&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Value&lt;Input, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Produce&lt;Input, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Input:&nbsp;Clone&gt; Clone for Eof&lt;Input&gt;","synthetic":false,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl Clone for FixedBitSet","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Clone for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for RawIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_tp","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_j1939","synthetic":false,"types":[]},{"text":"impl Clone for can_filter","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_can_addr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_can","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for can_frame","synthetic":false,"types":[]},{"text":"impl Clone for canfd_frame","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["logos"] = [{"text":"impl&lt;'source, Token&gt; Clone for Lexer&lt;'source, Token&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Token: Logos&lt;'source&gt; + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Token::Extras: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TryFromBigIntError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Range&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStep&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeFrom&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepFrom&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["petgraph"] = [{"text":"impl Clone for Time","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for DfsEvent&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for Control&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Dfs&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for DfsPostOrder&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Bfs&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Topo&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Clone, C:&nbsp;Clone&gt; Clone for WalkerIter&lt;W, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for NodeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for EdgeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone&gt; Clone for Reversed&lt;G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for ReversedEdgeReference&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Element&lt;N, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Dominators&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Copy + Eq + Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for DfsSpace&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Cycle&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NegativeCycle","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty, Ix:&nbsp;Clone&gt; Clone for Csr&lt;N, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EdgesNotSorted","synthetic":false,"types":[]},{"text":"impl&lt;'a, E:&nbsp;Clone + 'a, Ty:&nbsp;Clone, Ix:&nbsp;Clone + 'a&gt; Clone for Edges&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix:&nbsp;Copy&gt; Clone for EdgeReference&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Ix:&nbsp;Clone + 'a&gt; Clone for Neighbors&lt;'a, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for NodeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for EdgeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E, Ix&gt; Clone for Node&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E, Ix&gt; Clone for Edge&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, E, Ty, Ix:&nbsp;IndexType&gt; Clone for Graph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Clone for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Clone for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: EdgeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ix&gt; Clone for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for NodeIndices&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for EdgeIndices&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix:&nbsp;IndexType&gt; Clone for EdgeReference&lt;'a, E, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N, E, Ty, Ix:&nbsp;IndexType&gt; Clone for StableGraph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix:&nbsp;IndexType&gt; Clone for EdgeReference&lt;'a, E, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;IndexType&gt; Clone for WalkNeighbors&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty:&nbsp;Clone&gt; Clone for GraphMap&lt;N, E, Ty&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'b, T&gt; Clone for Ptr&lt;'b, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty:&nbsp;Clone, Null:&nbsp;Clone + Nullable&lt;Wrapped = E&gt;, Ix:&nbsp;Clone&gt; Clone for MatrixGraph&lt;N, E, Ty, Null, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for UnionFind&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Direction","synthetic":false,"types":[]},{"text":"impl Clone for Directed","synthetic":false,"types":[]},{"text":"impl Clone for Undirected","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Clone for SpanRange","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["smol_str"] = [{"text":"impl Clone for SmolStr","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Clone for ColorChoice","synthetic":false,"types":[]},{"text":"impl Clone for ColorSpec","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for ParseColorError","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["thunderdome"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Arena&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Clone for GraphemeIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Graphemes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for GraphemeCursor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBoundIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnicodeSentences&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBoundIndices&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["utf8_ranges"] = [{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["vec1"] = [{"text":"impl Clone for Size0Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Vec1&lt;T&gt;","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Iter&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Keys&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Values&lt;'a, V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()